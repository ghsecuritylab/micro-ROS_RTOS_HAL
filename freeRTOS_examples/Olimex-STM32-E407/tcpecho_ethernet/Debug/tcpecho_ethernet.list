
tcpecho_ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f8c  08015c3c  08015c3c  00025c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018bc8  08018bc8  00028bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018bd0  08018bd0  00028bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018bd4  08018bd4  00028bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08018bd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
  8 .bss          0000ae3c  20000084  20000084  00030084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000aec0  2000aec0  00030084  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003e6c3  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007416  00000000  00000000  0006e777  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ae8  00000000  00000000  00075b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001930  00000000  00000000  00077678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000126a4  00000000  00000000  00078fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008971  00000000  00000000  0008b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00093fbd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000071ac  00000000  00000000  0009403c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015c24 	.word	0x08015c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08015c24 	.word	0x08015c24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f947 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f014 f994 	bl	80148f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f95f 	bl	80008b6 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 f927 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000001c 	.word	0x2000001c
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20004434 	.word	0x20004434

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20004434 	.word	0x20004434

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3f7      	bcc.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000726:	4909      	ldr	r1, [pc, #36]	; (800074c <NVIC_EnableIRQ+0x30>)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	095b      	lsrs	r3, r3, #5
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	f002 021f 	and.w	r2, r2, #31
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100

08000750 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da0b      	bge.n	800077c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	490d      	ldr	r1, [pc, #52]	; (800079c <NVIC_SetPriority+0x4c>)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	3b04      	subs	r3, #4
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	0112      	lsls	r2, r2, #4
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	440b      	add	r3, r1
 8000778:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800077a:	e009      	b.n	8000790 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	4908      	ldr	r1, [pc, #32]	; (80007a0 <NVIC_SetPriority+0x50>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	2201      	movs	r2, #1
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	401a      	ands	r2, r3
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ea:	2101      	movs	r1, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	1e59      	subs	r1, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	f7ff ff90 	bl	8000750 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff2f 	bl	80006b8 <NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff44 	bl	8000700 <NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff37 	bl	800071c <NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d106      	bne.n	80008ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008ea:	e005      	b.n	80008f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f023 0304 	bic.w	r3, r3, #4
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000918:	4baa      	ldr	r3, [pc, #680]	; (8000bc4 <HAL_ETH_Init+0x2bc>)
 800091a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e185      	b.n	8000c3a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d106      	bne.n	8000948 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f013 fa9a 	bl	8013e7c <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4a9e      	ldr	r2, [pc, #632]	; (8000bc8 <HAL_ETH_Init+0x2c0>)
 800094e:	4b9e      	ldr	r3, [pc, #632]	; (8000bc8 <HAL_ETH_Init+0x2c0>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000956:	6453      	str	r3, [r2, #68]	; 0x44
 8000958:	4b9b      	ldr	r3, [pc, #620]	; (8000bc8 <HAL_ETH_Init+0x2c0>)
 800095a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000964:	4a99      	ldr	r2, [pc, #612]	; (8000bcc <HAL_ETH_Init+0x2c4>)
 8000966:	4b99      	ldr	r3, [pc, #612]	; (8000bcc <HAL_ETH_Init+0x2c4>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800096e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000970:	4996      	ldr	r1, [pc, #600]	; (8000bcc <HAL_ETH_Init+0x2c4>)
 8000972:	4b96      	ldr	r3, [pc, #600]	; (8000bcc <HAL_ETH_Init+0x2c4>)
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4313      	orrs	r3, r2
 800097c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000994:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000996:	f7ff fe61 	bl	800065c <HAL_GetTick>
 800099a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800099c:	e011      	b.n	80009c2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800099e:	f7ff fe5d 	bl	800065c <HAL_GetTick>
 80009a2:	4602      	mov	r2, r0
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009ac:	d909      	bls.n	80009c2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2203      	movs	r2, #3
 80009b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e13b      	b.n	8000c3a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e4      	bne.n	800099e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f023 031c 	bic.w	r3, r3, #28
 80009e2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009e4:	f001 fd2e 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 80009e8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4a78      	ldr	r2, [pc, #480]	; (8000bd0 <HAL_ETH_Init+0x2c8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d908      	bls.n	8000a04 <HAL_ETH_Init+0xfc>
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4a77      	ldr	r2, [pc, #476]	; (8000bd4 <HAL_ETH_Init+0x2cc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d804      	bhi.n	8000a04 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	e027      	b.n	8000a54 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	4a73      	ldr	r2, [pc, #460]	; (8000bd4 <HAL_ETH_Init+0x2cc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d908      	bls.n	8000a1e <HAL_ETH_Init+0x116>
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	4a72      	ldr	r2, [pc, #456]	; (8000bd8 <HAL_ETH_Init+0x2d0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d804      	bhi.n	8000a1e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f043 030c 	orr.w	r3, r3, #12
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	e01a      	b.n	8000a54 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	4a6d      	ldr	r2, [pc, #436]	; (8000bd8 <HAL_ETH_Init+0x2d0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d903      	bls.n	8000a2e <HAL_ETH_Init+0x126>
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4a6c      	ldr	r2, [pc, #432]	; (8000bdc <HAL_ETH_Init+0x2d4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d911      	bls.n	8000a52 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4a6a      	ldr	r2, [pc, #424]	; (8000bdc <HAL_ETH_Init+0x2d4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d908      	bls.n	8000a48 <HAL_ETH_Init+0x140>
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4a69      	ldr	r2, [pc, #420]	; (8000be0 <HAL_ETH_Init+0x2d8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d804      	bhi.n	8000a48 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	61fb      	str	r3, [r7, #28]
 8000a46:	e005      	b.n	8000a54 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	e000      	b.n	8000a54 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a52:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	69fa      	ldr	r2, [r7, #28]
 8000a5a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000a5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a60:	2100      	movs	r1, #0
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 fc19 	bl	800129a <HAL_ETH_WritePHYRegister>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00b      	beq.n	8000a86 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fca5 	bl	80013c4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0d9      	b.n	8000c3a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a86:	20ff      	movs	r0, #255	; 0xff
 8000a88:	f7ff fdf4 	bl	8000674 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80a7 	beq.w	8000be4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a96:	f7ff fde1 	bl	800065c <HAL_GetTick>
 8000a9a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 fb90 	bl	80011ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000aaa:	f7ff fdd7 	bl	800065c <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d90f      	bls.n	8000adc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ac0:	6939      	ldr	r1, [r7, #16]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fc7e 	bl	80013c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e0ae      	b.n	8000c3a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0da      	beq.n	8000a9c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000ae6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aea:	2100      	movs	r1, #0
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 fbd4 	bl	800129a <HAL_ETH_WritePHYRegister>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00b      	beq.n	8000b10 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000afc:	6939      	ldr	r1, [r7, #16]
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fc60 	bl	80013c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2201      	movs	r2, #1
 8000b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e094      	b.n	8000c3a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b10:	f7ff fda4 	bl	800065c <HAL_GetTick>
 8000b14:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 fb53 	bl	80011ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b24:	f7ff fd9a 	bl	800065c <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d90f      	bls.n	8000b56 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b3a:	6939      	ldr	r1, [r7, #16]
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 fc41 	bl	80013c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2201      	movs	r2, #1
 8000b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e071      	b.n	8000c3a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0da      	beq.n	8000b16 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	461a      	mov	r2, r3
 8000b66:	2110      	movs	r1, #16
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 fb2e 	bl	80011ca <HAL_ETH_ReadPHYRegister>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 fc22 	bl	80013c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e056      	b.n	8000c3a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d004      	beq.n	8000ba0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	e002      	b.n	8000ba6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	e037      	b.n	8000c28 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	e032      	b.n	8000c28 <HAL_ETH_Init+0x320>
 8000bc2:	bf00      	nop
 8000bc4:	03938700 	.word	0x03938700
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	01312cff 	.word	0x01312cff
 8000bd4:	02160ebf 	.word	0x02160ebf
 8000bd8:	039386ff 	.word	0x039386ff
 8000bdc:	05f5e0ff 	.word	0x05f5e0ff
 8000be0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 fb4c 	bl	800129a <HAL_ETH_WritePHYRegister>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00b      	beq.n	8000c20 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c0c:	6939      	ldr	r1, [r7, #16]
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fbd8 	bl	80013c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e00c      	b.n	8000c3a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c20:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c24:	f7ff fd26 	bl	8000674 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fbca 	bl	80013c4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop

08000c44 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <HAL_ETH_DMATxDescListInit+0x20>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e052      	b.n	8000d0a <HAL_ETH_DMATxDescListInit+0xc6>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2201      	movs	r2, #1
 8000c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e030      	b.n	8000ce2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	015b      	lsls	r3, r3, #5
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4413      	add	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c90:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d908      	bls.n	8000cd6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	4413      	add	r3, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	e002      	b.n	8000cdc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3ca      	bcc.n	8000c80 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cf4:	3310      	adds	r3, #16
 8000cf6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	371c      	adds	r7, #28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b087      	sub	sp, #28
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d101      	bne.n	8000d36 <HAL_ETH_DMARxDescListInit+0x20>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e056      	b.n	8000de4 <HAL_ETH_DMARxDescListInit+0xce>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2202      	movs	r2, #2
 8000d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e034      	b.n	8000dbc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	015b      	lsls	r3, r3, #5
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d62:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000d6a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d105      	bne.n	8000d94 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	1e5a      	subs	r2, r3, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d908      	bls.n	8000db0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	4413      	add	r3, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	e002      	b.n	8000db6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d3c6      	bcc.n	8000d52 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dce:	330c      	adds	r3, #12
 8000dd0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_ETH_TransmitFrame+0x24>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e0cd      	b.n	8000fb0 <HAL_ETH_TransmitFrame+0x1c0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d109      	bne.n	8000e3e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e0b8      	b.n	8000fb0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da09      	bge.n	8000e5c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e0a9      	b.n	8000fb0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d915      	bls.n	8000e92 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4a54      	ldr	r2, [pc, #336]	; (8000fbc <HAL_ETH_TransmitFrame+0x1cc>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0a9b      	lsrs	r3, r3, #10
 8000e70:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <HAL_ETH_TransmitFrame+0x1cc>)
 8000e76:	fba3 1302 	umull	r1, r3, r3, r2
 8000e7a:	0a9b      	lsrs	r3, r3, #10
 8000e7c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000e80:	fb01 f303 	mul.w	r3, r1, r3
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e001      	b.n	8000e96 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000e92:	2301      	movs	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d11c      	bne.n	8000ed6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000eaa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000eb6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ec6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed4:	e04b      	b.n	8000f6e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	e044      	b.n	8000f66 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d107      	bne.n	8000f02 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f00:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f0a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	1e5a      	subs	r2, r3, #1
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d116      	bne.n	8000f44 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f24:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <HAL_ETH_TransmitFrame+0x1d0>)
 8000f2a:	fb02 f203 	mul.w	r2, r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000f36:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000f42:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f52:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	3301      	adds	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d3b6      	bcc.n	8000edc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f76:	3314      	adds	r3, #20
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00d      	beq.n	8000f9e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f8a:	3314      	adds	r3, #20
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	ac02b00b 	.word	0xac02b00b
 8000fc0:	fffffa0c 	.word	0xfffffa0c

08000fc4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e074      	b.n	80010c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fee:	e05a      	b.n	80010a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001004:	d10d      	bne.n	8001022 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
 8001020:	e041      	b.n	80010a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10b      	bne.n	8001048 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
 8001046:	e02e      	b.n	80010a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105e:	2b01      	cmp	r3, #1
 8001060:	d103      	bne.n	800106a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001076:	1f1a      	subs	r2, r3, #4
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e010      	b.n	80010c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db02      	blt.n	80010b6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d99c      	bls.n	8000ff0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010e4:	3314      	adds	r3, #20
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ec:	2b40      	cmp	r3, #64	; 0x40
 80010ee:	d112      	bne.n	8001116 <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f012 ff3d 	bl	8013f70 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fe:	3314      	adds	r3, #20
 8001100:	2240      	movs	r2, #64	; 0x40
 8001102:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001114:	e01b      	b.n	800114e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111e:	3314      	adds	r3, #20
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d111      	bne.n	800114e <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f839 	bl	80011a2 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001138:	3314      	adds	r3, #20
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001156:	3314      	adds	r3, #20
 8001158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001166:	3314      	adds	r3, #20
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001172:	d112      	bne.n	800119a <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f81e 	bl	80011b6 <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001182:	3314      	adds	r3, #20
 8001184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001188:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	460b      	mov	r3, r1
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b82      	cmp	r3, #130	; 0x82
 80011ea:	d101      	bne.n	80011f0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80011ec:	2302      	movs	r3, #2
 80011ee:	e050      	b.n	8001292 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2282      	movs	r2, #130	; 0x82
 80011f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8a1b      	ldrh	r3, [r3, #16]
 800120c:	02db      	lsls	r3, r3, #11
 800120e:	b29b      	uxth	r3, r3
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4313      	orrs	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f023 0302 	bic.w	r3, r3, #2
 800122a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff fa0e 	bl	800065c <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001242:	e015      	b.n	8001270 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001244:	f7ff fa0a 	bl	800065c <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d309      	bcc.n	8001268 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e014      	b.n	8001292 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1e4      	bne.n	8001244 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	b29b      	uxth	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	460b      	mov	r3, r1
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b42      	cmp	r3, #66	; 0x42
 80012ba:	d101      	bne.n	80012c0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80012bc:	2302      	movs	r3, #2
 80012be:	e04e      	b.n	800135e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2242      	movs	r2, #66	; 0x42
 80012c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 031c 	and.w	r3, r3, #28
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8a1b      	ldrh	r3, [r3, #16]
 80012dc:	02db      	lsls	r3, r3, #11
 80012de:	b29b      	uxth	r3, r3
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	b292      	uxth	r2, r2
 800130c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001316:	f7ff f9a1 	bl	800065c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800131c:	e015      	b.n	800134a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800131e:	f7ff f99d 	bl	800065c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d309      	bcc.n	8001342 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e00d      	b.n	800135e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e4      	bne.n	800131e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_ETH_Start+0x16>
 8001378:	2302      	movs	r3, #2
 800137a:	e01f      	b.n	80013bc <HAL_ETH_Start+0x56>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fa19 	bl	80017c4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fa33 	bl	80017fe <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fa7d 	bl	8001898 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fa4a 	bl	8001838 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa5f 	bl	8001868 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b0      	sub	sp, #192	; 0xc0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140e:	663b      	str	r3, [r7, #96]	; 0x60
 8001410:	e001      	b.n	8001416 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001420:	2300      	movs	r3, #0
 8001422:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800149c:	4bab      	ldr	r3, [pc, #684]	; (800174c <ETH_MACDMAConfig+0x388>)
 800149e:	4013      	ands	r3, r2
 80014a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80014a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80014a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80014a8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80014aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80014ac:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80014ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80014b0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80014b6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80014b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80014ba:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80014bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80014be:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80014c4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80014c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80014c8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80014cc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80014ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80014d0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80014d4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80014d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80014d8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80014da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014de:	4313      	orrs	r3, r2
 80014e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff f8bb 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001506:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800150e:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001510:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8001512:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001514:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8001516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800151a:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 800151c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001520:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8001522:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001526:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8001528:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800152c:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 800152e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8001532:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001534:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff f897 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800154e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001558:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001562:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800156e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001572:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001576:	4013      	ands	r3, r2
 8001578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800157c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001580:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001586:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800158c:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800158e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001592:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001598:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800159a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800159e:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80015a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015b2:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff f858 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015cc:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80015d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80015da:	430a      	orrs	r2, r1
 80015dc:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff f843 	bl	8000674 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015f6:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80015fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001600:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001606:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800160a:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800161c:	2304      	movs	r3, #4
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800162c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800163c:	2300      	movs	r3, #0
 800163e:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001640:	2300      	movs	r3, #0
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	3318      	adds	r3, #24
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001654:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001658:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <ETH_MACDMAConfig+0x38c>)
 800165a:	4013      	ands	r3, r2
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001660:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001662:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001664:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001666:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001668:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800166a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800166c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800166e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001670:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001672:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001674:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001676:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001678:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800167c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001680:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001682:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001686:	4313      	orrs	r3, r2
 8001688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	3318      	adds	r3, #24
 8001696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	3318      	adds	r3, #24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7fe ffe1 	bl	8000674 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ba:	3318      	adds	r3, #24
 80016bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c0:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80016c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016ca:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80016cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80016ce:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80016d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80016d2:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80016d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80016d6:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 80016d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016da:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80016dc:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80016de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80016e0:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80016e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ea:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7fe ffba 	bl	8000674 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800170c:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d10f      	bne.n	8001736 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6819      	ldr	r1, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	331c      	adds	r3, #28
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800172a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001732:	331c      	adds	r3, #28
 8001734:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	461a      	mov	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f808 	bl	8001754 <ETH_MACAddressConfig>
}
 8001744:	bf00      	nop
 8001746:	37c0      	adds	r7, #192	; 0xc0
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	ff20810f 	.word	0xff20810f
 8001750:	f8de3f23 	.word	0xf8de3f23

08001754 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3305      	adds	r3, #5
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	3204      	adds	r2, #4
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <ETH_MACAddressConfig+0x68>)
 8001776:	4413      	add	r3, r2
 8001778:	461a      	mov	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3303      	adds	r3, #3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3302      	adds	r3, #2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3301      	adds	r3, #1
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	4313      	orrs	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <ETH_MACAddressConfig+0x6c>)
 80017a6:	4413      	add	r3, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	6013      	str	r3, [r2, #0]
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40028040 	.word	0x40028040
 80017c0:	40028044 	.word	0x40028044

080017c4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f042 0208 	orr.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f000 f87f 	bl	80018ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	f042 0204 	orr.w	r2, r2, #4
 8001818:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 f862 	bl	80018ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	3318      	adds	r3, #24
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001854:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001858:	3318      	adds	r3, #24
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6819      	ldr	r1, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	3318      	adds	r3, #24
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f043 0202 	orr.w	r2, r3, #2
 8001884:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001888:	3318      	adds	r3, #24
 800188a:	601a      	str	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b0:	3318      	adds	r3, #24
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018b8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80018bc:	3318      	adds	r3, #24
 80018be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	3318      	adds	r3, #24
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 f80c 	bl	80018ec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	3318      	adds	r3, #24
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <ETH_Delay+0x34>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <ETH_Delay+0x38>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001908:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <ETH_Delay+0x1c>
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	2000001c 	.word	0x2000001c
 8001924:	10624dd3 	.word	0x10624dd3

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e16b      	b.n	8001c1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 815a 	bne.w	8001c16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x4a>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d123      	bne.n	80019ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	69b9      	ldr	r1, [r7, #24]
 80019b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0203 	and.w	r2, r3, #3
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00b      	beq.n	8001a0e <HAL_GPIO_Init+0xe6>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	2b11      	cmp	r3, #17
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80b4 	beq.w	8001c16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4a5f      	ldr	r2, [pc, #380]	; (8001c30 <HAL_GPIO_Init+0x308>)
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_GPIO_Init+0x308>)
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <HAL_GPIO_Init+0x308>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aca:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <HAL_GPIO_Init+0x30c>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x310>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_GPIO_Init+0x314>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x318>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_GPIO_Init+0x31c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	; (8001c48 <HAL_GPIO_Init+0x320>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x216>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4c      	ldr	r2, [pc, #304]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x212>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4b      	ldr	r2, [pc, #300]	; (8001c50 <HAL_GPIO_Init+0x328>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_GPIO_Init+0x32c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x20a>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e00e      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b32:	2308      	movs	r3, #8
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x228>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_GPIO_Init+0x30c>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b92:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbc:	4a26      	ldr	r2, [pc, #152]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <HAL_GPIO_Init+0x330>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f ae90 	bls.w	8001944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	3724      	adds	r7, #36	; 0x24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40021400 	.word	0x40021400
 8001c50:	40021800 	.word	0x40021800
 8001c54:	40021c00 	.word	0x40021c00
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e22d      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d075      	beq.n	8001d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cae:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d112      	bne.n	8001cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd2:	d10b      	bne.n	8001cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	4b99      	ldr	r3, [pc, #612]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d05b      	beq.n	8001d98 <HAL_RCC_OscConfig+0x108>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d157      	bne.n	8001d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e208      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d106      	bne.n	8001d04 <HAL_RCC_OscConfig+0x74>
 8001cf6:	4a91      	ldr	r2, [pc, #580]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	4b90      	ldr	r3, [pc, #576]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xb0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x98>
 8001d0e:	4a8b      	ldr	r2, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4a88      	ldr	r2, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xb0>
 8001d28:	4a84      	ldr	r2, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4a81      	ldr	r2, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe fc88 	bl	800065c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d50:	f7fe fc84 	bl	800065c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1cd      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xc0>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fc74 	bl	800065c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d78:	f7fe fc70 	bl	800065c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1b9      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0xe8>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x152>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e18d      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4956      	ldr	r1, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_RCC_OscConfig+0x2b0>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7fe fc29 	bl	800065c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7fe fc25 	bl	800065c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e16e      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4943      	ldr	r1, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0x2b0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe fc08 	bl	800065c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e50:	f7fe fc04 	bl	800065c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e14d      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d030      	beq.n	8001edc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d016      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x2b4>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe fbe8 	bl	800065c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fbe4 	bl	800065c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e12d      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x200>
 8001eae:	e015      	b.n	8001edc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x2b4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fbd1 	bl	800065c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7fe fbcd 	bl	800065c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e116      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a0 	beq.w	800202a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x2b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d121      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_RCC_OscConfig+0x2b8>)
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_OscConfig+0x2b8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fb93 	bl	800065c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e011      	b.n	8001f5e <HAL_RCC_OscConfig+0x2ce>
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470000 	.word	0x42470000
 8001f44:	42470e80 	.word	0x42470e80
 8001f48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7fe fb86 	bl	800065c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0cf      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x478>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2f0>
 8001f72:	4a66      	ldr	r2, [pc, #408]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	e01c      	b.n	8001fba <HAL_RCC_OscConfig+0x32a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x312>
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	4a5d      	ldr	r2, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f96:	4b5d      	ldr	r3, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x32a>
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
 8001fae:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fb4b 	bl	800065c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7fe fb47 	bl	800065c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e08e      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RCC_OscConfig+0x33a>
 8001fec:	e014      	b.n	8002018 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7fe fb35 	bl	800065c <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fb31 	bl	800065c <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e078      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8002020:	4b3a      	ldr	r3, [pc, #232]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d064      	beq.n	80020fc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d05c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d141      	bne.n	80020ca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_RCC_OscConfig+0x480>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fb06 	bl	800065c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fb02 	bl	800065c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e04b      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002072:	4926      	ldr	r1, [pc, #152]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	3b01      	subs	r3, #1
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_RCC_OscConfig+0x480>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fadb 	bl	800065c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fad7 	bl	800065c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e020      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x41a>
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_RCC_OscConfig+0x480>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe fac4 	bl	800065c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fac0 	bl	800065c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x47c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x448>
 80020f6:	e001      	b.n	80020fc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40007000 	.word	0x40007000
 800210c:	40023800 	.word	0x40023800
 8002110:	42470060 	.word	0x42470060

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0ca      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b6      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800218a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	494f      	ldr	r1, [pc, #316]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d044      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d119      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07d      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06d      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e065      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7fe fa2a 	bl	800065c <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe fa26 	bl	800065c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04d      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d90c      	bls.n	800225c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_RCC_ClockConfig+0x1b4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 020f 	and.w	r2, r3, #15
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e030      	b.n	80022be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4918      	ldr	r1, [pc, #96]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4911      	ldr	r1, [pc, #68]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f81d 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 800229e:	4601      	mov	r1, r0
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	fa21 f303 	lsr.w	r3, r1, r3
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f7fe f98c 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08018b18 	.word	0x08018b18
 80022d4:	2000001c 	.word	0x2000001c

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e0:	2200      	movs	r2, #0
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	617a      	str	r2, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80022ec:	2200      	movs	r2, #0
 80022ee:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f0:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f2:	6892      	ldr	r2, [r2, #8]
 80022f4:	f002 020c 	and.w	r2, r2, #12
 80022f8:	2a04      	cmp	r2, #4
 80022fa:	d007      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 80022fc:	2a08      	cmp	r2, #8
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x3a>
 8002300:	2a00      	cmp	r2, #0
 8002302:	f040 8090 	bne.w	8002426 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_RCC_GetSysClockFreq+0x164>)
 8002308:	613b      	str	r3, [r7, #16]
       break;
 800230a:	e08f      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230c:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCC_GetSysClockFreq+0x168>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e08c      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002312:	4a49      	ldr	r2, [pc, #292]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800231a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231c:	4a46      	ldr	r2, [pc, #280]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 800231e:	6852      	ldr	r2, [r2, #4]
 8002320:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002324:	2a00      	cmp	r2, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	ea03 0301 	and.w	r3, r3, r1
 800233e:	ea04 0402 	and.w	r4, r4, r2
 8002342:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <HAL_RCC_GetSysClockFreq+0x168>)
 8002344:	fb02 f104 	mul.w	r1, r2, r4
 8002348:	2200      	movs	r2, #0
 800234a:	fb02 f203 	mul.w	r2, r2, r3
 800234e:	440a      	add	r2, r1
 8002350:	493b      	ldr	r1, [pc, #236]	; (8002440 <HAL_RCC_GetSysClockFreq+0x168>)
 8002352:	fba3 0101 	umull	r0, r1, r3, r1
 8002356:	1853      	adds	r3, r2, r1
 8002358:	4619      	mov	r1, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fd ff8c 	bl	8000280 <__aeabi_uldivmod>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e04c      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4a31      	ldr	r2, [pc, #196]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	0992      	lsrs	r2, r2, #6
 8002376:	4611      	mov	r1, r2
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002380:	f04f 0600 	mov.w	r6, #0
 8002384:	ea05 0501 	and.w	r5, r5, r1
 8002388:	ea06 0602 	and.w	r6, r6, r2
 800238c:	4629      	mov	r1, r5
 800238e:	4632      	mov	r2, r6
 8002390:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002394:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002398:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800239c:	4651      	mov	r1, sl
 800239e:	465a      	mov	r2, fp
 80023a0:	46aa      	mov	sl, r5
 80023a2:	46b3      	mov	fp, r6
 80023a4:	4655      	mov	r5, sl
 80023a6:	465e      	mov	r6, fp
 80023a8:	1b4d      	subs	r5, r1, r5
 80023aa:	eb62 0606 	sbc.w	r6, r2, r6
 80023ae:	4629      	mov	r1, r5
 80023b0:	4632      	mov	r2, r6
 80023b2:	0194      	lsls	r4, r2, #6
 80023b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023b8:	018b      	lsls	r3, r1, #6
 80023ba:	1a5b      	subs	r3, r3, r1
 80023bc:	eb64 0402 	sbc.w	r4, r4, r2
 80023c0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80023c4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80023c8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80023cc:	4643      	mov	r3, r8
 80023ce:	464c      	mov	r4, r9
 80023d0:	4655      	mov	r5, sl
 80023d2:	465e      	mov	r6, fp
 80023d4:	18ed      	adds	r5, r5, r3
 80023d6:	eb46 0604 	adc.w	r6, r6, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	4634      	mov	r4, r6
 80023de:	02a2      	lsls	r2, r4, #10
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	e897 0018 	ldmia.w	r7, {r3, r4}
 80023f2:	4618      	mov	r0, r3
 80023f4:	4621      	mov	r1, r4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fd ff3e 	bl	8000280 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	3301      	adds	r3, #1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e002      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetSysClockFreq+0x164>)
 8002428:	613b      	str	r3, [r7, #16]
      break;
 800242a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242c:	693b      	ldr	r3, [r7, #16]
}
 800242e:	4618      	mov	r0, r3
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	017d7840 	.word	0x017d7840

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000001c 	.word	0x2000001c

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	08018b28 	.word	0x08018b28

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002488:	f7ff ffdc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 800248c:	4601      	mov	r1, r0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0b5b      	lsrs	r3, r3, #13
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	08018b28 	.word	0x08018b28

080024ac <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03f      	b.n	800253e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f012 fa5e 	bl	8014994 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ee:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f90b 	bl	800270c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	6912      	ldr	r2, [r2, #16]
 8002500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	6952      	ldr	r2, [r2, #20]
 8002510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002514:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	68d2      	ldr	r2, [r2, #12]
 8002520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002524:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b088      	sub	sp, #32
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	f040 8082 	bne.w	800266c <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_UART_Transmit+0x2e>
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e07a      	b.n	800266e <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_UART_Transmit+0x40>
 8002582:	2302      	movs	r3, #2
 8002584:	e073      	b.n	800266e <HAL_UART_Transmit+0x128>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2221      	movs	r2, #33	; 0x21
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800259c:	f7fe f85e 	bl	800065c <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80025ae:	e041      	b.n	8002634 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	d121      	bne.n	800260c <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f84f 	bl	8002676 <UART_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e045      	b.n	800266e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	8812      	ldrh	r2, [r2, #0]
 80025ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3302      	adds	r3, #2
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	e017      	b.n	8002634 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	e013      	b.n	8002634 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f82d 	bl	8002676 <UART_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e023      	b.n	800266e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1c59      	adds	r1, r3, #1
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1b8      	bne.n	80025b0 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	2140      	movs	r1, #64	; 0x40
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f814 	bl	8002676 <UART_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e00a      	b.n	800266e <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002686:	e02c      	b.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268e:	d028      	beq.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002696:	f7fd ffe1 	bl	800065c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d91d      	bls.n	80026e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	68d2      	ldr	r2, [r2, #12]
 80026b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	6952      	ldr	r2, [r2, #20]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e00f      	b.n	8002702 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d0c3      	beq.n	8002688 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002726:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002748:	f023 030c 	bic.w	r3, r3, #12
 800274c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4313      	orrs	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800279c:	f040 80e4 	bne.w	8002968 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4aab      	ldr	r2, [pc, #684]	; (8002a54 <UART_SetConfig+0x348>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <UART_SetConfig+0xa8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4aaa      	ldr	r2, [pc, #680]	; (8002a58 <UART_SetConfig+0x34c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d16c      	bne.n	800288e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681c      	ldr	r4, [r3, #0]
 80027b8:	f7ff fe64 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	441a      	add	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4aa2      	ldr	r2, [pc, #648]	; (8002a5c <UART_SetConfig+0x350>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	011d      	lsls	r5, r3, #4
 80027dc:	f7ff fe52 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009a      	lsls	r2, r3, #2
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80027f6:	f7ff fe45 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	4a92      	ldr	r2, [pc, #584]	; (8002a5c <UART_SetConfig+0x350>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2264      	movs	r2, #100	; 0x64
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	1af3      	subs	r3, r6, r3
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a8d      	ldr	r2, [pc, #564]	; (8002a5c <UART_SetConfig+0x350>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002832:	441d      	add	r5, r3
 8002834:	f7ff fe26 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002838:	4602      	mov	r2, r0
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	441a      	add	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fbb2 f6f3 	udiv	r6, r2, r3
 800284e:	f7ff fe19 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002852:	4602      	mov	r2, r0
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	009a      	lsls	r2, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	4a7c      	ldr	r2, [pc, #496]	; (8002a5c <UART_SetConfig+0x350>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2264      	movs	r2, #100	; 0x64
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	1af3      	subs	r3, r6, r3
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	3332      	adds	r3, #50	; 0x32
 800287c:	4a77      	ldr	r2, [pc, #476]	; (8002a5c <UART_SetConfig+0x350>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	442b      	add	r3, r5
 800288a:	60a3      	str	r3, [r4, #8]
 800288c:	e154      	b.n	8002b38 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681c      	ldr	r4, [r3, #0]
 8002892:	f7ff fde3 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002896:	4602      	mov	r2, r0
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009a      	lsls	r2, r3, #2
 80028a0:	441a      	add	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <UART_SetConfig+0x350>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	011d      	lsls	r5, r3, #4
 80028b6:	f7ff fdd1 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80028d0:	f7ff fdc4 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4a5c      	ldr	r2, [pc, #368]	; (8002a5c <UART_SetConfig+0x350>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2264      	movs	r2, #100	; 0x64
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	1af3      	subs	r3, r6, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <UART_SetConfig+0x350>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800290c:	441d      	add	r5, r3
 800290e:	f7ff fda5 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002912:	4602      	mov	r2, r0
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009a      	lsls	r2, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fbb2 f6f3 	udiv	r6, r2, r3
 8002928:	f7ff fd98 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800292c:	4602      	mov	r2, r0
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009a      	lsls	r2, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a46      	ldr	r2, [pc, #280]	; (8002a5c <UART_SetConfig+0x350>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	2264      	movs	r2, #100	; 0x64
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	1af3      	subs	r3, r6, r3
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3332      	adds	r3, #50	; 0x32
 8002956:	4a41      	ldr	r2, [pc, #260]	; (8002a5c <UART_SetConfig+0x350>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	442b      	add	r3, r5
 8002964:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002966:	e0e7      	b.n	8002b38 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <UART_SetConfig+0x348>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <UART_SetConfig+0x270>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <UART_SetConfig+0x34c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d171      	bne.n	8002a60 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681c      	ldr	r4, [r3, #0]
 8002980:	f7ff fd80 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002984:	4602      	mov	r2, r0
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	441a      	add	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <UART_SetConfig+0x350>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	011d      	lsls	r5, r3, #4
 80029a4:	f7ff fd6e 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80029be:	f7ff fd61 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <UART_SetConfig+0x350>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2264      	movs	r2, #100	; 0x64
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	1af3      	subs	r3, r6, r3
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <UART_SetConfig+0x350>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	441d      	add	r5, r3
 80029fa:	f7ff fd43 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a14:	f7ff fd36 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <UART_SetConfig+0x350>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	2264      	movs	r2, #100	; 0x64
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	1af3      	subs	r3, r6, r3
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	3332      	adds	r3, #50	; 0x32
 8002a42:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <UART_SetConfig+0x350>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	442b      	add	r3, r5
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	e071      	b.n	8002b38 <UART_SetConfig+0x42c>
 8002a54:	40011000 	.word	0x40011000
 8002a58:	40011400 	.word	0x40011400
 8002a5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681c      	ldr	r4, [r3, #0]
 8002a64:	f7ff fcfa 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a30      	ldr	r2, [pc, #192]	; (8002b40 <UART_SetConfig+0x434>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	011d      	lsls	r5, r3, #4
 8002a88:	f7ff fce8 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009a      	lsls	r2, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002aa2:	f7ff fcdb 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <UART_SetConfig+0x434>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2264      	movs	r2, #100	; 0x64
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	1af3      	subs	r3, r6, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <UART_SetConfig+0x434>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002adc:	441d      	add	r5, r3
 8002ade:	f7ff fcbd 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009a      	lsls	r2, r3, #2
 8002aec:	441a      	add	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002af8:	f7ff fcb0 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009a      	lsls	r2, r3, #2
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <UART_SetConfig+0x434>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2264      	movs	r2, #100	; 0x64
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	1af3      	subs	r3, r6, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <UART_SetConfig+0x434>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	442b      	add	r3, r5
 8002b34:	60a3      	str	r3, [r4, #8]
}
 8002b36:	e7ff      	b.n	8002b38 <UART_SetConfig+0x42c>
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b40:	51eb851f 	.word	0x51eb851f

08002b44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b56:	2b84      	cmp	r3, #132	; 0x84
 8002b58:	d005      	beq.n	8002b66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	3303      	adds	r3, #3
 8002b64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b7a:	f3ef 8305 	mrs	r3, IPSR
 8002b7e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b9c:	f001 feb4 	bl	8004908 <vTaskStartScheduler>
  
  return osOK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002baa:	f7ff ffe3 	bl	8002b74 <inHandlerMode>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002bb4:	f001 ffa8 	bl	8004b08 <xTaskGetTickCountFromISR>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	e002      	b.n	8002bc2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002bbc:	f001 ff94 	bl	8004ae8 <xTaskGetTickCount>
 8002bc0:	4603      	mov	r3, r0
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc8:	b087      	sub	sp, #28
 8002bca:	af02      	add	r7, sp, #8
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685c      	ldr	r4, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bdc:	b29e      	uxth	r6, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ffad 	bl	8002b44 <makeFreeRtosPriority>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f107 030c 	add.w	r3, r7, #12
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	f001 fd26 	bl	800464c <xTaskCreate>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d001      	beq.n	8002c0a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <osDelay+0x16>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	e000      	b.n	8002c2c <osDelay+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fe37 	bl	80048a0 <vTaskDelay>
  
  return osOK;
 8002c32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002c44:	2001      	movs	r0, #1
 8002c46:	f000 ffb3 	bl	8003bb0 <xQueueCreateMutex>
 8002c4a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <osMutexWait+0x18>
    return osErrorParameter;
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	e03c      	b.n	8002ce6 <osMutexWait+0x92>
  }
  
  ticks = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c76:	d103      	bne.n	8002c80 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e009      	b.n	8002c94 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <osMutexWait+0x40>
      ticks = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002c94:	f7ff ff6e 	bl	8002b74 <inHandlerMode>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d017      	beq.n	8002cce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 fac4 	bl	8004234 <xQueueReceiveFromISR>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <osMutexWait+0x62>
      return osErrorOS;
 8002cb2:	23ff      	movs	r3, #255	; 0xff
 8002cb4:	e017      	b.n	8002ce6 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <osMutexWait+0x90>
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <osMutexWait+0x9c>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	e00a      	b.n	8002ce4 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002cce:	2300      	movs	r3, #0
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 f99b 	bl	8004010 <xQueueGenericReceive>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <osMutexWait+0x90>
    return osErrorOS;
 8002ce0:	23ff      	movs	r3, #255	; 0xff
 8002ce2:	e000      	b.n	8002ce6 <osMutexWait+0x92>
  }
  
  return osOK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002d04:	f7ff ff36 	bl	8002b74 <inHandlerMode>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f001 f8f1 	bl	8003efc <xQueueGiveFromISR>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <osMutexRelease+0x30>
      return osErrorOS;
 8002d20:	23ff      	movs	r3, #255	; 0xff
 8002d22:	e017      	b.n	8002d54 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <osMutexRelease+0x5e>
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <osMutexRelease+0x68>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	e00a      	b.n	8002d52 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 ff4c 	bl	8003be0 <xQueueGenericSend>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002d4e:	23ff      	movs	r3, #255	; 0xff
 8002d50:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d110      	bne.n	8002d92 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8002d70:	2203      	movs	r2, #3
 8002d72:	2100      	movs	r1, #0
 8002d74:	2001      	movs	r0, #1
 8002d76:	f000 fea9 	bl	8003acc <xQueueGenericCreate>
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <osSemaphoreCreate+0x2e>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 ff29 	bl	8003be0 <xQueueGenericSend>
    return sema;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	e000      	b.n	8002d94 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8002d92:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	e03c      	b.n	8002e2e <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dbe:	d103      	bne.n	8002dc8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e009      	b.n	8002ddc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <osSemaphoreWait+0x40>
      ticks = 1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002ddc:	f7ff feca 	bl	8002b74 <inHandlerMode>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	461a      	mov	r2, r3
 8002dec:	2100      	movs	r1, #0
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 fa20 	bl	8004234 <xQueueReceiveFromISR>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <osSemaphoreWait+0x62>
      return osErrorOS;
 8002dfa:	23ff      	movs	r3, #255	; 0xff
 8002dfc:	e017      	b.n	8002e2e <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <osSemaphoreWait+0x90>
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <osSemaphoreWait+0x9c>)
 8002e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	e00a      	b.n	8002e2c <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002e16:	2300      	movs	r3, #0
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f001 f8f7 	bl	8004010 <xQueueGenericReceive>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <osSemaphoreWait+0x90>
    return osErrorOS;
 8002e28:	23ff      	movs	r3, #255	; 0xff
 8002e2a:	e000      	b.n	8002e2e <osSemaphoreWait+0x92>
  }
  
  return osOK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000ed04 	.word	0xe000ed04

08002e3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002e4c:	f7ff fe92 	bl	8002b74 <inHandlerMode>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f001 f84d 	bl	8003efc <xQueueGiveFromISR>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002e68:	23ff      	movs	r3, #255	; 0xff
 8002e6a:	e017      	b.n	8002e9c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <osSemaphoreRelease+0x5e>
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <osSemaphoreRelease+0x68>)
 8002e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	e00a      	b.n	8002e9a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002e84:	2300      	movs	r3, #0
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fea8 	bl	8003be0 <xQueueGenericSend>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002e96:	23ff      	movs	r3, #255	; 0xff
 8002e98:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8002eb0:	f7ff fe60 	bl	8002b74 <inHandlerMode>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <osSemaphoreDelete+0x16>
    return osErrorISR;
 8002eba:	2382      	movs	r3, #130	; 0x82
 8002ebc:	e003      	b.n	8002ec6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f001 fa6d 	bl	800439e <vQueueDelete>

  return osOK; 
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f000 fdf2 	bl	8003acc <xQueueGenericCreate>
 8002ee8:	4603      	mov	r3, r0
#endif
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <osMessagePut+0x1e>
    ticks = 1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002f12:	f7ff fe2f 	bl	8002b74 <inHandlerMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d018      	beq.n	8002f4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002f1c:	f107 0210 	add.w	r2, r7, #16
 8002f20:	f107 0108 	add.w	r1, r7, #8
 8002f24:	2300      	movs	r3, #0
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 ff54 	bl	8003dd4 <xQueueGenericSendFromISR>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <osMessagePut+0x42>
      return osErrorOS;
 8002f32:	23ff      	movs	r3, #255	; 0xff
 8002f34:	e018      	b.n	8002f68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d014      	beq.n	8002f66 <osMessagePut+0x72>
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <osMessagePut+0x7c>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	e00b      	b.n	8002f66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002f4e:	f107 0108 	add.w	r1, r7, #8
 8002f52:	2300      	movs	r3, #0
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fe42 	bl	8003be0 <xQueueGenericSend>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <osMessagePut+0x72>
      return osErrorOS;
 8002f62:	23ff      	movs	r3, #255	; 0xff
 8002f64:	e000      	b.n	8002f68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	e000ed04 	.word	0xe000ed04

08002f74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	617b      	str	r3, [r7, #20]
    return event;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	461c      	mov	r4, r3
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fa2:	e054      	b.n	800304e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb2:	d103      	bne.n	8002fbc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fba:	e009      	b.n	8002fd0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <osMessageGet+0x5c>
      ticks = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002fd0:	f7ff fdd0 	bl	8002b74 <inHandlerMode>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01c      	beq.n	8003014 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002fda:	f107 0220 	add.w	r2, r7, #32
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f001 f924 	bl	8004234 <xQueueReceiveFromISR>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e001      	b.n	8002ffc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01d      	beq.n	800303e <osMessageGet+0xca>
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <osMessageGet+0xe4>)
 8003004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	e014      	b.n	800303e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	1d19      	adds	r1, r3, #4
 800301a:	2300      	movs	r3, #0
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	68b8      	ldr	r0, [r7, #8]
 8003020:	f000 fff6 	bl	8004010 <xQueueGenericReceive>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800302a:	2310      	movs	r3, #16
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e006      	b.n	800303e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <osMessageGet+0xc6>
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <osMessageGet+0xc8>
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	461c      	mov	r4, r3
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800304a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	372c      	adds	r7, #44	; 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003060:	f002 f858 	bl	8005114 <xTaskGetSchedulerState>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800306a:	f000 fa6d 	bl	8003548 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}

08003072 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800307a:	f7ff fd7b 	bl	8002b74 <inHandlerMode>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f001 f96f 	bl	8004368 <uxQueueMessagesWaitingFromISR>
 800308a:	4603      	mov	r3, r0
 800308c:	e003      	b.n	8003096 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f001 f94d 	bl	800432e <uxQueueMessagesWaiting>
 8003094:	4603      	mov	r3, r0
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80030a6:	f7ff fd65 	bl	8002b74 <inHandlerMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <osMessageDelete+0x16>
    return osErrorISR;
 80030b0:	2382      	movs	r3, #130	; 0x82
 80030b2:	e003      	b.n	80030bc <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f001 f972 	bl	800439e <vQueueDelete>

  return osOK; 
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 0208 	add.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0208 	add.w	r2, r3, #8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f103 0208 	add.w	r2, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d103      	bne.n	8003186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e00c      	b.n	80031a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3308      	adds	r3, #8
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e002      	b.n	8003194 <vListInsert+0x2e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d9f6      	bls.n	800318e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d103      	bne.n	800320c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b04      	subs	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3b04      	subs	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f023 0201 	bic.w	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b04      	subs	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <pxPortInitialiseStack+0x64>)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b14      	subs	r3, #20
 8003266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b04      	subs	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f06f 0202 	mvn.w	r2, #2
 800327a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b20      	subs	r3, #32
 8003280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	08003295 	.word	0x08003295

08003294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <prvTaskExitError+0x38>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a2:	d009      	beq.n	80032b8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e7fe      	b.n	80032b6 <prvTaskExitError+0x22>
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80032ca:	e7fe      	b.n	80032ca <prvTaskExitError+0x36>
 80032cc:	20000008 	.word	0x20000008

080032d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <pxCurrentTCBConst2>)
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	6808      	ldr	r0, [r1, #0]
 80032d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032da:	f380 8809 	msr	PSP, r0
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f380 8811 	msr	BASEPRI, r0
 80032ea:	4770      	bx	lr
 80032ec:	f3af 8000 	nop.w

080032f0 <pxCurrentTCBConst2>:
 80032f0:	20003cc0 	.word	0x20003cc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop

080032f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80032f8:	4806      	ldr	r0, [pc, #24]	; (8003314 <prvPortStartFirstTask+0x1c>)
 80032fa:	6800      	ldr	r0, [r0, #0]
 80032fc:	6800      	ldr	r0, [r0, #0]
 80032fe:	f380 8808 	msr	MSP, r0
 8003302:	b662      	cpsie	i
 8003304:	b661      	cpsie	f
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	df00      	svc	0
 8003310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003312:	bf00      	nop
 8003314:	e000ed08 	.word	0xe000ed08

08003318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <xPortStartScheduler+0xf4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <xPortStartScheduler+0xf8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <xPortStartScheduler+0x24>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e7fe      	b.n	800333a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800333c:	4b33      	ldr	r3, [pc, #204]	; (800340c <xPortStartScheduler+0xf4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a34      	ldr	r2, [pc, #208]	; (8003414 <xPortStartScheduler+0xfc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d109      	bne.n	800335a <xPortStartScheduler+0x42>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e7fe      	b.n	8003358 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <xPortStartScheduler+0x100>)
 800335c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <xPortStartScheduler+0x104>)
 8003380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <xPortStartScheduler+0x108>)
 8003384:	2207      	movs	r2, #7
 8003386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003388:	e009      	b.n	800339e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <xPortStartScheduler+0x108>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <xPortStartScheduler+0x108>)
 8003392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	b2db      	uxtb	r3, r3
 800339c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d0ef      	beq.n	800338a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <xPortStartScheduler+0x108>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <xPortStartScheduler+0x108>)
 80033b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <xPortStartScheduler+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <xPortStartScheduler+0x108>)
 80033be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <xPortStartScheduler+0x10c>)
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <xPortStartScheduler+0x10c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <xPortStartScheduler+0x10c>)
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <xPortStartScheduler+0x10c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033e0:	f000 f8d2 	bl	8003588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <xPortStartScheduler+0x110>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033ea:	f000 f8e9 	bl	80035c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033ee:	4a0f      	ldr	r2, [pc, #60]	; (800342c <xPortStartScheduler+0x114>)
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <xPortStartScheduler+0x114>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033fa:	f7ff ff7d 	bl	80032f8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80033fe:	f7ff ff49 	bl	8003294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	e000ed00 	.word	0xe000ed00
 8003410:	410fc271 	.word	0x410fc271
 8003414:	410fc270 	.word	0x410fc270
 8003418:	e000e400 	.word	0xe000e400
 800341c:	200000a0 	.word	0x200000a0
 8003420:	200000a4 	.word	0x200000a4
 8003424:	e000ed20 	.word	0xe000ed20
 8003428:	20000008 	.word	0x20000008
 800342c:	e000ef34 	.word	0xe000ef34

08003430 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <vPortEnterCritical+0x54>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <vPortEnterCritical+0x54>)
 8003450:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <vPortEnterCritical+0x54>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800345a:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <vPortEnterCritical+0x58>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <vPortEnterCritical+0x48>
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	e7fe      	b.n	8003476 <vPortEnterCritical+0x46>
	}
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	20000008 	.word	0x20000008
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <vPortExitCritical+0x4c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <vPortExitCritical+0x22>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e7fe      	b.n	80034ac <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <vPortExitCritical+0x4c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <vPortExitCritical+0x4c>)
 80034b6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <vPortExitCritical+0x4c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <vPortExitCritical+0x3e>
 80034c0:	2300      	movs	r3, #0
 80034c2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000008 	.word	0x20000008
 80034dc:	00000000 	.word	0x00000000

080034e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034e0:	f3ef 8009 	mrs	r0, PSP
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <pxCurrentTCBConst>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f01e 0f10 	tst.w	lr, #16
 80034f0:	bf08      	it	eq
 80034f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fa:	6010      	str	r0, [r2, #0]
 80034fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003504:	f380 8811 	msr	BASEPRI, r0
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f001 fbc8 	bl	8004ca4 <vTaskSwitchContext>
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f380 8811 	msr	BASEPRI, r0
 800351c:	bc08      	pop	{r3}
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	6808      	ldr	r0, [r1, #0]
 8003522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003526:	f01e 0f10 	tst.w	lr, #16
 800352a:	bf08      	it	eq
 800352c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003530:	f380 8809 	msr	PSP, r0
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst>:
 8003540:	20003cc0 	.word	0x20003cc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003560:	f001 fae4 	bl	8004b2c <xTaskIncrementTick>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <xPortSysTickHandler+0x3c>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <vPortSetupTimerInterrupt+0x28>)
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <vPortSetupTimerInterrupt+0x2c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4909      	ldr	r1, [pc, #36]	; (80035b8 <vPortSetupTimerInterrupt+0x30>)
 8003594:	fba1 1303 	umull	r1, r3, r1, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	3b01      	subs	r3, #1
 800359c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <vPortSetupTimerInterrupt+0x34>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e014 	.word	0xe000e014
 80035b4:	2000001c 	.word	0x2000001c
 80035b8:	10624dd3 	.word	0x10624dd3
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80035d0 <vPortEnableVFP+0x10>
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035ca:	6001      	str	r1, [r0, #0]
 80035cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035ce:	bf00      	nop
 80035d0:	e000ed88 	.word	0xe000ed88

080035d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80035da:	f3ef 8305 	mrs	r3, IPSR
 80035de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	d913      	bls.n	800360e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <vPortValidateInterruptPriority+0x6c>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <vPortValidateInterruptPriority+0x70>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	7afa      	ldrb	r2, [r7, #11]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d209      	bcs.n	800360e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e7fe      	b.n	800360c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <vPortValidateInterruptPriority+0x74>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <vPortValidateInterruptPriority+0x78>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d909      	bls.n	8003632 <vPortValidateInterruptPriority+0x5e>
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	e7fe      	b.n	8003630 <vPortValidateInterruptPriority+0x5c>
	}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e3f0 	.word	0xe000e3f0
 8003644:	200000a0 	.word	0x200000a0
 8003648:	e000ed0c 	.word	0xe000ed0c
 800364c:	200000a4 	.word	0x200000a4

08003650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800365c:	f001 f99a 	bl	8004994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003660:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <pvPortMalloc+0x170>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003668:	f000 f90c 	bl	8003884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800366c:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <pvPortMalloc+0x174>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 808c 	bne.w	8003792 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01c      	beq.n	80036ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003680:	2208      	movs	r2, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	2b00      	cmp	r3, #0
 8003690:	d013      	beq.n	80036ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f023 0307 	bic.w	r3, r3, #7
 8003698:	3308      	adds	r3, #8
 800369a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <pvPortMalloc+0x6a>
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e7fe      	b.n	80036b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d068      	beq.n	8003792 <pvPortMalloc+0x142>
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <pvPortMalloc+0x178>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d863      	bhi.n	8003792 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036ca:	4b40      	ldr	r3, [pc, #256]	; (80037cc <pvPortMalloc+0x17c>)
 80036cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <pvPortMalloc+0x17c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036d4:	e004      	b.n	80036e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d203      	bcs.n	80036f2 <pvPortMalloc+0xa2>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f1      	bne.n	80036d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <pvPortMalloc+0x170>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d04a      	beq.n	8003792 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	4413      	add	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	2308      	movs	r3, #8
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	429a      	cmp	r2, r3
 800371c:	d91e      	bls.n	800375c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <pvPortMalloc+0xf4>
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e7fe      	b.n	8003742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003756:	69b8      	ldr	r0, [r7, #24]
 8003758:	f000 f8f6 	bl	8003948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <pvPortMalloc+0x178>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <pvPortMalloc+0x178>)
 8003768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <pvPortMalloc+0x178>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <pvPortMalloc+0x180>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d203      	bcs.n	800377e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <pvPortMalloc+0x178>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <pvPortMalloc+0x180>)
 800377c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <pvPortMalloc+0x174>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003792:	f001 f90d 	bl	80049b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <pvPortMalloc+0x164>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e7fe      	b.n	80037b2 <pvPortMalloc+0x162>
	return pvReturn;
 80037b4:	69fb      	ldr	r3, [r7, #28]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20003cb0 	.word	0x20003cb0
 80037c4:	20003cbc 	.word	0x20003cbc
 80037c8:	20003cb4 	.word	0x20003cb4
 80037cc:	20003ca8 	.word	0x20003ca8
 80037d0:	20003cb8 	.word	0x20003cb8

080037d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d046      	beq.n	8003874 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037e6:	2308      	movs	r3, #8
 80037e8:	425b      	negs	r3, r3
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <vPortFree+0xa8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <vPortFree+0x42>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e7fe      	b.n	8003814 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <vPortFree+0x5e>
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	e7fe      	b.n	8003830 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <vPortFree+0xa8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <vPortFree+0xa8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003858:	f001 f89c 	bl	8004994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <vPortFree+0xac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4413      	add	r3, r2
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <vPortFree+0xac>)
 8003868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800386a:	6938      	ldr	r0, [r7, #16]
 800386c:	f000 f86c 	bl	8003948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003870:	f001 f89e 	bl	80049b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003874:	bf00      	nop
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20003cbc 	.word	0x20003cbc
 8003880:	20003cb4 	.word	0x20003cb4

08003884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800388a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800388e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <prvHeapInit+0xac>)
 8003892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3307      	adds	r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0307 	bic.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <prvHeapInit+0xac>)
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <prvHeapInit+0xb0>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <prvHeapInit+0xb0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038d0:	2208      	movs	r2, #8
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <prvHeapInit+0xb4>)
 80038e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <prvHeapInit+0xb4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <prvHeapInit+0xb4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <prvHeapInit+0xb4>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <prvHeapInit+0xb8>)
 8003912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <prvHeapInit+0xbc>)
 800391a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <prvHeapInit+0xc0>)
 800391e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	200000a8 	.word	0x200000a8
 8003934:	20003ca8 	.word	0x20003ca8
 8003938:	20003cb0 	.word	0x20003cb0
 800393c:	20003cb8 	.word	0x20003cb8
 8003940:	20003cb4 	.word	0x20003cb4
 8003944:	20003cbc 	.word	0x20003cbc

08003948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <prvInsertBlockIntoFreeList+0xac>)
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e002      	b.n	800395c <prvInsertBlockIntoFreeList+0x14>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3f7      	bcc.n	8003956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	d108      	bne.n	800398a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	441a      	add	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d118      	bne.n	80039d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <prvInsertBlockIntoFreeList+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00d      	beq.n	80039c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e008      	b.n	80039d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <prvInsertBlockIntoFreeList+0xb0>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d002      	beq.n	80039e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20003ca8 	.word	0x20003ca8
 80039f8:	20003cb0 	.word	0x20003cb0

080039fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <xQueueGenericReset+0x28>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	e7fe      	b.n	8003a22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a24:	f7ff fd04 	bl	8003430 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	441a      	add	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	3b01      	subs	r3, #1
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d114      	bne.n	8003aa4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01a      	beq.n	8003ab8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3310      	adds	r3, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f98a 	bl	8004da0 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <xQueueGenericReset+0xcc>)
 8003a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	e009      	b.n	8003ab8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fb0b 	bl	80030c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fb06 	bl	80030c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ab8:	f7ff fce8 	bl	800348c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <xQueueGenericCreate+0x28>
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e7fe      	b.n	8003af2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e004      	b.n	8003b0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3348      	adds	r3, #72	; 0x48
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff fd9e 	bl	8003650 <pvPortMalloc>
 8003b14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	3348      	adds	r3, #72	; 0x48
 8003b20:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b22:	79fa      	ldrb	r2, [r7, #7]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f805 	bl	8003b3e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8003b34:	69bb      	ldr	r3, [r7, #24]
	}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e002      	b.n	8003b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	69b8      	ldr	r0, [r7, #24]
 8003b70:	f7ff ff44 	bl	80039fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f81c 	bl	8003be0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6939      	ldr	r1, [r7, #16]
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	f7ff ff7f 	bl	8003acc <xQueueGenericCreate>
 8003bce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ffd3 	bl	8003b7c <prvInitialiseMutex>

		return pxNewQueue;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
	}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08e      	sub	sp, #56	; 0x38
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <xQueueGenericSend+0x30>
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	e7fe      	b.n	8003c0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <xQueueGenericSend+0x3e>
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <xQueueGenericSend+0x42>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueGenericSend+0x44>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <xQueueGenericSend+0x5c>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3a:	e7fe      	b.n	8003c3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d103      	bne.n	8003c4a <xQueueGenericSend+0x6a>
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <xQueueGenericSend+0x6e>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueGenericSend+0x70>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <xQueueGenericSend+0x88>
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	e7fe      	b.n	8003c66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c68:	f001 fa54 	bl	8005114 <xTaskGetSchedulerState>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <xQueueGenericSend+0x98>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <xQueueGenericSend+0x9c>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <xQueueGenericSend+0x9e>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <xQueueGenericSend+0xb6>
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e7fe      	b.n	8003c94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c96:	f7ff fbcb 	bl	8003430 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <xQueueGenericSend+0xcc>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d129      	bne.n	8003d00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb2:	f000 fb91 	bl	80043d8 <prvCopyDataToQueue>
 8003cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	3324      	adds	r3, #36	; 0x24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f86b 	bl	8004da0 <xTaskRemoveFromEventList>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <xQueueGenericSend+0x1f0>)
 8003cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	e00a      	b.n	8003cf8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <xQueueGenericSend+0x1f0>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cf8:	f7ff fbc8 	bl	800348c <vPortExitCritical>
				return pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e063      	b.n	8003dc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d06:	f7ff fbc1 	bl	800348c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e05c      	b.n	8003dc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 f8a3 	bl	8004e64 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d22:	f7ff fbb3 	bl	800348c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d26:	f000 fe35 	bl	8004994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d2a:	f7ff fb81 	bl	8003430 <vPortEnterCritical>
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d103      	bne.n	8003d44 <xQueueGenericSend+0x164>
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d4a:	b25b      	sxtb	r3, r3
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d50:	d103      	bne.n	8003d5a <xQueueGenericSend+0x17a>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d5a:	f7ff fb97 	bl	800348c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d5e:	1d3a      	adds	r2, r7, #4
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f8a0 	bl	8004eac <xTaskCheckForTimeOut>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d124      	bne.n	8003dbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d74:	f000 fc28 	bl	80045c8 <prvIsQueueFull>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d018      	beq.n	8003db0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	3310      	adds	r3, #16
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 ffe6 	bl	8004d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8e:	f000 fbb3 	bl	80044f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d92:	f000 fe0d 	bl	80049b0 <xTaskResumeAll>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f af7c 	bne.w	8003c96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <xQueueGenericSend+0x1f0>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	e772      	b.n	8003c96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db2:	f000 fba1 	bl	80044f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003db6:	f000 fdfb 	bl	80049b0 <xTaskResumeAll>
 8003dba:	e76c      	b.n	8003c96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dbe:	f000 fb9b 	bl	80044f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dc2:	f000 fdf5 	bl	80049b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dc6:	2300      	movs	r3, #0
		}
	}
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3738      	adds	r7, #56	; 0x38
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	; 0x38
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <xQueueGenericSendFromISR+0x2c>
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e7fe      	b.n	8003dfe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <xQueueGenericSendFromISR+0x3a>
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <xQueueGenericSendFromISR+0x3e>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <xQueueGenericSendFromISR+0x40>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <xQueueGenericSendFromISR+0x58>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	e7fe      	b.n	8003e2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <xQueueGenericSendFromISR+0x66>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <xQueueGenericSendFromISR+0x6a>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <xQueueGenericSendFromISR+0x6c>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <xQueueGenericSendFromISR+0x84>
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e7fe      	b.n	8003e56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e58:	f7ff fbbc 	bl	80035d4 <vPortValidateInterruptPriority>
	__asm volatile
 8003e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61ba      	str	r2, [r7, #24]
 8003e72:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <xQueueGenericSendFromISR+0xb6>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d12c      	bne.n	8003ee4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9a:	f000 fa9d 	bl	80043d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea6:	d112      	bne.n	8003ece <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 ff73 	bl	8004da0 <xTaskRemoveFromEventList>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	b25a      	sxtb	r2, r3
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ee2:	e001      	b.n	8003ee8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3738      	adds	r7, #56	; 0x38
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	e7fe      	b.n	8003f22 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <xQueueGiveFromISR+0x44>
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e7fe      	b.n	8003f3e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <xQueueGiveFromISR+0x54>
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <xQueueGiveFromISR+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <xQueueGiveFromISR+0x5a>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <xQueueGiveFromISR+0x72>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f6e:	f7ff fb31 	bl	80035d4 <vPortValidateInterruptPriority>
	__asm volatile
 8003f72:	f3ef 8211 	mrs	r2, BASEPRI
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	617a      	str	r2, [r7, #20]
 8003f88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003f8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d92b      	bls.n	8003ff6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb8:	d112      	bne.n	8003fe0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	3324      	adds	r3, #36	; 0x24
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 feea 	bl	8004da0 <xTaskRemoveFromEventList>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	b25a      	sxtb	r2, r3
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff4:	e001      	b.n	8003ffa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004006:	4618      	mov	r0, r3
 8004008:	3738      	adds	r7, #56	; 0x38
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	; 0x38
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <xQueueGenericReceive+0x30>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	e7fe      	b.n	800403e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueGenericReceive+0x3e>
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <xQueueGenericReceive+0x42>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericReceive+0x44>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <xQueueGenericReceive+0x5c>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	e7fe      	b.n	800406a <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800406c:	f001 f852 	bl	8005114 <xTaskGetSchedulerState>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <xQueueGenericReceive+0x6c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <xQueueGenericReceive+0x70>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <xQueueGenericReceive+0x72>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <xQueueGenericReceive+0x8a>
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	e7fe      	b.n	8004098 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800409a:	f7ff f9c9 	bl	8003430 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d046      	beq.n	8004138 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b4:	f000 f9fa 	bl	80044ac <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d121      	bne.n	8004102 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80040ce:	f001 f939 	bl	8005344 <pvTaskIncrementMutexHeldCount>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d027      	beq.n	8004130 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	3310      	adds	r3, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe5b 	bl	8004da0 <xTaskRemoveFromEventList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01f      	beq.n	8004130 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <xQueueGenericReceive+0x220>)
 80040f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	e016      	b.n	8004130 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004106:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00f      	beq.n	8004130 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fe43 	bl	8004da0 <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <xQueueGenericReceive+0x220>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8004130:	f7ff f9ac 	bl	800348c <vPortExitCritical>
				return pdPASS;
 8004134:	2301      	movs	r3, #1
 8004136:	e077      	b.n	8004228 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800413e:	f7ff f9a5 	bl	800348c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004142:	2300      	movs	r3, #0
 8004144:	e070      	b.n	8004228 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fe87 	bl	8004e64 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800415a:	f7ff f997 	bl	800348c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800415e:	f000 fc19 	bl	8004994 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004162:	f7ff f965 	bl	8003430 <vPortEnterCritical>
 8004166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416c:	b25b      	sxtb	r3, r3
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004172:	d103      	bne.n	800417c <xQueueGenericReceive+0x16c>
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004182:	b25b      	sxtb	r3, r3
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004188:	d103      	bne.n	8004192 <xQueueGenericReceive+0x182>
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004192:	f7ff f97b 	bl	800348c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004196:	1d3a      	adds	r2, r7, #4
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fe84 	bl	8004eac <xTaskCheckForTimeOut>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d131      	bne.n	800420e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ac:	f000 f9f6 	bl	800459c <prvIsQueueEmpty>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d025      	beq.n	8004202 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 80041be:	f7ff f937 	bl	8003430 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 ffc2 	bl	8005150 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80041cc:	f7ff f95e 	bl	800348c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	3324      	adds	r3, #36	; 0x24
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fdbd 	bl	8004d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041e0:	f000 f98a 	bl	80044f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041e4:	f000 fbe4 	bl	80049b0 <xTaskResumeAll>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f47f af55 	bne.w	800409a <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <xQueueGenericReceive+0x220>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	e74b      	b.n	800409a <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004204:	f000 f978 	bl	80044f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004208:	f000 fbd2 	bl	80049b0 <xTaskResumeAll>
 800420c:	e745      	b.n	800409a <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800420e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004210:	f000 f972 	bl	80044f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004214:	f000 fbcc 	bl	80049b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421a:	f000 f9bf 	bl	800459c <prvIsQueueEmpty>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	f43f af3a 	beq.w	800409a <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004226:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004228:	4618      	mov	r0, r3
 800422a:	3738      	adds	r7, #56	; 0x38
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	e000ed04 	.word	0xe000ed04

08004234 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08e      	sub	sp, #56	; 0x38
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <xQueueReceiveFromISR+0x2a>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	e7fe      	b.n	800425c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <xQueueReceiveFromISR+0x38>
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <xQueueReceiveFromISR+0x3c>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <xQueueReceiveFromISR+0x3e>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <xQueueReceiveFromISR+0x56>
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e7fe      	b.n	8004288 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800428a:	f7ff f9a3 	bl	80035d4 <vPortValidateInterruptPriority>
	__asm volatile
 800428e:	f3ef 8211 	mrs	r2, BASEPRI
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61ba      	str	r2, [r7, #24]
 80042a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80042a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02f      	beq.n	8004316 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c4:	f000 f8f2 	bl	80044ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80042d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d112      	bne.n	8004300 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fd5a 	bl	8004da0 <xTaskRemoveFromEventList>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00e      	beq.n	8004310 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e007      	b.n	8004310 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004304:	3301      	adds	r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	b25a      	sxtb	r2, r3
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004310:	2301      	movs	r3, #1
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	e001      	b.n	800431a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004326:	4618      	mov	r0, r3
 8004328:	3738      	adds	r7, #56	; 0x38
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	e7fe      	b.n	800434e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004350:	f7ff f86e 	bl	8003430 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800435a:	f7ff f897 	bl	800348c <vPortExitCritical>

	return uxReturn;
 800435e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <uxQueueMessagesWaitingFromISR+0x22>
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	e7fe      	b.n	8004388 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004390:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <vQueueDelete+0x26>
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	e7fe      	b.n	80043c2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f917 	bl	80045f8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fa02 	bl	80037d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d14d      	bne.n	800449a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ff1a 	bl	800523c <xTaskPriorityDisinherit>
 8004408:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	e043      	b.n	800449a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d119      	bne.n	800444c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6898      	ldr	r0, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	f010 fc4d 	bl	8014cc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d32b      	bcc.n	800449a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	e026      	b.n	800449a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68d8      	ldr	r0, [r3, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	461a      	mov	r2, r3
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	f010 fc33 	bl	8014cc2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	425b      	negs	r3, r3
 8004466:	441a      	add	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d207      	bcs.n	8004488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	425b      	negs	r3, r3
 8004482:	441a      	add	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d105      	bne.n	800449a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044a2:	697b      	ldr	r3, [r7, #20]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	441a      	add	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d303      	bcc.n	80044e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	461a      	mov	r2, r3
 80044ea:	6838      	ldr	r0, [r7, #0]
 80044ec:	f010 fbe9 	bl	8014cc2 <memcpy>
	}
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004500:	f7fe ff96 	bl	8003430 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800450a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800450c:	e011      	b.n	8004532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d012      	beq.n	800453c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3324      	adds	r3, #36	; 0x24
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fc40 	bl	8004da0 <xTaskRemoveFromEventList>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004526:	f000 fd1f 	bl	8004f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	3b01      	subs	r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	dce9      	bgt.n	800450e <prvUnlockQueue+0x16>
 800453a:	e000      	b.n	800453e <prvUnlockQueue+0x46>
					break;
 800453c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	22ff      	movs	r2, #255	; 0xff
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004546:	f7fe ffa1 	bl	800348c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800454a:	f7fe ff71 	bl	8003430 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004556:	e011      	b.n	800457c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d012      	beq.n	8004586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3310      	adds	r3, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fc1b 	bl	8004da0 <xTaskRemoveFromEventList>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004570:	f000 fcfa 	bl	8004f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004574:	7bbb      	ldrb	r3, [r7, #14]
 8004576:	3b01      	subs	r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800457c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004580:	2b00      	cmp	r3, #0
 8004582:	dce9      	bgt.n	8004558 <prvUnlockQueue+0x60>
 8004584:	e000      	b.n	8004588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	22ff      	movs	r2, #255	; 0xff
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004590:	f7fe ff7c 	bl	800348c <vPortExitCritical>
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045a4:	f7fe ff44 	bl	8003430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e001      	b.n	80045ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ba:	f7fe ff67 	bl	800348c <vPortExitCritical>

	return xReturn;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045d0:	f7fe ff2e 	bl	8003430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d102      	bne.n	80045e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e001      	b.n	80045ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f7fe ff4f 	bl	800348c <vPortExitCritical>

	return xReturn;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e016      	b.n	8004634 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <vQueueUnregisterQueue+0x50>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d10b      	bne.n	800462e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004616:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <vQueueUnregisterQueue+0x50>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2100      	movs	r1, #0
 800461c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <vQueueUnregisterQueue+0x50>)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	2200      	movs	r2, #0
 800462a:	605a      	str	r2, [r3, #4]
				break;
 800462c:	e005      	b.n	800463a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b07      	cmp	r3, #7
 8004638:	d9e5      	bls.n	8004606 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20004438 	.word	0x20004438

0800464c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fff5 	bl	8003650 <pvPortMalloc>
 8004666:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800466e:	2054      	movs	r0, #84	; 0x54
 8004670:	f7fe ffee 	bl	8003650 <pvPortMalloc>
 8004674:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
 8004682:	e005      	b.n	8004690 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004684:	6978      	ldr	r0, [r7, #20]
 8004686:	f7ff f8a5 	bl	80037d4 <vPortFree>
 800468a:	e001      	b.n	8004690 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	2300      	movs	r3, #0
 800469a:	9303      	str	r3, [sp, #12]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	9302      	str	r3, [sp, #8]
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f80e 	bl	80046ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b2:	69f8      	ldr	r0, [r7, #28]
 80046b4:	f000 f88a 	bl	80047cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046b8:	2301      	movs	r3, #1
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	e002      	b.n	80046c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c4:	69bb      	ldr	r3, [r7, #24]
	}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b088      	sub	sp, #32
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046e6:	3b01      	subs	r3, #1
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <prvInitialiseNewTask+0x46>
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e7fe      	b.n	8004712 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	e012      	b.n	8004740 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	3334      	adds	r3, #52	; 0x34
 800472a:	460a      	mov	r2, r1
 800472c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d006      	beq.n	8004748 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3301      	adds	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	d9e9      	bls.n	800471a <prvInitialiseNewTask+0x4c>
 8004746:	e000      	b.n	800474a <prvInitialiseNewTask+0x7c>
		{
			break;
 8004748:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	2b06      	cmp	r3, #6
 8004756:	d901      	bls.n	800475c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004758:	2306      	movs	r3, #6
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004760:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004766:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2200      	movs	r2, #0
 800476c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fcc6 	bl	8003104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	3318      	adds	r3, #24
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fcc1 	bl	8003104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	f1c3 0207 	rsb	r2, r3, #7
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	2200      	movs	r2, #0
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	69b8      	ldr	r0, [r7, #24]
 80047ac:	f7fe fd3e 	bl	800322c <pxPortInitialiseStack>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c2:	bf00      	nop
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047d4:	f7fe fe2c 	bl	8003430 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <prvAddNewTaskToReadyList+0xb8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a29      	ldr	r2, [pc, #164]	; (8004884 <prvAddNewTaskToReadyList+0xb8>)
 80047e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047e2:	4b29      	ldr	r3, [pc, #164]	; (8004888 <prvAddNewTaskToReadyList+0xbc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047ea:	4a27      	ldr	r2, [pc, #156]	; (8004888 <prvAddNewTaskToReadyList+0xbc>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <prvAddNewTaskToReadyList+0xb8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d110      	bne.n	800481a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047f8:	f000 fbda 	bl	8004fb0 <prvInitialiseTaskLists>
 80047fc:	e00d      	b.n	800481a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <prvAddNewTaskToReadyList+0xc0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <prvAddNewTaskToReadyList+0xbc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	429a      	cmp	r2, r3
 8004812:	d802      	bhi.n	800481a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004814:	4a1c      	ldr	r2, [pc, #112]	; (8004888 <prvAddNewTaskToReadyList+0xbc>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800481a:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <prvAddNewTaskToReadyList+0xc4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3301      	adds	r3, #1
 8004820:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <prvAddNewTaskToReadyList+0xc4>)
 8004822:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <prvAddNewTaskToReadyList+0xc8>)
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <prvAddNewTaskToReadyList+0xcc>)
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fe fc66 	bl	800311e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004852:	f7fe fe1b 	bl	800348c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <prvAddNewTaskToReadyList+0xc0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00e      	beq.n	800487c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <prvAddNewTaskToReadyList+0xbc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	429a      	cmp	r2, r3
 800486a:	d207      	bcs.n	800487c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <prvAddNewTaskToReadyList+0xd0>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20003dc0 	.word	0x20003dc0
 8004888:	20003cc0 	.word	0x20003cc0
 800488c:	20003dcc 	.word	0x20003dcc
 8004890:	20003ddc 	.word	0x20003ddc
 8004894:	20003dc8 	.word	0x20003dc8
 8004898:	20003cc4 	.word	0x20003cc4
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <vTaskDelay+0x60>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <vTaskDelay+0x2e>
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	e7fe      	b.n	80048cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80048ce:	f000 f861 	bl	8004994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048d2:	2100      	movs	r1, #0
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fd49 	bl	800536c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048da:	f000 f869 	bl	80049b0 <xTaskResumeAll>
 80048de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <vTaskDelay+0x64>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20003de8 	.word	0x20003de8
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <vTaskStartScheduler+0x74>)
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	4919      	ldr	r1, [pc, #100]	; (8004980 <vTaskStartScheduler+0x78>)
 800491c:	4819      	ldr	r0, [pc, #100]	; (8004984 <vTaskStartScheduler+0x7c>)
 800491e:	f7ff fe95 	bl	800464c <xTaskCreate>
 8004922:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d115      	bne.n	8004956 <vTaskStartScheduler+0x4e>
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <vTaskStartScheduler+0x80>)
 800493e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004942:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004944:	4b11      	ldr	r3, [pc, #68]	; (800498c <vTaskStartScheduler+0x84>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <vTaskStartScheduler+0x88>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004950:	f7fe fce2 	bl	8003318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004954:	e00d      	b.n	8004972 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800495c:	d109      	bne.n	8004972 <vTaskStartScheduler+0x6a>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	e7fe      	b.n	8004970 <vTaskStartScheduler+0x68>
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20003de4 	.word	0x20003de4
 8004980:	08015c3c 	.word	0x08015c3c
 8004984:	08004f81 	.word	0x08004f81
 8004988:	20003de0 	.word	0x20003de0
 800498c:	20003dcc 	.word	0x20003dcc
 8004990:	20003dc4 	.word	0x20003dc4

08004994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <vTaskSuspendAll+0x18>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a03      	ldr	r2, [pc, #12]	; (80049ac <vTaskSuspendAll+0x18>)
 80049a0:	6013      	str	r3, [r2, #0]
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20003de8 	.word	0x20003de8

080049b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <xTaskResumeAll+0x114>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <xTaskResumeAll+0x2a>
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	e7fe      	b.n	80049d8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049da:	f7fe fd29 	bl	8003430 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049de:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <xTaskResumeAll+0x114>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	4a37      	ldr	r2, [pc, #220]	; (8004ac4 <xTaskResumeAll+0x114>)
 80049e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <xTaskResumeAll+0x114>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d161      	bne.n	8004ab4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049f0:	4b35      	ldr	r3, [pc, #212]	; (8004ac8 <xTaskResumeAll+0x118>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d05d      	beq.n	8004ab4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f8:	e02e      	b.n	8004a58 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049fa:	4b34      	ldr	r3, [pc, #208]	; (8004acc <xTaskResumeAll+0x11c>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3318      	adds	r3, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fbe6 	bl	80031d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fbe1 	bl	80031d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <xTaskResumeAll+0x120>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <xTaskResumeAll+0x120>)
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <xTaskResumeAll+0x124>)
 8004a36:	441a      	add	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fe fb6d 	bl	800311e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <xTaskResumeAll+0x128>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <xTaskResumeAll+0x12c>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a58:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <xTaskResumeAll+0x11c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1cc      	bne.n	80049fa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a66:	f000 fb2f 	bl	80050c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <xTaskResumeAll+0x130>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a76:	f000 f859 	bl	8004b2c <xTaskIncrementTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <xTaskResumeAll+0x12c>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f1      	bne.n	8004a76 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <xTaskResumeAll+0x130>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <xTaskResumeAll+0x12c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <xTaskResumeAll+0x134>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ab4:	f7fe fcea 	bl	800348c <vPortExitCritical>

	return xAlreadyYielded;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20003de8 	.word	0x20003de8
 8004ac8:	20003dc0 	.word	0x20003dc0
 8004acc:	20003d80 	.word	0x20003d80
 8004ad0:	20003dc8 	.word	0x20003dc8
 8004ad4:	20003cc4 	.word	0x20003cc4
 8004ad8:	20003cc0 	.word	0x20003cc0
 8004adc:	20003dd4 	.word	0x20003dd4
 8004ae0:	20003dd0 	.word	0x20003dd0
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <xTaskGetTickCount+0x1c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20003dc4 	.word	0x20003dc4

08004b08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b0e:	f7fe fd61 	bl	80035d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004b12:	2300      	movs	r3, #0
 8004b14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <xTaskGetTickCountFromISR+0x20>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b1c:	683b      	ldr	r3, [r7, #0]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20003dc4 	.word	0x20003dc4

08004b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b36:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <xTaskIncrementTick+0x14c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 808c 	bne.w	8004c58 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004b40:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <xTaskIncrementTick+0x150>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b48:	4a4c      	ldr	r2, [pc, #304]	; (8004c7c <xTaskIncrementTick+0x150>)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11f      	bne.n	8004b94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b54:	4b4a      	ldr	r3, [pc, #296]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <xTaskIncrementTick+0x46>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	e7fe      	b.n	8004b70 <xTaskIncrementTick+0x44>
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a40      	ldr	r2, [pc, #256]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <xTaskIncrementTick+0x158>)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <xTaskIncrementTick+0x15c>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	f000 fa9a 	bl	80050c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d34d      	bcc.n	8004c3a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <xTaskIncrementTick+0x80>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <xTaskIncrementTick+0x82>
 8004bac:	2300      	movs	r3, #0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb8:	601a      	str	r2, [r3, #0]
					break;
 8004bba:	e03e      	b.n	8004c3a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bbc:	4b30      	ldr	r3, [pc, #192]	; (8004c80 <xTaskIncrementTick+0x154>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d203      	bcs.n	8004bdc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <xTaskIncrementTick+0x160>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
						break;
 8004bda:	e02e      	b.n	8004c3a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe faf9 	bl	80031d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d004      	beq.n	8004bf8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3318      	adds	r3, #24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe faf0 	bl	80031d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <xTaskIncrementTick+0x164>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <xTaskIncrementTick+0x168>)
 8004c18:	441a      	add	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fe fa7c 	bl	800311e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d3b4      	bcc.n	8004b9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c38:	e7b1      	b.n	8004b9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <xTaskIncrementTick+0x16c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4914      	ldr	r1, [pc, #80]	; (8004c94 <xTaskIncrementTick+0x168>)
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d907      	bls.n	8004c62 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004c52:	2301      	movs	r3, #1
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e004      	b.n	8004c62 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <xTaskIncrementTick+0x170>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <xTaskIncrementTick+0x170>)
 8004c60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <xTaskIncrementTick+0x174>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c6e:	697b      	ldr	r3, [r7, #20]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20003de8 	.word	0x20003de8
 8004c7c:	20003dc4 	.word	0x20003dc4
 8004c80:	20003d78 	.word	0x20003d78
 8004c84:	20003d7c 	.word	0x20003d7c
 8004c88:	20003dd8 	.word	0x20003dd8
 8004c8c:	20003de0 	.word	0x20003de0
 8004c90:	20003dc8 	.word	0x20003dc8
 8004c94:	20003cc4 	.word	0x20003cc4
 8004c98:	20003cc0 	.word	0x20003cc0
 8004c9c:	20003dd0 	.word	0x20003dd0
 8004ca0:	20003dd4 	.word	0x20003dd4

08004ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <vTaskSwitchContext+0xa0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cb2:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <vTaskSwitchContext+0xa4>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cb8:	e03e      	b.n	8004d38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <vTaskSwitchContext+0xa4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <vTaskSwitchContext+0xa8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	f1c3 031f 	rsb	r3, r3, #31
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	491e      	ldr	r1, [pc, #120]	; (8004d50 <vTaskSwitchContext+0xac>)
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <vTaskSwitchContext+0x5a>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e7fe      	b.n	8004cfc <vTaskSwitchContext+0x58>
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4a11      	ldr	r2, [pc, #68]	; (8004d50 <vTaskSwitchContext+0xac>)
 8004d0a:	4413      	add	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d104      	bne.n	8004d2e <vTaskSwitchContext+0x8a>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <vTaskSwitchContext+0xb0>)
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20003de8 	.word	0x20003de8
 8004d48:	20003dd4 	.word	0x20003dd4
 8004d4c:	20003dc8 	.word	0x20003dc8
 8004d50:	20003cc4 	.word	0x20003cc4
 8004d54:	20003cc0 	.word	0x20003cc0

08004d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <vTaskPlaceOnEventList+0x24>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e7fe      	b.n	8004d7a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <vTaskPlaceOnEventList+0x44>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3318      	adds	r3, #24
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fe f9ee 	bl	8003166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	6838      	ldr	r0, [r7, #0]
 8004d8e:	f000 faed 	bl	800536c <prvAddCurrentTaskToDelayedList>
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20003cc0 	.word	0x20003cc0

08004da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <xTaskRemoveFromEventList+0x2a>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e7fe      	b.n	8004dc8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3318      	adds	r3, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fa02 	bl	80031d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <xTaskRemoveFromEventList+0xac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11c      	bne.n	8004e16 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe f9f9 	bl	80031d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	2201      	movs	r2, #1
 8004dec:	409a      	lsls	r2, r3
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <xTaskRemoveFromEventList+0xb0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <xTaskRemoveFromEventList+0xb0>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <xTaskRemoveFromEventList+0xb4>)
 8004e06:	441a      	add	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe f985 	bl	800311e <vListInsertEnd>
 8004e14:	e005      	b.n	8004e22 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480e      	ldr	r0, [pc, #56]	; (8004e58 <xTaskRemoveFromEventList+0xb8>)
 8004e1e:	f7fe f97e 	bl	800311e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <xTaskRemoveFromEventList+0xbc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d905      	bls.n	8004e3c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <xTaskRemoveFromEventList+0xc0>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e001      	b.n	8004e40 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20003de8 	.word	0x20003de8
 8004e50:	20003dc8 	.word	0x20003dc8
 8004e54:	20003cc4 	.word	0x20003cc4
 8004e58:	20003d80 	.word	0x20003d80
 8004e5c:	20003cc0 	.word	0x20003cc0
 8004e60:	20003dd4 	.word	0x20003dd4

08004e64 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <vTaskSetTimeOutState+0x22>
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e7fe      	b.n	8004e84 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <vTaskSetTimeOutState+0x40>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <vTaskSetTimeOutState+0x44>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20003dd8 	.word	0x20003dd8
 8004ea8:	20003dc4 	.word	0x20003dc4

08004eac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <xTaskCheckForTimeOut+0x24>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e7fe      	b.n	8004ece <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <xTaskCheckForTimeOut+0x3e>
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	e7fe      	b.n	8004ee8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004eea:	f7fe faa1 	bl	8003430 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <xTaskCheckForTimeOut+0xb4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efc:	d102      	bne.n	8004f04 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e026      	b.n	8004f52 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b16      	ldr	r3, [pc, #88]	; (8004f64 <xTaskCheckForTimeOut+0xb8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d007      	beq.n	8004f20 <xTaskCheckForTimeOut+0x74>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d802      	bhi.n	8004f20 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e018      	b.n	8004f52 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d20e      	bcs.n	8004f4e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1acb      	subs	r3, r1, r3
 8004f3c:	441a      	add	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff8e 	bl	8004e64 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e001      	b.n	8004f52 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f7fe fa9b 	bl	800348c <vPortExitCritical>

	return xReturn;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20003dc4 	.word	0x20003dc4
 8004f64:	20003dd8 	.word	0x20003dd8

08004f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <vTaskMissedYield+0x14>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20003dd4 	.word	0x20003dd4

08004f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f88:	f000 f852 	bl	8005030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <prvIdleTask+0x28>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d9f9      	bls.n	8004f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <prvIdleTask+0x2c>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fa4:	e7f0      	b.n	8004f88 <prvIdleTask+0x8>
 8004fa6:	bf00      	nop
 8004fa8:	20003cc4 	.word	0x20003cc4
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	e00c      	b.n	8004fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <prvInitialiseTaskLists+0x60>)
 8004fc8:	4413      	add	r3, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe f87a 	bl	80030c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d9ef      	bls.n	8004fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fdc:	480d      	ldr	r0, [pc, #52]	; (8005014 <prvInitialiseTaskLists+0x64>)
 8004fde:	f7fe f871 	bl	80030c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fe2:	480d      	ldr	r0, [pc, #52]	; (8005018 <prvInitialiseTaskLists+0x68>)
 8004fe4:	f7fe f86e 	bl	80030c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fe8:	480c      	ldr	r0, [pc, #48]	; (800501c <prvInitialiseTaskLists+0x6c>)
 8004fea:	f7fe f86b 	bl	80030c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fee:	480c      	ldr	r0, [pc, #48]	; (8005020 <prvInitialiseTaskLists+0x70>)
 8004ff0:	f7fe f868 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ff4:	480b      	ldr	r0, [pc, #44]	; (8005024 <prvInitialiseTaskLists+0x74>)
 8004ff6:	f7fe f865 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ffa:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <prvInitialiseTaskLists+0x78>)
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <prvInitialiseTaskLists+0x64>)
 8004ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <prvInitialiseTaskLists+0x7c>)
 8005002:	4a05      	ldr	r2, [pc, #20]	; (8005018 <prvInitialiseTaskLists+0x68>)
 8005004:	601a      	str	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20003cc4 	.word	0x20003cc4
 8005014:	20003d50 	.word	0x20003d50
 8005018:	20003d64 	.word	0x20003d64
 800501c:	20003d80 	.word	0x20003d80
 8005020:	20003d94 	.word	0x20003d94
 8005024:	20003dac 	.word	0x20003dac
 8005028:	20003d78 	.word	0x20003d78
 800502c:	20003d7c 	.word	0x20003d7c

08005030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005036:	e028      	b.n	800508a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8005038:	f7ff fcac 	bl	8004994 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <prvCheckTasksWaitingTermination+0x6c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800504c:	f7ff fcb0 	bl	80049b0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d119      	bne.n	800508a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005056:	f7fe f9eb 	bl	8003430 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <prvCheckTasksWaitingTermination+0x6c>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe f8b6 	bl	80031d8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800506c:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <prvCheckTasksWaitingTermination+0x70>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3b01      	subs	r3, #1
 8005072:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvCheckTasksWaitingTermination+0x70>)
 8005074:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <prvCheckTasksWaitingTermination+0x74>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <prvCheckTasksWaitingTermination+0x74>)
 800507e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8005080:	f7fe fa04 	bl	800348c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8005084:	6838      	ldr	r0, [r7, #0]
 8005086:	f000 f80f 	bl	80050a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <prvCheckTasksWaitingTermination+0x74>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1d2      	bne.n	8005038 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20003d94 	.word	0x20003d94
 80050a0:	20003dc0 	.word	0x20003dc0
 80050a4:	20003da8 	.word	0x20003da8

080050a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fb8d 	bl	80037d4 <vPortFree>
			vPortFree( pxTCB );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fe fb8a 	bl	80037d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <prvResetNextTaskUnblockTime+0x44>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <prvResetNextTaskUnblockTime+0x14>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <prvResetNextTaskUnblockTime+0x16>
 80050dc:	2300      	movs	r3, #0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <prvResetNextTaskUnblockTime+0x48>)
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050ea:	e008      	b.n	80050fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <prvResetNextTaskUnblockTime+0x44>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a05      	ldr	r2, [pc, #20]	; (8005110 <prvResetNextTaskUnblockTime+0x48>)
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20003d78 	.word	0x20003d78
 8005110:	20003de0 	.word	0x20003de0

08005114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <xTaskGetSchedulerState+0x34>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005122:	2301      	movs	r3, #1
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	e008      	b.n	800513a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005128:	4b08      	ldr	r3, [pc, #32]	; (800514c <xTaskGetSchedulerState+0x38>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005130:	2302      	movs	r3, #2
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e001      	b.n	800513a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800513a:	687b      	ldr	r3, [r7, #4]
	}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20003dcc 	.word	0x20003dcc
 800514c:	20003de8 	.word	0x20003de8

08005150 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d062      	beq.n	8005228 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <vTaskPriorityInherit+0xe0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d25b      	bcs.n	8005228 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db06      	blt.n	8005186 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <vTaskPriorityInherit+0xe0>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	f1c3 0207 	rsb	r2, r3, #7
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6959      	ldr	r1, [r3, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a27      	ldr	r2, [pc, #156]	; (8005234 <vTaskPriorityInherit+0xe4>)
 8005198:	4413      	add	r3, r2
 800519a:	4299      	cmp	r1, r3
 800519c:	d101      	bne.n	80051a2 <vTaskPriorityInherit+0x52>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <vTaskPriorityInherit+0x54>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d03a      	beq.n	800521e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe f813 	bl	80031d8 <uxListRemove>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	491d      	ldr	r1, [pc, #116]	; (8005234 <vTaskPriorityInherit+0xe4>)
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10a      	bne.n	80051e4 <vTaskPriorityInherit+0x94>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	2201      	movs	r2, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43da      	mvns	r2, r3
 80051da:	4b17      	ldr	r3, [pc, #92]	; (8005238 <vTaskPriorityInherit+0xe8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4013      	ands	r3, r2
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <vTaskPriorityInherit+0xe8>)
 80051e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <vTaskPriorityInherit+0xe0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	2201      	movs	r2, #1
 80051f4:	409a      	lsls	r2, r3
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <vTaskPriorityInherit+0xe8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <vTaskPriorityInherit+0xe8>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vTaskPriorityInherit+0xe4>)
 800520e:	441a      	add	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f7fd ff81 	bl	800311e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800521c:	e004      	b.n	8005228 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <vTaskPriorityInherit+0xe0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20003cc0 	.word	0x20003cc0
 8005234:	20003cc4 	.word	0x20003cc4
 8005238:	20003dc8 	.word	0x20003dc8

0800523c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d06c      	beq.n	800532c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <xTaskPriorityDisinherit+0xfc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d009      	beq.n	8005270 <xTaskPriorityDisinherit+0x34>
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e7fe      	b.n	800526e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <xTaskPriorityDisinherit+0x50>
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	e7fe      	b.n	800528a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	429a      	cmp	r2, r3
 80052a0:	d044      	beq.n	800532c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d140      	bne.n	800532c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd ff92 	bl	80031d8 <uxListRemove>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d115      	bne.n	80052e6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	491f      	ldr	r1, [pc, #124]	; (800533c <xTaskPriorityDisinherit+0x100>)
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xTaskPriorityDisinherit+0xaa>
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2201      	movs	r2, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43da      	mvns	r2, r3
 80052dc:	4b18      	ldr	r3, [pc, #96]	; (8005340 <xTaskPriorityDisinherit+0x104>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4013      	ands	r3, r2
 80052e2:	4a17      	ldr	r2, [pc, #92]	; (8005340 <xTaskPriorityDisinherit+0x104>)
 80052e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f1c3 0207 	rsb	r2, r3, #7
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	2201      	movs	r2, #1
 8005300:	409a      	lsls	r2, r3
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <xTaskPriorityDisinherit+0x104>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4313      	orrs	r3, r2
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <xTaskPriorityDisinherit+0x104>)
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4a08      	ldr	r2, [pc, #32]	; (800533c <xTaskPriorityDisinherit+0x100>)
 800531a:	441a      	add	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f7fd fefb 	bl	800311e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800532c:	697b      	ldr	r3, [r7, #20]
	}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20003cc0 	.word	0x20003cc0
 800533c:	20003cc4 	.word	0x20003cc4
 8005340:	20003dc8 	.word	0x20003dc8

08005344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005356:	3201      	adds	r2, #1
 8005358:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 800535c:	681b      	ldr	r3, [r3, #0]
	}
 800535e:	4618      	mov	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	20003cc0 	.word	0x20003cc0

0800536c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005376:	4b29      	ldr	r3, [pc, #164]	; (800541c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800537c:	4b28      	ldr	r3, [pc, #160]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3304      	adds	r3, #4
 8005382:	4618      	mov	r0, r3
 8005384:	f7fd ff28 	bl	80031d8 <uxListRemove>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	2201      	movs	r2, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4013      	ands	r3, r2
 80053a2:	4a20      	ldr	r2, [pc, #128]	; (8005424 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ac:	d10a      	bne.n	80053c4 <prvAddCurrentTaskToDelayedList+0x58>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053b4:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	481a      	ldr	r0, [pc, #104]	; (8005428 <prvAddCurrentTaskToDelayedList+0xbc>)
 80053be:	f7fd feae 	bl	800311e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053c2:	e026      	b.n	8005412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053cc:	4b14      	ldr	r3, [pc, #80]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d209      	bcs.n	80053f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <prvAddCurrentTaskToDelayedList+0xc0>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f7fd febc 	bl	8003166 <vListInsert>
}
 80053ee:	e010      	b.n	8005412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fd feb2 	bl	8003166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d202      	bcs.n	8005412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20003dc4 	.word	0x20003dc4
 8005420:	20003cc0 	.word	0x20003cc0
 8005424:	20003dc8 	.word	0x20003dc8
 8005428:	20003dac 	.word	0x20003dac
 800542c:	20003d7c 	.word	0x20003d7c
 8005430:	20003d78 	.word	0x20003d78
 8005434:	20003de0 	.word	0x20003de0

08005438 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	461a      	mov	r2, r3
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f002 f96d 	bl	800772c <tcpip_send_msg_wait_sem>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8005456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <netconn_apimsg+0x2e>
    return apimsg->err;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005464:	e001      	b.n	800546a <netconn_apimsg+0x32>
  }
  return err;
 8005466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	603a      	str	r2, [r7, #0]
 800547e:	71fb      	strb	r3, [r7, #7]
 8005480:	460b      	mov	r3, r1
 8005482:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 ff83 	bl	8006394 <netconn_alloc>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d054      	beq.n	8005540 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005496:	79bb      	ldrb	r3, [r7, #6]
 8005498:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800549e:	f107 030c 	add.w	r3, r7, #12
 80054a2:	4619      	mov	r1, r3
 80054a4:	4829      	ldr	r0, [pc, #164]	; (800554c <netconn_new_with_proto_and_callback+0xd8>)
 80054a6:	f7ff ffc7 	bl	8005438 <netconn_apimsg>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 80054b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d043      	beq.n	8005540 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <netconn_new_with_proto_and_callback+0x58>
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <netconn_new_with_proto_and_callback+0xdc>)
 80054c2:	2289      	movs	r2, #137	; 0x89
 80054c4:	4923      	ldr	r1, [pc, #140]	; (8005554 <netconn_new_with_proto_and_callback+0xe0>)
 80054c6:	4824      	ldr	r0, [pc, #144]	; (8005558 <netconn_new_with_proto_and_callback+0xe4>)
 80054c8:	f00f fc0e 	bl	8014ce8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	3310      	adds	r3, #16
 80054d0:	4618      	mov	r0, r3
 80054d2:	f00e fba5 	bl	8013c20 <sys_mbox_valid>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <netconn_new_with_proto_and_callback+0x74>
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <netconn_new_with_proto_and_callback+0xdc>)
 80054de:	228a      	movs	r2, #138	; 0x8a
 80054e0:	491e      	ldr	r1, [pc, #120]	; (800555c <netconn_new_with_proto_and_callback+0xe8>)
 80054e2:	481d      	ldr	r0, [pc, #116]	; (8005558 <netconn_new_with_proto_and_callback+0xe4>)
 80054e4:	f00f fc00 	bl	8014ce8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	3314      	adds	r3, #20
 80054ec:	4618      	mov	r0, r3
 80054ee:	f00e fb97 	bl	8013c20 <sys_mbox_valid>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <netconn_new_with_proto_and_callback+0x90>
 80054f8:	4b15      	ldr	r3, [pc, #84]	; (8005550 <netconn_new_with_proto_and_callback+0xdc>)
 80054fa:	228c      	movs	r2, #140	; 0x8c
 80054fc:	4918      	ldr	r1, [pc, #96]	; (8005560 <netconn_new_with_proto_and_callback+0xec>)
 80054fe:	4816      	ldr	r0, [pc, #88]	; (8005558 <netconn_new_with_proto_and_callback+0xe4>)
 8005500:	f00f fbf2 	bl	8014ce8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	330c      	adds	r3, #12
 8005508:	4618      	mov	r0, r3
 800550a:	f00e fc18 	bl	8013d3e <sys_sem_valid>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <netconn_new_with_proto_and_callback+0xac>
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <netconn_new_with_proto_and_callback+0xdc>)
 8005516:	228f      	movs	r2, #143	; 0x8f
 8005518:	4912      	ldr	r1, [pc, #72]	; (8005564 <netconn_new_with_proto_and_callback+0xf0>)
 800551a:	480f      	ldr	r0, [pc, #60]	; (8005558 <netconn_new_with_proto_and_callback+0xe4>)
 800551c:	f00f fbe4 	bl	8014ce8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	330c      	adds	r3, #12
 8005524:	4618      	mov	r0, r3
 8005526:	f00e fbfd 	bl	8013d24 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	3310      	adds	r3, #16
 800552e:	4618      	mov	r0, r3
 8005530:	f00e fada 	bl	8013ae8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005536:	2007      	movs	r0, #7
 8005538:	f007 f93c 	bl	800c7b4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005542:	4618      	mov	r0, r3
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	0800633d 	.word	0x0800633d
 8005550:	08015c44 	.word	0x08015c44
 8005554:	08015c78 	.word	0x08015c78
 8005558:	08015c9c 	.word	0x08015c9c
 800555c:	08015cc4 	.word	0x08015cc4
 8005560:	08015cdc 	.word	0x08015cdc
 8005564:	08015d00 	.word	0x08015d00

08005568 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <netconn_delete+0x12>
    return ERR_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e016      	b.n	80055a8 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800557e:	2329      	movs	r3, #41	; 0x29
 8005580:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4619      	mov	r1, r3
 8005588:	4809      	ldr	r0, [pc, #36]	; (80055b0 <netconn_delete+0x48>)
 800558a:	f7ff ff55 	bl	8005438 <netconn_apimsg>
 800558e:	4603      	mov	r3, r0
 8005590:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8005592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <netconn_delete+0x38>
    return err;
 800559a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800559e:	e003      	b.n	80055a8 <netconn_delete+0x40>
  }

  netconn_free(conn);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 ff67 	bl	8006474 <netconn_free>

  return ERR_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	080068f9 	.word	0x080068f9

080055b4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d108      	bne.n	80055da <netconn_bind+0x26>
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <netconn_bind+0x5c>)
 80055ca:	22ff      	movs	r2, #255	; 0xff
 80055cc:	4911      	ldr	r1, [pc, #68]	; (8005614 <netconn_bind+0x60>)
 80055ce:	4812      	ldr	r0, [pc, #72]	; (8005618 <netconn_bind+0x64>)
 80055d0:	f00f fb8a 	bl	8014ce8 <iprintf>
 80055d4:	f06f 030f 	mvn.w	r3, #15
 80055d8:	e015      	b.n	8005606 <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <netconn_bind+0x68>)
 80055e2:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	4619      	mov	r1, r3
 80055f6:	480a      	ldr	r0, [pc, #40]	; (8005620 <netconn_bind+0x6c>)
 80055f8:	f7ff ff1e 	bl	8005438 <netconn_apimsg>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8005602:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08015c44 	.word	0x08015c44
 8005614:	08015d7c 	.word	0x08015d7c
 8005618:	08015c9c 	.word	0x08015c9c
 800561c:	080189c4 	.word	0x080189c4
 8005620:	08006afd 	.word	0x08006afd

08005624 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <netconn_listen_with_backlog+0x26>
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <netconn_listen_with_backlog+0x48>)
 8005638:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800563c:	490c      	ldr	r1, [pc, #48]	; (8005670 <netconn_listen_with_backlog+0x4c>)
 800563e:	480d      	ldr	r0, [pc, #52]	; (8005674 <netconn_listen_with_backlog+0x50>)
 8005640:	f00f fb52 	bl	8014ce8 <iprintf>
 8005644:	f06f 030f 	mvn.w	r3, #15
 8005648:	e00b      	b.n	8005662 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800564e:	f107 0308 	add.w	r3, r7, #8
 8005652:	4619      	mov	r1, r3
 8005654:	4808      	ldr	r0, [pc, #32]	; (8005678 <netconn_listen_with_backlog+0x54>)
 8005656:	f7ff feef 	bl	8005438 <netconn_apimsg>
 800565a:	4603      	mov	r3, r0
 800565c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800565e:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08015c44 	.word	0x08015c44
 8005670:	08015ddc 	.word	0x08015ddc
 8005674:	08015c9c 	.word	0x08015c9c
 8005678:	08006bbd 	.word	0x08006bbd

0800567c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <netconn_accept+0x24>
 800568c:	4b34      	ldr	r3, [pc, #208]	; (8005760 <netconn_accept+0xe4>)
 800568e:	f240 128d 	movw	r2, #397	; 0x18d
 8005692:	4934      	ldr	r1, [pc, #208]	; (8005764 <netconn_accept+0xe8>)
 8005694:	4834      	ldr	r0, [pc, #208]	; (8005768 <netconn_accept+0xec>)
 8005696:	f00f fb27 	bl	8014ce8 <iprintf>
 800569a:	f06f 030f 	mvn.w	r3, #15
 800569e:	e05b      	b.n	8005758 <netconn_accept+0xdc>
  *new_conn = NULL;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d109      	bne.n	80056c0 <netconn_accept+0x44>
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <netconn_accept+0xe4>)
 80056ae:	f240 128f 	movw	r2, #399	; 0x18f
 80056b2:	492e      	ldr	r1, [pc, #184]	; (800576c <netconn_accept+0xf0>)
 80056b4:	482c      	ldr	r0, [pc, #176]	; (8005768 <netconn_accept+0xec>)
 80056b6:	f00f fb17 	bl	8014ce8 <iprintf>
 80056ba:	f06f 030f 	mvn.w	r3, #15
 80056be:	e04b      	b.n	8005758 <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80056c6:	f113 0f0c 	cmn.w	r3, #12
 80056ca:	da03      	bge.n	80056d4 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80056d2:	e041      	b.n	8005758 <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3314      	adds	r3, #20
 80056d8:	4618      	mov	r0, r3
 80056da:	f00e faa1 	bl	8013c20 <sys_mbox_valid>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <netconn_accept+0x6e>
    return ERR_CLSD;
 80056e4:	f06f 030e 	mvn.w	r3, #14
 80056e8:	e036      	b.n	8005758 <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3314      	adds	r3, #20
 80056ee:	f107 010c 	add.w	r1, r7, #12
 80056f2:	2200      	movs	r2, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f00e fa38 	bl	8013b6a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <netconn_accept+0x96>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	2200      	movs	r2, #0
 800570c:	2101      	movs	r1, #1
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a16      	ldr	r2, [pc, #88]	; (8005770 <netconn_accept+0xf4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d102      	bne.n	8005720 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800571a:	f06f 030c 	mvn.w	r3, #12
 800571e:	e01b      	b.n	8005758 <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d114      	bne.n	8005750 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <netconn_accept+0xce>
 800572c:	f00e fb88 	bl	8013e40 <sys_arch_protect>
 8005730:	6138      	str	r0, [r7, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005738:	f113 0f0c 	cmn.w	r3, #12
 800573c:	db02      	blt.n	8005744 <netconn_accept+0xc8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	22f1      	movs	r2, #241	; 0xf1
 8005742:	721a      	strb	r2, [r3, #8]
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f00e fb89 	bl	8013e5c <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800574a:	f06f 030e 	mvn.w	r3, #14
 800574e:	e003      	b.n	8005758 <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8005756:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08015c44 	.word	0x08015c44
 8005764:	08015dfc 	.word	0x08015dfc
 8005768:	08015c9c 	.word	0x08015c9c
 800576c:	08015e1c 	.word	0x08015e1c
 8005770:	20004478 	.word	0x20004478

08005774 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <netconn_recv_data+0x28>
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <netconn_recv_data+0x188>)
 800578a:	f240 12e7 	movw	r2, #487	; 0x1e7
 800578e:	495c      	ldr	r1, [pc, #368]	; (8005900 <netconn_recv_data+0x18c>)
 8005790:	485c      	ldr	r0, [pc, #368]	; (8005904 <netconn_recv_data+0x190>)
 8005792:	f00f faa9 	bl	8014ce8 <iprintf>
 8005796:	f06f 030f 	mvn.w	r3, #15
 800579a:	e0aa      	b.n	80058f2 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <netconn_recv_data+0x48>
 80057a8:	4b54      	ldr	r3, [pc, #336]	; (80058fc <netconn_recv_data+0x188>)
 80057aa:	f240 12e9 	movw	r2, #489	; 0x1e9
 80057ae:	4956      	ldr	r1, [pc, #344]	; (8005908 <netconn_recv_data+0x194>)
 80057b0:	4854      	ldr	r0, [pc, #336]	; (8005904 <netconn_recv_data+0x190>)
 80057b2:	f00f fa99 	bl	8014ce8 <iprintf>
 80057b6:	f06f 030f 	mvn.w	r3, #15
 80057ba:	e09a      	b.n	80058f2 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d115      	bne.n	80057f4 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3310      	adds	r3, #16
 80057cc:	4618      	mov	r0, r3
 80057ce:	f00e fa27 	bl	8013c20 <sys_mbox_valid>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10d      	bne.n	80057f4 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3314      	adds	r3, #20
 80057dc:	4618      	mov	r0, r3
 80057de:	f00e fa1f 	bl	8013c20 <sys_mbox_valid>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <netconn_recv_data+0x7a>
 80057e8:	f06f 030a 	mvn.w	r3, #10
 80057ec:	e081      	b.n	80058f2 <netconn_recv_data+0x17e>
 80057ee:	f06f 030e 	mvn.w	r3, #14
 80057f2:	e07e      	b.n	80058f2 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3310      	adds	r3, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f00e fa11 	bl	8013c20 <sys_mbox_valid>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <netconn_recv_data+0xa4>
 8005804:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <netconn_recv_data+0x188>)
 8005806:	f240 12f5 	movw	r2, #501	; 0x1f5
 800580a:	4940      	ldr	r1, [pc, #256]	; (800590c <netconn_recv_data+0x198>)
 800580c:	483d      	ldr	r0, [pc, #244]	; (8005904 <netconn_recv_data+0x190>)
 800580e:	f00f fa6b 	bl	8014ce8 <iprintf>
 8005812:	f06f 030a 	mvn.w	r3, #10
 8005816:	e06c      	b.n	80058f2 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800581e:	f113 0f0c 	cmn.w	r3, #12
 8005822:	da03      	bge.n	800582c <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800582a:	e062      	b.n	80058f2 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3310      	adds	r3, #16
 8005830:	f107 0120 	add.w	r1, r7, #32
 8005834:	2200      	movs	r2, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f00e f997 	bl	8013b6a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005844:	2b10      	cmp	r3, #16
 8005846:	d138      	bne.n	80058ba <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	891b      	ldrh	r3, [r3, #8]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e001      	b.n	800585e <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	4619      	mov	r1, r3
 8005864:	482a      	ldr	r0, [pc, #168]	; (8005910 <netconn_recv_data+0x19c>)
 8005866:	f7ff fde7 	bl	8005438 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d120      	bne.n	80058b2 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <netconn_recv_data+0x110>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	2200      	movs	r2, #0
 800587e:	2101      	movs	r1, #1
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <netconn_recv_data+0x12a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800589c:	e029      	b.n	80058f2 <netconn_recv_data+0x17e>
 800589e:	f06f 030d 	mvn.w	r3, #13
 80058a2:	e026      	b.n	80058f2 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80058a4:	2101      	movs	r1, #1
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f926 	bl	8005af8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80058ac:	f06f 030e 	mvn.w	r3, #14
 80058b0:	e01f      	b.n	80058f2 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	891b      	ldrh	r3, [r3, #8]
 80058b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80058b8:	e00d      	b.n	80058d6 <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <netconn_recv_data+0x15a>
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <netconn_recv_data+0x188>)
 80058c2:	f240 223e 	movw	r2, #574	; 0x23e
 80058c6:	4913      	ldr	r1, [pc, #76]	; (8005914 <netconn_recv_data+0x1a0>)
 80058c8:	480e      	ldr	r0, [pc, #56]	; (8005904 <netconn_recv_data+0x190>)
 80058ca:	f00f fa0d 	bl	8014ce8 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	891b      	ldrh	r3, [r3, #8]
 80058d4:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <netconn_recv_data+0x176>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058e4:	2101      	movs	r1, #1
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08015c44 	.word	0x08015c44
 8005900:	08015e3c 	.word	0x08015e3c
 8005904:	08015c9c 	.word	0x08015c9c
 8005908:	08015e5c 	.word	0x08015e5c
 800590c:	08015e78 	.word	0x08015e78
 8005910:	08006d41 	.word	0x08006d41
 8005914:	08015e98 	.word	0x08015e98

08005918 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <netconn_recv+0x28>
 800592c:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <netconn_recv+0xdc>)
 800592e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8005932:	4931      	ldr	r1, [pc, #196]	; (80059f8 <netconn_recv+0xe0>)
 8005934:	4831      	ldr	r0, [pc, #196]	; (80059fc <netconn_recv+0xe4>)
 8005936:	f00f f9d7 	bl	8014ce8 <iprintf>
 800593a:	f06f 030f 	mvn.w	r3, #15
 800593e:	e054      	b.n	80059ea <netconn_recv+0xd2>
  *new_buf = NULL;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <netconn_recv+0x48>
 800594c:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <netconn_recv+0xdc>)
 800594e:	f240 2276 	movw	r2, #630	; 0x276
 8005952:	492b      	ldr	r1, [pc, #172]	; (8005a00 <netconn_recv+0xe8>)
 8005954:	4829      	ldr	r0, [pc, #164]	; (80059fc <netconn_recv+0xe4>)
 8005956:	f00f f9c7 	bl	8014ce8 <iprintf>
 800595a:	f06f 030f 	mvn.w	r3, #15
 800595e:	e044      	b.n	80059ea <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005968:	2b10      	cmp	r3, #16
 800596a:	d139      	bne.n	80059e0 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005970:	2006      	movs	r0, #6
 8005972:	f006 fecd 	bl	800c710 <memp_malloc>
 8005976:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <netconn_recv+0x6c>
      return ERR_MEM;
 800597e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005982:	e032      	b.n	80059ea <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fef2 	bl	8005774 <netconn_recv_data>
 8005990:	4603      	mov	r3, r0
 8005992:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8005994:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	2006      	movs	r0, #6
 80059a0:	f006 ff08 	bl	800c7b4 <memp_free>
      return err;
 80059a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059a8:	e01f      	b.n	80059ea <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <netconn_recv+0xa6>
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <netconn_recv+0xdc>)
 80059b2:	f240 228a 	movw	r2, #650	; 0x28a
 80059b6:	4913      	ldr	r1, [pc, #76]	; (8005a04 <netconn_recv+0xec>)
 80059b8:	4810      	ldr	r0, [pc, #64]	; (80059fc <netconn_recv+0xe4>)
 80059ba:	f00f f995 	bl	8014ce8 <iprintf>

    buf->p = p;
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2200      	movs	r2, #0
 80059ce:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e004      	b.n	80059ea <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fec6 	bl	8005774 <netconn_recv_data>
 80059e8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	08015c44 	.word	0x08015c44
 80059f8:	08015e3c 	.word	0x08015e3c
 80059fc:	08015c9c 	.word	0x08015c9c
 8005a00:	08015e5c 	.word	0x08015e5c
 8005a04:	08015ea4 	.word	0x08015ea4

08005a08 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08a      	sub	sp, #40	; 0x28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <netconn_write_partly+0x28>
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <netconn_write_partly+0xdc>)
 8005a1e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8005a22:	4931      	ldr	r1, [pc, #196]	; (8005ae8 <netconn_write_partly+0xe0>)
 8005a24:	4831      	ldr	r0, [pc, #196]	; (8005aec <netconn_write_partly+0xe4>)
 8005a26:	f00f f95f 	bl	8014ce8 <iprintf>
 8005a2a:	f06f 030f 	mvn.w	r3, #15
 8005a2e:	e054      	b.n	8005ada <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d009      	beq.n	8005a50 <netconn_write_partly+0x48>
 8005a3c:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <netconn_write_partly+0xdc>)
 8005a3e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8005a42:	492b      	ldr	r1, [pc, #172]	; (8005af0 <netconn_write_partly+0xe8>)
 8005a44:	4829      	ldr	r0, [pc, #164]	; (8005aec <netconn_write_partly+0xe4>)
 8005a46:	f00f f94f 	bl	8014ce8 <iprintf>
 8005a4a:	f06f 0305 	mvn.w	r3, #5
 8005a4e:	e044      	b.n	8005ada <netconn_write_partly+0xd2>
  if (size == 0) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <netconn_write_partly+0x52>
    return ERR_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e03f      	b.n	8005ada <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	7f1b      	ldrb	r3, [r3, #28]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <netconn_write_partly+0x68>
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <netconn_write_partly+0x6c>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <netconn_write_partly+0x6e>
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8005a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <netconn_write_partly+0x86>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8005a88:	f06f 0305 	mvn.w	r3, #5
 8005a8c:	e025      	b.n	8005ada <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005aa0:	f107 0310 	add.w	r3, r7, #16
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4813      	ldr	r0, [pc, #76]	; (8005af4 <netconn_write_partly+0xec>)
 8005aa8:	f7ff fcc6 	bl	8005438 <netconn_apimsg>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8005ab2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10d      	bne.n	8005ad6 <netconn_write_partly+0xce>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <netconn_write_partly+0xce>
    if (dontblock) {
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8005ad6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08015c44 	.word	0x08015c44
 8005ae8:	08015ecc 	.word	0x08015ecc
 8005aec:	08015c9c 	.word	0x08015c9c
 8005af0:	08015ee8 	.word	0x08015ee8
 8005af4:	0800711d 	.word	0x0800711d

08005af8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <netconn_close_shutdown+0x26>
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <netconn_close_shutdown+0x50>)
 8005b0c:	f44f 724a 	mov.w	r2, #808	; 0x328
 8005b10:	490e      	ldr	r1, [pc, #56]	; (8005b4c <netconn_close_shutdown+0x54>)
 8005b12:	480f      	ldr	r0, [pc, #60]	; (8005b50 <netconn_close_shutdown+0x58>)
 8005b14:	f00f f8e8 	bl	8014ce8 <iprintf>
 8005b18:	f06f 030f 	mvn.w	r3, #15
 8005b1c:	e00f      	b.n	8005b3e <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005b26:	2329      	movs	r3, #41	; 0x29
 8005b28:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4808      	ldr	r0, [pc, #32]	; (8005b54 <netconn_close_shutdown+0x5c>)
 8005b32:	f7ff fc81 	bl	8005438 <netconn_apimsg>
 8005b36:	4603      	mov	r3, r0
 8005b38:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8005b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08015c44 	.word	0x08015c44
 8005b4c:	08015f0c 	.word	0x08015f0c
 8005b50:	08015c9c 	.word	0x08015c9c
 8005b54:	0800727d 	.word	0x0800727d

08005b58 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8005b60:	2103      	movs	r1, #3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ffc8 	bl	8005af8 <netconn_close_shutdown>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <recv_udp+0x20>
 8005b88:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <recv_udp+0xe8>)
 8005b8a:	22b1      	movs	r2, #177	; 0xb1
 8005b8c:	4934      	ldr	r1, [pc, #208]	; (8005c60 <recv_udp+0xec>)
 8005b8e:	4835      	ldr	r0, [pc, #212]	; (8005c64 <recv_udp+0xf0>)
 8005b90:	f00f f8aa 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <recv_udp+0x32>
 8005b9a:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <recv_udp+0xe8>)
 8005b9c:	22b2      	movs	r2, #178	; 0xb2
 8005b9e:	4932      	ldr	r1, [pc, #200]	; (8005c68 <recv_udp+0xf4>)
 8005ba0:	4830      	ldr	r0, [pc, #192]	; (8005c64 <recv_udp+0xf0>)
 8005ba2:	f00f f8a1 	bl	8014ce8 <iprintf>
  conn = (struct netconn *)arg;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d103      	bne.n	8005bb8 <recv_udp+0x44>
    pbuf_free(p);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f007 fb61 	bl	800d278 <pbuf_free>
    return;
 8005bb6:	e04d      	b.n	8005c54 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d005      	beq.n	8005bce <recv_udp+0x5a>
 8005bc2:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <recv_udp+0xe8>)
 8005bc4:	22ba      	movs	r2, #186	; 0xba
 8005bc6:	4929      	ldr	r1, [pc, #164]	; (8005c6c <recv_udp+0xf8>)
 8005bc8:	4826      	ldr	r0, [pc, #152]	; (8005c64 <recv_udp+0xf0>)
 8005bca:	f00f f88d 	bl	8014ce8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f00e f824 	bl	8013c20 <sys_mbox_valid>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f007 fb4a 	bl	800d278 <pbuf_free>
    return;
 8005be4:	e036      	b.n	8005c54 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005be6:	2006      	movs	r0, #6
 8005be8:	f006 fd92 	bl	800c710 <memp_malloc>
 8005bec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <recv_udp+0x88>
    pbuf_free(p);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f007 fb3f 	bl	800d278 <pbuf_free>
    return;
 8005bfa:	e02b      	b.n	8005c54 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <recv_udp+0xa0>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	e000      	b.n	8005c16 <recv_udp+0xa2>
 8005c14:	2300      	movs	r3, #0
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c1e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	891b      	ldrh	r3, [r3, #8]
 8005c24:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3310      	adds	r3, #16
 8005c2a:	69b9      	ldr	r1, [r7, #24]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00d ff82 	bl	8013b36 <sys_mbox_trypost>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <recv_udp+0xcc>
    netbuf_delete(buf);
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	f001 fbc7 	bl	80073cc <netbuf_delete>
    return;
 8005c3e:	e009      	b.n	8005c54 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <recv_udp+0xe0>
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	8afa      	ldrh	r2, [r7, #22]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	69f8      	ldr	r0, [r7, #28]
 8005c52:	4798      	blx	r3
  }
}
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08015f70 	.word	0x08015f70
 8005c60:	08015fa4 	.word	0x08015fa4
 8005c64:	08015fc8 	.word	0x08015fc8
 8005c68:	08015ff0 	.word	0x08015ff0
 8005c6c:	08016010 	.word	0x08016010

08005c70 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <recv_tcp+0x20>
 8005c84:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <recv_tcp+0xfc>)
 8005c86:	22f9      	movs	r2, #249	; 0xf9
 8005c88:	4939      	ldr	r1, [pc, #228]	; (8005d70 <recv_tcp+0x100>)
 8005c8a:	483a      	ldr	r0, [pc, #232]	; (8005d74 <recv_tcp+0x104>)
 8005c8c:	f00f f82c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <recv_tcp+0x32>
 8005c96:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <recv_tcp+0xfc>)
 8005c98:	22fa      	movs	r2, #250	; 0xfa
 8005c9a:	4937      	ldr	r1, [pc, #220]	; (8005d78 <recv_tcp+0x108>)
 8005c9c:	4835      	ldr	r0, [pc, #212]	; (8005d74 <recv_tcp+0x104>)
 8005c9e:	f00f f823 	bl	8014ce8 <iprintf>
  conn = (struct netconn *)arg;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <recv_tcp+0x42>
    return ERR_VAL;
 8005cac:	f06f 0305 	mvn.w	r3, #5
 8005cb0:	e057      	b.n	8005d62 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d006      	beq.n	8005cca <recv_tcp+0x5a>
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <recv_tcp+0xfc>)
 8005cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc2:	492e      	ldr	r1, [pc, #184]	; (8005d7c <recv_tcp+0x10c>)
 8005cc4:	482b      	ldr	r0, [pc, #172]	; (8005d74 <recv_tcp+0x104>)
 8005cc6:	f00f f80f 	bl	8014ce8 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	3310      	adds	r3, #16
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f00d ffa6 	bl	8013c20 <sys_mbox_valid>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	891b      	ldrh	r3, [r3, #8]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	68b8      	ldr	r0, [r7, #8]
 8005ce8:	f008 faf4 	bl	800e2d4 <tcp_recved>
      pbuf_free(p);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f007 fac3 	bl	800d278 <pbuf_free>
    }
    return ERR_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e035      	b.n	8005d62 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8005cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d011      	beq.n	8005d22 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <recv_tcp+0xb2>
 8005d04:	f00e f89c 	bl	8013e40 <sys_arch_protect>
 8005d08:	6178      	str	r0, [r7, #20]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d10:	f113 0f0c 	cmn.w	r3, #12
 8005d14:	db02      	blt.n	8005d1c <recv_tcp+0xac>
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	721a      	strb	r2, [r3, #8]
 8005d1c:	6978      	ldr	r0, [r7, #20]
 8005d1e:	f00e f89d 	bl	8013e5c <sys_arch_unprotect>
  }

  if (p != NULL) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <recv_tcp+0xc0>
    len = p->tot_len;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	891b      	ldrh	r3, [r3, #8]
 8005d2c:	83fb      	strh	r3, [r7, #30]
 8005d2e:	e001      	b.n	8005d34 <recv_tcp+0xc4>
  } else {
    len = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	3310      	adds	r3, #16
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00d fefb 	bl	8013b36 <sys_mbox_trypost>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d4a:	e00a      	b.n	8005d62 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <recv_tcp+0xf0>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	8bfa      	ldrh	r2, [r7, #30]
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	69b8      	ldr	r0, [r7, #24]
 8005d5e:	4798      	blx	r3
  }

  return ERR_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08015f70 	.word	0x08015f70
 8005d70:	08016030 	.word	0x08016030
 8005d74:	08015fc8 	.word	0x08015fc8
 8005d78:	08016054 	.word	0x08016054
 8005d7c:	08016074 	.word	0x08016074

08005d80 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <poll_tcp+0x22>
 8005d94:	4b29      	ldr	r3, [pc, #164]	; (8005e3c <poll_tcp+0xbc>)
 8005d96:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005d9a:	4929      	ldr	r1, [pc, #164]	; (8005e40 <poll_tcp+0xc0>)
 8005d9c:	4829      	ldr	r0, [pc, #164]	; (8005e44 <poll_tcp+0xc4>)
 8005d9e:	f00e ffa3 	bl	8014ce8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d104      	bne.n	8005db4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005daa:	2101      	movs	r1, #1
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f001 f813 	bl	8006dd8 <lwip_netconn_do_writemore>
 8005db2:	e016      	b.n	8005de2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d112      	bne.n	8005de2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <poll_tcp+0x5a>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	7a5b      	ldrb	r3, [r3, #9]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	7a5a      	ldrb	r2, [r3, #9]
 8005dd4:	3a01      	subs	r2, #1
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fc13 	bl	8006608 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	7f1b      	ldrb	r3, [r3, #28]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d021      	beq.n	8005e32 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01d      	beq.n	8005e32 <poll_tcp+0xb2>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dfe:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8005e02:	d316      	bcc.n	8005e32 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d810      	bhi.n	8005e32 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	7f1b      	ldrb	r3, [r3, #28]
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <poll_tcp+0xb2>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	08015f70 	.word	0x08015f70
 8005e40:	08016094 	.word	0x08016094
 8005e44:	08015fc8 	.word	0x08015fc8

08005e48 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <sent_tcp+0x26>
 8005e60:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <sent_tcp+0x9c>)
 8005e62:	f240 1261 	movw	r2, #353	; 0x161
 8005e66:	4920      	ldr	r1, [pc, #128]	; (8005ee8 <sent_tcp+0xa0>)
 8005e68:	4820      	ldr	r0, [pc, #128]	; (8005eec <sent_tcp+0xa4>)
 8005e6a:	f00e ff3d 	bl	8014ce8 <iprintf>

  if (conn) {
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d032      	beq.n	8005eda <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d104      	bne.n	8005e86 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f000 ffaa 	bl	8006dd8 <lwip_netconn_do_writemore>
 8005e84:	e007      	b.n	8005e96 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d103      	bne.n	8005e96 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	6978      	ldr	r0, [r7, #20]
 8005e92:	f000 fbb9 	bl	8006608 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01d      	beq.n	8005eda <sent_tcp+0x92>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ea6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8005eaa:	d316      	bcc.n	8005eda <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d810      	bhi.n	8005eda <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	7f1b      	ldrb	r3, [r3, #28]
 8005ebc:	f023 0310 	bic.w	r3, r3, #16
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <sent_tcp+0x92>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	2102      	movs	r1, #2
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	08015f70 	.word	0x08015f70
 8005ee8:	08016094 	.word	0x08016094
 8005eec:	08015fc8 	.word	0x08015fc8

08005ef0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <err_tcp+0x24>
 8005f06:	4b6c      	ldr	r3, [pc, #432]	; (80060b8 <err_tcp+0x1c8>)
 8005f08:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8005f0c:	496b      	ldr	r1, [pc, #428]	; (80060bc <err_tcp+0x1cc>)
 8005f0e:	486c      	ldr	r0, [pc, #432]	; (80060c0 <err_tcp+0x1d0>)
 8005f10:	f00e feea 	bl	8014ce8 <iprintf>

  conn->pcb.tcp = NULL;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	2200      	movs	r2, #0
 8005f26:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8005f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d114      	bne.n	8005f5a <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <err_tcp+0x7c>
 8005f3a:	f00d ff81 	bl	8013e40 <sys_arch_protect>
 8005f3e:	61f8      	str	r0, [r7, #28]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f46:	f113 0f0c 	cmn.w	r3, #12
 8005f4a:	db02      	blt.n	8005f52 <err_tcp+0x62>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	2200      	movs	r2, #0
 8005f50:	721a      	strb	r2, [r3, #8]
 8005f52:	69f8      	ldr	r0, [r7, #28]
 8005f54:	f00d ff82 	bl	8013e5c <sys_arch_unprotect>
 8005f58:	e008      	b.n	8005f6c <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8005f5a:	f00d ff71 	bl	8013e40 <sys_arch_protect>
 8005f5e:	61b8      	str	r0, [r7, #24]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	721a      	strb	r2, [r3, #8]
 8005f66:	69b8      	ldr	r0, [r7, #24]
 8005f68:	f00d ff78 	bl	8013e5c <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <err_tcp+0x90>
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f7e:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <err_tcp+0xa4>
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f92:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <err_tcp+0xb8>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2102      	movs	r1, #2
 8005fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa6:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	3310      	adds	r3, #16
 8005fac:	4618      	mov	r0, r3
 8005fae:	f00d fe37 	bl	8013c20 <sys_mbox_valid>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	3310      	adds	r3, #16
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f00d fdb9 	bl	8013b36 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f00d fe29 	bl	8013c20 <sys_mbox_valid>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	3314      	adds	r3, #20
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f00d fdab 	bl	8013b36 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d007      	beq.n	8005ff8 <err_tcp+0x108>
 8005fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d003      	beq.n	8005ff8 <err_tcp+0x108>
 8005ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d14d      	bne.n	8006094 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	7f1b      	ldrb	r3, [r3, #28]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	7f1b      	ldrb	r3, [r3, #28]
 8006010:	f023 0304 	bic.w	r3, r3, #4
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d145      	bne.n	80060ac <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <err_tcp+0x146>
 8006028:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <err_tcp+0x1c8>)
 800602a:	f240 12b3 	movw	r2, #435	; 0x1b3
 800602e:	4925      	ldr	r1, [pc, #148]	; (80060c4 <err_tcp+0x1d4>)
 8006030:	4823      	ldr	r0, [pc, #140]	; (80060c0 <err_tcp+0x1d0>)
 8006032:	f00e fe59 	bl	8014ce8 <iprintf>
      conn->current_msg->err = err;
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006048:	6938      	ldr	r0, [r7, #16]
 800604a:	f00d fe78 	bl	8013d3e <sys_sem_valid>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <err_tcp+0x172>
 8006054:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <err_tcp+0x1c8>)
 8006056:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800605a:	491b      	ldr	r1, [pc, #108]	; (80060c8 <err_tcp+0x1d8>)
 800605c:	4818      	ldr	r0, [pc, #96]	; (80060c0 <err_tcp+0x1d0>)
 800605e:	f00e fe43 	bl	8014ce8 <iprintf>
      conn->current_msg = NULL;
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <err_tcp+0x19c>
 800606e:	f00d fee7 	bl	8013e40 <sys_arch_protect>
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800607a:	f113 0f0c 	cmn.w	r3, #12
 800607e:	db02      	blt.n	8006086 <err_tcp+0x196>
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	721a      	strb	r2, [r3, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f00d fee8 	bl	8013e5c <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800608c:	6938      	ldr	r0, [r7, #16]
 800608e:	f00d fe3c 	bl	8013d0a <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8006092:	e00b      	b.n	80060ac <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <err_tcp+0x1be>
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <err_tcp+0x1c8>)
 800609e:	f240 12bd 	movw	r2, #445	; 0x1bd
 80060a2:	490a      	ldr	r1, [pc, #40]	; (80060cc <err_tcp+0x1dc>)
 80060a4:	4806      	ldr	r0, [pc, #24]	; (80060c0 <err_tcp+0x1d0>)
 80060a6:	f00e fe1f 	bl	8014ce8 <iprintf>
  }
}
 80060aa:	e000      	b.n	80060ae <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 80060ac:	bf00      	nop
}
 80060ae:	bf00      	nop
 80060b0:	3728      	adds	r7, #40	; 0x28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	08015f70 	.word	0x08015f70
 80060bc:	08016094 	.word	0x08016094
 80060c0:	08015fc8 	.word	0x08015fc8
 80060c4:	080160a4 	.word	0x080160a4
 80060c8:	080160c0 	.word	0x080160c0
 80060cc:	080160dc 	.word	0x080160dc

080060d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f008 fed9 	bl	800ee98 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80060e6:	490a      	ldr	r1, [pc, #40]	; (8006110 <setup_tcp+0x40>)
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f008 fee7 	bl	800eebc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80060ee:	4909      	ldr	r1, [pc, #36]	; (8006114 <setup_tcp+0x44>)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f008 ff05 	bl	800ef00 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80060f6:	2202      	movs	r2, #2
 80060f8:	4907      	ldr	r1, [pc, #28]	; (8006118 <setup_tcp+0x48>)
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f008 ff5a 	bl	800efb4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006100:	4906      	ldr	r1, [pc, #24]	; (800611c <setup_tcp+0x4c>)
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f008 ff1c 	bl	800ef40 <tcp_err>
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	08005c71 	.word	0x08005c71
 8006114:	08005e49 	.word	0x08005e49
 8006118:	08005d81 	.word	0x08005d81
 800611c:	08005ef1 	.word	0x08005ef1

08006120 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <accept_function+0x1e>
    return ERR_VAL;
 8006138:	f06f 0305 	mvn.w	r3, #5
 800613c:	e08d      	b.n	800625a <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3314      	adds	r3, #20
 8006142:	4618      	mov	r0, r3
 8006144:	f00d fd6c 	bl	8013c20 <sys_mbox_valid>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800614e:	f06f 0305 	mvn.w	r3, #5
 8006152:	e082      	b.n	800625a <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d115      	bne.n	8006186 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3314      	adds	r3, #20
 800615e:	4941      	ldr	r1, [pc, #260]	; (8006264 <accept_function+0x144>)
 8006160:	4618      	mov	r0, r3
 8006162:	f00d fce8 	bl	8013b36 <sys_mbox_trypost>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <accept_function+0x60>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	69f8      	ldr	r0, [r7, #28]
 800617e:	4798      	blx	r3
    }
    return ERR_VAL;
 8006180:	f06f 0305 	mvn.w	r3, #5
 8006184:	e069      	b.n	800625a <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 f8ff 	bl	8006394 <netconn_alloc>
 8006196:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d115      	bne.n	80061ca <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3314      	adds	r3, #20
 80061a2:	4930      	ldr	r1, [pc, #192]	; (8006264 <accept_function+0x144>)
 80061a4:	4618      	mov	r0, r3
 80061a6:	f00d fcc6 	bl	8013b36 <sys_mbox_trypost>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <accept_function+0xa4>
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	69f8      	ldr	r0, [r7, #28]
 80061c2:	4798      	blx	r3
    }
    return ERR_MEM;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c8:	e047      	b.n	800625a <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80061d0:	69b8      	ldr	r0, [r7, #24]
 80061d2:	f7ff ff7d 	bl	80060d0 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	79fa      	ldrb	r2, [r7, #7]
 80061da:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3314      	adds	r3, #20
 80061e0:	69b9      	ldr	r1, [r7, #24]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00d fca7 	bl	8013b36 <sys_mbox_trypost>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02a      	beq.n	8006244 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80061f4:	2100      	movs	r1, #0
 80061f6:	6978      	ldr	r0, [r7, #20]
 80061f8:	f008 fe4e 	bl	800ee98 <tcp_arg>
    tcp_recv(pcb, NULL);
 80061fc:	2100      	movs	r1, #0
 80061fe:	6978      	ldr	r0, [r7, #20]
 8006200:	f008 fe5c 	bl	800eebc <tcp_recv>
    tcp_sent(pcb, NULL);
 8006204:	2100      	movs	r1, #0
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f008 fe7a 	bl	800ef00 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	6978      	ldr	r0, [r7, #20]
 8006212:	f008 fecf 	bl	800efb4 <tcp_poll>
    tcp_err(pcb, NULL);
 8006216:	2100      	movs	r1, #0
 8006218:	6978      	ldr	r0, [r7, #20]
 800621a:	f008 fe91 	bl	800ef40 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2200      	movs	r2, #0
 8006222:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	3310      	adds	r3, #16
 8006228:	4618      	mov	r0, r3
 800622a:	f00d fc5d 	bl	8013ae8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3310      	adds	r3, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f00d fd05 	bl	8013c42 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8006238:	69b8      	ldr	r0, [r7, #24]
 800623a:	f000 f91b 	bl	8006474 <netconn_free>
    return ERR_MEM;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006242:	e00a      	b.n	800625a <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <accept_function+0x138>
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	2200      	movs	r2, #0
 8006252:	2100      	movs	r1, #0
 8006254:	69f8      	ldr	r0, [r7, #28]
 8006256:	4798      	blx	r3
  }

  return ERR_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20004478 	.word	0x20004478

08006268 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d006      	beq.n	800628c <pcb_new+0x24>
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <pcb_new+0xc4>)
 8006280:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8006284:	492a      	ldr	r1, [pc, #168]	; (8006330 <pcb_new+0xc8>)
 8006286:	482b      	ldr	r0, [pc, #172]	; (8006334 <pcb_new+0xcc>)
 8006288:	f00e fd2e 	bl	8014ce8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006296:	2b10      	cmp	r3, #16
 8006298:	d022      	beq.n	80062e0 <pcb_new+0x78>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d133      	bne.n	8006306 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681c      	ldr	r4, [r3, #0]
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f00d faea 	bl	801387e <udp_new_ip_type>
 80062aa:	4603      	mov	r3, r0
 80062ac:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d02a      	beq.n	800630e <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b22      	cmp	r3, #34	; 0x22
 80062c0:	d104      	bne.n	80062cc <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6858      	ldr	r0, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	4917      	ldr	r1, [pc, #92]	; (8006338 <pcb_new+0xd0>)
 80062da:	f00d fa75 	bl	80137c8 <udp_recv>
    }
    break;
 80062de:	e016      	b.n	800630e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681c      	ldr	r4, [r3, #0]
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f008 fdc8 	bl	800ee7c <tcp_new_ip_type>
 80062ec:	4603      	mov	r3, r0
 80062ee:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00b      	beq.n	8006312 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff fee6 	bl	80060d0 <setup_tcp>
    }
    break;
 8006304:	e005      	b.n	8006312 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	22fa      	movs	r2, #250	; 0xfa
 800630a:	711a      	strb	r2, [r3, #4]
    return;
 800630c:	e00a      	b.n	8006324 <pcb_new+0xbc>
    break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <pcb_new+0xac>
    break;
 8006312:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	711a      	strb	r2, [r3, #4]
  }
}
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}
 800632a:	bf00      	nop
 800632c:	08015f70 	.word	0x08015f70
 8006330:	080160f8 	.word	0x080160f8
 8006334:	08015fc8 	.word	0x08015fc8
 8006338:	08005b75 	.word	0x08005b75

0800633c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ff85 	bl	8006268 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d012      	beq.n	800638c <lwip_netconn_do_newconn+0x50>
 8006366:	f00d fd6b 	bl	8013e40 <sys_arch_protect>
 800636a:	60b8      	str	r0, [r7, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006374:	f113 0f0c 	cmn.w	r3, #12
 8006378:	db05      	blt.n	8006386 <lwip_netconn_do_newconn+0x4a>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006384:	721a      	strb	r2, [r3, #8]
 8006386:	68b8      	ldr	r0, [r7, #8]
 8006388:	f00d fd68 	bl	8013e5c <sys_arch_unprotect>
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80063a0:	2007      	movs	r0, #7
 80063a2:	f006 f9b5 	bl	800c710 <memp_malloc>
 80063a6:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <netconn_alloc+0x1e>
    return NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e055      	b.n	800645e <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2200      	movs	r2, #0
 80063b6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	79fa      	ldrb	r2, [r7, #7]
 80063bc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d004      	beq.n	80063d8 <netconn_alloc+0x44>
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d105      	bne.n	80063de <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 80063d2:	2306      	movs	r3, #6
 80063d4:	60fb      	str	r3, [r7, #12]
    break;
 80063d6:	e00a      	b.n	80063ee <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 80063d8:	2306      	movs	r3, #6
 80063da:	60fb      	str	r3, [r7, #12]
    break;
 80063dc:	e007      	b.n	80063ee <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80063de:	4b22      	ldr	r3, [pc, #136]	; (8006468 <netconn_alloc+0xd4>)
 80063e0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80063e4:	4921      	ldr	r1, [pc, #132]	; (800646c <netconn_alloc+0xd8>)
 80063e6:	4822      	ldr	r0, [pc, #136]	; (8006470 <netconn_alloc+0xdc>)
 80063e8:	f00e fc7e 	bl	8014ce8 <iprintf>
    goto free_and_return;
 80063ec:	e032      	b.n	8006454 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3310      	adds	r3, #16
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00d fb59 	bl	8013aac <sys_mbox_new>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d128      	bne.n	8006452 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	330c      	adds	r3, #12
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f00d fc28 	bl	8013c5c <sys_sem_new>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3310      	adds	r3, #16
 8006416:	4618      	mov	r0, r3
 8006418:	f00d fb66 	bl	8013ae8 <sys_mbox_free>
    goto free_and_return;
 800641c:	e01a      	b.n	8006454 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3314      	adds	r3, #20
 8006422:	4618      	mov	r0, r3
 8006424:	f00d fc0d 	bl	8013c42 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006434:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2200      	movs	r2, #0
 8006440:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	771a      	strb	r2, [r3, #28]
  return conn;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	e005      	b.n	800645e <netconn_alloc+0xca>
    goto free_and_return;
 8006452:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	2007      	movs	r0, #7
 8006458:	f006 f9ac 	bl	800c7b4 <memp_free>
  return NULL;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	08015f70 	.word	0x08015f70
 800646c:	08016118 	.word	0x08016118
 8006470:	08015fc8 	.word	0x08015fc8

08006474 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d006      	beq.n	8006492 <netconn_free+0x1e>
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <netconn_free+0x80>)
 8006486:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800648a:	491b      	ldr	r1, [pc, #108]	; (80064f8 <netconn_free+0x84>)
 800648c:	481b      	ldr	r0, [pc, #108]	; (80064fc <netconn_free+0x88>)
 800648e:	f00e fc2b 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3310      	adds	r3, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f00d fbc2 	bl	8013c20 <sys_mbox_valid>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d006      	beq.n	80064b0 <netconn_free+0x3c>
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <netconn_free+0x80>)
 80064a4:	f240 22e2 	movw	r2, #738	; 0x2e2
 80064a8:	4915      	ldr	r1, [pc, #84]	; (8006500 <netconn_free+0x8c>)
 80064aa:	4814      	ldr	r0, [pc, #80]	; (80064fc <netconn_free+0x88>)
 80064ac:	f00e fc1c 	bl	8014ce8 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3314      	adds	r3, #20
 80064b4:	4618      	mov	r0, r3
 80064b6:	f00d fbb3 	bl	8013c20 <sys_mbox_valid>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <netconn_free+0x5a>
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <netconn_free+0x80>)
 80064c2:	f240 22e5 	movw	r2, #741	; 0x2e5
 80064c6:	490f      	ldr	r1, [pc, #60]	; (8006504 <netconn_free+0x90>)
 80064c8:	480c      	ldr	r0, [pc, #48]	; (80064fc <netconn_free+0x88>)
 80064ca:	f00e fc0d 	bl	8014ce8 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	330c      	adds	r3, #12
 80064d2:	4618      	mov	r0, r3
 80064d4:	f00d fc26 	bl	8013d24 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	330c      	adds	r3, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f00d fc3f 	bl	8013d60 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	2007      	movs	r0, #7
 80064e6:	f006 f965 	bl	800c7b4 <memp_free>
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08015f70 	.word	0x08015f70
 80064f8:	08016140 	.word	0x08016140
 80064fc:	08015fc8 	.word	0x08015fc8
 8006500:	08016170 	.word	0x08016170
 8006504:	080161ac 	.word	0x080161ac

08006508 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3310      	adds	r3, #16
 8006514:	4618      	mov	r0, r3
 8006516:	f00d fb83 	bl	8013c20 <sys_mbox_valid>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d035      	beq.n	800658c <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006520:	e01e      	b.n	8006560 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652a:	2b10      	cmp	r3, #16
 800652c:	d114      	bne.n	8006558 <netconn_drain+0x50>
        if (mem != NULL) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	891b      	ldrh	r3, [r3, #8]
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f007 fec2 	bl	800e2d4 <tcp_recved>
          }
          pbuf_free(p);
 8006550:	6978      	ldr	r0, [r7, #20]
 8006552:	f006 fe91 	bl	800d278 <pbuf_free>
 8006556:	e003      	b.n	8006560 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ff36 	bl	80073cc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3310      	adds	r3, #16
 8006564:	f107 020c 	add.w	r2, r7, #12
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f00d fb3c 	bl	8013be8 <sys_arch_mbox_tryfetch>
 8006570:	4603      	mov	r3, r0
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006576:	d1d4      	bne.n	8006522 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3310      	adds	r3, #16
 800657c:	4618      	mov	r0, r3
 800657e:	f00d fab3 	bl	8013ae8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3310      	adds	r3, #16
 8006586:	4618      	mov	r0, r3
 8006588:	f00d fb5b 	bl	8013c42 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3314      	adds	r3, #20
 8006590:	4618      	mov	r0, r3
 8006592:	f00d fb45 	bl	8013c20 <sys_mbox_valid>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02e      	beq.n	80065fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800659c:	e017      	b.n	80065ce <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4a18      	ldr	r2, [pc, #96]	; (8006604 <netconn_drain+0xfc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f7ff ffac 	bl	8006508 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	f007 fcf3 	bl	800dfa8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 80065c8:	6938      	ldr	r0, [r7, #16]
 80065ca:	f7ff ff53 	bl	8006474 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3314      	adds	r3, #20
 80065d2:	f107 020c 	add.w	r2, r7, #12
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f00d fb05 	bl	8013be8 <sys_arch_mbox_tryfetch>
 80065de:	4603      	mov	r3, r0
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e4:	d1db      	bne.n	800659e <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3314      	adds	r3, #20
 80065ea:	4618      	mov	r0, r3
 80065ec:	f00d fa7c 	bl	8013ae8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3314      	adds	r3, #20
 80065f4:	4618      	mov	r0, r3
 80065f6:	f00d fb24 	bl	8013c42 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20004478 	.word	0x20004478

08006608 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <lwip_netconn_do_close_internal+0x24>
 800661e:	4baa      	ldr	r3, [pc, #680]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 8006620:	f240 3243 	movw	r2, #835	; 0x343
 8006624:	49a9      	ldr	r1, [pc, #676]	; (80068cc <lwip_netconn_do_close_internal+0x2c4>)
 8006626:	48aa      	ldr	r0, [pc, #680]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 8006628:	f00e fb5e 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006634:	2b10      	cmp	r3, #16
 8006636:	d006      	beq.n	8006646 <lwip_netconn_do_close_internal+0x3e>
 8006638:	4ba3      	ldr	r3, [pc, #652]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 800663a:	f44f 7251 	mov.w	r2, #836	; 0x344
 800663e:	49a5      	ldr	r1, [pc, #660]	; (80068d4 <lwip_netconn_do_close_internal+0x2cc>)
 8006640:	48a3      	ldr	r0, [pc, #652]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 8006642:	f00e fb51 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d006      	beq.n	800665c <lwip_netconn_do_close_internal+0x54>
 800664e:	4b9e      	ldr	r3, [pc, #632]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 8006650:	f240 3245 	movw	r2, #837	; 0x345
 8006654:	49a0      	ldr	r1, [pc, #640]	; (80068d8 <lwip_netconn_do_close_internal+0x2d0>)
 8006656:	489e      	ldr	r0, [pc, #632]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 8006658:	f00e fb46 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <lwip_netconn_do_close_internal+0x6a>
 8006664:	4b98      	ldr	r3, [pc, #608]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 8006666:	f240 3246 	movw	r2, #838	; 0x346
 800666a:	499c      	ldr	r1, [pc, #624]	; (80068dc <lwip_netconn_do_close_internal+0x2d4>)
 800666c:	4898      	ldr	r0, [pc, #608]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 800666e:	f00e fb3b 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <lwip_netconn_do_close_internal+0x80>
 800667a:	4b93      	ldr	r3, [pc, #588]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 800667c:	f240 3247 	movw	r2, #839	; 0x347
 8006680:	4997      	ldr	r1, [pc, #604]	; (80068e0 <lwip_netconn_do_close_internal+0x2d8>)
 8006682:	4893      	ldr	r0, [pc, #588]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 8006684:	f00e fb30 	bl	8014ce8 <iprintf>

  tpcb = conn->pcb.tcp;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	7a1b      	ldrb	r3, [r3, #8]
 8006694:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d102      	bne.n	80066b2 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80066ac:	2301      	movs	r3, #1
 80066ae:	77bb      	strb	r3, [r7, #30]
 80066b0:	e01f      	b.n	80066f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80066b2:	7dbb      	ldrb	r3, [r7, #22]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80066bc:	2b05      	cmp	r3, #5
 80066be:	d007      	beq.n	80066d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80066c4:	2b06      	cmp	r3, #6
 80066c6:	d003      	beq.n	80066d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d102      	bne.n	80066d6 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 80066d0:	2301      	movs	r3, #1
 80066d2:	77bb      	strb	r3, [r7, #30]
 80066d4:	e00d      	b.n	80066f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80066d6:	7d7b      	ldrb	r3, [r7, #21]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <lwip_netconn_do_close_internal+0xe6>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	7e9b      	ldrb	r3, [r3, #26]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 80066e8:	2301      	movs	r3, #1
 80066ea:	77bb      	strb	r3, [r7, #30]
 80066ec:	e001      	b.n	80066f2 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 80066f2:	7fbb      	ldrb	r3, [r7, #30]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80066f8:	2100      	movs	r1, #0
 80066fa:	69b8      	ldr	r0, [r7, #24]
 80066fc:	f008 fbcc 	bl	800ee98 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	7d1b      	ldrb	r3, [r3, #20]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d104      	bne.n	8006712 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8006708:	2100      	movs	r1, #0
 800670a:	69b8      	ldr	r0, [r7, #24]
 800670c:	f008 fc3a 	bl	800ef84 <tcp_accept>
 8006710:	e01d      	b.n	800674e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8006718:	2100      	movs	r1, #0
 800671a:	69b8      	ldr	r0, [r7, #24]
 800671c:	f008 fbce 	bl	800eebc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006720:	2100      	movs	r1, #0
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	f008 fc2e 	bl	800ef84 <tcp_accept>
    }
    if (shut_tx) {
 8006728:	7d7b      	ldrb	r3, [r7, #21]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800672e:	2100      	movs	r1, #0
 8006730:	69b8      	ldr	r0, [r7, #24]
 8006732:	f008 fbe5 	bl	800ef00 <tcp_sent>
    }
    if (close) {
 8006736:	7fbb      	ldrb	r3, [r7, #30]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	69b8      	ldr	r0, [r7, #24]
 8006742:	f008 fc37 	bl	800efb4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006746:	2100      	movs	r1, #0
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f008 fbf9 	bl	800ef40 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800674e:	7fbb      	ldrb	r3, [r7, #30]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8006754:	69b8      	ldr	r0, [r7, #24]
 8006756:	f007 fb15 	bl	800dd84 <tcp_close>
 800675a:	4603      	mov	r3, r0
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e007      	b.n	8006770 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006760:	7dbb      	ldrb	r3, [r7, #22]
 8006762:	7d7a      	ldrb	r2, [r7, #21]
 8006764:	4619      	mov	r1, r3
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f007 fb24 	bl	800ddb4 <tcp_shutdown>
 800676c:	4603      	mov	r3, r0
 800676e:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8006770:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8006778:	2301      	movs	r3, #1
 800677a:	777b      	strb	r3, [r7, #29]
 800677c:	e016      	b.n	80067ac <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800677e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006786:	d10f      	bne.n	80067a8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	7a5b      	ldrb	r3, [r3, #9]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10c      	bne.n	80067ac <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8006792:	2301      	movs	r3, #1
 8006794:	777b      	strb	r3, [r7, #29]
        if (close) {
 8006796:	7fbb      	ldrb	r3, [r7, #30]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800679c:	69b8      	ldr	r0, [r7, #24]
 800679e:	f007 fc03 	bl	800dfa8 <tcp_abort>
          err = ERR_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e001      	b.n	80067ac <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80067a8:	2301      	movs	r3, #1
 80067aa:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 80067ac:	7f7b      	ldrb	r3, [r7, #29]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d056      	beq.n	8006860 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	330c      	adds	r3, #12
 80067ba:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	7ffa      	ldrb	r2, [r7, #31]
 80067c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80067d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d129      	bne.n	800682c <lwip_netconn_do_close_internal+0x224>
      if (close) {
 80067d8:	7fbb      	ldrb	r3, [r7, #30]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <lwip_netconn_do_close_internal+0x1f0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	2200      	movs	r2, #0
 80067f2:	2104      	movs	r1, #4
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
      }
      if (shut_rx) {
 80067f8:	7dbb      	ldrb	r3, [r7, #22]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <lwip_netconn_do_close_internal+0x20a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	2200      	movs	r2, #0
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
      }
      if (shut_tx) {
 8006812:	7d7b      	ldrb	r3, [r7, #21]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d009      	beq.n	800682c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <lwip_netconn_do_close_internal+0x224>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	2200      	movs	r2, #0
 8006826:	2102      	movs	r1, #2
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <lwip_netconn_do_close_internal+0x248>
 8006832:	f00d fb05 	bl	8013e40 <sys_arch_protect>
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800683e:	f113 0f0c 	cmn.w	r3, #12
 8006842:	db02      	blt.n	800684a <lwip_netconn_do_close_internal+0x242>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7ffa      	ldrb	r2, [r7, #31]
 8006848:	721a      	strb	r2, [r3, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f00d fb06 	bl	8013e5c <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8006856:	6938      	ldr	r0, [r7, #16]
 8006858:	f00d fa57 	bl	8013d0a <sys_sem_signal>
    }
    return ERR_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	e02e      	b.n	80068be <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8006860:	7f7b      	ldrb	r3, [r7, #29]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11e      	bne.n	80068a4 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	7d1b      	ldrb	r3, [r3, #20]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d106      	bne.n	800687c <lwip_netconn_do_close_internal+0x274>
 800686e:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 8006870:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006874:	491b      	ldr	r1, [pc, #108]	; (80068e4 <lwip_netconn_do_close_internal+0x2dc>)
 8006876:	4816      	ldr	r0, [pc, #88]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 8006878:	f00e fa36 	bl	8014ce8 <iprintf>
    if (shut_tx) {
 800687c:	7d7b      	ldrb	r3, [r7, #21]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8006882:	4919      	ldr	r1, [pc, #100]	; (80068e8 <lwip_netconn_do_close_internal+0x2e0>)
 8006884:	69b8      	ldr	r0, [r7, #24]
 8006886:	f008 fb3b 	bl	800ef00 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800688a:	2201      	movs	r2, #1
 800688c:	4917      	ldr	r1, [pc, #92]	; (80068ec <lwip_netconn_do_close_internal+0x2e4>)
 800688e:	69b8      	ldr	r0, [r7, #24]
 8006890:	f008 fb90 	bl	800efb4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006894:	4916      	ldr	r1, [pc, #88]	; (80068f0 <lwip_netconn_do_close_internal+0x2e8>)
 8006896:	69b8      	ldr	r0, [r7, #24]
 8006898:	f008 fb52 	bl	800ef40 <tcp_err>
    tcp_arg(tpcb, conn);
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	69b8      	ldr	r0, [r7, #24]
 80068a0:	f008 fafa 	bl	800ee98 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80068a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <lwip_netconn_do_close_internal+0x2b2>
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <lwip_netconn_do_close_internal+0x2c0>)
 80068ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80068b2:	4910      	ldr	r1, [pc, #64]	; (80068f4 <lwip_netconn_do_close_internal+0x2ec>)
 80068b4:	4806      	ldr	r0, [pc, #24]	; (80068d0 <lwip_netconn_do_close_internal+0x2c8>)
 80068b6:	f00e fa17 	bl	8014ce8 <iprintf>
  return err;
 80068ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08015f70 	.word	0x08015f70
 80068cc:	080161e8 	.word	0x080161e8
 80068d0:	08015fc8 	.word	0x08015fc8
 80068d4:	080161f8 	.word	0x080161f8
 80068d8:	08016218 	.word	0x08016218
 80068dc:	0801623c 	.word	0x0801623c
 80068e0:	080160a4 	.word	0x080160a4
 80068e4:	08016250 	.word	0x08016250
 80068e8:	08005e49 	.word	0x08005e49
 80068ec:	08005d81 	.word	0x08005d81
 80068f0:	08005ef1 	.word	0x08005ef1
 80068f4:	08016274 	.word	0x08016274

080068f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <lwip_netconn_do_delconn+0x36>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800691c:	2b10      	cmp	r3, #16
 800691e:	d006      	beq.n	800692e <lwip_netconn_do_delconn+0x36>
 8006920:	4b6f      	ldr	r3, [pc, #444]	; (8006ae0 <lwip_netconn_do_delconn+0x1e8>)
 8006922:	f240 4201 	movw	r2, #1025	; 0x401
 8006926:	496f      	ldr	r1, [pc, #444]	; (8006ae4 <lwip_netconn_do_delconn+0x1ec>)
 8006928:	486f      	ldr	r0, [pc, #444]	; (8006ae8 <lwip_netconn_do_delconn+0x1f0>)
 800692a:	f00e f9dd 	bl	8014ce8 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800692e:	7cfb      	ldrb	r3, [r7, #19]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <lwip_netconn_do_delconn+0x48>
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d002      	beq.n	8006940 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800693a:	7cfb      	ldrb	r3, [r7, #19]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d109      	bne.n	8006954 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d10a      	bne.n	800695c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	7f1b      	ldrb	r3, [r3, #28]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	22fb      	movs	r2, #251	; 0xfb
 8006958:	711a      	strb	r2, [r3, #4]
 800695a:	e09c      	b.n	8006a96 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800695c:	7cfb      	ldrb	r3, [r7, #19]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d10d      	bne.n	800697e <lwip_netconn_do_delconn+0x86>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	7f1b      	ldrb	r3, [r3, #28]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <lwip_netconn_do_delconn+0x86>
 8006970:	4b5b      	ldr	r3, [pc, #364]	; (8006ae0 <lwip_netconn_do_delconn+0x1e8>)
 8006972:	f240 421f 	movw	r2, #1055	; 0x41f
 8006976:	495d      	ldr	r1, [pc, #372]	; (8006aec <lwip_netconn_do_delconn+0x1f4>)
 8006978:	485b      	ldr	r0, [pc, #364]	; (8006ae8 <lwip_netconn_do_delconn+0x1f0>)
 800697a:	f00e f9b5 	bl	8014ce8 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2200      	movs	r2, #0
 8006982:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fdbd 	bl	8006508 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d064      	beq.n	8006a62 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a2:	2b10      	cmp	r3, #16
 80069a4:	d00e      	beq.n	80069c4 <lwip_netconn_do_delconn+0xcc>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d000      	beq.n	80069ac <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80069aa:	e056      	b.n	8006a5a <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4618      	mov	r0, r3
 80069be:	f00c ff15 	bl	80137ec <udp_remove>
        break;
 80069c2:	e04a      	b.n	8006a5a <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <lwip_netconn_do_delconn+0xe0>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <lwip_netconn_do_delconn+0xee>
 80069d8:	4b41      	ldr	r3, [pc, #260]	; (8006ae0 <lwip_netconn_do_delconn+0x1e8>)
 80069da:	f240 4235 	movw	r2, #1077	; 0x435
 80069de:	4944      	ldr	r1, [pc, #272]	; (8006af0 <lwip_netconn_do_delconn+0x1f8>)
 80069e0:	4841      	ldr	r0, [pc, #260]	; (8006ae8 <lwip_netconn_do_delconn+0x1f0>)
 80069e2:	f00e f981 	bl	8014ce8 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2204      	movs	r2, #4
 80069ec:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2203      	movs	r2, #3
 80069f2:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fe00 	bl	8006608 <lwip_netconn_do_close_internal>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d064      	beq.n	8006ad8 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d006      	beq.n	8006a26 <lwip_netconn_do_delconn+0x12e>
 8006a18:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <lwip_netconn_do_delconn+0x1e8>)
 8006a1a:	f240 423b 	movw	r2, #1083	; 0x43b
 8006a1e:	4935      	ldr	r1, [pc, #212]	; (8006af4 <lwip_netconn_do_delconn+0x1fc>)
 8006a20:	4831      	ldr	r0, [pc, #196]	; (8006ae8 <lwip_netconn_do_delconn+0x1f0>)
 8006a22:	f00e f961 	bl	8014ce8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8006a26:	4834      	ldr	r0, [pc, #208]	; (8006af8 <lwip_netconn_do_delconn+0x200>)
 8006a28:	f00d f9df 	bl	8013dea <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f00d f937 	bl	8013ca8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006a3a:	482f      	ldr	r0, [pc, #188]	; (8006af8 <lwip_netconn_do_delconn+0x200>)
 8006a3c:	f00d f9c6 	bl	8013dcc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d046      	beq.n	8006ad8 <lwip_netconn_do_delconn+0x1e0>
 8006a4a:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <lwip_netconn_do_delconn+0x1e8>)
 8006a4c:	f240 423f 	movw	r2, #1087	; 0x43f
 8006a50:	4928      	ldr	r1, [pc, #160]	; (8006af4 <lwip_netconn_do_delconn+0x1fc>)
 8006a52:	4825      	ldr	r0, [pc, #148]	; (8006ae8 <lwip_netconn_do_delconn+0x1f0>)
 8006a54:	f00e f948 	bl	8014ce8 <iprintf>
        return;
 8006a58:	e03e      	b.n	8006ad8 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <lwip_netconn_do_delconn+0x184>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	6810      	ldr	r0, [r2, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <lwip_netconn_do_delconn+0x19e>
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	6810      	ldr	r0, [r2, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2102      	movs	r1, #2
 8006a94:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f00d f94e 	bl	8013d3e <sys_sem_valid>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d018      	beq.n	8006ada <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d014      	beq.n	8006ada <lwip_netconn_do_delconn+0x1e2>
 8006ab0:	f00d f9c6 	bl	8013e40 <sys_arch_protect>
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006abe:	f113 0f0c 	cmn.w	r3, #12
 8006ac2:	db05      	blt.n	8006ad0 <lwip_netconn_do_delconn+0x1d8>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006ace:	721a      	strb	r2, [r3, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f00d f9c3 	bl	8013e5c <sys_arch_unprotect>
 8006ad6:	e000      	b.n	8006ada <lwip_netconn_do_delconn+0x1e2>
        return;
 8006ad8:	bf00      	nop
  }
}
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	08015f70 	.word	0x08015f70
 8006ae4:	08016284 	.word	0x08016284
 8006ae8:	08015fc8 	.word	0x08015fc8
 8006aec:	08016298 	.word	0x08016298
 8006af0:	080162b8 	.word	0x080162b8
 8006af4:	080162d4 	.word	0x080162d4
 8006af8:	2000447c 	.word	0x2000447c

08006afc <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b10:	f113 0f0c 	cmn.w	r3, #12
 8006b14:	da06      	bge.n	8006b24 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	711a      	strb	r2, [r3, #4]
 8006b22:	e02f      	b.n	8006b84 <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22fa      	movs	r2, #250	; 0xfa
 8006b28:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d027      	beq.n	8006b84 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d011      	beq.n	8006b66 <lwip_netconn_do_bind+0x6a>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d000      	beq.n	8006b48 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8006b46:	e01d      	b.n	8006b84 <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6858      	ldr	r0, [r3, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6899      	ldr	r1, [r3, #8]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	899b      	ldrh	r3, [r3, #12]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f00c fd70 	bl	801363c <udp_bind>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	711a      	strb	r2, [r3, #4]
        break;
 8006b64:	e00e      	b.n	8006b84 <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6858      	ldr	r0, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6899      	ldr	r1, [r3, #8]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	899b      	ldrh	r3, [r3, #12]
 8006b74:	461a      	mov	r2, r3
 8006b76:	f007 fa23 	bl	800dfc0 <tcp_bind>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	711a      	strb	r2, [r3, #4]
        break;
 8006b82:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d012      	beq.n	8006bb2 <lwip_netconn_do_bind+0xb6>
 8006b8c:	f00d f958 	bl	8013e40 <sys_arch_protect>
 8006b90:	60b8      	str	r0, [r7, #8]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b9a:	f113 0f0c 	cmn.w	r3, #12
 8006b9e:	db05      	blt.n	8006bac <lwip_netconn_do_bind+0xb0>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006baa:	721a      	strb	r2, [r3, #8]
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f00d f955 	bl	8013e5c <sys_arch_unprotect>
}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006bd0:	f113 0f0c 	cmn.w	r3, #12
 8006bd4:	da06      	bge.n	8006be4 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	711a      	strb	r2, [r3, #4]
 8006be2:	e090      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	22f5      	movs	r2, #245	; 0xf5
 8006be8:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8088 	beq.w	8006d06 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d17d      	bne.n	8006d00 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d16f      	bne.n	8006cee <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	7d1b      	ldrb	r3, [r3, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	22fa      	movs	r2, #250	; 0xfa
 8006c1e:	711a      	strb	r2, [r3, #4]
 8006c20:	e071      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8006c22:	23ff      	movs	r3, #255	; 0xff
 8006c24:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f107 020f 	add.w	r2, r7, #15
 8006c30:	7ef9      	ldrb	r1, [r7, #27]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f007 fa66 	bl	800e104 <tcp_listen_with_backlog_and_err>
 8006c38:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8006c40:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	711a      	strb	r2, [r3, #4]
 8006c48:	e05d      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3310      	adds	r3, #16
 8006c50:	4618      	mov	r0, r3
 8006c52:	f00c ffe5 	bl	8013c20 <sys_mbox_valid>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3310      	adds	r3, #16
 8006c62:	4618      	mov	r0, r3
 8006c64:	f00c ff40 	bl	8013ae8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f00c ffe7 	bl	8013c42 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2200      	movs	r2, #0
 8006c78:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	4618      	mov	r0, r3
 8006c82:	f00c ffcd 	bl	8013c20 <sys_mbox_valid>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3314      	adds	r3, #20
 8006c92:	2106      	movs	r1, #6
 8006c94:	4618      	mov	r0, r3
 8006c96:	f00c ff09 	bl	8013aac <sys_mbox_new>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d118      	bne.n	8006cde <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f008 f8e5 	bl	800ee98 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4919      	ldr	r1, [pc, #100]	; (8006d3c <lwip_netconn_do_listen+0x180>)
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f008 f954 	bl	800ef84 <tcp_accept>
 8006cdc:	e013      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8006cde:	6978      	ldr	r0, [r7, #20]
 8006ce0:	f007 f850 	bl	800dd84 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	605a      	str	r2, [r3, #4]
 8006cec:	e00b      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d106      	bne.n	8006d06 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	711a      	strb	r2, [r3, #4]
 8006cfe:	e002      	b.n	8006d06 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	22f0      	movs	r2, #240	; 0xf0
 8006d04:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d012      	beq.n	8006d34 <lwip_netconn_do_listen+0x178>
 8006d0e:	f00d f897 	bl	8013e40 <sys_arch_protect>
 8006d12:	6138      	str	r0, [r7, #16]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006d1c:	f113 0f0c 	cmn.w	r3, #12
 8006d20:	db05      	blt.n	8006d2e <lwip_netconn_do_listen+0x172>
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006d2c:	721a      	strb	r2, [r3, #8]
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f00d f894 	bl	8013e5c <sys_arch_unprotect>
}
 8006d34:	bf00      	nop
 8006d36:	3720      	adds	r7, #32
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	08006121 	.word	0x08006121

08006d40 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d022      	beq.n	8006da2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d11b      	bne.n	8006da2 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d202      	bcs.n	8006d7e <lwip_netconn_do_recv+0x3e>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	e001      	b.n	8006d82 <lwip_netconn_do_recv+0x42>
 8006d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d82:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	89fa      	ldrh	r2, [r7, #14]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f007 faa0 	bl	800e2d4 <tcp_recved>
        remaining -= recved;
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e6      	bne.n	8006d70 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d012      	beq.n	8006dd0 <lwip_netconn_do_recv+0x90>
 8006daa:	f00d f849 	bl	8013e40 <sys_arch_protect>
 8006dae:	60b8      	str	r0, [r7, #8]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006db8:	f113 0f0c 	cmn.w	r3, #12
 8006dbc:	db05      	blt.n	8006dca <lwip_netconn_do_recv+0x8a>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8006dc8:	721a      	strb	r2, [r3, #8]
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	f00d f846 	bl	8013e5c <sys_arch_unprotect>
}
 8006dd0:	bf00      	nop
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <lwip_netconn_do_writemore+0x26>
 8006df0:	4ba2      	ldr	r3, [pc, #648]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006df2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8006df6:	49a2      	ldr	r1, [pc, #648]	; (8007080 <lwip_netconn_do_writemore+0x2a8>)
 8006df8:	48a2      	ldr	r0, [pc, #648]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006dfa:	f00d ff75 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d006      	beq.n	8006e14 <lwip_netconn_do_writemore+0x3c>
 8006e06:	4b9d      	ldr	r3, [pc, #628]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006e08:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8006e0c:	499e      	ldr	r1, [pc, #632]	; (8007088 <lwip_netconn_do_writemore+0x2b0>)
 8006e0e:	489d      	ldr	r0, [pc, #628]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006e10:	f00d ff6a 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <lwip_netconn_do_writemore+0x52>
 8006e1c:	4b97      	ldr	r3, [pc, #604]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006e1e:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8006e22:	499a      	ldr	r1, [pc, #616]	; (800708c <lwip_netconn_do_writemore+0x2b4>)
 8006e24:	4897      	ldr	r0, [pc, #604]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006e26:	f00d ff5f 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <lwip_netconn_do_writemore+0x68>
 8006e32:	4b92      	ldr	r3, [pc, #584]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006e34:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8006e38:	4995      	ldr	r1, [pc, #596]	; (8007090 <lwip_netconn_do_writemore+0x2b8>)
 8006e3a:	4892      	ldr	r0, [pc, #584]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006e3c:	f00d ff54 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1a      	ldr	r2, [r3, #32]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d306      	bcc.n	8006e5c <lwip_netconn_do_writemore+0x84>
 8006e4e:	4b8b      	ldr	r3, [pc, #556]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006e50:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8006e54:	498f      	ldr	r1, [pc, #572]	; (8007094 <lwip_netconn_do_writemore+0x2bc>)
 8006e56:	488b      	ldr	r0, [pc, #556]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006e58:	f00d ff46 	bl	8014ce8 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	7c1b      	ldrb	r3, [r3, #16]
 8006e62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7f1b      	ldrb	r3, [r3, #28]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <lwip_netconn_do_writemore+0xa6>
 8006e72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <lwip_netconn_do_writemore+0xaa>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <lwip_netconn_do_writemore+0xac>
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	4413      	add	r3, r2
 8006e94:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eaa:	d309      	bcc.n	8006ec0 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8006eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eb0:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8006eb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ebe:	e001      	b.n	8006ec4 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ecc:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8006ece:	8afa      	ldrh	r2, [r7, #22]
 8006ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d212      	bcs.n	8006efc <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8006ed6:	8afb      	ldrh	r3, [r7, #22]
 8006ed8:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8006eda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d006      	beq.n	8006ef0 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8006ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d109      	bne.n	8006efc <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8006ee8:	23f9      	movs	r3, #249	; 0xf9
 8006eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8006eee:	e029      	b.n	8006f44 <lwip_netconn_do_writemore+0x16c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d906      	bls.n	8006f1c <lwip_netconn_do_writemore+0x144>
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	; (800707c <lwip_netconn_do_writemore+0x2a4>)
 8006f10:	f240 6213 	movw	r2, #1555	; 0x613
 8006f14:	4960      	ldr	r1, [pc, #384]	; (8007098 <lwip_netconn_do_writemore+0x2c0>)
 8006f16:	485b      	ldr	r0, [pc, #364]	; (8007084 <lwip_netconn_do_writemore+0x2ac>)
 8006f18:	f00d fee6 	bl	8014ce8 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6858      	ldr	r0, [r3, #4]
 8006f20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f26:	69f9      	ldr	r1, [r7, #28]
 8006f28:	f00a fdf6 	bl	8011b18 <tcp_write>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d004      	beq.n	8006f44 <lwip_netconn_do_writemore+0x16c>
 8006f3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f42:	d132      	bne.n	8006faa <lwip_netconn_do_writemore+0x1d2>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8006f44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d017      	beq.n	8006f7c <lwip_netconn_do_writemore+0x1a4>
 8006f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d211      	bcs.n	8006f7c <lwip_netconn_do_writemore+0x1a4>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <lwip_netconn_do_writemore+0x194>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f66:	2103      	movs	r1, #3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7f1b      	ldrb	r3, [r3, #28]
 8006f70:	f043 0310 	orr.w	r3, r3, #16
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	771a      	strb	r2, [r3, #28]
 8006f7a:	e016      	b.n	8006faa <lwip_netconn_do_writemore+0x1d2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f84:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8006f88:	d305      	bcc.n	8006f96 <lwip_netconn_do_writemore+0x1be>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d909      	bls.n	8006faa <lwip_netconn_do_writemore+0x1d2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <lwip_netconn_do_writemore+0x1d2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fa4:	2103      	movs	r1, #3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8006faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d134      	bne.n	800701c <lwip_netconn_do_writemore+0x244>
      err_t out_err;
      conn->write_offset += len;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1a      	ldr	r2, [r3, #32]
 8006fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb8:	441a      	add	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1a      	ldr	r2, [r3, #32]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d003      	beq.n	8006fd4 <lwip_netconn_do_writemore+0x1fc>
 8006fcc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <lwip_netconn_do_writemore+0x20c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6a12      	ldr	r2, [r2, #32]
 8006fdc:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f00b fa4b 	bl	8012484 <tcp_output>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8006ff2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006ff6:	f113 0f0c 	cmn.w	r3, #12
 8006ffa:	db04      	blt.n	8007006 <lwip_netconn_do_writemore+0x22e>
 8006ffc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007000:	f113 0f04 	cmn.w	r3, #4
 8007004:	d151      	bne.n	80070aa <lwip_netconn_do_writemore+0x2d2>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007006:	7d7b      	ldrb	r3, [r7, #21]
 8007008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2200      	movs	r2, #0
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	e046      	b.n	80070aa <lwip_netconn_do_writemore+0x2d2>
      }
    } else if (err == ERR_MEM) {
 800701c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d13a      	bne.n	800709c <lwip_netconn_do_writemore+0x2c4>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4618      	mov	r0, r3
 800702c:	f00b fa2a 	bl	8012484 <tcp_output>
 8007030:	4603      	mov	r3, r0
 8007032:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8007034:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007038:	f113 0f0c 	cmn.w	r3, #12
 800703c:	db04      	blt.n	8007048 <lwip_netconn_do_writemore+0x270>
 800703e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8007042:	f113 0f04 	cmn.w	r3, #4
 8007046:	d10a      	bne.n	800705e <lwip_netconn_do_writemore+0x286>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007048:	7d3b      	ldrb	r3, [r7, #20]
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2200      	movs	r2, #0
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	e025      	b.n	80070aa <lwip_netconn_do_writemore+0x2d2>
      } else if (dontblock) {
 800705e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007062:	2b00      	cmp	r3, #0
 8007064:	d021      	beq.n	80070aa <lwip_netconn_do_writemore+0x2d2>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8007066:	23f9      	movs	r3, #249	; 0xf9
 8007068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	2200      	movs	r2, #0
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	e016      	b.n	80070aa <lwip_netconn_do_writemore+0x2d2>
 800707c:	08015f70 	.word	0x08015f70
 8007080:	08016094 	.word	0x08016094
 8007084:	08015fc8 	.word	0x08015fc8
 8007088:	08016374 	.word	0x08016374
 800708c:	080160a4 	.word	0x080160a4
 8007090:	08016394 	.word	0x08016394
 8007094:	080163ac 	.word	0x080163ac
 8007098:	080163e0 	.word	0x080163e0
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80070aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02c      	beq.n	800710c <lwip_netconn_do_writemore+0x334>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070c4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00f      	beq.n	80070fe <lwip_netconn_do_writemore+0x326>
 80070de:	f00c feaf 	bl	8013e40 <sys_arch_protect>
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80070ea:	f113 0f0c 	cmn.w	r3, #12
 80070ee:	db03      	blt.n	80070f8 <lwip_netconn_do_writemore+0x320>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80070f6:	721a      	strb	r2, [r3, #8]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f00c feaf 	bl	8013e5c <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <lwip_netconn_do_writemore+0x33a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007104:	6938      	ldr	r0, [r7, #16]
 8007106:	f00c fe00 	bl	8013d0a <sys_sem_signal>
 800710a:	e002      	b.n	8007112 <lwip_netconn_do_writemore+0x33a>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800710c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007110:	e000      	b.n	8007114 <lwip_netconn_do_writemore+0x33c>
  }
#endif
  return ERR_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3728      	adds	r7, #40	; 0x28
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007130:	f113 0f0c 	cmn.w	r3, #12
 8007134:	da06      	bge.n	8007144 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	711a      	strb	r2, [r3, #4]
 8007142:	e072      	b.n	800722a <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800714e:	2b10      	cmp	r3, #16
 8007150:	d168      	bne.n	8007224 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	22fb      	movs	r2, #251	; 0xfb
 8007160:	711a      	strb	r2, [r3, #4]
 8007162:	e062      	b.n	800722a <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d056      	beq.n	800721c <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2201      	movs	r2, #1
 8007174:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <lwip_netconn_do_write+0x6e>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d006      	beq.n	8007198 <lwip_netconn_do_write+0x7c>
 800718a:	4b36      	ldr	r3, [pc, #216]	; (8007264 <lwip_netconn_do_write+0x148>)
 800718c:	f240 6283 	movw	r2, #1667	; 0x683
 8007190:	4935      	ldr	r1, [pc, #212]	; (8007268 <lwip_netconn_do_write+0x14c>)
 8007192:	4836      	ldr	r0, [pc, #216]	; (800726c <lwip_netconn_do_write+0x150>)
 8007194:	f00d fda8 	bl	8014ce8 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <lwip_netconn_do_write+0x92>
 80071a0:	4b30      	ldr	r3, [pc, #192]	; (8007264 <lwip_netconn_do_write+0x148>)
 80071a2:	f240 6284 	movw	r2, #1668	; 0x684
 80071a6:	4932      	ldr	r1, [pc, #200]	; (8007270 <lwip_netconn_do_write+0x154>)
 80071a8:	4830      	ldr	r0, [pc, #192]	; (800726c <lwip_netconn_do_write+0x150>)
 80071aa:	f00d fd9d 	bl	8014ce8 <iprintf>
        msg->conn->current_msg = msg;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fe07 	bl	8006dd8 <lwip_netconn_do_writemore>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d044      	beq.n	800725a <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d006      	beq.n	80071e8 <lwip_netconn_do_write+0xcc>
 80071da:	4b22      	ldr	r3, [pc, #136]	; (8007264 <lwip_netconn_do_write+0x148>)
 80071dc:	f240 6289 	movw	r2, #1673	; 0x689
 80071e0:	4924      	ldr	r1, [pc, #144]	; (8007274 <lwip_netconn_do_write+0x158>)
 80071e2:	4822      	ldr	r0, [pc, #136]	; (800726c <lwip_netconn_do_write+0x150>)
 80071e4:	f00d fd80 	bl	8014ce8 <iprintf>
          UNLOCK_TCPIP_CORE();
 80071e8:	4823      	ldr	r0, [pc, #140]	; (8007278 <lwip_netconn_do_write+0x15c>)
 80071ea:	f00c fdfe 	bl	8013dea <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f00c fd56 	bl	8013ca8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80071fc:	481e      	ldr	r0, [pc, #120]	; (8007278 <lwip_netconn_do_write+0x15c>)
 80071fe:	f00c fde5 	bl	8013dcc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d126      	bne.n	800725a <lwip_netconn_do_write+0x13e>
 800720c:	4b15      	ldr	r3, [pc, #84]	; (8007264 <lwip_netconn_do_write+0x148>)
 800720e:	f240 628d 	movw	r2, #1677	; 0x68d
 8007212:	4918      	ldr	r1, [pc, #96]	; (8007274 <lwip_netconn_do_write+0x158>)
 8007214:	4815      	ldr	r0, [pc, #84]	; (800726c <lwip_netconn_do_write+0x150>)
 8007216:	f00d fd67 	bl	8014ce8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800721a:	e01e      	b.n	800725a <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	22f5      	movs	r2, #245	; 0xf5
 8007220:	711a      	strb	r2, [r3, #4]
 8007222:	e002      	b.n	800722a <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22fa      	movs	r2, #250	; 0xfa
 8007228:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d014      	beq.n	800725c <lwip_netconn_do_write+0x140>
 8007232:	f00c fe05 	bl	8013e40 <sys_arch_protect>
 8007236:	60b8      	str	r0, [r7, #8]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007240:	f113 0f0c 	cmn.w	r3, #12
 8007244:	db05      	blt.n	8007252 <lwip_netconn_do_write+0x136>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007250:	721a      	strb	r2, [r3, #8]
 8007252:	68b8      	ldr	r0, [r7, #8]
 8007254:	f00c fe02 	bl	8013e5c <sys_arch_unprotect>
 8007258:	e000      	b.n	800725c <lwip_netconn_do_write+0x140>
        return;
 800725a:	bf00      	nop
}
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	08015f70 	.word	0x08015f70
 8007268:	080162b8 	.word	0x080162b8
 800726c:	08015fc8 	.word	0x08015fc8
 8007270:	0801640c 	.word	0x0801640c
 8007274:	080162d4 	.word	0x080162d4
 8007278:	2000447c 	.word	0x2000447c

0800727c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d06e      	beq.n	8007378 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d167      	bne.n	8007378 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d002      	beq.n	80072b6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d060      	beq.n	8007378 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80072b6:	7cfb      	ldrb	r3, [r7, #19]
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d103      	bne.n	80072c4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	22f5      	movs	r2, #245	; 0xf5
 80072c0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80072c2:	e05c      	b.n	800737e <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 80072c4:	7cfb      	ldrb	r3, [r7, #19]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d103      	bne.n	80072d2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	22fb      	movs	r2, #251	; 0xfb
 80072ce:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80072d0:	e055      	b.n	800737e <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	7a1b      	ldrb	r3, [r3, #8]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff f910 	bl	8006508 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <lwip_netconn_do_close+0x80>
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d006      	beq.n	800730a <lwip_netconn_do_close+0x8e>
 80072fc:	4b2e      	ldr	r3, [pc, #184]	; (80073b8 <lwip_netconn_do_close+0x13c>)
 80072fe:	f240 721c 	movw	r2, #1820	; 0x71c
 8007302:	492e      	ldr	r1, [pc, #184]	; (80073bc <lwip_netconn_do_close+0x140>)
 8007304:	482e      	ldr	r0, [pc, #184]	; (80073c0 <lwip_netconn_do_close+0x144>)
 8007306:	f00d fcef 	bl	8014ce8 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2204      	movs	r2, #4
 8007310:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f971 	bl	8006608 <lwip_netconn_do_close_internal>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d040      	beq.n	80073ae <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b04      	cmp	r3, #4
 8007334:	d006      	beq.n	8007344 <lwip_netconn_do_close+0xc8>
 8007336:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <lwip_netconn_do_close+0x13c>)
 8007338:	f240 7221 	movw	r2, #1825	; 0x721
 800733c:	4921      	ldr	r1, [pc, #132]	; (80073c4 <lwip_netconn_do_close+0x148>)
 800733e:	4820      	ldr	r0, [pc, #128]	; (80073c0 <lwip_netconn_do_close+0x144>)
 8007340:	f00d fcd2 	bl	8014ce8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8007344:	4820      	ldr	r0, [pc, #128]	; (80073c8 <lwip_netconn_do_close+0x14c>)
 8007346:	f00c fd50 	bl	8013dea <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f00c fca8 	bl	8013ca8 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007358:	481b      	ldr	r0, [pc, #108]	; (80073c8 <lwip_netconn_do_close+0x14c>)
 800735a:	f00c fd37 	bl	8013dcc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d022      	beq.n	80073ae <lwip_netconn_do_close+0x132>
 8007368:	4b13      	ldr	r3, [pc, #76]	; (80073b8 <lwip_netconn_do_close+0x13c>)
 800736a:	f240 7225 	movw	r2, #1829	; 0x725
 800736e:	4915      	ldr	r1, [pc, #84]	; (80073c4 <lwip_netconn_do_close+0x148>)
 8007370:	4813      	ldr	r0, [pc, #76]	; (80073c0 <lwip_netconn_do_close+0x144>)
 8007372:	f00d fcb9 	bl	8014ce8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8007376:	e01a      	b.n	80073ae <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	22f5      	movs	r2, #245	; 0xf5
 800737c:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d014      	beq.n	80073b0 <lwip_netconn_do_close+0x134>
 8007386:	f00c fd5b 	bl	8013e40 <sys_arch_protect>
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007394:	f113 0f0c 	cmn.w	r3, #12
 8007398:	db05      	blt.n	80073a6 <lwip_netconn_do_close+0x12a>
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80073a4:	721a      	strb	r2, [r3, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f00c fd58 	bl	8013e5c <sys_arch_unprotect>
 80073ac:	e000      	b.n	80073b0 <lwip_netconn_do_close+0x134>
      return;
 80073ae:	bf00      	nop
}
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	08015f70 	.word	0x08015f70
 80073bc:	080162b8 	.word	0x080162b8
 80073c0:	08015fc8 	.word	0x08015fc8
 80073c4:	080162d4 	.word	0x080162d4
 80073c8:	2000447c 	.word	0x2000447c

080073cc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d013      	beq.n	8007402 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f005 ff46 	bl	800d278 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	2006      	movs	r0, #6
 80073fe:	f005 f9d9 	bl	800c7b4 <memp_free>
  }
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d108      	bne.n	8007430 <netbuf_data+0x24>
 800741e:	4b1b      	ldr	r3, [pc, #108]	; (800748c <netbuf_data+0x80>)
 8007420:	22c2      	movs	r2, #194	; 0xc2
 8007422:	491b      	ldr	r1, [pc, #108]	; (8007490 <netbuf_data+0x84>)
 8007424:	481b      	ldr	r0, [pc, #108]	; (8007494 <netbuf_data+0x88>)
 8007426:	f00d fc5f 	bl	8014ce8 <iprintf>
 800742a:	f06f 030f 	mvn.w	r3, #15
 800742e:	e029      	b.n	8007484 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <netbuf_data+0x3c>
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <netbuf_data+0x80>)
 8007438:	22c3      	movs	r2, #195	; 0xc3
 800743a:	4917      	ldr	r1, [pc, #92]	; (8007498 <netbuf_data+0x8c>)
 800743c:	4815      	ldr	r0, [pc, #84]	; (8007494 <netbuf_data+0x88>)
 800743e:	f00d fc53 	bl	8014ce8 <iprintf>
 8007442:	f06f 030f 	mvn.w	r3, #15
 8007446:	e01d      	b.n	8007484 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d108      	bne.n	8007460 <netbuf_data+0x54>
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <netbuf_data+0x80>)
 8007450:	22c4      	movs	r2, #196	; 0xc4
 8007452:	4912      	ldr	r1, [pc, #72]	; (800749c <netbuf_data+0x90>)
 8007454:	480f      	ldr	r0, [pc, #60]	; (8007494 <netbuf_data+0x88>)
 8007456:	f00d fc47 	bl	8014ce8 <iprintf>
 800745a:	f06f 030f 	mvn.w	r3, #15
 800745e:	e011      	b.n	8007484 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <netbuf_data+0x62>
    return ERR_BUF;
 8007468:	f06f 0301 	mvn.w	r3, #1
 800746c:	e00a      	b.n	8007484 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	895a      	ldrh	r2, [r3, #10]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	08016438 	.word	0x08016438
 8007490:	08016540 	.word	0x08016540
 8007494:	08016488 	.word	0x08016488
 8007498:	0801655c 	.word	0x0801655c
 800749c:	0801657c 	.word	0x0801657c

080074a0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d108      	bne.n	80074c0 <netbuf_next+0x20>
 80074ae:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <netbuf_next+0x54>)
 80074b0:	22dc      	movs	r2, #220	; 0xdc
 80074b2:	4911      	ldr	r1, [pc, #68]	; (80074f8 <netbuf_next+0x58>)
 80074b4:	4811      	ldr	r0, [pc, #68]	; (80074fc <netbuf_next+0x5c>)
 80074b6:	f00d fc17 	bl	8014ce8 <iprintf>
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074be:	e014      	b.n	80074ea <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <netbuf_next+0x30>
    return -1;
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ce:	e00c      	b.n	80074ea <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <netbuf_next+0x48>
    return 1;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <netbuf_next+0x4a>
  }
  return 0;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	08016438 	.word	0x08016438
 80074f8:	08016598 	.word	0x08016598
 80074fc:	08016488 	.word	0x08016488

08007500 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8007508:	4b29      	ldr	r3, [pc, #164]	; (80075b0 <tcpip_thread+0xb0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8007510:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <tcpip_thread+0xb0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a27      	ldr	r2, [pc, #156]	; (80075b4 <tcpip_thread+0xb4>)
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800751c:	4826      	ldr	r0, [pc, #152]	; (80075b8 <tcpip_thread+0xb8>)
 800751e:	f00c fc55 	bl	8013dcc <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8007522:	4825      	ldr	r0, [pc, #148]	; (80075b8 <tcpip_thread+0xb8>)
 8007524:	f00c fc61 	bl	8013dea <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8007528:	f107 030c 	add.w	r3, r7, #12
 800752c:	4619      	mov	r1, r3
 800752e:	4823      	ldr	r0, [pc, #140]	; (80075bc <tcpip_thread+0xbc>)
 8007530:	f00b fdfa 	bl	8013128 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007534:	4820      	ldr	r0, [pc, #128]	; (80075b8 <tcpip_thread+0xb8>)
 8007536:	f00c fc49 	bl	8013dcc <sys_mutex_lock>
    if (msg == NULL) {
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d106      	bne.n	800754e <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <tcpip_thread+0xc0>)
 8007542:	2269      	movs	r2, #105	; 0x69
 8007544:	491f      	ldr	r1, [pc, #124]	; (80075c4 <tcpip_thread+0xc4>)
 8007546:	4820      	ldr	r0, [pc, #128]	; (80075c8 <tcpip_thread+0xc8>)
 8007548:	f00d fbce 	bl	8014ce8 <iprintf>
      continue;
 800754c:	e02f      	b.n	80075ae <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d011      	beq.n	800757a <tcpip_thread+0x7a>
 8007556:	2b04      	cmp	r3, #4
 8007558:	d01b      	beq.n	8007592 <tcpip_thread+0x92>
 800755a:	2b02      	cmp	r3, #2
 800755c:	d120      	bne.n	80075a0 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	6850      	ldr	r0, [r2, #4]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	4611      	mov	r1, r2
 800756c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4619      	mov	r1, r3
 8007572:	2009      	movs	r0, #9
 8007574:	f005 f91e 	bl	800c7b4 <memp_free>
      break;
 8007578:	e019      	b.n	80075ae <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	6892      	ldr	r2, [r2, #8]
 8007582:	4610      	mov	r0, r2
 8007584:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4619      	mov	r1, r3
 800758a:	2008      	movs	r0, #8
 800758c:	f005 f912 	bl	800c7b4 <memp_free>
      break;
 8007590:	e00d      	b.n	80075ae <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	6892      	ldr	r2, [r2, #8]
 800759a:	4610      	mov	r0, r2
 800759c:	4798      	blx	r3
      break;
 800759e:	e006      	b.n	80075ae <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <tcpip_thread+0xc0>)
 80075a2:	229b      	movs	r2, #155	; 0x9b
 80075a4:	4907      	ldr	r1, [pc, #28]	; (80075c4 <tcpip_thread+0xc4>)
 80075a6:	4808      	ldr	r0, [pc, #32]	; (80075c8 <tcpip_thread+0xc8>)
 80075a8:	f00d fb9e 	bl	8014ce8 <iprintf>
      break;
 80075ac:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80075ae:	e7b8      	b.n	8007522 <tcpip_thread+0x22>
 80075b0:	20003dec 	.word	0x20003dec
 80075b4:	20003df0 	.word	0x20003df0
 80075b8:	2000447c 	.word	0x2000447c
 80075bc:	20003df4 	.word	0x20003df4
 80075c0:	080165d0 	.word	0x080165d0
 80075c4:	08016600 	.word	0x08016600
 80075c8:	08016620 	.word	0x08016620

080075cc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80075d8:	481a      	ldr	r0, [pc, #104]	; (8007644 <tcpip_inpkt+0x78>)
 80075da:	f00c fb21 	bl	8013c20 <sys_mbox_valid>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <tcpip_inpkt+0x24>
 80075e4:	4b18      	ldr	r3, [pc, #96]	; (8007648 <tcpip_inpkt+0x7c>)
 80075e6:	22b5      	movs	r2, #181	; 0xb5
 80075e8:	4918      	ldr	r1, [pc, #96]	; (800764c <tcpip_inpkt+0x80>)
 80075ea:	4819      	ldr	r0, [pc, #100]	; (8007650 <tcpip_inpkt+0x84>)
 80075ec:	f00d fb7c 	bl	8014ce8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80075f0:	2009      	movs	r0, #9
 80075f2:	f005 f88d 	bl	800c710 <memp_malloc>
 80075f6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d102      	bne.n	8007604 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80075fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007602:	e01a      	b.n	800763a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	4809      	ldr	r0, [pc, #36]	; (8007644 <tcpip_inpkt+0x78>)
 8007620:	f00c fa89 	bl	8013b36 <sys_mbox_trypost>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800762a:	6979      	ldr	r1, [r7, #20]
 800762c:	2009      	movs	r0, #9
 800762e:	f005 f8c1 	bl	800c7b4 <memp_free>
    return ERR_MEM;
 8007632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007636:	e000      	b.n	800763a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007638:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20003df4 	.word	0x20003df4
 8007648:	080165d0 	.word	0x080165d0
 800764c:	08016648 	.word	0x08016648
 8007650:	08016620 	.word	0x08016620

08007654 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007664:	f003 0318 	and.w	r3, r3, #24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <tcpip_input+0x3c>)
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ffab 	bl	80075cc <tcpip_inpkt>
 8007676:	4603      	mov	r3, r0
 8007678:	e005      	b.n	8007686 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800767a:	4a06      	ldr	r2, [pc, #24]	; (8007694 <tcpip_input+0x40>)
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff ffa4 	bl	80075cc <tcpip_inpkt>
 8007684:	4603      	mov	r3, r0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	080138f9 	.word	0x080138f9
 8007694:	0800ae21 	.word	0x0800ae21

08007698 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80076a6:	481d      	ldr	r0, [pc, #116]	; (800771c <tcpip_callback_with_block+0x84>)
 80076a8:	f00c faba 	bl	8013c20 <sys_mbox_valid>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <tcpip_callback_with_block+0x26>
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <tcpip_callback_with_block+0x88>)
 80076b4:	22ee      	movs	r2, #238	; 0xee
 80076b6:	491b      	ldr	r1, [pc, #108]	; (8007724 <tcpip_callback_with_block+0x8c>)
 80076b8:	481b      	ldr	r0, [pc, #108]	; (8007728 <tcpip_callback_with_block+0x90>)
 80076ba:	f00d fb15 	bl	8014ce8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80076be:	2008      	movs	r0, #8
 80076c0:	f005 f826 	bl	800c710 <memp_malloc>
 80076c4:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d0:	e01f      	b.n	8007712 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2203      	movs	r2, #3
 80076d6:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	609a      	str	r2, [r3, #8]
  if (block) {
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80076ea:	6979      	ldr	r1, [r7, #20]
 80076ec:	480b      	ldr	r0, [pc, #44]	; (800771c <tcpip_callback_with_block+0x84>)
 80076ee:	f00c fa0d 	bl	8013b0c <sys_mbox_post>
 80076f2:	e00d      	b.n	8007710 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	4809      	ldr	r0, [pc, #36]	; (800771c <tcpip_callback_with_block+0x84>)
 80076f8:	f00c fa1d 	bl	8013b36 <sys_mbox_trypost>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	2008      	movs	r0, #8
 8007706:	f005 f855 	bl	800c7b4 <memp_free>
      return ERR_MEM;
 800770a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800770e:	e000      	b.n	8007712 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20003df4 	.word	0x20003df4
 8007720:	080165d0 	.word	0x080165d0
 8007724:	08016648 	.word	0x08016648
 8007728:	08016620 	.word	0x08016620

0800772c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <tcpip_send_msg_wait_sem+0x28>)
 800773a:	f00c fb47 	bl	8013dcc <sys_mutex_lock>
  fn(apimsg);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	68b8      	ldr	r0, [r7, #8]
 8007742:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8007744:	4803      	ldr	r0, [pc, #12]	; (8007754 <tcpip_send_msg_wait_sem+0x28>)
 8007746:	f00c fb50 	bl	8013dea <sys_mutex_unlock>
  return ERR_OK;
 800774a:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	2000447c 	.word	0x2000447c

08007758 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af02      	add	r7, sp, #8
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007762:	f000 fb2f 	bl	8007dc4 <lwip_init>

  tcpip_init_done = initfunc;
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <tcpip_init+0x6c>)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <tcpip_init+0x70>)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007772:	2106      	movs	r1, #6
 8007774:	4815      	ldr	r0, [pc, #84]	; (80077cc <tcpip_init+0x74>)
 8007776:	f00c f999 	bl	8013aac <sys_mbox_new>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007780:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <tcpip_init+0x78>)
 8007782:	f240 12d5 	movw	r2, #469	; 0x1d5
 8007786:	4913      	ldr	r1, [pc, #76]	; (80077d4 <tcpip_init+0x7c>)
 8007788:	4813      	ldr	r0, [pc, #76]	; (80077d8 <tcpip_init+0x80>)
 800778a:	f00d faad 	bl	8014ce8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800778e:	4813      	ldr	r0, [pc, #76]	; (80077dc <tcpip_init+0x84>)
 8007790:	f00c fb02 	bl	8013d98 <sys_mutex_new>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d006      	beq.n	80077a8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800779a:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <tcpip_init+0x78>)
 800779c:	f240 12d9 	movw	r2, #473	; 0x1d9
 80077a0:	490f      	ldr	r1, [pc, #60]	; (80077e0 <tcpip_init+0x88>)
 80077a2:	480d      	ldr	r0, [pc, #52]	; (80077d8 <tcpip_init+0x80>)
 80077a4:	f00d faa0 	bl	8014ce8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80077a8:	2303      	movs	r3, #3
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b0:	2200      	movs	r2, #0
 80077b2:	490c      	ldr	r1, [pc, #48]	; (80077e4 <tcpip_init+0x8c>)
 80077b4:	480c      	ldr	r0, [pc, #48]	; (80077e8 <tcpip_init+0x90>)
 80077b6:	f00c fb25 	bl	8013e04 <sys_thread_new>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20003dec 	.word	0x20003dec
 80077c8:	20003df0 	.word	0x20003df0
 80077cc:	20003df4 	.word	0x20003df4
 80077d0:	080165d0 	.word	0x080165d0
 80077d4:	08016658 	.word	0x08016658
 80077d8:	08016620 	.word	0x08016620
 80077dc:	2000447c 	.word	0x2000447c
 80077e0:	0801667c 	.word	0x0801667c
 80077e4:	08007501 	.word	0x08007501
 80077e8:	080166a0 	.word	0x080166a0

080077ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	ba5b      	rev16	r3, r3
 80077fa:	b29b      	uxth	r3, r3
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	061a      	lsls	r2, r3, #24
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	0a1b      	lsrs	r3, r3, #8
 8007822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	0e1b      	lsrs	r3, r3, #24
 800782c:	4313      	orrs	r3, r2
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800783a:	b480      	push	{r7}
 800783c:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800783e:	bf00      	nop
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d80f      	bhi.n	800787a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	4909      	ldr	r1, [pc, #36]	; (8007888 <dns_setserver+0x40>)
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800786c:	e005      	b.n	800787a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	4905      	ldr	r1, [pc, #20]	; (8007888 <dns_setserver+0x40>)
 8007872:	4a06      	ldr	r2, [pc, #24]	; (800788c <dns_setserver+0x44>)
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20004278 	.word	0x20004278
 800788c:	080189c4 	.word	0x080189c4

08007890 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8007894:	f000 fa82 	bl	8007d9c <dns_check_entries>
}
 8007898:	bf00      	nop
 800789a:	bd80      	pop	{r7, pc}

0800789c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b090      	sub	sp, #64	; 0x40
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
 80078a6:	79fa      	ldrb	r2, [r7, #7]
 80078a8:	4613      	mov	r3, r2
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	4413      	add	r3, r2
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	4a64      	ldr	r2, [pc, #400]	; (8007a44 <dns_send+0x1a8>)
 80078b2:	4413      	add	r3, r2
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	7adb      	ldrb	r3, [r3, #11]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d906      	bls.n	80078cc <dns_send+0x30>
 80078be:	4b62      	ldr	r3, [pc, #392]	; (8007a48 <dns_send+0x1ac>)
 80078c0:	f240 22ed 	movw	r2, #749	; 0x2ed
 80078c4:	4961      	ldr	r1, [pc, #388]	; (8007a4c <dns_send+0x1b0>)
 80078c6:	4862      	ldr	r0, [pc, #392]	; (8007a50 <dns_send+0x1b4>)
 80078c8:	f00d fa0e 	bl	8014ce8 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	7adb      	ldrb	r3, [r3, #11]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b60      	ldr	r3, [pc, #384]	; (8007a54 <dns_send+0x1b8>)
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <dns_send+0x54>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2100      	movs	r1, #0
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f8bb 	bl	8007a5c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	2200      	movs	r2, #0
 80078ea:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e0a4      	b.n	8007a3a <dns_send+0x19e>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	3310      	adds	r3, #16
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f8 fc6b 	bl	80001d0 <strlen>
 80078fa:	4603      	mov	r3, r0
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3312      	adds	r3, #18
 8007900:	b29b      	uxth	r3, r3
 8007902:	2200      	movs	r2, #0
 8007904:	4619      	mov	r1, r3
 8007906:	2000      	movs	r0, #0
 8007908:	f005 f944 	bl	800cb94 <pbuf_alloc>
 800790c:	62f8      	str	r0, [r7, #44]	; 0x2c
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 808d 	beq.w	8007a30 <dns_send+0x194>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8007916:	f107 0310 	add.w	r3, r7, #16
 800791a:	220c      	movs	r2, #12
 800791c:	2100      	movs	r1, #0
 800791e:	4618      	mov	r0, r3
 8007920:	f00d f9da 	bl	8014cd8 <memset>
    hdr.id = lwip_htons(entry->txid);
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	891b      	ldrh	r3, [r3, #8]
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff ff5f 	bl	80077ec <lwip_htons>
 800792e:	4603      	mov	r3, r0
 8007930:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8007932:	2301      	movs	r3, #1
 8007934:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8007936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800793a:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	220c      	movs	r2, #12
 8007942:	4619      	mov	r1, r3
 8007944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007946:	f005 ff59 	bl	800d7fc <pbuf_take>
    hostname = entry->name;
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	3310      	adds	r3, #16
 800794e:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	3b01      	subs	r3, #1
 8007954:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8007956:	230c      	movs	r3, #12
 8007958:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	3301      	adds	r3, #1
 800795e:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800796a:	e007      	b.n	800797c <dns_send+0xe0>
        ++n;
 800796c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007970:	3301      	adds	r3, #1
 8007972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	3301      	adds	r3, #1
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b2e      	cmp	r3, #46	; 0x2e
 8007982:	d003      	beq.n	800798c <dns_send+0xf0>
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1ef      	bne.n	800796c <dns_send+0xd0>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800798c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	84fb      	strh	r3, [r7, #38]	; 0x26
      pbuf_put_at(p, query_idx, n);
 8007994:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007998:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800799a:	4619      	mov	r1, r3
 800799c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800799e:	f006 f811 	bl	800d9c4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 80079a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079a4:	3301      	adds	r3, #1
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80079aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ae:	f005 ffb7 	bl	800d920 <pbuf_take_at>
      query_idx += n + 1;
 80079b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079ba:	4413      	add	r3, r2
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3301      	adds	r3, #1
 80079c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1c7      	bne.n	800795a <dns_send+0xbe>
    pbuf_put_at(p, query_idx, 0);
 80079ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079cc:	2200      	movs	r2, #0
 80079ce:	4619      	mov	r1, r3
 80079d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079d2:	f005 fff7 	bl	800d9c4 <pbuf_put_at>
    query_idx++;
 80079d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079d8:	3301      	adds	r3, #1
 80079da:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80079dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e0:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80079e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e6:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80079e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079ea:	f107 010c 	add.w	r1, r7, #12
 80079ee:	2204      	movs	r2, #4
 80079f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f2:	f005 ff95 	bl	800d920 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	7bdb      	ldrb	r3, [r3, #15]
 80079fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80079fe:	2335      	movs	r3, #53	; 0x35
 8007a00:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	7adb      	ldrb	r3, [r3, #11]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4a12      	ldr	r2, [pc, #72]	; (8007a54 <dns_send+0x1b8>)
 8007a0a:	4413      	add	r3, r2
 8007a0c:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8007a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a12:	4a11      	ldr	r2, [pc, #68]	; (8007a58 <dns_send+0x1bc>)
 8007a14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a1e:	f00b fd0b 	bl	8013438 <udp_sendto>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8007a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a2a:	f005 fc25 	bl	800d278 <pbuf_free>
 8007a2e:	e002      	b.n	8007a36 <dns_send+0x19a>
  } else {
    err = ERR_MEM;
 8007a30:	23ff      	movs	r3, #255	; 0xff
 8007a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8007a36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3740      	adds	r7, #64	; 0x40
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20003e08 	.word	0x20003e08
 8007a48:	080166b0 	.word	0x080166b0
 8007a4c:	080166e0 	.word	0x080166e0
 8007a50:	080166f8 	.word	0x080166f8
 8007a54:	20004278 	.word	0x20004278
 8007a58:	20003df8 	.word	0x20003df8

08007a5c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 8007a5c:	b590      	push	{r4, r7, lr}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
 8007a6c:	e03d      	b.n	8007aea <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8007a6e:	7bfa      	ldrb	r2, [r7, #15]
 8007a70:	4957      	ldr	r1, [pc, #348]	; (8007bd0 <dns_call_found+0x174>)
 8007a72:	4613      	mov	r3, r2
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d030      	beq.n	8007ae4 <dns_call_found+0x88>
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	4952      	ldr	r1, [pc, #328]	; (8007bd0 <dns_call_found+0x174>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	3308      	adds	r3, #8
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	79fa      	ldrb	r2, [r7, #7]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d124      	bne.n	8007ae4 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	494c      	ldr	r1, [pc, #304]	; (8007bd0 <dns_call_found+0x174>)
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	681c      	ldr	r4, [r3, #0]
 8007aaa:	79fa      	ldrb	r2, [r7, #7]
 8007aac:	4613      	mov	r3, r2
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	4413      	add	r3, r2
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	4a47      	ldr	r2, [pc, #284]	; (8007bd4 <dns_call_found+0x178>)
 8007ab8:	1898      	adds	r0, r3, r2
 8007aba:	7bfa      	ldrb	r2, [r7, #15]
 8007abc:	4944      	ldr	r1, [pc, #272]	; (8007bd0 <dns_call_found+0x174>)
 8007abe:	4613      	mov	r3, r2
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3304      	adds	r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8007ad2:	7bfa      	ldrb	r2, [r7, #15]
 8007ad4:	493e      	ldr	r1, [pc, #248]	; (8007bd0 <dns_call_found+0x174>)
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	73fb      	strb	r3, [r7, #15]
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d9be      	bls.n	8007a6e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
 8007af4:	e031      	b.n	8007b5a <dns_call_found+0xfe>
    if (i == idx) {
 8007af6:	7bfa      	ldrb	r2, [r7, #15]
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d029      	beq.n	8007b52 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8007afe:	7bfa      	ldrb	r2, [r7, #15]
 8007b00:	4934      	ldr	r1, [pc, #208]	; (8007bd4 <dns_call_found+0x178>)
 8007b02:	4613      	mov	r3, r2
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	4413      	add	r3, r2
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	440b      	add	r3, r1
 8007b0c:	330a      	adds	r3, #10
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d11f      	bne.n	8007b54 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8007b14:	7bfa      	ldrb	r2, [r7, #15]
 8007b16:	492f      	ldr	r1, [pc, #188]	; (8007bd4 <dns_call_found+0x178>)
 8007b18:	4613      	mov	r3, r2
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	4413      	add	r3, r2
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	440b      	add	r3, r1
 8007b22:	330f      	adds	r3, #15
 8007b24:	7819      	ldrb	r1, [r3, #0]
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	482a      	ldr	r0, [pc, #168]	; (8007bd4 <dns_call_found+0x178>)
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	4413      	add	r3, r2
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4403      	add	r3, r0
 8007b34:	330f      	adds	r3, #15
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d10b      	bne.n	8007b54 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007b3c:	79fa      	ldrb	r2, [r7, #7]
 8007b3e:	4925      	ldr	r1, [pc, #148]	; (8007bd4 <dns_call_found+0x178>)
 8007b40:	4613      	mov	r3, r2
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	4413      	add	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	440b      	add	r3, r1
 8007b4a:	330f      	adds	r3, #15
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	701a      	strb	r2, [r3, #0]
        break;
 8007b50:	e006      	b.n	8007b60 <dns_call_found+0x104>
      continue; /* only check other requests */
 8007b52:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	3301      	adds	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d9ca      	bls.n	8007af6 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8007b60:	79fa      	ldrb	r2, [r7, #7]
 8007b62:	491c      	ldr	r1, [pc, #112]	; (8007bd4 <dns_call_found+0x178>)
 8007b64:	4613      	mov	r3, r2
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	4413      	add	r3, r2
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	440b      	add	r3, r1
 8007b6e:	330f      	adds	r3, #15
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d827      	bhi.n	8007bc6 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8007b76:	79fa      	ldrb	r2, [r7, #7]
 8007b78:	4916      	ldr	r1, [pc, #88]	; (8007bd4 <dns_call_found+0x178>)
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	4413      	add	r3, r2
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	440b      	add	r3, r1
 8007b84:	330f      	adds	r3, #15
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4b13      	ldr	r3, [pc, #76]	; (8007bd8 <dns_call_found+0x17c>)
 8007b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f00b fe2b 	bl	80137ec <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8007b96:	79fa      	ldrb	r2, [r7, #7]
 8007b98:	490e      	ldr	r1, [pc, #56]	; (8007bd4 <dns_call_found+0x178>)
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	4413      	add	r3, r2
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	440b      	add	r3, r1
 8007ba4:	330f      	adds	r3, #15
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <dns_call_found+0x17c>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007bb2:	79fa      	ldrb	r2, [r7, #7]
 8007bb4:	4907      	ldr	r1, [pc, #28]	; (8007bd4 <dns_call_found+0x178>)
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4413      	add	r3, r2
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	440b      	add	r3, r1
 8007bc0:	330f      	adds	r3, #15
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd90      	pop	{r4, r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20004248 	.word	0x20004248
 8007bd4:	20003e08 	.word	0x20003e08
 8007bd8:	20003df8 	.word	0x20003df8

08007bdc <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8007be2:	f00d f8fd 	bl	8014de0 <rand>
 8007be6:	4603      	mov	r3, r0
 8007be8:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007bea:	2300      	movs	r3, #0
 8007bec:	71fb      	strb	r3, [r7, #7]
 8007bee:	e01a      	b.n	8007c26 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007bf0:	79fa      	ldrb	r2, [r7, #7]
 8007bf2:	4911      	ldr	r1, [pc, #68]	; (8007c38 <dns_create_txid+0x5c>)
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	4413      	add	r3, r2
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	440b      	add	r3, r1
 8007bfe:	330a      	adds	r3, #10
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d10c      	bne.n	8007c20 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8007c06:	79fa      	ldrb	r2, [r7, #7]
 8007c08:	490b      	ldr	r1, [pc, #44]	; (8007c38 <dns_create_txid+0x5c>)
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	4413      	add	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	440b      	add	r3, r1
 8007c14:	3308      	adds	r3, #8
 8007c16:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007c18:	88ba      	ldrh	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d100      	bne.n	8007c20 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8007c1e:	e7e0      	b.n	8007be2 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	3301      	adds	r3, #1
 8007c24:	71fb      	strb	r3, [r7, #7]
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d9e1      	bls.n	8007bf0 <dns_create_txid+0x14>
    }
  }

  return txid;
 8007c2c:	88bb      	ldrh	r3, [r7, #4]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20003e08 	.word	0x20003e08

08007c3c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8007c46:	79fa      	ldrb	r2, [r7, #7]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	4413      	add	r3, r2
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <dns_check_entry+0x148>)
 8007c52:	4413      	add	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d906      	bls.n	8007c6a <dns_check_entry+0x2e>
 8007c5c:	4b4a      	ldr	r3, [pc, #296]	; (8007d88 <dns_check_entry+0x14c>)
 8007c5e:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8007c62:	494a      	ldr	r1, [pc, #296]	; (8007d8c <dns_check_entry+0x150>)
 8007c64:	484a      	ldr	r0, [pc, #296]	; (8007d90 <dns_check_entry+0x154>)
 8007c66:	f00d f83f 	bl	8014ce8 <iprintf>

  switch (entry->state) {
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7a9b      	ldrb	r3, [r3, #10]
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d876      	bhi.n	8007d60 <dns_check_entry+0x124>
 8007c72:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <dns_check_entry+0x3c>)
 8007c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c78:	08007d71 	.word	0x08007d71
 8007c7c:	08007c89 	.word	0x08007c89
 8007c80:	08007cbb 	.word	0x08007cbb
 8007c84:	08007d3f 	.word	0x08007d3f
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8007c88:	f7ff ffa8 	bl	8007bdc <dns_create_txid>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2202      	movs	r2, #2
 8007c98:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fdf4 	bl	800789c <dns_send>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8007cb8:	e05f      	b.n	8007d7a <dns_check_entry+0x13e>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7b1b      	ldrb	r3, [r3, #12]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	731a      	strb	r2, [r3, #12]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	7b1b      	ldrb	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d152      	bne.n	8007d74 <dns_check_entry+0x138>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	7b5b      	ldrb	r3, [r3, #13]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	735a      	strb	r2, [r3, #13]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	7b5b      	ldrb	r3, [r3, #13]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d122      	bne.n	8007d28 <dns_check_entry+0xec>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	7adb      	ldrb	r3, [r3, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	dc14      	bgt.n	8007d16 <dns_check_entry+0xda>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	7adb      	ldrb	r3, [r3, #11]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <dns_check_entry+0x158>)
 8007cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <dns_check_entry+0xda>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	7adb      	ldrb	r3, [r3, #11]
 8007d00:	3301      	adds	r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	735a      	strb	r2, [r3, #13]
 8007d14:	e00c      	b.n	8007d30 <dns_check_entry+0xf4>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fe9e 	bl	8007a5c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	729a      	strb	r2, [r3, #10]
            break;
 8007d26:	e028      	b.n	8007d7a <dns_check_entry+0x13e>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	7b5a      	ldrb	r2, [r3, #13]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fdb2 	bl	800789c <dns_send>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8007d3c:	e01a      	b.n	8007d74 <dns_check_entry+0x138>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <dns_check_entry+0x11c>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	1e5a      	subs	r2, r3, #1
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10f      	bne.n	8007d78 <dns_check_entry+0x13c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	729a      	strb	r2, [r3, #10]
      }
      break;
 8007d5e:	e00b      	b.n	8007d78 <dns_check_entry+0x13c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8007d60:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <dns_check_entry+0x14c>)
 8007d62:	f240 4237 	movw	r2, #1079	; 0x437
 8007d66:	490c      	ldr	r1, [pc, #48]	; (8007d98 <dns_check_entry+0x15c>)
 8007d68:	4809      	ldr	r0, [pc, #36]	; (8007d90 <dns_check_entry+0x154>)
 8007d6a:	f00c ffbd 	bl	8014ce8 <iprintf>
      break;
 8007d6e:	e004      	b.n	8007d7a <dns_check_entry+0x13e>
      break;
 8007d70:	bf00      	nop
 8007d72:	e002      	b.n	8007d7a <dns_check_entry+0x13e>
      break;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <dns_check_entry+0x13e>
      break;
 8007d78:	bf00      	nop
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20003e08 	.word	0x20003e08
 8007d88:	080166b0 	.word	0x080166b0
 8007d8c:	08016720 	.word	0x08016720
 8007d90:	080166f8 	.word	0x080166f8
 8007d94:	20004278 	.word	0x20004278
 8007d98:	0801673c 	.word	0x0801673c

08007d9c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007da2:	2300      	movs	r3, #0
 8007da4:	71fb      	strb	r3, [r7, #7]
 8007da6:	e006      	b.n	8007db6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff ff46 	bl	8007c3c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	3301      	adds	r3, #1
 8007db4:	71fb      	strb	r3, [r7, #7]
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d9f5      	bls.n	8007da8 <dns_check_entries+0xc>
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007dce:	f00b ffd5 	bl	8013d7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007dd2:	f004 f985 	bl	800c0e0 <mem_init>
  memp_init();
 8007dd6:	f004 fc4f 	bl	800c678 <memp_init>
  pbuf_init();
  netif_init();
 8007dda:	f004 fd15 	bl	800c808 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007dde:	f00b f9c9 	bl	8013174 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007de2:	f005 fe11 	bl	800da08 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8007de6:	f7ff fd28 	bl	800783a <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8007dea:	f00b f859 	bl	8012ea0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8007dfc:	4b20      	ldr	r3, [pc, #128]	; (8007e80 <dhcp_inc_pcb_refcount+0x88>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d133      	bne.n	8007e6c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007e04:	4b1f      	ldr	r3, [pc, #124]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <dhcp_inc_pcb_refcount+0x20>
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	; (8007e88 <dhcp_inc_pcb_refcount+0x90>)
 8007e0e:	22d9      	movs	r2, #217	; 0xd9
 8007e10:	491e      	ldr	r1, [pc, #120]	; (8007e8c <dhcp_inc_pcb_refcount+0x94>)
 8007e12:	481f      	ldr	r0, [pc, #124]	; (8007e90 <dhcp_inc_pcb_refcount+0x98>)
 8007e14:	f00c ff68 	bl	8014ce8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8007e18:	f00b fd1a 	bl	8013850 <udp_new>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e20:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8007e22:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e2e:	e024      	b.n	8007e7a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007e30:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e36:	6812      	ldr	r2, [r2, #0]
 8007e38:	7a12      	ldrb	r2, [r2, #8]
 8007e3a:	f042 0220 	orr.w	r2, r2, #32
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8007e42:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2244      	movs	r2, #68	; 0x44
 8007e48:	4912      	ldr	r1, [pc, #72]	; (8007e94 <dhcp_inc_pcb_refcount+0x9c>)
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f00b fbf6 	bl	801363c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2243      	movs	r2, #67	; 0x43
 8007e56:	490f      	ldr	r1, [pc, #60]	; (8007e94 <dhcp_inc_pcb_refcount+0x9c>)
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f00b fc5f 	bl	801371c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <dhcp_inc_pcb_refcount+0x8c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	490c      	ldr	r1, [pc, #48]	; (8007e98 <dhcp_inc_pcb_refcount+0xa0>)
 8007e66:	4618      	mov	r0, r3
 8007e68:	f00b fcae 	bl	80137c8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <dhcp_inc_pcb_refcount+0x88>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	4b02      	ldr	r3, [pc, #8]	; (8007e80 <dhcp_inc_pcb_refcount+0x88>)
 8007e76:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20004284 	.word	0x20004284
 8007e84:	20004280 	.word	0x20004280
 8007e88:	0801675c 	.word	0x0801675c
 8007e8c:	08016794 	.word	0x08016794
 8007e90:	080167bc 	.word	0x080167bc
 8007e94:	080189c4 	.word	0x080189c4
 8007e98:	080095f5 	.word	0x080095f5

08007e9c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <dhcp_dec_pcb_refcount+0x40>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <dhcp_dec_pcb_refcount+0x18>
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <dhcp_dec_pcb_refcount+0x44>)
 8007eaa:	22f3      	movs	r2, #243	; 0xf3
 8007eac:	490d      	ldr	r1, [pc, #52]	; (8007ee4 <dhcp_dec_pcb_refcount+0x48>)
 8007eae:	480e      	ldr	r0, [pc, #56]	; (8007ee8 <dhcp_dec_pcb_refcount+0x4c>)
 8007eb0:	f00c ff1a 	bl	8014ce8 <iprintf>
  dhcp_pcb_refcount--;
 8007eb4:	4b09      	ldr	r3, [pc, #36]	; (8007edc <dhcp_dec_pcb_refcount+0x40>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	4b07      	ldr	r3, [pc, #28]	; (8007edc <dhcp_dec_pcb_refcount+0x40>)
 8007ebe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <dhcp_dec_pcb_refcount+0x40>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d107      	bne.n	8007ed8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <dhcp_dec_pcb_refcount+0x50>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f00b fc8d 	bl	80137ec <udp_remove>
    dhcp_pcb = NULL;
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <dhcp_dec_pcb_refcount+0x50>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]
  }
}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20004284 	.word	0x20004284
 8007ee0:	0801675c 	.word	0x0801675c
 8007ee4:	080167e4 	.word	0x080167e4
 8007ee8:	080167bc 	.word	0x080167bc
 8007eec:	20004280 	.word	0x20004280

08007ef0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007efe:	210c      	movs	r1, #12
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 ffa5 	bl	8008e50 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007f06:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <dhcp_handle_nak+0x30>)
 8007f08:	4a05      	ldr	r2, [pc, #20]	; (8007f20 <dhcp_handle_nak+0x30>)
 8007f0a:	4905      	ldr	r1, [pc, #20]	; (8007f20 <dhcp_handle_nak+0x30>)
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f004 fcdf 	bl	800c8d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fbd6 	bl	80086c4 <dhcp_discover>
}
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	080189c4 	.word	0x080189c4

08007f24 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8007f32:	2108      	movs	r1, #8
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 ff8b 	bl	8008e50 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3328      	adds	r3, #40	; 0x28
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f002 fb6c 	bl	800a620 <etharp_query>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7a9b      	ldrb	r3, [r3, #10]
 8007f50:	2bff      	cmp	r3, #255	; 0xff
 8007f52:	d005      	beq.n	8007f60 <dhcp_check+0x3c>
    dhcp->tries++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	7a9b      	ldrb	r3, [r3, #10]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8007f60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f64:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8007f66:	893b      	ldrh	r3, [r7, #8]
 8007f68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007f6c:	4a06      	ldr	r2, [pc, #24]	; (8007f88 <dhcp_check+0x64>)
 8007f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8007f72:	1152      	asrs	r2, r2, #5
 8007f74:	17db      	asrs	r3, r3, #31
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	10624dd3 	.word	0x10624dd3

08007f8c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	; (8007fcc <dhcp_handle_offer+0x40>)
 8007f9c:	789b      	ldrb	r3, [r3, #2]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00f      	beq.n	8007fc2 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <dhcp_handle_offer+0x44>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fc2e 	bl	8007808 <lwip_htonl>
 8007fac:	4602      	mov	r2, r0
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f809 	bl	8007fd4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20004498 	.word	0x20004498
 8007fd0:	200044a4 	.word	0x200044a4

08007fd4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	6938      	ldr	r0, [r7, #16]
 8007fe6:	f000 ff33 	bl	8008e50 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8007fea:	2203      	movs	r2, #3
 8007fec:	6939      	ldr	r1, [r7, #16]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f001 fbe2 	bl	80097b8 <dhcp_create_msg>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8007ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d159      	bne.n	80080b4 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008000:	2202      	movs	r2, #2
 8008002:	2139      	movs	r1, #57	; 0x39
 8008004:	6938      	ldr	r0, [r7, #16]
 8008006:	f000 ff3d 	bl	8008e84 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800800e:	4619      	mov	r1, r3
 8008010:	6938      	ldr	r0, [r7, #16]
 8008012:	f000 ff99 	bl	8008f48 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8008016:	2204      	movs	r2, #4
 8008018:	2132      	movs	r1, #50	; 0x32
 800801a:	6938      	ldr	r0, [r7, #16]
 800801c:	f000 ff32 	bl	8008e84 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff fbef 	bl	8007808 <lwip_htonl>
 800802a:	4603      	mov	r3, r0
 800802c:	4619      	mov	r1, r3
 800802e:	6938      	ldr	r0, [r7, #16]
 8008030:	f000 ffc6 	bl	8008fc0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8008034:	2204      	movs	r2, #4
 8008036:	2136      	movs	r1, #54	; 0x36
 8008038:	6938      	ldr	r0, [r7, #16]
 800803a:	f000 ff23 	bl	8008e84 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fbe0 	bl	8007808 <lwip_htonl>
 8008048:	4603      	mov	r3, r0
 800804a:	4619      	mov	r1, r3
 800804c:	6938      	ldr	r0, [r7, #16]
 800804e:	f000 ffb7 	bl	8008fc0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008052:	2204      	movs	r2, #4
 8008054:	2137      	movs	r1, #55	; 0x37
 8008056:	6938      	ldr	r0, [r7, #16]
 8008058:	f000 ff14 	bl	8008e84 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800805c:	2300      	movs	r3, #0
 800805e:	75fb      	strb	r3, [r7, #23]
 8008060:	e009      	b.n	8008076 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	4a29      	ldr	r2, [pc, #164]	; (800810c <dhcp_select+0x138>)
 8008066:	5cd3      	ldrb	r3, [r2, r3]
 8008068:	4619      	mov	r1, r3
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f000 ff44 	bl	8008ef8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	3301      	adds	r3, #1
 8008074:	75fb      	strb	r3, [r7, #23]
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d9f2      	bls.n	8008062 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800807c:	6938      	ldr	r0, [r7, #16]
 800807e:	f001 fd3f 	bl	8009b00 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	8a9b      	ldrh	r3, [r3, #20]
 800808a:	33f0      	adds	r3, #240	; 0xf0
 800808c:	b29b      	uxth	r3, r3
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f004 ff7d 	bl	800cf90 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008096:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <dhcp_select+0x13c>)
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	68d9      	ldr	r1, [r3, #12]
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <dhcp_select+0x140>)
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	2343      	movs	r3, #67	; 0x43
 80080a8:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <dhcp_select+0x144>)
 80080aa:	f00b fa2d 	bl	8013508 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80080ae:	6938      	ldr	r0, [r7, #16]
 80080b0:	f001 fce4 	bl	8009a7c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	7a9b      	ldrb	r3, [r3, #10]
 80080b8:	2bff      	cmp	r3, #255	; 0xff
 80080ba:	d005      	beq.n	80080c8 <dhcp_select+0xf4>
    dhcp->tries++;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	7a9b      	ldrb	r3, [r3, #10]
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	7a9b      	ldrb	r3, [r3, #10]
 80080cc:	2b05      	cmp	r3, #5
 80080ce:	d807      	bhi.n	80080e0 <dhcp_select+0x10c>
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	7a9b      	ldrb	r3, [r3, #10]
 80080d4:	461a      	mov	r2, r3
 80080d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080da:	4093      	lsls	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	e001      	b.n	80080e4 <dhcp_select+0x110>
 80080e0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80080e4:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80080e6:	89bb      	ldrh	r3, [r7, #12]
 80080e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80080ec:	4a0b      	ldr	r2, [pc, #44]	; (800811c <dhcp_select+0x148>)
 80080ee:	fb82 1203 	smull	r1, r2, r2, r3
 80080f2:	1152      	asrs	r2, r2, #5
 80080f4:	17db      	asrs	r3, r3, #31
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	2000000c 	.word	0x2000000c
 8008110:	20004280 	.word	0x20004280
 8008114:	080189c4 	.word	0x080189c4
 8008118:	080189c8 	.word	0x080189c8
 800811c:	10624dd3 	.word	0x10624dd3

08008120 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8008126:	4b27      	ldr	r3, [pc, #156]	; (80081c4 <dhcp_coarse_tmr+0xa4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800812c:	e042      	b.n	80081b4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d039      	beq.n	80081ae <dhcp_coarse_tmr+0x8e>
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	7a5b      	ldrb	r3, [r3, #9]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d035      	beq.n	80081ae <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008146:	2b00      	cmp	r3, #0
 8008148:	d012      	beq.n	8008170 <dhcp_coarse_tmr+0x50>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	8c1b      	ldrh	r3, [r3, #32]
 800814e:	3301      	adds	r3, #1
 8008150:	b29a      	uxth	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	841a      	strh	r2, [r3, #32]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	8c1a      	ldrh	r2, [r3, #32]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800815e:	429a      	cmp	r2, r3
 8008160:	d106      	bne.n	8008170 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fdb4 	bl	8008cd0 <dhcp_release>
        dhcp_discover(netif);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 faab 	bl	80086c4 <dhcp_discover>
 800816e:	e01e      	b.n	80081ae <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	8bdb      	ldrh	r3, [r3, #30]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <dhcp_coarse_tmr+0x70>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	8bdb      	ldrh	r3, [r3, #30]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	b291      	uxth	r1, r2
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	83d1      	strh	r1, [r2, #30]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d103      	bne.n	8008190 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8c6 	bl	800831a <dhcp_t2_timeout>
 800818e:	e00e      	b.n	80081ae <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	8b9b      	ldrh	r3, [r3, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <dhcp_coarse_tmr+0x8e>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	8b9b      	ldrh	r3, [r3, #28]
 800819c:	1e5a      	subs	r2, r3, #1
 800819e:	b291      	uxth	r1, r2
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	8391      	strh	r1, [r2, #28]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f888 	bl	80082be <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1b9      	bne.n	800812e <dhcp_coarse_tmr+0xe>
  }
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20007d1c 	.word	0x20007d1c

080081c8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80081ce:	4b16      	ldr	r3, [pc, #88]	; (8008228 <dhcp_fine_tmr+0x60>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 80081d4:	e020      	b.n	8008218 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d017      	beq.n	8008212 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	8adb      	ldrh	r3, [r3, #22]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d906      	bls.n	80081f8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	8adb      	ldrh	r3, [r3, #22]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	82da      	strh	r2, [r3, #22]
 80081f6:	e00c      	b.n	8008212 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	8adb      	ldrh	r3, [r3, #22]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d108      	bne.n	8008212 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	8adb      	ldrh	r3, [r3, #22]
 8008204:	3b01      	subs	r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f80d 	bl	800822c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1db      	bne.n	80081d6 <dhcp_fine_tmr+0xe>
  }
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20007d1c 	.word	0x20007d1c

0800822c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	7a5b      	ldrb	r3, [r3, #9]
 800823e:	2b0c      	cmp	r3, #12
 8008240:	d003      	beq.n	800824a <dhcp_timeout+0x1e>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	7a5b      	ldrb	r3, [r3, #9]
 8008246:	2b06      	cmp	r3, #6
 8008248:	d103      	bne.n	8008252 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa3a 	bl	80086c4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8008250:	e031      	b.n	80082b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	7a5b      	ldrb	r3, [r3, #9]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10e      	bne.n	8008278 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	7a9b      	ldrb	r3, [r3, #10]
 800825e:	2b05      	cmp	r3, #5
 8008260:	d803      	bhi.n	800826a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff feb6 	bl	8007fd4 <dhcp_select>
}
 8008268:	e025      	b.n	80082b6 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fd30 	bl	8008cd0 <dhcp_release>
      dhcp_discover(netif);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa27 	bl	80086c4 <dhcp_discover>
}
 8008276:	e01e      	b.n	80082b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	7a5b      	ldrb	r3, [r3, #9]
 800827c:	2b08      	cmp	r3, #8
 800827e:	d10b      	bne.n	8008298 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	7a9b      	ldrb	r3, [r3, #10]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d803      	bhi.n	8008290 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fe4b 	bl	8007f24 <dhcp_check>
}
 800828e:	e012      	b.n	80082b6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 faa3 	bl	80087dc <dhcp_bind>
}
 8008296:	e00e      	b.n	80082b6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	7a5b      	ldrb	r3, [r3, #9]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d10a      	bne.n	80082b6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	7a9b      	ldrb	r3, [r3, #10]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d803      	bhi.n	80082b0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc7d 	bl	8008ba8 <dhcp_reboot>
}
 80082ae:	e002      	b.n	80082b6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa07 	bl	80086c4 <dhcp_discover>
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	7a5b      	ldrb	r3, [r3, #9]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d007      	beq.n	80082e4 <dhcp_t1_timeout+0x26>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	7a5b      	ldrb	r3, [r3, #9]
 80082d8:	2b0a      	cmp	r3, #10
 80082da:	d003      	beq.n	80082e4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d116      	bne.n	8008312 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fb53 	bl	8008990 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	8b5b      	ldrh	r3, [r3, #26]
 80082ee:	461a      	mov	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8c1b      	ldrh	r3, [r3, #32]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	dd0b      	ble.n	8008312 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8b5b      	ldrh	r3, [r3, #26]
 80082fe:	461a      	mov	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8c1b      	ldrh	r3, [r3, #32]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	0fda      	lsrs	r2, r3, #31
 8008308:	4413      	add	r3, r2
 800830a:	105b      	asrs	r3, r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	7a5b      	ldrb	r3, [r3, #9]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d00b      	beq.n	8008348 <dhcp_t2_timeout+0x2e>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	7a5b      	ldrb	r3, [r3, #9]
 8008334:	2b0a      	cmp	r3, #10
 8008336:	d007      	beq.n	8008348 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800833c:	2b05      	cmp	r3, #5
 800833e:	d003      	beq.n	8008348 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	7a5b      	ldrb	r3, [r3, #9]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d116      	bne.n	8008376 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fba7 	bl	8008a9c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008352:	461a      	mov	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8c1b      	ldrh	r3, [r3, #32]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b01      	cmp	r3, #1
 800835c:	dd0b      	ble.n	8008376 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008362:	461a      	mov	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8c1b      	ldrh	r3, [r3, #32]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	0fda      	lsrs	r2, r3, #31
 800836c:	4413      	add	r3, r2
 800836e:	105b      	asrs	r3, r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2200      	movs	r2, #0
 8008392:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800839a:	4b37      	ldr	r3, [pc, #220]	; (8008478 <dhcp_handle_ack+0xf8>)
 800839c:	78db      	ldrb	r3, [r3, #3]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80083a2:	4b36      	ldr	r3, [pc, #216]	; (800847c <dhcp_handle_ack+0xfc>)
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80083aa:	4b33      	ldr	r3, [pc, #204]	; (8008478 <dhcp_handle_ack+0xf8>)
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80083b2:	4b32      	ldr	r3, [pc, #200]	; (800847c <dhcp_handle_ack+0xfc>)
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
 80083ba:	e004      	b.n	80083c6 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c0:	085a      	lsrs	r2, r3, #1
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <dhcp_handle_ack+0xf8>)
 80083c8:	795b      	ldrb	r3, [r3, #5]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80083ce:	4b2b      	ldr	r3, [pc, #172]	; (800847c <dhcp_handle_ack+0xfc>)
 80083d0:	695a      	ldr	r2, [r3, #20]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80083d6:	e007      	b.n	80083e8 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083dc:	4613      	mov	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	08da      	lsrs	r2, r3, #3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80083f2:	4b21      	ldr	r3, [pc, #132]	; (8008478 <dhcp_handle_ack+0xf8>)
 80083f4:	799b      	ldrb	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <dhcp_handle_ack+0xfc>)
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fa02 	bl	8007808 <lwip_htonl>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2201      	movs	r2, #1
 800840e:	72da      	strb	r2, [r3, #11]
 8008410:	e002      	b.n	8008418 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2200      	movs	r2, #0
 8008416:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8008418:	4b17      	ldr	r3, [pc, #92]	; (8008478 <dhcp_handle_ack+0xf8>)
 800841a:	79db      	ldrb	r3, [r3, #7]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d007      	beq.n	8008430 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8008420:	4b16      	ldr	r3, [pc, #88]	; (800847c <dhcp_handle_ack+0xfc>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff f9ef 	bl	8007808 <lwip_htonl>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	631a      	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8008430:	2300      	movs	r3, #0
 8008432:	75fb      	strb	r3, [r7, #23]
 8008434:	e013      	b.n	800845e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	3308      	adds	r3, #8
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <dhcp_handle_ack+0xfc>)
 800843c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff f9e1 	bl	8007808 <lwip_htonl>
 8008446:	4603      	mov	r3, r0
 8008448:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800844a:	f107 020c 	add.w	r2, r7, #12
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff f9f8 	bl	8007848 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	3301      	adds	r3, #1
 800845c:	75fb      	strb	r3, [r7, #23]
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d805      	bhi.n	8008470 <dhcp_handle_ack+0xf0>
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	3308      	adds	r3, #8
 8008468:	4a03      	ldr	r2, [pc, #12]	; (8008478 <dhcp_handle_ack+0xf8>)
 800846a:	5cd3      	ldrb	r3, [r2, r3]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e2      	bne.n	8008436 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8008470:	bf00      	nop
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20004498 	.word	0x20004498
 800847c:	200044a4 	.word	0x200044a4

08008480 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <dhcp_start+0x22>
 800848e:	4b3c      	ldr	r3, [pc, #240]	; (8008580 <dhcp_start+0x100>)
 8008490:	f240 22d6 	movw	r2, #726	; 0x2d6
 8008494:	493b      	ldr	r1, [pc, #236]	; (8008584 <dhcp_start+0x104>)
 8008496:	483c      	ldr	r0, [pc, #240]	; (8008588 <dhcp_start+0x108>)
 8008498:	f00c fc26 	bl	8014ce8 <iprintf>
 800849c:	f06f 030f 	mvn.w	r3, #15
 80084a0:	e069      	b.n	8008576 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <dhcp_start+0x44>
 80084b0:	4b33      	ldr	r3, [pc, #204]	; (8008580 <dhcp_start+0x100>)
 80084b2:	f240 22d7 	movw	r2, #727	; 0x2d7
 80084b6:	4935      	ldr	r1, [pc, #212]	; (800858c <dhcp_start+0x10c>)
 80084b8:	4833      	ldr	r0, [pc, #204]	; (8008588 <dhcp_start+0x108>)
 80084ba:	f00c fc15 	bl	8014ce8 <iprintf>
 80084be:	f06f 030f 	mvn.w	r3, #15
 80084c2:	e058      	b.n	8008576 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084ce:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80084d2:	d202      	bcs.n	80084da <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084d8:	e04d      	b.n	8008576 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10d      	bne.n	80084fc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80084e0:	2040      	movs	r0, #64	; 0x40
 80084e2:	f003 ffa5 	bl	800c430 <mem_malloc>
 80084e6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084f2:	e040      	b.n	8008576 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	621a      	str	r2, [r3, #32]
 80084fa:	e01b      	b.n	8008534 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <dhcp_start+0x92>
 8008504:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <dhcp_start+0x100>)
 8008506:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800850a:	4921      	ldr	r1, [pc, #132]	; (8008590 <dhcp_start+0x110>)
 800850c:	481e      	ldr	r0, [pc, #120]	; (8008588 <dhcp_start+0x108>)
 800850e:	f00c fbeb 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d006      	beq.n	8008528 <dhcp_start+0xa8>
 800851a:	4b19      	ldr	r3, [pc, #100]	; (8008580 <dhcp_start+0x100>)
 800851c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008520:	491c      	ldr	r1, [pc, #112]	; (8008594 <dhcp_start+0x114>)
 8008522:	4819      	ldr	r0, [pc, #100]	; (8008588 <dhcp_start+0x108>)
 8008524:	f00c fbe0 	bl	8014ce8 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	7a1b      	ldrb	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008530:	f7ff fcb4 	bl	8007e9c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8008534:	2240      	movs	r2, #64	; 0x40
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f00c fbcd 	bl	8014cd8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800853e:	f7ff fc5b 	bl	8007df8 <dhcp_inc_pcb_refcount>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <dhcp_start+0xce>
    return ERR_MEM;
 8008548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854c:	e013      	b.n	8008576 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8b5 	bl	80086c4 <dhcp_discover>
 800855a:	4603      	mov	r3, r0
 800855c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800855e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fc3a 	bl	8008de0 <dhcp_stop>
    return ERR_MEM;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008570:	e001      	b.n	8008576 <dhcp_start+0xf6>
  }
  return result;
 8008572:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	0801675c 	.word	0x0801675c
 8008584:	08016808 	.word	0x08016808
 8008588:	080167bc 	.word	0x080167bc
 800858c:	0801684c 	.word	0x0801684c
 8008590:	08016870 	.word	0x08016870
 8008594:	08016888 	.word	0x08016888

08008598 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d107      	bne.n	80085b8 <dhcp_arp_reply+0x20>
 80085a8:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <dhcp_arp_reply+0x4c>)
 80085aa:	f240 327b 	movw	r2, #891	; 0x37b
 80085ae:	490e      	ldr	r1, [pc, #56]	; (80085e8 <dhcp_arp_reply+0x50>)
 80085b0:	480e      	ldr	r0, [pc, #56]	; (80085ec <dhcp_arp_reply+0x54>)
 80085b2:	f00c fb99 	bl	8014ce8 <iprintf>
 80085b6:	e012      	b.n	80085de <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00c      	beq.n	80085de <dhcp_arp_reply+0x46>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	7a5b      	ldrb	r3, [r3, #9]
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d108      	bne.n	80085de <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d102      	bne.n	80085de <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f809 	bl	80085f0 <dhcp_decline>
    }
  }
}
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	0801675c 	.word	0x0801675c
 80085e8:	08016808 	.word	0x08016808
 80085ec:	080167bc 	.word	0x080167bc

080085f0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008602:	210c      	movs	r1, #12
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fc23 	bl	8008e50 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800860a:	2204      	movs	r2, #4
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 f8d2 	bl	80097b8 <dhcp_create_msg>
 8008614:	4603      	mov	r3, r0
 8008616:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8008618:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d12a      	bne.n	8008676 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8008620:	2204      	movs	r2, #4
 8008622:	2132      	movs	r1, #50	; 0x32
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fc2d 	bl	8008e84 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff f8ea 	bl	8007808 <lwip_htonl>
 8008634:	4603      	mov	r3, r0
 8008636:	4619      	mov	r1, r3
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fcc1 	bl	8008fc0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 fa5e 	bl	8009b00 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8a9b      	ldrh	r3, [r3, #20]
 800864c:	33f0      	adds	r3, #240	; 0xf0
 800864e:	b29b      	uxth	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f004 fc9c 	bl	800cf90 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008658:	4b16      	ldr	r3, [pc, #88]	; (80086b4 <dhcp_decline+0xc4>)
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68d9      	ldr	r1, [r3, #12]
 8008660:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <dhcp_decline+0xc8>)
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2343      	movs	r3, #67	; 0x43
 800866a:	4a14      	ldr	r2, [pc, #80]	; (80086bc <dhcp_decline+0xcc>)
 800866c:	f00a ff4c 	bl	8013508 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f001 fa03 	bl	8009a7c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	7a9b      	ldrb	r3, [r3, #10]
 800867a:	2bff      	cmp	r3, #255	; 0xff
 800867c:	d005      	beq.n	800868a <dhcp_decline+0x9a>
    dhcp->tries++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	7a9b      	ldrb	r3, [r3, #10]
 8008682:	3301      	adds	r3, #1
 8008684:	b2da      	uxtb	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800868a:	f242 7310 	movw	r3, #10000	; 0x2710
 800868e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008690:	893b      	ldrh	r3, [r7, #8]
 8008692:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008696:	4a0a      	ldr	r2, [pc, #40]	; (80086c0 <dhcp_decline+0xd0>)
 8008698:	fb82 1203 	smull	r1, r2, r2, r3
 800869c:	1152      	asrs	r2, r2, #5
 800869e:	17db      	asrs	r3, r3, #31
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80086a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20004280 	.word	0x20004280
 80086b8:	080189c4 	.word	0x080189c4
 80086bc:	080189c8 	.word	0x080189c8
 80086c0:	10624dd3 	.word	0x10624dd3

080086c4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2200      	movs	r2, #0
 80086da:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80086dc:	2106      	movs	r1, #6
 80086de:	6938      	ldr	r0, [r7, #16]
 80086e0:	f000 fbb6 	bl	8008e50 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80086e4:	2201      	movs	r2, #1
 80086e6:	6939      	ldr	r1, [r7, #16]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 f865 	bl	80097b8 <dhcp_create_msg>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80086f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d13b      	bne.n	8008772 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80086fa:	2202      	movs	r2, #2
 80086fc:	2139      	movs	r1, #57	; 0x39
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f000 fbc0 	bl	8008e84 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008708:	4619      	mov	r1, r3
 800870a:	6938      	ldr	r0, [r7, #16]
 800870c:	f000 fc1c 	bl	8008f48 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008710:	2204      	movs	r2, #4
 8008712:	2137      	movs	r1, #55	; 0x37
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	f000 fbb5 	bl	8008e84 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
 800871e:	e009      	b.n	8008734 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	4a29      	ldr	r2, [pc, #164]	; (80087c8 <dhcp_discover+0x104>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	4619      	mov	r1, r3
 8008728:	6938      	ldr	r0, [r7, #16]
 800872a:	f000 fbe5 	bl	8008ef8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	3301      	adds	r3, #1
 8008732:	75fb      	strb	r3, [r7, #23]
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	2b03      	cmp	r3, #3
 8008738:	d9f2      	bls.n	8008720 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f001 f9e0 	bl	8009b00 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	8a9b      	ldrh	r3, [r3, #20]
 8008748:	33f0      	adds	r3, #240	; 0xf0
 800874a:	b29b      	uxth	r3, r3
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f004 fc1e 	bl	800cf90 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8008754:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <dhcp_discover+0x108>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	68d9      	ldr	r1, [r3, #12]
 800875c:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <dhcp_discover+0x10c>)
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2343      	movs	r3, #67	; 0x43
 8008766:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <dhcp_discover+0x110>)
 8008768:	f00a fece 	bl	8013508 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800876c:	6938      	ldr	r0, [r7, #16]
 800876e:	f001 f985 	bl	8009a7c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	7a9b      	ldrb	r3, [r3, #10]
 8008776:	2bff      	cmp	r3, #255	; 0xff
 8008778:	d005      	beq.n	8008786 <dhcp_discover+0xc2>
    dhcp->tries++;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	7a9b      	ldrb	r3, [r3, #10]
 800877e:	3301      	adds	r3, #1
 8008780:	b2da      	uxtb	r2, r3
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	7a9b      	ldrb	r3, [r3, #10]
 800878a:	2b05      	cmp	r3, #5
 800878c:	d807      	bhi.n	800879e <dhcp_discover+0xda>
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	7a9b      	ldrb	r3, [r3, #10]
 8008792:	461a      	mov	r2, r3
 8008794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008798:	4093      	lsls	r3, r2
 800879a:	b29b      	uxth	r3, r3
 800879c:	e001      	b.n	80087a2 <dhcp_discover+0xde>
 800879e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80087a2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80087a4:	89bb      	ldrh	r3, [r7, #12]
 80087a6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80087aa:	4a0b      	ldr	r2, [pc, #44]	; (80087d8 <dhcp_discover+0x114>)
 80087ac:	fb82 1203 	smull	r1, r2, r2, r3
 80087b0:	1152      	asrs	r2, r2, #5
 80087b2:	17db      	asrs	r3, r3, #31
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80087bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	2000000c 	.word	0x2000000c
 80087cc:	20004280 	.word	0x20004280
 80087d0:	080189c4 	.word	0x080189c4
 80087d4:	080189c8 	.word	0x080189c8
 80087d8:	10624dd3 	.word	0x10624dd3

080087dc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <dhcp_bind+0x1e>
 80087ea:	4b64      	ldr	r3, [pc, #400]	; (800897c <dhcp_bind+0x1a0>)
 80087ec:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80087f0:	4963      	ldr	r1, [pc, #396]	; (8008980 <dhcp_bind+0x1a4>)
 80087f2:	4864      	ldr	r0, [pc, #400]	; (8008984 <dhcp_bind+0x1a8>)
 80087f4:	f00c fa78 	bl	8014ce8 <iprintf>
 80087f8:	e0bc      	b.n	8008974 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <dhcp_bind+0x3a>
 8008806:	4b5d      	ldr	r3, [pc, #372]	; (800897c <dhcp_bind+0x1a0>)
 8008808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800880c:	495e      	ldr	r1, [pc, #376]	; (8008988 <dhcp_bind+0x1ac>)
 800880e:	485d      	ldr	r0, [pc, #372]	; (8008984 <dhcp_bind+0x1a8>)
 8008810:	f00c fa6a 	bl	8014ce8 <iprintf>
 8008814:	e0ae      	b.n	8008974 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2200      	movs	r2, #0
 800881a:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008824:	d019      	beq.n	800885a <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	331e      	adds	r3, #30
 800882c:	4a57      	ldr	r2, [pc, #348]	; (800898c <dhcp_bind+0x1b0>)
 800882e:	fba2 2303 	umull	r2, r3, r2, r3
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800883c:	d302      	bcc.n	8008844 <dhcp_bind+0x68>
       timeout = 0xffff;
 800883e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008842:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	b29a      	uxth	r2, r3
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008850:	2b00      	cmp	r3, #0
 8008852:	d102      	bne.n	800885a <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2201      	movs	r2, #1
 8008858:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008862:	d01d      	beq.n	80088a0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	331e      	adds	r3, #30
 800886a:	4a48      	ldr	r2, [pc, #288]	; (800898c <dhcp_bind+0x1b0>)
 800886c:	fba2 2303 	umull	r2, r3, r2, r3
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887a:	d302      	bcc.n	8008882 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800887c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008880:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	b29a      	uxth	r2, r3
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	8b1b      	ldrh	r3, [r3, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2201      	movs	r2, #1
 8008896:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	8b1a      	ldrh	r2, [r3, #24]
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088a8:	d01d      	beq.n	80088e6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	331e      	adds	r3, #30
 80088b0:	4a36      	ldr	r2, [pc, #216]	; (800898c <dhcp_bind+0x1b0>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	095b      	lsrs	r3, r3, #5
 80088b8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c0:	d302      	bcc.n	80088c8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80088c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088c6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	8b5b      	ldrh	r3, [r3, #26]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	2201      	movs	r2, #1
 80088dc:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	8b5a      	ldrh	r2, [r3, #26]
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	8b1a      	ldrh	r2, [r3, #24]
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	8b5b      	ldrh	r3, [r3, #26]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d306      	bcc.n	8008900 <dhcp_bind+0x124>
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	8b5b      	ldrh	r3, [r3, #26]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2200      	movs	r2, #0
 80088fe:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	7adb      	ldrb	r3, [r3, #11]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	613b      	str	r3, [r7, #16]
 800890e:	e014      	b.n	800893a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	3328      	adds	r3, #40	; 0x28
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8008918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	db02      	blt.n	8008926 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008920:	23ff      	movs	r3, #255	; 0xff
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e009      	b.n	800893a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2bbf      	cmp	r3, #191	; 0xbf
 800892a:	d903      	bls.n	8008934 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800892c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e002      	b.n	800893a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008938:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d108      	bne.n	8008958 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4013      	ands	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008956:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8008958:	210a      	movs	r1, #10
 800895a:	69b8      	ldr	r0, [r7, #24]
 800895c:	f000 fa78 	bl	8008e50 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008966:	f107 030c 	add.w	r3, r7, #12
 800896a:	f107 0210 	add.w	r2, r7, #16
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f003 ffae 	bl	800c8d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8008974:	3720      	adds	r7, #32
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	0801675c 	.word	0x0801675c
 8008980:	0801689c 	.word	0x0801689c
 8008984:	080167bc 	.word	0x080167bc
 8008988:	080168b8 	.word	0x080168b8
 800898c:	88888889 	.word	0x88888889

08008990 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800899e:	2105      	movs	r1, #5
 80089a0:	6938      	ldr	r0, [r7, #16]
 80089a2:	f000 fa55 	bl	8008e50 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80089a6:	2203      	movs	r2, #3
 80089a8:	6939      	ldr	r1, [r7, #16]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 ff04 	bl	80097b8 <dhcp_create_msg>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80089b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d13b      	bne.n	8008a34 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80089bc:	2202      	movs	r2, #2
 80089be:	2139      	movs	r1, #57	; 0x39
 80089c0:	6938      	ldr	r0, [r7, #16]
 80089c2:	f000 fa5f 	bl	8008e84 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089ca:	4619      	mov	r1, r3
 80089cc:	6938      	ldr	r0, [r7, #16]
 80089ce:	f000 fabb 	bl	8008f48 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80089d2:	2204      	movs	r2, #4
 80089d4:	2137      	movs	r1, #55	; 0x37
 80089d6:	6938      	ldr	r0, [r7, #16]
 80089d8:	f000 fa54 	bl	8008e84 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
 80089e0:	e009      	b.n	80089f6 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <dhcp_renew+0x100>)
 80089e6:	5cd3      	ldrb	r3, [r2, r3]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6938      	ldr	r0, [r7, #16]
 80089ec:	f000 fa84 	bl	8008ef8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	3301      	adds	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d9f2      	bls.n	80089e2 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 80089fc:	6938      	ldr	r0, [r7, #16]
 80089fe:	f001 f87f 	bl	8009b00 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	8a9b      	ldrh	r3, [r3, #20]
 8008a0a:	33f0      	adds	r3, #240	; 0xf0
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f004 fabd 	bl	800cf90 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8008a16:	4b1f      	ldr	r3, [pc, #124]	; (8008a94 <dhcp_renew+0x104>)
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	68d9      	ldr	r1, [r3, #12]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	2343      	movs	r3, #67	; 0x43
 8008a2a:	f00a fd2f 	bl	801348c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008a2e:	6938      	ldr	r0, [r7, #16]
 8008a30:	f001 f824 	bl	8009a7c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	7a9b      	ldrb	r3, [r3, #10]
 8008a38:	2bff      	cmp	r3, #255	; 0xff
 8008a3a:	d005      	beq.n	8008a48 <dhcp_renew+0xb8>
    dhcp->tries++;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	7a9b      	ldrb	r3, [r3, #10]
 8008a40:	3301      	adds	r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	7a9b      	ldrb	r3, [r3, #10]
 8008a4c:	2b09      	cmp	r3, #9
 8008a4e:	d80a      	bhi.n	8008a66 <dhcp_renew+0xd6>
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	7a9b      	ldrb	r3, [r3, #10]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	0152      	lsls	r2, r2, #5
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	0092      	lsls	r2, r2, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	e001      	b.n	8008a6a <dhcp_renew+0xda>
 8008a66:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008a6a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008a6c:	89bb      	ldrh	r3, [r7, #12]
 8008a6e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008a72:	4a09      	ldr	r2, [pc, #36]	; (8008a98 <dhcp_renew+0x108>)
 8008a74:	fb82 1203 	smull	r1, r2, r2, r3
 8008a78:	1152      	asrs	r2, r2, #5
 8008a7a:	17db      	asrs	r3, r3, #31
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	2000000c 	.word	0x2000000c
 8008a94:	20004280 	.word	0x20004280
 8008a98:	10624dd3 	.word	0x10624dd3

08008a9c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8008aaa:	2104      	movs	r1, #4
 8008aac:	6938      	ldr	r0, [r7, #16]
 8008aae:	f000 f9cf 	bl	8008e50 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	6939      	ldr	r1, [r7, #16]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fe7e 	bl	80097b8 <dhcp_create_msg>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8008ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d139      	bne.n	8008b3c <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008ac8:	2202      	movs	r2, #2
 8008aca:	2139      	movs	r1, #57	; 0x39
 8008acc:	6938      	ldr	r0, [r7, #16]
 8008ace:	f000 f9d9 	bl	8008e84 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6938      	ldr	r0, [r7, #16]
 8008ada:	f000 fa35 	bl	8008f48 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008ade:	2204      	movs	r2, #4
 8008ae0:	2137      	movs	r1, #55	; 0x37
 8008ae2:	6938      	ldr	r0, [r7, #16]
 8008ae4:	f000 f9ce 	bl	8008e84 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008ae8:	2300      	movs	r3, #0
 8008aea:	75fb      	strb	r3, [r7, #23]
 8008aec:	e009      	b.n	8008b02 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	4a29      	ldr	r2, [pc, #164]	; (8008b98 <dhcp_rebind+0xfc>)
 8008af2:	5cd3      	ldrb	r3, [r2, r3]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6938      	ldr	r0, [r7, #16]
 8008af8:	f000 f9fe 	bl	8008ef8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008afc:	7dfb      	ldrb	r3, [r7, #23]
 8008afe:	3301      	adds	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d9f2      	bls.n	8008aee <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8008b08:	6938      	ldr	r0, [r7, #16]
 8008b0a:	f000 fff9 	bl	8009b00 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	8a9b      	ldrh	r3, [r3, #20]
 8008b16:	33f0      	adds	r3, #240	; 0xf0
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f004 fa37 	bl	800cf90 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8008b22:	4b1e      	ldr	r3, [pc, #120]	; (8008b9c <dhcp_rebind+0x100>)
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	68d9      	ldr	r1, [r3, #12]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2343      	movs	r3, #67	; 0x43
 8008b30:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <dhcp_rebind+0x104>)
 8008b32:	f00a fcab 	bl	801348c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f000 ffa0 	bl	8009a7c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	7a9b      	ldrb	r3, [r3, #10]
 8008b40:	2bff      	cmp	r3, #255	; 0xff
 8008b42:	d005      	beq.n	8008b50 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	7a9b      	ldrb	r3, [r3, #10]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	7a9b      	ldrb	r3, [r3, #10]
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d80a      	bhi.n	8008b6e <dhcp_rebind+0xd2>
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	7a9b      	ldrb	r3, [r3, #10]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	0152      	lsls	r2, r2, #5
 8008b62:	1ad2      	subs	r2, r2, r3
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	e001      	b.n	8008b72 <dhcp_rebind+0xd6>
 8008b6e:	f242 7310 	movw	r3, #10000	; 0x2710
 8008b72:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008b7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ba4 <dhcp_rebind+0x108>)
 8008b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8008b80:	1152      	asrs	r2, r2, #5
 8008b82:	17db      	asrs	r3, r3, #31
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	2000000c 	.word	0x2000000c
 8008b9c:	20004280 	.word	0x20004280
 8008ba0:	080189c8 	.word	0x080189c8
 8008ba4:	10624dd3 	.word	0x10624dd3

08008ba8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af02      	add	r7, sp, #8
 8008bae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	6938      	ldr	r0, [r7, #16]
 8008bba:	f000 f949 	bl	8008e50 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	6939      	ldr	r1, [r7, #16]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fdf8 	bl	80097b8 <dhcp_create_msg>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8008bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d147      	bne.n	8008c64 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	2139      	movs	r1, #57	; 0x39
 8008bd8:	6938      	ldr	r0, [r7, #16]
 8008bda:	f000 f953 	bl	8008e84 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008be2:	6938      	ldr	r0, [r7, #16]
 8008be4:	f000 f9b0 	bl	8008f48 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8008be8:	2204      	movs	r2, #4
 8008bea:	2132      	movs	r1, #50	; 0x32
 8008bec:	6938      	ldr	r0, [r7, #16]
 8008bee:	f000 f949 	bl	8008e84 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fe06 	bl	8007808 <lwip_htonl>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6938      	ldr	r0, [r7, #16]
 8008c02:	f000 f9dd 	bl	8008fc0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008c06:	2204      	movs	r2, #4
 8008c08:	2137      	movs	r1, #55	; 0x37
 8008c0a:	6938      	ldr	r0, [r7, #16]
 8008c0c:	f000 f93a 	bl	8008e84 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
 8008c14:	e009      	b.n	8008c2a <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	4a29      	ldr	r2, [pc, #164]	; (8008cc0 <dhcp_reboot+0x118>)
 8008c1a:	5cd3      	ldrb	r3, [r2, r3]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6938      	ldr	r0, [r7, #16]
 8008c20:	f000 f96a 	bl	8008ef8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	3301      	adds	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d9f2      	bls.n	8008c16 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8008c30:	6938      	ldr	r0, [r7, #16]
 8008c32:	f000 ff65 	bl	8009b00 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	8a9b      	ldrh	r3, [r3, #20]
 8008c3e:	33f0      	adds	r3, #240	; 0xf0
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f004 f9a3 	bl	800cf90 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <dhcp_reboot+0x11c>)
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2343      	movs	r3, #67	; 0x43
 8008c58:	4a1b      	ldr	r2, [pc, #108]	; (8008cc8 <dhcp_reboot+0x120>)
 8008c5a:	f00a fc17 	bl	801348c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008c5e:	6938      	ldr	r0, [r7, #16]
 8008c60:	f000 ff0c 	bl	8009a7c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	7a9b      	ldrb	r3, [r3, #10]
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d005      	beq.n	8008c78 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	7a9b      	ldrb	r3, [r3, #10]
 8008c70:	3301      	adds	r3, #1
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	7a9b      	ldrb	r3, [r3, #10]
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d80a      	bhi.n	8008c96 <dhcp_reboot+0xee>
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	7a9b      	ldrb	r3, [r3, #10]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	0152      	lsls	r2, r2, #5
 8008c8a:	1ad2      	subs	r2, r2, r3
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	e001      	b.n	8008c9a <dhcp_reboot+0xf2>
 8008c96:	f242 7310 	movw	r3, #10000	; 0x2710
 8008c9a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8008c9c:	89bb      	ldrh	r3, [r7, #12]
 8008c9e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <dhcp_reboot+0x124>)
 8008ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8008ca8:	1152      	asrs	r2, r2, #5
 8008caa:	17db      	asrs	r3, r3, #31
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3718      	adds	r7, #24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	2000000c 	.word	0x2000000c
 8008cc4:	20004280 	.word	0x20004280
 8008cc8:	080189c8 	.word	0x080189c8
 8008ccc:	10624dd3 	.word	0x10624dd3

08008cd0 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <dhcp_release+0x1a>
    return ERR_ARG;
 8008ce4:	f06f 030f 	mvn.w	r3, #15
 8008ce8:	e072      	b.n	8008dd0 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 ff5f 	bl	8009bb4 <dhcp_supplied_address>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6978      	ldr	r0, [r7, #20]
 8008cfe:	f000 f8a7 	bl	8008e50 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2200      	movs	r2, #0
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2200      	movs	r2, #0
 8008d18:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2200      	movs	r2, #0
 8008d34:	845a      	strh	r2, [r3, #34]	; 0x22
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	841a      	strh	r2, [r3, #32]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	8c1a      	ldrh	r2, [r3, #32]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	83da      	strh	r2, [r3, #30]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	8bda      	ldrh	r2, [r3, #30]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8008d4e:	7cfb      	ldrb	r3, [r7, #19]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e03b      	b.n	8008dd0 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8008d58:	2207      	movs	r2, #7
 8008d5a:	6979      	ldr	r1, [r7, #20]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd2b 	bl	80097b8 <dhcp_create_msg>
 8008d62:	4603      	mov	r3, r0
 8008d64:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8008d66:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d128      	bne.n	8008dc0 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8008d6e:	2204      	movs	r2, #4
 8008d70:	2136      	movs	r1, #54	; 0x36
 8008d72:	6978      	ldr	r0, [r7, #20]
 8008d74:	f000 f886 	bl	8008e84 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fd44 	bl	8007808 <lwip_htonl>
 8008d80:	4603      	mov	r3, r0
 8008d82:	4619      	mov	r1, r3
 8008d84:	6978      	ldr	r0, [r7, #20]
 8008d86:	f000 f91b 	bl	8008fc0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8008d8a:	6978      	ldr	r0, [r7, #20]
 8008d8c:	f000 feb8 	bl	8009b00 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	8a9b      	ldrh	r3, [r3, #20]
 8008d98:	33f0      	adds	r3, #240	; 0xf0
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f004 f8f6 	bl	800cf90 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <dhcp_release+0x108>)
 8008da6:	6818      	ldr	r0, [r3, #0]
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	68d9      	ldr	r1, [r3, #12]
 8008dac:	f107 020c 	add.w	r2, r7, #12
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	2343      	movs	r3, #67	; 0x43
 8008db6:	f00a fb69 	bl	801348c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8008dba:	6978      	ldr	r0, [r7, #20]
 8008dbc:	f000 fe5e 	bl	8009a7c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <dhcp_release+0x10c>)
 8008dc2:	4a06      	ldr	r2, [pc, #24]	; (8008ddc <dhcp_release+0x10c>)
 8008dc4:	4905      	ldr	r1, [pc, #20]	; (8008ddc <dhcp_release+0x10c>)
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f003 fd82 	bl	800c8d0 <netif_set_addr>

  return result;
 8008dcc:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20004280 	.word	0x20004280
 8008ddc:	080189c4 	.word	0x080189c4

08008de0 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d107      	bne.n	8008dfe <dhcp_stop+0x1e>
 8008dee:	4b14      	ldr	r3, [pc, #80]	; (8008e40 <dhcp_stop+0x60>)
 8008df0:	f240 5242 	movw	r2, #1346	; 0x542
 8008df4:	4913      	ldr	r1, [pc, #76]	; (8008e44 <dhcp_stop+0x64>)
 8008df6:	4814      	ldr	r0, [pc, #80]	; (8008e48 <dhcp_stop+0x68>)
 8008df8:	f00b ff76 	bl	8014ce8 <iprintf>
 8008dfc:	e01d      	b.n	8008e3a <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d017      	beq.n	8008e3a <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d006      	beq.n	8008e20 <dhcp_stop+0x40>
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <dhcp_stop+0x60>)
 8008e14:	f240 524f 	movw	r2, #1359	; 0x54f
 8008e18:	490c      	ldr	r1, [pc, #48]	; (8008e4c <dhcp_stop+0x6c>)
 8008e1a:	480b      	ldr	r0, [pc, #44]	; (8008e48 <dhcp_stop+0x68>)
 8008e1c:	f00b ff64 	bl	8014ce8 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008e20:	2100      	movs	r1, #0
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f814 	bl	8008e50 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	7a1b      	ldrb	r3, [r3, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d004      	beq.n	8008e3a <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008e30:	f7ff f834 	bl	8007e9c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	0801675c 	.word	0x0801675c
 8008e44:	080168d0 	.word	0x080168d0
 8008e48:	080167bc 	.word	0x080167bc
 8008e4c:	08016888 	.word	0x08016888

08008e50 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7a5b      	ldrb	r3, [r3, #9]
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d008      	beq.n	8008e78 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	82da      	strh	r2, [r3, #22]
  }
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
 8008e90:	4613      	mov	r3, r2
 8008e92:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8a9b      	ldrh	r3, [r3, #20]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	78bb      	ldrb	r3, [r7, #2]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	2b44      	cmp	r3, #68	; 0x44
 8008ea2:	d906      	bls.n	8008eb2 <dhcp_option+0x2e>
 8008ea4:	4b11      	ldr	r3, [pc, #68]	; (8008eec <dhcp_option+0x68>)
 8008ea6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008eaa:	4911      	ldr	r1, [pc, #68]	; (8008ef0 <dhcp_option+0x6c>)
 8008eac:	4811      	ldr	r0, [pc, #68]	; (8008ef4 <dhcp_option+0x70>)
 8008eae:	f00b ff1b 	bl	8014ce8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8a9b      	ldrh	r3, [r3, #20]
 8008eba:	1c59      	adds	r1, r3, #1
 8008ebc:	b288      	uxth	r0, r1
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	8288      	strh	r0, [r1, #20]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	78fa      	ldrb	r2, [r7, #3]
 8008ec6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8a9b      	ldrh	r3, [r3, #20]
 8008ed2:	1c59      	adds	r1, r3, #1
 8008ed4:	b288      	uxth	r0, r1
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	8288      	strh	r0, [r1, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	78ba      	ldrb	r2, [r7, #2]
 8008ede:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	0801675c 	.word	0x0801675c
 8008ef0:	080168ec 	.word	0x080168ec
 8008ef4:	080167bc 	.word	0x080167bc

08008ef8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8a9b      	ldrh	r3, [r3, #20]
 8008f08:	2b43      	cmp	r3, #67	; 0x43
 8008f0a:	d906      	bls.n	8008f1a <dhcp_option_byte+0x22>
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <dhcp_option_byte+0x44>)
 8008f0e:	f240 527b 	movw	r2, #1403	; 0x57b
 8008f12:	490b      	ldr	r1, [pc, #44]	; (8008f40 <dhcp_option_byte+0x48>)
 8008f14:	480b      	ldr	r0, [pc, #44]	; (8008f44 <dhcp_option_byte+0x4c>)
 8008f16:	f00b fee7 	bl	8014ce8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	8a9b      	ldrh	r3, [r3, #20]
 8008f22:	1c59      	adds	r1, r3, #1
 8008f24:	b288      	uxth	r0, r1
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	8288      	strh	r0, [r1, #20]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0801675c 	.word	0x0801675c
 8008f40:	08016934 	.word	0x08016934
 8008f44:	080167bc 	.word	0x080167bc

08008f48 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8a9b      	ldrh	r3, [r3, #20]
 8008f58:	3302      	adds	r3, #2
 8008f5a:	2b44      	cmp	r3, #68	; 0x44
 8008f5c:	d906      	bls.n	8008f6c <dhcp_option_short+0x24>
 8008f5e:	4b15      	ldr	r3, [pc, #84]	; (8008fb4 <dhcp_option_short+0x6c>)
 8008f60:	f240 5282 	movw	r2, #1410	; 0x582
 8008f64:	4914      	ldr	r1, [pc, #80]	; (8008fb8 <dhcp_option_short+0x70>)
 8008f66:	4815      	ldr	r0, [pc, #84]	; (8008fbc <dhcp_option_short+0x74>)
 8008f68:	f00b febe 	bl	8014ce8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8a9b      	ldrh	r3, [r3, #20]
 8008f74:	1c59      	adds	r1, r3, #1
 8008f76:	b288      	uxth	r0, r1
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	8288      	strh	r0, [r1, #20]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	b2d9      	uxtb	r1, r3
 8008f86:	1813      	adds	r3, r2, r0
 8008f88:	460a      	mov	r2, r1
 8008f8a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	691a      	ldr	r2, [r3, #16]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	8a9b      	ldrh	r3, [r3, #20]
 8008f96:	1c59      	adds	r1, r3, #1
 8008f98:	b288      	uxth	r0, r1
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	8288      	strh	r0, [r1, #20]
 8008f9e:	8879      	ldrh	r1, [r7, #2]
 8008fa0:	b2c9      	uxtb	r1, r1
 8008fa2:	4413      	add	r3, r2
 8008fa4:	460a      	mov	r2, r1
 8008fa6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0801675c 	.word	0x0801675c
 8008fb8:	08016970 	.word	0x08016970
 8008fbc:	080167bc 	.word	0x080167bc

08008fc0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8a9b      	ldrh	r3, [r3, #20]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	2b44      	cmp	r3, #68	; 0x44
 8008fd2:	d906      	bls.n	8008fe2 <dhcp_option_long+0x22>
 8008fd4:	4b24      	ldr	r3, [pc, #144]	; (8009068 <dhcp_option_long+0xa8>)
 8008fd6:	f240 528a 	movw	r2, #1418	; 0x58a
 8008fda:	4924      	ldr	r1, [pc, #144]	; (800906c <dhcp_option_long+0xac>)
 8008fdc:	4824      	ldr	r0, [pc, #144]	; (8009070 <dhcp_option_long+0xb0>)
 8008fde:	f00b fe83 	bl	8014ce8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691a      	ldr	r2, [r3, #16]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	8a9b      	ldrh	r3, [r3, #20]
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	b288      	uxth	r0, r1
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	8288      	strh	r0, [r1, #20]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	0e1b      	lsrs	r3, r3, #24
 8008ff8:	b2d9      	uxtb	r1, r3
 8008ffa:	1813      	adds	r3, r2, r0
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691a      	ldr	r2, [r3, #16]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8a9b      	ldrh	r3, [r3, #20]
 800900a:	1c59      	adds	r1, r3, #1
 800900c:	b288      	uxth	r0, r1
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	8288      	strh	r0, [r1, #20]
 8009012:	4618      	mov	r0, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	b2d9      	uxtb	r1, r3
 800901a:	1813      	adds	r3, r2, r0
 800901c:	460a      	mov	r2, r1
 800901e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8a9b      	ldrh	r3, [r3, #20]
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	b288      	uxth	r0, r1
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	8288      	strh	r0, [r1, #20]
 8009032:	4618      	mov	r0, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	0a1b      	lsrs	r3, r3, #8
 8009038:	b2d9      	uxtb	r1, r3
 800903a:	1813      	adds	r3, r2, r0
 800903c:	460a      	mov	r2, r1
 800903e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8a9b      	ldrh	r3, [r3, #20]
 800904a:	1c59      	adds	r1, r3, #1
 800904c:	b288      	uxth	r0, r1
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	8288      	strh	r0, [r1, #20]
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	b2c9      	uxtb	r1, r1
 8009056:	4413      	add	r3, r2
 8009058:	460a      	mov	r2, r1
 800905a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	0801675c 	.word	0x0801675c
 800906c:	080169b4 	.word	0x080169b4
 8009070:	080167bc 	.word	0x080167bc

08009074 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08e      	sub	sp, #56	; 0x38
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8009086:	220a      	movs	r2, #10
 8009088:	2100      	movs	r1, #0
 800908a:	48b6      	ldr	r0, [pc, #728]	; (8009364 <dhcp_parse_reply+0x2f0>)
 800908c:	f00b fe24 	bl	8014cd8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	895b      	ldrh	r3, [r3, #10]
 8009094:	2b2b      	cmp	r3, #43	; 0x2b
 8009096:	d802      	bhi.n	800909e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8009098:	f06f 0301 	mvn.w	r3, #1
 800909c:	e294      	b.n	80095c8 <dhcp_parse_reply+0x554>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80090a6:	23f0      	movs	r3, #240	; 0xf0
 80090a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	891b      	ldrh	r3, [r3, #8]
 80090ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80090b4:	e00c      	b.n	80090d0 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	895b      	ldrh	r3, [r3, #10]
 80090ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	895b      	ldrh	r3, [r3, #10]
 80090c4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <dhcp_parse_reply+0x6c>
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	895b      	ldrh	r3, [r3, #10]
 80090da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090dc:	429a      	cmp	r2, r3
 80090de:	d2ea      	bcs.n	80090b6 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <dhcp_parse_reply+0x78>
    return ERR_BUF;
 80090e6:	f06f 0301 	mvn.w	r3, #1
 80090ea:	e26d      	b.n	80095c8 <dhcp_parse_reply+0x554>
  }
  offset = options_idx;
 80090ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090ee:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 80090f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80090f2:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80090fa:	e225      	b.n	8009548 <dhcp_parse_reply+0x4d4>
    u8_t op = options[offset];
 80090fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80090fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009100:	4413      	add	r3, r2
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800910e:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8009110:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009112:	3302      	adds	r3, #2
 8009114:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8009116:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009118:	3301      	adds	r3, #1
 800911a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911c:	8952      	ldrh	r2, [r2, #10]
 800911e:	4293      	cmp	r3, r2
 8009120:	da06      	bge.n	8009130 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 8009122:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009124:	3301      	adds	r3, #1
 8009126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009128:	4413      	add	r3, r2
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	77fb      	strb	r3, [r7, #31]
 800912e:	e00a      	b.n	8009146 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <dhcp_parse_reply+0xce>
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	e000      	b.n	8009144 <dhcp_parse_reply+0xd0>
 8009142:	2300      	movs	r3, #0
 8009144:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8009146:	7ffb      	ldrb	r3, [r7, #31]
 8009148:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800914a:	7d7b      	ldrb	r3, [r7, #21]
 800914c:	2b3b      	cmp	r3, #59	; 0x3b
 800914e:	f200 8149 	bhi.w	80093e4 <dhcp_parse_reply+0x370>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <dhcp_parse_reply+0xe4>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009249 	.word	0x08009249
 800915c:	08009259 	.word	0x08009259
 8009160:	080093e5 	.word	0x080093e5
 8009164:	08009279 	.word	0x08009279
 8009168:	080093e5 	.word	0x080093e5
 800916c:	080093e5 	.word	0x080093e5
 8009170:	0800929f 	.word	0x0800929f
 8009174:	080093e5 	.word	0x080093e5
 8009178:	080093e5 	.word	0x080093e5
 800917c:	080093e5 	.word	0x080093e5
 8009180:	080093e5 	.word	0x080093e5
 8009184:	080093e5 	.word	0x080093e5
 8009188:	080093e5 	.word	0x080093e5
 800918c:	080093e5 	.word	0x080093e5
 8009190:	080093e5 	.word	0x080093e5
 8009194:	080093e5 	.word	0x080093e5
 8009198:	080093e5 	.word	0x080093e5
 800919c:	080093e5 	.word	0x080093e5
 80091a0:	080093e5 	.word	0x080093e5
 80091a4:	080093e5 	.word	0x080093e5
 80091a8:	080093e5 	.word	0x080093e5
 80091ac:	080093e5 	.word	0x080093e5
 80091b0:	080093e5 	.word	0x080093e5
 80091b4:	080093e5 	.word	0x080093e5
 80091b8:	080093e5 	.word	0x080093e5
 80091bc:	080093e5 	.word	0x080093e5
 80091c0:	080093e5 	.word	0x080093e5
 80091c4:	080093e5 	.word	0x080093e5
 80091c8:	080093e5 	.word	0x080093e5
 80091cc:	080093e5 	.word	0x080093e5
 80091d0:	080093e5 	.word	0x080093e5
 80091d4:	080093e5 	.word	0x080093e5
 80091d8:	080093e5 	.word	0x080093e5
 80091dc:	080093e5 	.word	0x080093e5
 80091e0:	080093e5 	.word	0x080093e5
 80091e4:	080093e5 	.word	0x080093e5
 80091e8:	080093e5 	.word	0x080093e5
 80091ec:	080093e5 	.word	0x080093e5
 80091f0:	080093e5 	.word	0x080093e5
 80091f4:	080093e5 	.word	0x080093e5
 80091f8:	080093e5 	.word	0x080093e5
 80091fc:	080093e5 	.word	0x080093e5
 8009200:	080093e5 	.word	0x080093e5
 8009204:	080093e5 	.word	0x080093e5
 8009208:	080093e5 	.word	0x080093e5
 800920c:	080093e5 	.word	0x080093e5
 8009210:	080093e5 	.word	0x080093e5
 8009214:	080093e5 	.word	0x080093e5
 8009218:	080093e5 	.word	0x080093e5
 800921c:	080093e5 	.word	0x080093e5
 8009220:	080093e5 	.word	0x080093e5
 8009224:	080092eb 	.word	0x080092eb
 8009228:	0800930b 	.word	0x0800930b
 800922c:	08009345 	.word	0x08009345
 8009230:	08009385 	.word	0x08009385
 8009234:	080093e5 	.word	0x080093e5
 8009238:	080093e5 	.word	0x080093e5
 800923c:	080093e5 	.word	0x080093e5
 8009240:	080093a5 	.word	0x080093a5
 8009244:	080093c5 	.word	0x080093c5
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	77fb      	strb	r3, [r7, #31]
 800924c:	7ffb      	ldrb	r3, [r7, #31]
 800924e:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8009250:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009252:	3b01      	subs	r3, #1
 8009254:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8009256:	e0c8      	b.n	80093ea <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009258:	7ffb      	ldrb	r3, [r7, #31]
 800925a:	2b04      	cmp	r3, #4
 800925c:	d009      	beq.n	8009272 <dhcp_parse_reply+0x1fe>
 800925e:	4b42      	ldr	r3, [pc, #264]	; (8009368 <dhcp_parse_reply+0x2f4>)
 8009260:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8009264:	4941      	ldr	r1, [pc, #260]	; (800936c <dhcp_parse_reply+0x2f8>)
 8009266:	4842      	ldr	r0, [pc, #264]	; (8009370 <dhcp_parse_reply+0x2fc>)
 8009268:	f00b fd3e 	bl	8014ce8 <iprintf>
 800926c:	f06f 0305 	mvn.w	r3, #5
 8009270:	e1aa      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009272:	2306      	movs	r3, #6
 8009274:	61bb      	str	r3, [r7, #24]
        break;
 8009276:	e0b8      	b.n	80093ea <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8009278:	2304      	movs	r3, #4
 800927a:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800927c:	7ffa      	ldrb	r2, [r7, #31]
 800927e:	7fbb      	ldrb	r3, [r7, #30]
 8009280:	429a      	cmp	r2, r3
 8009282:	d209      	bcs.n	8009298 <dhcp_parse_reply+0x224>
 8009284:	4b38      	ldr	r3, [pc, #224]	; (8009368 <dhcp_parse_reply+0x2f4>)
 8009286:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800928a:	493a      	ldr	r1, [pc, #232]	; (8009374 <dhcp_parse_reply+0x300>)
 800928c:	4838      	ldr	r0, [pc, #224]	; (8009370 <dhcp_parse_reply+0x2fc>)
 800928e:	f00b fd2b 	bl	8014ce8 <iprintf>
 8009292:	f06f 0305 	mvn.w	r3, #5
 8009296:	e197      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8009298:	2307      	movs	r3, #7
 800929a:	61bb      	str	r3, [r7, #24]
        break;
 800929c:	e0a5      	b.n	80093ea <dhcp_parse_reply+0x376>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800929e:	7ffb      	ldrb	r3, [r7, #31]
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <dhcp_parse_reply+0x24a>
 80092aa:	4b2f      	ldr	r3, [pc, #188]	; (8009368 <dhcp_parse_reply+0x2f4>)
 80092ac:	f240 6201 	movw	r2, #1537	; 0x601
 80092b0:	4931      	ldr	r1, [pc, #196]	; (8009378 <dhcp_parse_reply+0x304>)
 80092b2:	482f      	ldr	r0, [pc, #188]	; (8009370 <dhcp_parse_reply+0x2fc>)
 80092b4:	f00b fd18 	bl	8014ce8 <iprintf>
 80092b8:	f06f 0305 	mvn.w	r3, #5
 80092bc:	e184      	b.n	80095c8 <dhcp_parse_reply+0x554>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80092be:	7ffb      	ldrb	r3, [r7, #31]
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	bf28      	it	cs
 80092c4:	2308      	movcs	r3, #8
 80092c6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80092c8:	7ffa      	ldrb	r2, [r7, #31]
 80092ca:	7fbb      	ldrb	r3, [r7, #30]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d209      	bcs.n	80092e4 <dhcp_parse_reply+0x270>
 80092d0:	4b25      	ldr	r3, [pc, #148]	; (8009368 <dhcp_parse_reply+0x2f4>)
 80092d2:	f240 6204 	movw	r2, #1540	; 0x604
 80092d6:	4927      	ldr	r1, [pc, #156]	; (8009374 <dhcp_parse_reply+0x300>)
 80092d8:	4825      	ldr	r0, [pc, #148]	; (8009370 <dhcp_parse_reply+0x2fc>)
 80092da:	f00b fd05 	bl	8014ce8 <iprintf>
 80092de:	f06f 0305 	mvn.w	r3, #5
 80092e2:	e171      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80092e4:	2308      	movs	r3, #8
 80092e6:	61bb      	str	r3, [r7, #24]
        break;
 80092e8:	e07f      	b.n	80093ea <dhcp_parse_reply+0x376>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80092ea:	7ffb      	ldrb	r3, [r7, #31]
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d009      	beq.n	8009304 <dhcp_parse_reply+0x290>
 80092f0:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <dhcp_parse_reply+0x2f4>)
 80092f2:	f240 6209 	movw	r2, #1545	; 0x609
 80092f6:	491d      	ldr	r1, [pc, #116]	; (800936c <dhcp_parse_reply+0x2f8>)
 80092f8:	481d      	ldr	r0, [pc, #116]	; (8009370 <dhcp_parse_reply+0x2fc>)
 80092fa:	f00b fcf5 	bl	8014ce8 <iprintf>
 80092fe:	f06f 0305 	mvn.w	r3, #5
 8009302:	e161      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8009304:	2303      	movs	r3, #3
 8009306:	61bb      	str	r3, [r7, #24]
        break;
 8009308:	e06f      	b.n	80093ea <dhcp_parse_reply+0x376>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800930a:	7ffb      	ldrb	r3, [r7, #31]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d009      	beq.n	8009324 <dhcp_parse_reply+0x2b0>
 8009310:	4b15      	ldr	r3, [pc, #84]	; (8009368 <dhcp_parse_reply+0x2f4>)
 8009312:	f240 6217 	movw	r2, #1559	; 0x617
 8009316:	4919      	ldr	r1, [pc, #100]	; (800937c <dhcp_parse_reply+0x308>)
 8009318:	4815      	ldr	r0, [pc, #84]	; (8009370 <dhcp_parse_reply+0x2fc>)
 800931a:	f00b fce5 	bl	8014ce8 <iprintf>
 800931e:	f06f 0305 	mvn.w	r3, #5
 8009322:	e151      	b.n	80095c8 <dhcp_parse_reply+0x554>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8009324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009326:	2bf0      	cmp	r3, #240	; 0xf0
 8009328:	d009      	beq.n	800933e <dhcp_parse_reply+0x2ca>
 800932a:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <dhcp_parse_reply+0x2f4>)
 800932c:	f240 6219 	movw	r2, #1561	; 0x619
 8009330:	4913      	ldr	r1, [pc, #76]	; (8009380 <dhcp_parse_reply+0x30c>)
 8009332:	480f      	ldr	r0, [pc, #60]	; (8009370 <dhcp_parse_reply+0x2fc>)
 8009334:	f00b fcd8 	bl	8014ce8 <iprintf>
 8009338:	f06f 0305 	mvn.w	r3, #5
 800933c:	e144      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800933e:	2300      	movs	r3, #0
 8009340:	61bb      	str	r3, [r7, #24]
        break;
 8009342:	e052      	b.n	80093ea <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009344:	7ffb      	ldrb	r3, [r7, #31]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d009      	beq.n	800935e <dhcp_parse_reply+0x2ea>
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <dhcp_parse_reply+0x2f4>)
 800934c:	f240 621d 	movw	r2, #1565	; 0x61d
 8009350:	490a      	ldr	r1, [pc, #40]	; (800937c <dhcp_parse_reply+0x308>)
 8009352:	4807      	ldr	r0, [pc, #28]	; (8009370 <dhcp_parse_reply+0x2fc>)
 8009354:	f00b fcc8 	bl	8014ce8 <iprintf>
 8009358:	f06f 0305 	mvn.w	r3, #5
 800935c:	e134      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800935e:	2301      	movs	r3, #1
 8009360:	61bb      	str	r3, [r7, #24]
        break;
 8009362:	e042      	b.n	80093ea <dhcp_parse_reply+0x376>
 8009364:	20004498 	.word	0x20004498
 8009368:	0801675c 	.word	0x0801675c
 800936c:	080169f4 	.word	0x080169f4
 8009370:	080167bc 	.word	0x080167bc
 8009374:	08016a00 	.word	0x08016a00
 8009378:	08016a14 	.word	0x08016a14
 800937c:	08016a24 	.word	0x08016a24
 8009380:	08016a30 	.word	0x08016a30
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009384:	7ffb      	ldrb	r3, [r7, #31]
 8009386:	2b04      	cmp	r3, #4
 8009388:	d009      	beq.n	800939e <dhcp_parse_reply+0x32a>
 800938a:	4b91      	ldr	r3, [pc, #580]	; (80095d0 <dhcp_parse_reply+0x55c>)
 800938c:	f240 6221 	movw	r2, #1569	; 0x621
 8009390:	4990      	ldr	r1, [pc, #576]	; (80095d4 <dhcp_parse_reply+0x560>)
 8009392:	4891      	ldr	r0, [pc, #580]	; (80095d8 <dhcp_parse_reply+0x564>)
 8009394:	f00b fca8 	bl	8014ce8 <iprintf>
 8009398:	f06f 0305 	mvn.w	r3, #5
 800939c:	e114      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800939e:	2302      	movs	r3, #2
 80093a0:	61bb      	str	r3, [r7, #24]
        break;
 80093a2:	e022      	b.n	80093ea <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80093a4:	7ffb      	ldrb	r3, [r7, #31]
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d009      	beq.n	80093be <dhcp_parse_reply+0x34a>
 80093aa:	4b89      	ldr	r3, [pc, #548]	; (80095d0 <dhcp_parse_reply+0x55c>)
 80093ac:	f240 6225 	movw	r2, #1573	; 0x625
 80093b0:	4988      	ldr	r1, [pc, #544]	; (80095d4 <dhcp_parse_reply+0x560>)
 80093b2:	4889      	ldr	r0, [pc, #548]	; (80095d8 <dhcp_parse_reply+0x564>)
 80093b4:	f00b fc98 	bl	8014ce8 <iprintf>
 80093b8:	f06f 0305 	mvn.w	r3, #5
 80093bc:	e104      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_T1;
 80093be:	2304      	movs	r3, #4
 80093c0:	61bb      	str	r3, [r7, #24]
        break;
 80093c2:	e012      	b.n	80093ea <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80093c4:	7ffb      	ldrb	r3, [r7, #31]
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d009      	beq.n	80093de <dhcp_parse_reply+0x36a>
 80093ca:	4b81      	ldr	r3, [pc, #516]	; (80095d0 <dhcp_parse_reply+0x55c>)
 80093cc:	f240 6229 	movw	r2, #1577	; 0x629
 80093d0:	4980      	ldr	r1, [pc, #512]	; (80095d4 <dhcp_parse_reply+0x560>)
 80093d2:	4881      	ldr	r0, [pc, #516]	; (80095d8 <dhcp_parse_reply+0x564>)
 80093d4:	f00b fc88 	bl	8014ce8 <iprintf>
 80093d8:	f06f 0305 	mvn.w	r3, #5
 80093dc:	e0f4      	b.n	80095c8 <dhcp_parse_reply+0x554>
        decode_idx = DHCP_OPTION_IDX_T2;
 80093de:	2305      	movs	r3, #5
 80093e0:	61bb      	str	r3, [r7, #24]
        break;
 80093e2:	e002      	b.n	80093ea <dhcp_parse_reply+0x376>
      default:
        decode_len = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80093e8:	bf00      	nop
    }
    offset += len + 2;
 80093ea:	7ffb      	ldrb	r3, [r7, #31]
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80093f0:	4413      	add	r3, r2
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3302      	adds	r3, #2
 80093f6:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80093f8:	7fbb      	ldrb	r3, [r7, #30]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d07b      	beq.n	80094f6 <dhcp_parse_reply+0x482>
      u32_t value = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	db02      	blt.n	800940e <dhcp_parse_reply+0x39a>
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b09      	cmp	r3, #9
 800940c:	dd06      	ble.n	800941c <dhcp_parse_reply+0x3a8>
 800940e:	4b70      	ldr	r3, [pc, #448]	; (80095d0 <dhcp_parse_reply+0x55c>)
 8009410:	f240 6236 	movw	r2, #1590	; 0x636
 8009414:	4971      	ldr	r1, [pc, #452]	; (80095dc <dhcp_parse_reply+0x568>)
 8009416:	4870      	ldr	r0, [pc, #448]	; (80095d8 <dhcp_parse_reply+0x564>)
 8009418:	f00b fc66 	bl	8014ce8 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800941c:	4a70      	ldr	r2, [pc, #448]	; (80095e0 <dhcp_parse_reply+0x56c>)
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	4413      	add	r3, r2
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d166      	bne.n	80094f6 <dhcp_parse_reply+0x482>
        copy_len = LWIP_MIN(decode_len, 4);
 8009428:	7fbb      	ldrb	r3, [r7, #30]
 800942a:	2b03      	cmp	r3, #3
 800942c:	d802      	bhi.n	8009434 <dhcp_parse_reply+0x3c0>
 800942e:	7fbb      	ldrb	r3, [r7, #30]
 8009430:	b29b      	uxth	r3, r3
 8009432:	e000      	b.n	8009436 <dhcp_parse_reply+0x3c2>
 8009434:	2304      	movs	r3, #4
 8009436:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009438:	8afb      	ldrh	r3, [r7, #22]
 800943a:	8a7a      	ldrh	r2, [r7, #18]
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009442:	f004 f925 	bl	800d690 <pbuf_copy_partial>
 8009446:	4603      	mov	r3, r0
 8009448:	461a      	mov	r2, r3
 800944a:	8a7b      	ldrh	r3, [r7, #18]
 800944c:	4293      	cmp	r3, r2
 800944e:	d002      	beq.n	8009456 <dhcp_parse_reply+0x3e2>
          return ERR_BUF;
 8009450:	f06f 0301 	mvn.w	r3, #1
 8009454:	e0b8      	b.n	80095c8 <dhcp_parse_reply+0x554>
        }
        if (decode_len > 4) {
 8009456:	7fbb      	ldrb	r3, [r7, #30]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d927      	bls.n	80094ac <dhcp_parse_reply+0x438>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800945c:	7fbb      	ldrb	r3, [r7, #30]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d009      	beq.n	800947c <dhcp_parse_reply+0x408>
 8009468:	4b59      	ldr	r3, [pc, #356]	; (80095d0 <dhcp_parse_reply+0x55c>)
 800946a:	f240 623e 	movw	r2, #1598	; 0x63e
 800946e:	495d      	ldr	r1, [pc, #372]	; (80095e4 <dhcp_parse_reply+0x570>)
 8009470:	4859      	ldr	r0, [pc, #356]	; (80095d8 <dhcp_parse_reply+0x564>)
 8009472:	f00b fc39 	bl	8014ce8 <iprintf>
 8009476:	f06f 0305 	mvn.w	r3, #5
 800947a:	e0a5      	b.n	80095c8 <dhcp_parse_reply+0x554>
          dhcp_got_option(dhcp, decode_idx);
 800947c:	4a58      	ldr	r2, [pc, #352]	; (80095e0 <dhcp_parse_reply+0x56c>)
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	4413      	add	r3, r2
 8009482:	2201      	movs	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe f9bd 	bl	8007808 <lwip_htonl>
 800948e:	4601      	mov	r1, r0
 8009490:	4a55      	ldr	r2, [pc, #340]	; (80095e8 <dhcp_parse_reply+0x574>)
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8009498:	7fbb      	ldrb	r3, [r7, #30]
 800949a:	3b04      	subs	r3, #4
 800949c:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800949e:	8afb      	ldrh	r3, [r7, #22]
 80094a0:	3304      	adds	r3, #4
 80094a2:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	3301      	adds	r3, #1
 80094a8:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 80094aa:	e7aa      	b.n	8009402 <dhcp_parse_reply+0x38e>
        } else if (decode_len == 4) {
 80094ac:	7fbb      	ldrb	r3, [r7, #30]
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d106      	bne.n	80094c0 <dhcp_parse_reply+0x44c>
          value = lwip_ntohl(value);
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe f9a7 	bl	8007808 <lwip_htonl>
 80094ba:	4603      	mov	r3, r0
 80094bc:	60bb      	str	r3, [r7, #8]
 80094be:	e010      	b.n	80094e2 <dhcp_parse_reply+0x46e>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80094c0:	7fbb      	ldrb	r3, [r7, #30]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d009      	beq.n	80094da <dhcp_parse_reply+0x466>
 80094c6:	4b42      	ldr	r3, [pc, #264]	; (80095d0 <dhcp_parse_reply+0x55c>)
 80094c8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80094cc:	4947      	ldr	r1, [pc, #284]	; (80095ec <dhcp_parse_reply+0x578>)
 80094ce:	4842      	ldr	r0, [pc, #264]	; (80095d8 <dhcp_parse_reply+0x564>)
 80094d0:	f00b fc0a 	bl	8014ce8 <iprintf>
 80094d4:	f06f 0305 	mvn.w	r3, #5
 80094d8:	e076      	b.n	80095c8 <dhcp_parse_reply+0x554>
          value = ((u8_t*)&value)[0];
 80094da:	f107 0308 	add.w	r3, r7, #8
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80094e2:	4a3f      	ldr	r2, [pc, #252]	; (80095e0 <dhcp_parse_reply+0x56c>)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	4413      	add	r3, r2
 80094e8:	2201      	movs	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	493e      	ldr	r1, [pc, #248]	; (80095e8 <dhcp_parse_reply+0x574>)
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	895b      	ldrh	r3, [r3, #10]
 80094fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d323      	bcc.n	8009548 <dhcp_parse_reply+0x4d4>
      offset -= q->len;
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	895b      	ldrh	r3, [r3, #10]
 8009504:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	895b      	ldrh	r3, [r3, #10]
 800950e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8009514:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009516:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009518:	429a      	cmp	r2, r3
 800951a:	d223      	bcs.n	8009564 <dhcp_parse_reply+0x4f0>
 800951c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800951e:	2b00      	cmp	r3, #0
 8009520:	d020      	beq.n	8009564 <dhcp_parse_reply+0x4f0>
        q = q->next;
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <dhcp_parse_reply+0x4ce>
 800952e:	4b28      	ldr	r3, [pc, #160]	; (80095d0 <dhcp_parse_reply+0x55c>)
 8009530:	f240 6254 	movw	r2, #1620	; 0x654
 8009534:	492e      	ldr	r1, [pc, #184]	; (80095f0 <dhcp_parse_reply+0x57c>)
 8009536:	4828      	ldr	r0, [pc, #160]	; (80095d8 <dhcp_parse_reply+0x564>)
 8009538:	f00b fbd6 	bl	8014ce8 <iprintf>
 800953c:	f06f 0305 	mvn.w	r3, #5
 8009540:	e042      	b.n	80095c8 <dhcp_parse_reply+0x554>
        options = (u8_t*)q->payload;
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <dhcp_parse_reply+0x4f0>
 800954e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009550:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009552:	429a      	cmp	r2, r3
 8009554:	d206      	bcs.n	8009564 <dhcp_parse_reply+0x4f0>
 8009556:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800955a:	4413      	add	r3, r2
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2bff      	cmp	r3, #255	; 0xff
 8009560:	f47f adcc 	bne.w	80090fc <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009564:	4b1e      	ldr	r3, [pc, #120]	; (80095e0 <dhcp_parse_reply+0x56c>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d018      	beq.n	800959e <dhcp_parse_reply+0x52a>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800956c:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <dhcp_parse_reply+0x574>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009572:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <dhcp_parse_reply+0x56c>)
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d102      	bne.n	8009584 <dhcp_parse_reply+0x510>
      parse_file_as_options = 1;
 800957e:	2301      	movs	r3, #1
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	e00c      	b.n	800959e <dhcp_parse_reply+0x52a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b02      	cmp	r3, #2
 8009588:	d102      	bne.n	8009590 <dhcp_parse_reply+0x51c>
      parse_sname_as_options = 1;
 800958a:	2301      	movs	r3, #1
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	e006      	b.n	800959e <dhcp_parse_reply+0x52a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b03      	cmp	r3, #3
 8009594:	d103      	bne.n	800959e <dhcp_parse_reply+0x52a>
      parse_sname_as_options = 1;
 8009596:	2301      	movs	r3, #1
 8009598:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d006      	beq.n	80095b2 <dhcp_parse_reply+0x53e>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 80095a8:	236c      	movs	r3, #108	; 0x6c
 80095aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80095ac:	23ec      	movs	r3, #236	; 0xec
 80095ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80095b0:	e57e      	b.n	80090b0 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d006      	beq.n	80095c6 <dhcp_parse_reply+0x552>
    parse_sname_as_options = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80095bc:	232c      	movs	r3, #44	; 0x2c
 80095be:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80095c0:	236c      	movs	r3, #108	; 0x6c
 80095c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80095c4:	e574      	b.n	80090b0 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3738      	adds	r7, #56	; 0x38
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	0801675c 	.word	0x0801675c
 80095d4:	080169f4 	.word	0x080169f4
 80095d8:	080167bc 	.word	0x080167bc
 80095dc:	08016a48 	.word	0x08016a48
 80095e0:	20004498 	.word	0x20004498
 80095e4:	08016a5c 	.word	0x08016a5c
 80095e8:	200044a4 	.word	0x200044a4
 80095ec:	08016a74 	.word	0x08016a74
 80095f0:	08016a88 	.word	0x08016a88

080095f4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08a      	sub	sp, #40	; 0x28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8009602:	4b67      	ldr	r3, [pc, #412]	; (80097a0 <dhcp_recv+0x1ac>)
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80b4 	beq.w	8009784 <dhcp_recv+0x190>
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	7a1b      	ldrb	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80af 	beq.w	8009784 <dhcp_recv+0x190>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d006      	beq.n	800963c <dhcp_recv+0x48>
 800962e:	4b5d      	ldr	r3, [pc, #372]	; (80097a4 <dhcp_recv+0x1b0>)
 8009630:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8009634:	495c      	ldr	r1, [pc, #368]	; (80097a8 <dhcp_recv+0x1b4>)
 8009636:	485d      	ldr	r0, [pc, #372]	; (80097ac <dhcp_recv+0x1b8>)
 8009638:	f00b fb56 	bl	8014ce8 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	895b      	ldrh	r3, [r3, #10]
 8009640:	2b2b      	cmp	r3, #43	; 0x2b
 8009642:	f240 8094 	bls.w	800976e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b02      	cmp	r3, #2
 800964c:	f040 8091 	bne.w	8009772 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009656:	e012      	b.n	800967e <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965c:	6a3a      	ldr	r2, [r7, #32]
 800965e:	4413      	add	r3, r2
 8009660:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009668:	69b9      	ldr	r1, [r7, #24]
 800966a:	440b      	add	r3, r1
 800966c:	7f1b      	ldrb	r3, [r3, #28]
 800966e:	429a      	cmp	r2, r3
 8009670:	f040 8081 	bne.w	8009776 <dhcp_recv+0x182>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009678:	3301      	adds	r3, #1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009688:	429a      	cmp	r2, r3
 800968a:	d207      	bcs.n	800969c <dhcp_recv+0xa8>
 800968c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009690:	2b05      	cmp	r3, #5
 8009692:	d803      	bhi.n	800969c <dhcp_recv+0xa8>
 8009694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009698:	2b0f      	cmp	r3, #15
 800969a:	d9dd      	bls.n	8009658 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe f8b1 	bl	8007808 <lwip_htonl>
 80096a6:	4602      	mov	r2, r0
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d164      	bne.n	800977a <dhcp_recv+0x186>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	69f8      	ldr	r0, [r7, #28]
 80096b4:	f7ff fcde 	bl	8009074 <dhcp_parse_reply>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d15f      	bne.n	800977e <dhcp_recv+0x18a>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80096be:	4b3c      	ldr	r3, [pc, #240]	; (80097b0 <dhcp_recv+0x1bc>)
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d05d      	beq.n	8009782 <dhcp_recv+0x18e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80096c6:	4b3b      	ldr	r3, [pc, #236]	; (80097b4 <dhcp_recv+0x1c0>)
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	2b05      	cmp	r3, #5
 80096d0:	d128      	bne.n	8009724 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	7a5b      	ldrb	r3, [r3, #9]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d111      	bne.n	80096fe <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 80096da:	6a38      	ldr	r0, [r7, #32]
 80096dc:	f7fe fe50 	bl	8008380 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80096ee:	6a38      	ldr	r0, [r7, #32]
 80096f0:	f7fe fc18 	bl	8007f24 <dhcp_check>
 80096f4:	e046      	b.n	8009784 <dhcp_recv+0x190>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80096f6:	6a38      	ldr	r0, [r7, #32]
 80096f8:	f7ff f870 	bl	80087dc <dhcp_bind>
 80096fc:	e042      	b.n	8009784 <dhcp_recv+0x190>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	7a5b      	ldrb	r3, [r3, #9]
 8009702:	2b03      	cmp	r3, #3
 8009704:	d007      	beq.n	8009716 <dhcp_recv+0x122>
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	7a5b      	ldrb	r3, [r3, #9]
 800970a:	2b04      	cmp	r3, #4
 800970c:	d003      	beq.n	8009716 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009712:	2b05      	cmp	r3, #5
 8009714:	d136      	bne.n	8009784 <dhcp_recv+0x190>
      dhcp_handle_ack(netif);
 8009716:	6a38      	ldr	r0, [r7, #32]
 8009718:	f7fe fe32 	bl	8008380 <dhcp_handle_ack>
      dhcp_bind(netif);
 800971c:	6a38      	ldr	r0, [r7, #32]
 800971e:	f7ff f85d 	bl	80087dc <dhcp_bind>
 8009722:	e02f      	b.n	8009784 <dhcp_recv+0x190>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	2b06      	cmp	r3, #6
 8009728:	d113      	bne.n	8009752 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800972e:	2b03      	cmp	r3, #3
 8009730:	d00b      	beq.n	800974a <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	7a5b      	ldrb	r3, [r3, #9]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d007      	beq.n	800974a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800973e:	2b04      	cmp	r3, #4
 8009740:	d003      	beq.n	800974a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	7a5b      	ldrb	r3, [r3, #9]
 8009746:	2b05      	cmp	r3, #5
 8009748:	d103      	bne.n	8009752 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800974a:	6a38      	ldr	r0, [r7, #32]
 800974c:	f7fe fbd0 	bl	8007ef0 <dhcp_handle_nak>
 8009750:	e018      	b.n	8009784 <dhcp_recv+0x190>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d115      	bne.n	8009784 <dhcp_recv+0x190>
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	7a5b      	ldrb	r3, [r3, #9]
 800975c:	2b06      	cmp	r3, #6
 800975e:	d111      	bne.n	8009784 <dhcp_recv+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	2200      	movs	r2, #0
 8009764:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8009766:	6a38      	ldr	r0, [r7, #32]
 8009768:	f7fe fc10 	bl	8007f8c <dhcp_handle_offer>
 800976c:	e00a      	b.n	8009784 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800976e:	bf00      	nop
 8009770:	e008      	b.n	8009784 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 8009772:	bf00      	nop
 8009774:	e006      	b.n	8009784 <dhcp_recv+0x190>
      goto free_pbuf_and_return;
 8009776:	bf00      	nop
 8009778:	e004      	b.n	8009784 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 800977e:	bf00      	nop
 8009780:	e000      	b.n	8009784 <dhcp_recv+0x190>
    goto free_pbuf_and_return;
 8009782:	bf00      	nop
  }

free_pbuf_and_return:
  if (dhcp != NULL) {
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <dhcp_recv+0x19c>
    dhcp->msg_in = NULL;
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2200      	movs	r2, #0
 800978e:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f003 fd71 	bl	800d278 <pbuf_free>
}
 8009796:	bf00      	nop
 8009798:	3728      	adds	r7, #40	; 0x28
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20004480 	.word	0x20004480
 80097a4:	0801675c 	.word	0x0801675c
 80097a8:	08016888 	.word	0x08016888
 80097ac:	080167bc 	.word	0x080167bc
 80097b0:	20004498 	.word	0x20004498
 80097b4:	200044a4 	.word	0x200044a4

080097b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80097b8:	b590      	push	{r4, r7, lr}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d109      	bne.n	80097e0 <dhcp_create_msg+0x28>
 80097cc:	4ba3      	ldr	r3, [pc, #652]	; (8009a5c <dhcp_create_msg+0x2a4>)
 80097ce:	f240 721d 	movw	r2, #1821	; 0x71d
 80097d2:	49a3      	ldr	r1, [pc, #652]	; (8009a60 <dhcp_create_msg+0x2a8>)
 80097d4:	48a3      	ldr	r0, [pc, #652]	; (8009a64 <dhcp_create_msg+0x2ac>)
 80097d6:	f00b fa87 	bl	8014ce8 <iprintf>
 80097da:	f06f 030f 	mvn.w	r3, #15
 80097de:	e138      	b.n	8009a52 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <dhcp_create_msg+0x42>
 80097e6:	4b9d      	ldr	r3, [pc, #628]	; (8009a5c <dhcp_create_msg+0x2a4>)
 80097e8:	f240 721e 	movw	r2, #1822	; 0x71e
 80097ec:	499e      	ldr	r1, [pc, #632]	; (8009a68 <dhcp_create_msg+0x2b0>)
 80097ee:	489d      	ldr	r0, [pc, #628]	; (8009a64 <dhcp_create_msg+0x2ac>)
 80097f0:	f00b fa7a 	bl	8014ce8 <iprintf>
 80097f4:	f06f 0305 	mvn.w	r3, #5
 80097f8:	e12b      	b.n	8009a52 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d006      	beq.n	8009810 <dhcp_create_msg+0x58>
 8009802:	4b96      	ldr	r3, [pc, #600]	; (8009a5c <dhcp_create_msg+0x2a4>)
 8009804:	f240 721f 	movw	r2, #1823	; 0x71f
 8009808:	4998      	ldr	r1, [pc, #608]	; (8009a6c <dhcp_create_msg+0x2b4>)
 800980a:	4896      	ldr	r0, [pc, #600]	; (8009a64 <dhcp_create_msg+0x2ac>)
 800980c:	f00b fa6c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <dhcp_create_msg+0x6e>
 8009818:	4b90      	ldr	r3, [pc, #576]	; (8009a5c <dhcp_create_msg+0x2a4>)
 800981a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800981e:	4994      	ldr	r1, [pc, #592]	; (8009a70 <dhcp_create_msg+0x2b8>)
 8009820:	4890      	ldr	r0, [pc, #576]	; (8009a64 <dhcp_create_msg+0x2ac>)
 8009822:	f00b fa61 	bl	8014ce8 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009826:	2200      	movs	r2, #0
 8009828:	f44f 719a 	mov.w	r1, #308	; 0x134
 800982c:	2000      	movs	r0, #0
 800982e:	f003 f9b1 	bl	800cb94 <pbuf_alloc>
 8009832:	4602      	mov	r2, r0
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8009840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009844:	e105      	b.n	8009a52 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	895b      	ldrh	r3, [r3, #10]
 800984c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8009850:	d206      	bcs.n	8009860 <dhcp_create_msg+0xa8>
 8009852:	4b82      	ldr	r3, [pc, #520]	; (8009a5c <dhcp_create_msg+0x2a4>)
 8009854:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009858:	4986      	ldr	r1, [pc, #536]	; (8009a74 <dhcp_create_msg+0x2bc>)
 800985a:	4882      	ldr	r0, [pc, #520]	; (8009a64 <dhcp_create_msg+0x2ac>)
 800985c:	f00b fa44 	bl	8014ce8 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	2b03      	cmp	r3, #3
 8009864:	d103      	bne.n	800986e <dhcp_create_msg+0xb6>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	7a5b      	ldrb	r3, [r3, #9]
 800986a:	2b03      	cmp	r3, #3
 800986c:	d10d      	bne.n	800988a <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	7a9b      	ldrb	r3, [r3, #10]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d105      	bne.n	8009882 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8009876:	f00b fab3 	bl	8014de0 <rand>
 800987a:	4603      	mov	r3, r0
 800987c:	461a      	mov	r2, r3
 800987e:	4b7e      	ldr	r3, [pc, #504]	; (8009a78 <dhcp_create_msg+0x2c0>)
 8009880:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8009882:	4b7d      	ldr	r3, [pc, #500]	; (8009a78 <dhcp_create_msg+0x2c0>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	2201      	movs	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2201      	movs	r2, #1
 80098a2:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80098ae:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	2200      	movs	r2, #0
 80098b6:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	691c      	ldr	r4, [r3, #16]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd ffa1 	bl	8007808 <lwip_htonl>
 80098c6:	4603      	mov	r3, r0
 80098c8:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2200      	movs	r2, #0
 80098d0:	721a      	strb	r2, [r3, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2200      	movs	r2, #0
 80098dc:	729a      	strb	r2, [r3, #10]
 80098de:	2200      	movs	r2, #0
 80098e0:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2200      	movs	r2, #0
 80098e8:	731a      	strb	r2, [r3, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	735a      	strb	r2, [r3, #13]
 80098ee:	2200      	movs	r2, #0
 80098f0:	739a      	strb	r2, [r3, #14]
 80098f2:	2200      	movs	r2, #0
 80098f4:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d010      	beq.n	800991e <dhcp_create_msg+0x166>
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d00d      	beq.n	800991e <dhcp_create_msg+0x166>
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	2b07      	cmp	r3, #7
 8009906:	d00a      	beq.n	800991e <dhcp_create_msg+0x166>
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	2b03      	cmp	r3, #3
 800990c:	d10d      	bne.n	800992a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009912:	2b05      	cmp	r3, #5
 8009914:	d003      	beq.n	800991e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	7a5b      	ldrb	r3, [r3, #9]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d105      	bne.n	800992a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	3204      	adds	r2, #4
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	2200      	movs	r2, #0
 8009930:	741a      	strb	r2, [r3, #16]
 8009932:	2200      	movs	r2, #0
 8009934:	745a      	strb	r2, [r3, #17]
 8009936:	2200      	movs	r2, #0
 8009938:	749a      	strb	r2, [r3, #18]
 800993a:	2200      	movs	r2, #0
 800993c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2200      	movs	r2, #0
 8009944:	751a      	strb	r2, [r3, #20]
 8009946:	2200      	movs	r2, #0
 8009948:	755a      	strb	r2, [r3, #21]
 800994a:	2200      	movs	r2, #0
 800994c:	759a      	strb	r2, [r3, #22]
 800994e:	2200      	movs	r2, #0
 8009950:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	2200      	movs	r2, #0
 8009958:	761a      	strb	r2, [r3, #24]
 800995a:	2200      	movs	r2, #0
 800995c:	765a      	strb	r2, [r3, #25]
 800995e:	2200      	movs	r2, #0
 8009960:	769a      	strb	r2, [r3, #26]
 8009962:	2200      	movs	r2, #0
 8009964:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009966:	2300      	movs	r3, #0
 8009968:	82fb      	strh	r3, [r7, #22]
 800996a:	e019      	b.n	80099a0 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	691a      	ldr	r2, [r3, #16]
 8009970:	8afb      	ldrh	r3, [r7, #22]
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8009978:	b289      	uxth	r1, r1
 800997a:	8af8      	ldrh	r0, [r7, #22]
 800997c:	4288      	cmp	r0, r1
 800997e:	d208      	bcs.n	8009992 <dhcp_create_msg+0x1da>
 8009980:	8af9      	ldrh	r1, [r7, #22]
 8009982:	2905      	cmp	r1, #5
 8009984:	d805      	bhi.n	8009992 <dhcp_create_msg+0x1da>
 8009986:	8af9      	ldrh	r1, [r7, #22]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	4401      	add	r1, r0
 800998c:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 8009990:	e000      	b.n	8009994 <dhcp_create_msg+0x1dc>
 8009992:	2100      	movs	r1, #0
 8009994:	4413      	add	r3, r2
 8009996:	460a      	mov	r2, r1
 8009998:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800999a:	8afb      	ldrh	r3, [r7, #22]
 800999c:	3301      	adds	r3, #1
 800999e:	82fb      	strh	r3, [r7, #22]
 80099a0:	8afb      	ldrh	r3, [r7, #22]
 80099a2:	2b0f      	cmp	r3, #15
 80099a4:	d9e2      	bls.n	800996c <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80099a6:	2300      	movs	r3, #0
 80099a8:	82fb      	strh	r3, [r7, #22]
 80099aa:	e009      	b.n	80099c0 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	691a      	ldr	r2, [r3, #16]
 80099b0:	8afb      	ldrh	r3, [r7, #22]
 80099b2:	4413      	add	r3, r2
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80099ba:	8afb      	ldrh	r3, [r7, #22]
 80099bc:	3301      	adds	r3, #1
 80099be:	82fb      	strh	r3, [r7, #22]
 80099c0:	8afb      	ldrh	r3, [r7, #22]
 80099c2:	2b3f      	cmp	r3, #63	; 0x3f
 80099c4:	d9f2      	bls.n	80099ac <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80099c6:	2300      	movs	r3, #0
 80099c8:	82fb      	strh	r3, [r7, #22]
 80099ca:	e009      	b.n	80099e0 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	691a      	ldr	r2, [r3, #16]
 80099d0:	8afb      	ldrh	r3, [r7, #22]
 80099d2:	4413      	add	r3, r2
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80099da:	8afb      	ldrh	r3, [r7, #22]
 80099dc:	3301      	adds	r3, #1
 80099de:	82fb      	strh	r3, [r7, #22]
 80099e0:	8afb      	ldrh	r3, [r7, #22]
 80099e2:	2b7f      	cmp	r3, #127	; 0x7f
 80099e4:	d9f2      	bls.n	80099cc <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80099f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80099f4:	2200      	movs	r2, #0
 80099f6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80099fa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80099fe:	2200      	movs	r2, #0
 8009a00:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009a04:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009a0e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2200      	movs	r2, #0
 8009a16:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8009a18:	2300      	movs	r3, #0
 8009a1a:	82fb      	strh	r3, [r7, #22]
 8009a1c:	e00b      	b.n	8009a36 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	691a      	ldr	r2, [r3, #16]
 8009a22:	8afb      	ldrh	r3, [r7, #22]
 8009a24:	8af9      	ldrh	r1, [r7, #22]
 8009a26:	b2c9      	uxtb	r1, r1
 8009a28:	4413      	add	r3, r2
 8009a2a:	460a      	mov	r2, r1
 8009a2c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8009a30:	8afb      	ldrh	r3, [r7, #22]
 8009a32:	3301      	adds	r3, #1
 8009a34:	82fb      	strh	r3, [r7, #22]
 8009a36:	8afb      	ldrh	r3, [r7, #22]
 8009a38:	2b43      	cmp	r3, #67	; 0x43
 8009a3a:	d9f0      	bls.n	8009a1e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	2135      	movs	r1, #53	; 0x35
 8009a40:	68b8      	ldr	r0, [r7, #8]
 8009a42:	f7ff fa1f 	bl	8008e84 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f7ff fa54 	bl	8008ef8 <dhcp_option_byte>
  return ERR_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd90      	pop	{r4, r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0801675c 	.word	0x0801675c
 8009a60:	08016a9c 	.word	0x08016a9c
 8009a64:	080167bc 	.word	0x080167bc
 8009a68:	08016abc 	.word	0x08016abc
 8009a6c:	08016adc 	.word	0x08016adc
 8009a70:	08016b04 	.word	0x08016b04
 8009a74:	08016b2c 	.word	0x08016b2c
 8009a78:	20004288 	.word	0x20004288

08009a7c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d107      	bne.n	8009a9a <dhcp_delete_msg+0x1e>
 8009a8a:	4b18      	ldr	r3, [pc, #96]	; (8009aec <dhcp_delete_msg+0x70>)
 8009a8c:	f240 726d 	movw	r2, #1901	; 0x76d
 8009a90:	4917      	ldr	r1, [pc, #92]	; (8009af0 <dhcp_delete_msg+0x74>)
 8009a92:	4818      	ldr	r0, [pc, #96]	; (8009af4 <dhcp_delete_msg+0x78>)
 8009a94:	f00b f928 	bl	8014ce8 <iprintf>
 8009a98:	e024      	b.n	8009ae4 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <dhcp_delete_msg+0x34>
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <dhcp_delete_msg+0x70>)
 8009aa4:	f240 726e 	movw	r2, #1902	; 0x76e
 8009aa8:	4913      	ldr	r1, [pc, #76]	; (8009af8 <dhcp_delete_msg+0x7c>)
 8009aaa:	4812      	ldr	r0, [pc, #72]	; (8009af4 <dhcp_delete_msg+0x78>)
 8009aac:	f00b f91c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d106      	bne.n	8009ac6 <dhcp_delete_msg+0x4a>
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <dhcp_delete_msg+0x70>)
 8009aba:	f240 726f 	movw	r2, #1903	; 0x76f
 8009abe:	490f      	ldr	r1, [pc, #60]	; (8009afc <dhcp_delete_msg+0x80>)
 8009ac0:	480c      	ldr	r0, [pc, #48]	; (8009af4 <dhcp_delete_msg+0x78>)
 8009ac2:	f00b f911 	bl	8014ce8 <iprintf>
  if (dhcp->p_out != NULL) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d004      	beq.n	8009ad8 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f003 fbd0 	bl	800d278 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	611a      	str	r2, [r3, #16]
}
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	0801675c 	.word	0x0801675c
 8009af0:	08016b6c 	.word	0x08016b6c
 8009af4:	080167bc 	.word	0x080167bc
 8009af8:	08016b8c 	.word	0x08016b8c
 8009afc:	08016bb4 	.word	0x08016bb4

08009b00 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d107      	bne.n	8009b1e <dhcp_option_trailer+0x1e>
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <dhcp_option_trailer+0xa0>)
 8009b10:	f240 7282 	movw	r2, #1922	; 0x782
 8009b14:	4923      	ldr	r1, [pc, #140]	; (8009ba4 <dhcp_option_trailer+0xa4>)
 8009b16:	4824      	ldr	r0, [pc, #144]	; (8009ba8 <dhcp_option_trailer+0xa8>)
 8009b18:	f00b f8e6 	bl	8014ce8 <iprintf>
 8009b1c:	e03c      	b.n	8009b98 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <dhcp_option_trailer+0x34>
 8009b26:	4b1e      	ldr	r3, [pc, #120]	; (8009ba0 <dhcp_option_trailer+0xa0>)
 8009b28:	f240 7283 	movw	r2, #1923	; 0x783
 8009b2c:	491f      	ldr	r1, [pc, #124]	; (8009bac <dhcp_option_trailer+0xac>)
 8009b2e:	481e      	ldr	r0, [pc, #120]	; (8009ba8 <dhcp_option_trailer+0xa8>)
 8009b30:	f00b f8da 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	8a9b      	ldrh	r3, [r3, #20]
 8009b38:	2b43      	cmp	r3, #67	; 0x43
 8009b3a:	d906      	bls.n	8009b4a <dhcp_option_trailer+0x4a>
 8009b3c:	4b18      	ldr	r3, [pc, #96]	; (8009ba0 <dhcp_option_trailer+0xa0>)
 8009b3e:	f240 7284 	movw	r2, #1924	; 0x784
 8009b42:	491b      	ldr	r1, [pc, #108]	; (8009bb0 <dhcp_option_trailer+0xb0>)
 8009b44:	4818      	ldr	r0, [pc, #96]	; (8009ba8 <dhcp_option_trailer+0xa8>)
 8009b46:	f00b f8cf 	bl	8014ce8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691a      	ldr	r2, [r3, #16]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8a9b      	ldrh	r3, [r3, #20]
 8009b52:	1c59      	adds	r1, r3, #1
 8009b54:	b288      	uxth	r0, r1
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	8288      	strh	r0, [r1, #20]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	22ff      	movs	r2, #255	; 0xff
 8009b5e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009b62:	e00b      	b.n	8009b7c <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	8a9b      	ldrh	r3, [r3, #20]
 8009b6c:	1c59      	adds	r1, r3, #1
 8009b6e:	b288      	uxth	r0, r1
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	8288      	strh	r0, [r1, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8a9b      	ldrh	r3, [r3, #20]
 8009b80:	2b43      	cmp	r3, #67	; 0x43
 8009b82:	d905      	bls.n	8009b90 <dhcp_option_trailer+0x90>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8a9b      	ldrh	r3, [r3, #20]
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009b94:	2b43      	cmp	r3, #67	; 0x43
 8009b96:	d9e5      	bls.n	8009b64 <dhcp_option_trailer+0x64>
  }
}
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	0801675c 	.word	0x0801675c
 8009ba4:	08016bdc 	.word	0x08016bdc
 8009ba8:	080167bc 	.word	0x080167bc
 8009bac:	08016c00 	.word	0x08016c00
 8009bb0:	08016c2c 	.word	0x08016c2c

08009bb4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d017      	beq.n	8009bf2 <dhcp_supplied_address+0x3e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d013      	beq.n	8009bf2 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	7a5b      	ldrb	r3, [r3, #9]
 8009bd4:	2b0a      	cmp	r3, #10
 8009bd6:	d007      	beq.n	8009be8 <dhcp_supplied_address+0x34>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	7a5b      	ldrb	r3, [r3, #9]
 8009bdc:	2b05      	cmp	r3, #5
 8009bde:	d003      	beq.n	8009be8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d101      	bne.n	8009bec <dhcp_supplied_address+0x38>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e000      	b.n	8009bee <dhcp_supplied_address+0x3a>
 8009bec:	2300      	movs	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	e000      	b.n	8009bf4 <dhcp_supplied_address+0x40>
  }
  return 0;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009c08:	4915      	ldr	r1, [pc, #84]	; (8009c60 <etharp_free_entry+0x60>)
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	440b      	add	r3, r1
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d013      	beq.n	8009c44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009c1c:	4910      	ldr	r1, [pc, #64]	; (8009c60 <etharp_free_entry+0x60>)
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	4413      	add	r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	440b      	add	r3, r1
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f003 fb23 	bl	800d278 <pbuf_free>
    arp_table[i].q = NULL;
 8009c32:	490b      	ldr	r1, [pc, #44]	; (8009c60 <etharp_free_entry+0x60>)
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	00db      	lsls	r3, r3, #3
 8009c3e:	440b      	add	r3, r1
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009c44:	4906      	ldr	r1, [pc, #24]	; (8009c60 <etharp_free_entry+0x60>)
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	4413      	add	r3, r2
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	440b      	add	r3, r1
 8009c52:	3314      	adds	r3, #20
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	2000428c 	.word	0x2000428c

08009c64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	71fb      	strb	r3, [r7, #7]
 8009c6e:	e096      	b.n	8009d9e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009c70:	79fa      	ldrb	r2, [r7, #7]
 8009c72:	494f      	ldr	r1, [pc, #316]	; (8009db0 <etharp_tmr+0x14c>)
 8009c74:	4613      	mov	r3, r2
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	4413      	add	r3, r2
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	440b      	add	r3, r1
 8009c7e:	3314      	adds	r3, #20
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8009c84:	79bb      	ldrb	r3, [r7, #6]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8086 	beq.w	8009d98 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8009c8c:	79fa      	ldrb	r2, [r7, #7]
 8009c8e:	4948      	ldr	r1, [pc, #288]	; (8009db0 <etharp_tmr+0x14c>)
 8009c90:	4613      	mov	r3, r2
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	4413      	add	r3, r2
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	440b      	add	r3, r1
 8009c9a:	3312      	adds	r3, #18
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	b298      	uxth	r0, r3
 8009ca2:	4943      	ldr	r1, [pc, #268]	; (8009db0 <etharp_tmr+0x14c>)
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	4413      	add	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	440b      	add	r3, r1
 8009cae:	3312      	adds	r3, #18
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009cb4:	79fa      	ldrb	r2, [r7, #7]
 8009cb6:	493e      	ldr	r1, [pc, #248]	; (8009db0 <etharp_tmr+0x14c>)
 8009cb8:	4613      	mov	r3, r2
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	4413      	add	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	3312      	adds	r3, #18
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009cca:	d215      	bcs.n	8009cf8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009ccc:	79fa      	ldrb	r2, [r7, #7]
 8009cce:	4938      	ldr	r1, [pc, #224]	; (8009db0 <etharp_tmr+0x14c>)
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	3314      	adds	r3, #20
 8009cdc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d10f      	bne.n	8009d02 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009ce2:	79fa      	ldrb	r2, [r7, #7]
 8009ce4:	4932      	ldr	r1, [pc, #200]	; (8009db0 <etharp_tmr+0x14c>)
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4413      	add	r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	440b      	add	r3, r1
 8009cf0:	3312      	adds	r3, #18
 8009cf2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d904      	bls.n	8009d02 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7ff ff80 	bl	8009c00 <etharp_free_entry>
 8009d00:	e04a      	b.n	8009d98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009d02:	79fa      	ldrb	r2, [r7, #7]
 8009d04:	492a      	ldr	r1, [pc, #168]	; (8009db0 <etharp_tmr+0x14c>)
 8009d06:	4613      	mov	r3, r2
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	4413      	add	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	440b      	add	r3, r1
 8009d10:	3314      	adds	r3, #20
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	d10a      	bne.n	8009d2e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009d18:	79fa      	ldrb	r2, [r7, #7]
 8009d1a:	4925      	ldr	r1, [pc, #148]	; (8009db0 <etharp_tmr+0x14c>)
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	4413      	add	r3, r2
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	440b      	add	r3, r1
 8009d26:	3314      	adds	r3, #20
 8009d28:	2204      	movs	r2, #4
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	e034      	b.n	8009d98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009d2e:	79fa      	ldrb	r2, [r7, #7]
 8009d30:	491f      	ldr	r1, [pc, #124]	; (8009db0 <etharp_tmr+0x14c>)
 8009d32:	4613      	mov	r3, r2
 8009d34:	005b      	lsls	r3, r3, #1
 8009d36:	4413      	add	r3, r2
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3314      	adds	r3, #20
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	d10a      	bne.n	8009d5a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009d44:	79fa      	ldrb	r2, [r7, #7]
 8009d46:	491a      	ldr	r1, [pc, #104]	; (8009db0 <etharp_tmr+0x14c>)
 8009d48:	4613      	mov	r3, r2
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	4413      	add	r3, r2
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	440b      	add	r3, r1
 8009d52:	3314      	adds	r3, #20
 8009d54:	2202      	movs	r2, #2
 8009d56:	701a      	strb	r2, [r3, #0]
 8009d58:	e01e      	b.n	8009d98 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009d5a:	79fa      	ldrb	r2, [r7, #7]
 8009d5c:	4914      	ldr	r1, [pc, #80]	; (8009db0 <etharp_tmr+0x14c>)
 8009d5e:	4613      	mov	r3, r2
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	4413      	add	r3, r2
 8009d64:	00db      	lsls	r3, r3, #3
 8009d66:	440b      	add	r3, r1
 8009d68:	3314      	adds	r3, #20
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d113      	bne.n	8009d98 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009d70:	79fa      	ldrb	r2, [r7, #7]
 8009d72:	490f      	ldr	r1, [pc, #60]	; (8009db0 <etharp_tmr+0x14c>)
 8009d74:	4613      	mov	r3, r2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	4413      	add	r3, r2
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	440b      	add	r3, r1
 8009d7e:	3308      	adds	r3, #8
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	79fa      	ldrb	r2, [r7, #7]
 8009d84:	4613      	mov	r3, r2
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	4413      	add	r3, r2
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <etharp_tmr+0x14c>)
 8009d8e:	4413      	add	r3, r2
 8009d90:	3304      	adds	r3, #4
 8009d92:	4619      	mov	r1, r3
 8009d94:	f000 fe3c 	bl	800aa10 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	71fb      	strb	r3, [r7, #7]
 8009d9e:	79fb      	ldrb	r3, [r7, #7]
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	f67f af65 	bls.w	8009c70 <etharp_tmr+0xc>
      }
    }
  }
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	2000428c 	.word	0x2000428c

08009db4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	77fb      	strb	r3, [r7, #31]
 8009dc6:	230a      	movs	r3, #10
 8009dc8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8009dca:	230a      	movs	r3, #10
 8009dcc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	833b      	strh	r3, [r7, #24]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	82fb      	strh	r3, [r7, #22]
 8009dde:	2300      	movs	r3, #0
 8009de0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009de2:	2300      	movs	r3, #0
 8009de4:	773b      	strb	r3, [r7, #28]
 8009de6:	e093      	b.n	8009f10 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8009de8:	7f3a      	ldrb	r2, [r7, #28]
 8009dea:	4990      	ldr	r1, [pc, #576]	; (800a02c <etharp_find_entry+0x278>)
 8009dec:	4613      	mov	r3, r2
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	4413      	add	r3, r2
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	440b      	add	r3, r1
 8009df6:	3314      	adds	r3, #20
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009dfc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009e00:	2b0a      	cmp	r3, #10
 8009e02:	d105      	bne.n	8009e10 <etharp_find_entry+0x5c>
 8009e04:	7cfb      	ldrb	r3, [r7, #19]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8009e0a:	7f3b      	ldrb	r3, [r7, #28]
 8009e0c:	777b      	strb	r3, [r7, #29]
 8009e0e:	e07c      	b.n	8009f0a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009e10:	7cfb      	ldrb	r3, [r7, #19]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d079      	beq.n	8009f0a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009e16:	7cfb      	ldrb	r3, [r7, #19]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d009      	beq.n	8009e30 <etharp_find_entry+0x7c>
 8009e1c:	7cfb      	ldrb	r3, [r7, #19]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d806      	bhi.n	8009e30 <etharp_find_entry+0x7c>
 8009e22:	4b83      	ldr	r3, [pc, #524]	; (800a030 <etharp_find_entry+0x27c>)
 8009e24:	f44f 7293 	mov.w	r2, #294	; 0x126
 8009e28:	4982      	ldr	r1, [pc, #520]	; (800a034 <etharp_find_entry+0x280>)
 8009e2a:	4883      	ldr	r0, [pc, #524]	; (800a038 <etharp_find_entry+0x284>)
 8009e2c:	f00a ff5c 	bl	8014ce8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00f      	beq.n	8009e56 <etharp_find_entry+0xa2>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6819      	ldr	r1, [r3, #0]
 8009e3a:	7f3a      	ldrb	r2, [r7, #28]
 8009e3c:	487b      	ldr	r0, [pc, #492]	; (800a02c <etharp_find_entry+0x278>)
 8009e3e:	4613      	mov	r3, r2
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	4413      	add	r3, r2
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4403      	add	r3, r0
 8009e48:	3304      	adds	r3, #4
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	d102      	bne.n	8009e56 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8009e50:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009e54:	e0e5      	b.n	800a022 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009e56:	7cfb      	ldrb	r3, [r7, #19]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d13b      	bne.n	8009ed4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009e5c:	7f3a      	ldrb	r2, [r7, #28]
 8009e5e:	4973      	ldr	r1, [pc, #460]	; (800a02c <etharp_find_entry+0x278>)
 8009e60:	4613      	mov	r3, r2
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	4413      	add	r3, r2
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	440b      	add	r3, r1
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d018      	beq.n	8009ea2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8009e70:	7f3a      	ldrb	r2, [r7, #28]
 8009e72:	496e      	ldr	r1, [pc, #440]	; (800a02c <etharp_find_entry+0x278>)
 8009e74:	4613      	mov	r3, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	4413      	add	r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	440b      	add	r3, r1
 8009e7e:	3312      	adds	r3, #18
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	8b3a      	ldrh	r2, [r7, #24]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d840      	bhi.n	8009f0a <etharp_find_entry+0x156>
            old_queue = i;
 8009e88:	7f3b      	ldrb	r3, [r7, #28]
 8009e8a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8009e8c:	7f3a      	ldrb	r2, [r7, #28]
 8009e8e:	4967      	ldr	r1, [pc, #412]	; (800a02c <etharp_find_entry+0x278>)
 8009e90:	4613      	mov	r3, r2
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	4413      	add	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	440b      	add	r3, r1
 8009e9a:	3312      	adds	r3, #18
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	833b      	strh	r3, [r7, #24]
 8009ea0:	e033      	b.n	8009f0a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009ea2:	7f3a      	ldrb	r2, [r7, #28]
 8009ea4:	4961      	ldr	r1, [pc, #388]	; (800a02c <etharp_find_entry+0x278>)
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	440b      	add	r3, r1
 8009eb0:	3312      	adds	r3, #18
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	8afa      	ldrh	r2, [r7, #22]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d827      	bhi.n	8009f0a <etharp_find_entry+0x156>
            old_pending = i;
 8009eba:	7f3b      	ldrb	r3, [r7, #28]
 8009ebc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009ebe:	7f3a      	ldrb	r2, [r7, #28]
 8009ec0:	495a      	ldr	r1, [pc, #360]	; (800a02c <etharp_find_entry+0x278>)
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	3312      	adds	r3, #18
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	82fb      	strh	r3, [r7, #22]
 8009ed2:	e01a      	b.n	8009f0a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009ed4:	7cfb      	ldrb	r3, [r7, #19]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d917      	bls.n	8009f0a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009eda:	7f3a      	ldrb	r2, [r7, #28]
 8009edc:	4953      	ldr	r1, [pc, #332]	; (800a02c <etharp_find_entry+0x278>)
 8009ede:	4613      	mov	r3, r2
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	4413      	add	r3, r2
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	440b      	add	r3, r1
 8009ee8:	3312      	adds	r3, #18
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	8aba      	ldrh	r2, [r7, #20]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d80b      	bhi.n	8009f0a <etharp_find_entry+0x156>
            old_stable = i;
 8009ef2:	7f3b      	ldrb	r3, [r7, #28]
 8009ef4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8009ef6:	7f3a      	ldrb	r2, [r7, #28]
 8009ef8:	494c      	ldr	r1, [pc, #304]	; (800a02c <etharp_find_entry+0x278>)
 8009efa:	4613      	mov	r3, r2
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	4413      	add	r3, r2
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	440b      	add	r3, r1
 8009f04:	3312      	adds	r3, #18
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009f0a:	7f3b      	ldrb	r3, [r7, #28]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	773b      	strb	r3, [r7, #28]
 8009f10:	7f3b      	ldrb	r3, [r7, #28]
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	f67f af68 	bls.w	8009de8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d108      	bne.n	8009f34 <etharp_find_entry+0x180>
 8009f22:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f26:	2b0a      	cmp	r3, #10
 8009f28:	d107      	bne.n	8009f3a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d102      	bne.n	8009f3a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f38:	e073      	b.n	800a022 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009f3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	dc02      	bgt.n	8009f48 <etharp_find_entry+0x194>
    i = empty;
 8009f42:	7f7b      	ldrb	r3, [r7, #29]
 8009f44:	773b      	strb	r3, [r7, #28]
 8009f46:	e036      	b.n	8009fb6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009f48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	dc13      	bgt.n	8009f78 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8009f50:	7fbb      	ldrb	r3, [r7, #30]
 8009f52:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009f54:	7f3a      	ldrb	r2, [r7, #28]
 8009f56:	4935      	ldr	r1, [pc, #212]	; (800a02c <etharp_find_entry+0x278>)
 8009f58:	4613      	mov	r3, r2
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	4413      	add	r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	440b      	add	r3, r1
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d018      	beq.n	8009f9a <etharp_find_entry+0x1e6>
 8009f68:	4b31      	ldr	r3, [pc, #196]	; (800a030 <etharp_find_entry+0x27c>)
 8009f6a:	f240 126f 	movw	r2, #367	; 0x16f
 8009f6e:	4933      	ldr	r1, [pc, #204]	; (800a03c <etharp_find_entry+0x288>)
 8009f70:	4831      	ldr	r0, [pc, #196]	; (800a038 <etharp_find_entry+0x284>)
 8009f72:	f00a feb9 	bl	8014ce8 <iprintf>
 8009f76:	e010      	b.n	8009f9a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009f78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	dc02      	bgt.n	8009f86 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8009f80:	7ffb      	ldrb	r3, [r7, #31]
 8009f82:	773b      	strb	r3, [r7, #28]
 8009f84:	e009      	b.n	8009f9a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009f86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009f8a:	2b09      	cmp	r3, #9
 8009f8c:	dc02      	bgt.n	8009f94 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009f8e:	7efb      	ldrb	r3, [r7, #27]
 8009f90:	773b      	strb	r3, [r7, #28]
 8009f92:	e002      	b.n	8009f9a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f98:	e043      	b.n	800a022 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009f9a:	7f3b      	ldrb	r3, [r7, #28]
 8009f9c:	2b09      	cmp	r3, #9
 8009f9e:	d906      	bls.n	8009fae <etharp_find_entry+0x1fa>
 8009fa0:	4b23      	ldr	r3, [pc, #140]	; (800a030 <etharp_find_entry+0x27c>)
 8009fa2:	f240 1281 	movw	r2, #385	; 0x181
 8009fa6:	4926      	ldr	r1, [pc, #152]	; (800a040 <etharp_find_entry+0x28c>)
 8009fa8:	4823      	ldr	r0, [pc, #140]	; (800a038 <etharp_find_entry+0x284>)
 8009faa:	f00a fe9d 	bl	8014ce8 <iprintf>
    etharp_free_entry(i);
 8009fae:	7f3b      	ldrb	r3, [r7, #28]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7ff fe25 	bl	8009c00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009fb6:	7f3b      	ldrb	r3, [r7, #28]
 8009fb8:	2b09      	cmp	r3, #9
 8009fba:	d906      	bls.n	8009fca <etharp_find_entry+0x216>
 8009fbc:	4b1c      	ldr	r3, [pc, #112]	; (800a030 <etharp_find_entry+0x27c>)
 8009fbe:	f240 1285 	movw	r2, #389	; 0x185
 8009fc2:	491f      	ldr	r1, [pc, #124]	; (800a040 <etharp_find_entry+0x28c>)
 8009fc4:	481c      	ldr	r0, [pc, #112]	; (800a038 <etharp_find_entry+0x284>)
 8009fc6:	f00a fe8f 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009fca:	7f3a      	ldrb	r2, [r7, #28]
 8009fcc:	4917      	ldr	r1, [pc, #92]	; (800a02c <etharp_find_entry+0x278>)
 8009fce:	4613      	mov	r3, r2
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	00db      	lsls	r3, r3, #3
 8009fd6:	440b      	add	r3, r1
 8009fd8:	3314      	adds	r3, #20
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d006      	beq.n	8009fee <etharp_find_entry+0x23a>
 8009fe0:	4b13      	ldr	r3, [pc, #76]	; (800a030 <etharp_find_entry+0x27c>)
 8009fe2:	f240 1287 	movw	r2, #391	; 0x187
 8009fe6:	4917      	ldr	r1, [pc, #92]	; (800a044 <etharp_find_entry+0x290>)
 8009fe8:	4813      	ldr	r0, [pc, #76]	; (800a038 <etharp_find_entry+0x284>)
 8009fea:	f00a fe7d 	bl	8014ce8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009ff4:	7f3a      	ldrb	r2, [r7, #28]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	480c      	ldr	r0, [pc, #48]	; (800a02c <etharp_find_entry+0x278>)
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	4413      	add	r3, r2
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	4403      	add	r3, r0
 800a006:	3304      	adds	r3, #4
 800a008:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a00a:	7f3a      	ldrb	r2, [r7, #28]
 800a00c:	4907      	ldr	r1, [pc, #28]	; (800a02c <etharp_find_entry+0x278>)
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	440b      	add	r3, r1
 800a018:	3312      	adds	r3, #18
 800a01a:	2200      	movs	r2, #0
 800a01c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a01e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000428c 	.word	0x2000428c
 800a030:	08016c6c 	.word	0x08016c6c
 800a034:	08016ca4 	.word	0x08016ca4
 800a038:	08016ce4 	.word	0x08016ce4
 800a03c:	08016d0c 	.word	0x08016d0c
 800a040:	08016d24 	.word	0x08016d24
 800a044:	08016d38 	.word	0x08016d38

0800a048 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a05c:	2b06      	cmp	r3, #6
 800a05e:	d006      	beq.n	800a06e <etharp_update_arp_entry+0x26>
 800a060:	4b48      	ldr	r3, [pc, #288]	; (800a184 <etharp_update_arp_entry+0x13c>)
 800a062:	f240 12ab 	movw	r2, #427	; 0x1ab
 800a066:	4948      	ldr	r1, [pc, #288]	; (800a188 <etharp_update_arp_entry+0x140>)
 800a068:	4848      	ldr	r0, [pc, #288]	; (800a18c <etharp_update_arp_entry+0x144>)
 800a06a:	f00a fe3d 	bl	8014ce8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d012      	beq.n	800a09a <etharp_update_arp_entry+0x52>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00e      	beq.n	800a09a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68f9      	ldr	r1, [r7, #12]
 800a082:	4618      	mov	r0, r3
 800a084:	f001 f8f8 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800a088:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a096:	2be0      	cmp	r3, #224	; 0xe0
 800a098:	d102      	bne.n	800a0a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a09a:	f06f 030f 	mvn.w	r3, #15
 800a09e:	e06c      	b.n	800a17a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f7ff fe84 	bl	8009db4 <etharp_find_entry>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da02      	bge.n	800a0be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0bc:	e05d      	b.n	800a17a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a0be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a0c2:	4933      	ldr	r1, [pc, #204]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	4413      	add	r3, r2
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	440b      	add	r3, r1
 800a0ce:	3314      	adds	r3, #20
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a0d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a0d8:	492d      	ldr	r1, [pc, #180]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a0da:	4613      	mov	r3, r2
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	4413      	add	r3, r2
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a0ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	4413      	add	r3, r2
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	4a25      	ldr	r2, [pc, #148]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a0fa:	4413      	add	r3, r2
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	2206      	movs	r2, #6
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f00a fddd 	bl	8014cc2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a108:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a10c:	4920      	ldr	r1, [pc, #128]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a10e:	4613      	mov	r3, r2
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4413      	add	r3, r2
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	440b      	add	r3, r1
 800a118:	3312      	adds	r3, #18
 800a11a:	2200      	movs	r2, #0
 800a11c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a11e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a122:	491b      	ldr	r1, [pc, #108]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a124:	4613      	mov	r3, r2
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	4413      	add	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	440b      	add	r3, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d021      	beq.n	800a178 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a134:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a138:	4915      	ldr	r1, [pc, #84]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a13a:	4613      	mov	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4413      	add	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	440b      	add	r3, r1
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a148:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a14c:	4910      	ldr	r1, [pc, #64]	; (800a190 <etharp_update_arp_entry+0x148>)
 800a14e:	4613      	mov	r3, r2
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	4413      	add	r3, r2
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	440b      	add	r3, r1
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800a162:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6939      	ldr	r1, [r7, #16]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f009 fc55 	bl	8013a1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a172:	6938      	ldr	r0, [r7, #16]
 800a174:	f003 f880 	bl	800d278 <pbuf_free>
  }
  return ERR_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	08016c6c 	.word	0x08016c6c
 800a188:	08016d64 	.word	0x08016d64
 800a18c:	08016ce4 	.word	0x08016ce4
 800a190:	2000428c 	.word	0x2000428c

0800a194 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	e01f      	b.n	800a1e2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	4912      	ldr	r1, [pc, #72]	; (800a1f0 <etharp_cleanup_netif+0x5c>)
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	440b      	add	r3, r1
 800a1b0:	3314      	adds	r3, #20
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00f      	beq.n	800a1dc <etharp_cleanup_netif+0x48>
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	490c      	ldr	r1, [pc, #48]	; (800a1f0 <etharp_cleanup_netif+0x5c>)
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	4413      	add	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	440b      	add	r3, r1
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d103      	bne.n	800a1dc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7ff fd12 	bl	8009c00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	d9dc      	bls.n	800a1a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	2000428c 	.word	0x2000428c

0800a1f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a1f4:	b5b0      	push	{r4, r5, r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af04      	add	r7, sp, #16
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <etharp_input+0x20>
 800a204:	4b3f      	ldr	r3, [pc, #252]	; (800a304 <etharp_input+0x110>)
 800a206:	f44f 7222 	mov.w	r2, #648	; 0x288
 800a20a:	493f      	ldr	r1, [pc, #252]	; (800a308 <etharp_input+0x114>)
 800a20c:	483f      	ldr	r0, [pc, #252]	; (800a30c <etharp_input+0x118>)
 800a20e:	f00a fd6b 	bl	8014ce8 <iprintf>
 800a212:	e074      	b.n	800a2fe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a224:	d10c      	bne.n	800a240 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d108      	bne.n	800a240 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a232:	2b04      	cmp	r3, #4
 800a234:	d104      	bne.n	800a240 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d003      	beq.n	800a248 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f003 f819 	bl	800d278 <pbuf_free>
    return;
 800a246:	e05a      	b.n	800a2fe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	330e      	adds	r3, #14
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	3318      	adds	r3, #24
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <etharp_input+0x74>
    for_us = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	75fb      	strb	r3, [r7, #23]
 800a266:	e009      	b.n	800a27c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	3304      	adds	r3, #4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	429a      	cmp	r2, r3
 800a272:	bf0c      	ite	eq
 800a274:	2301      	moveq	r3, #1
 800a276:	2300      	movne	r3, #0
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f103 0208 	add.w	r2, r3, #8
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <etharp_input+0x98>
 800a288:	2301      	movs	r3, #1
 800a28a:	e000      	b.n	800a28e <etharp_input+0x9a>
 800a28c:	2302      	movs	r3, #2
 800a28e:	f107 010c 	add.w	r1, r7, #12
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	f7ff fed8 	bl	800a048 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	88db      	ldrh	r3, [r3, #6]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a2:	d003      	beq.n	800a2ac <etharp_input+0xb8>
 800a2a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2a8:	d01e      	beq.n	800a2e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800a2aa:	e025      	b.n	800a2f8 <etharp_input+0x104>
    if (for_us) {
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d021      	beq.n	800a2f6 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	3208      	adds	r2, #8
      etharp_raw(netif,
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	9103      	str	r1, [sp, #12]
 800a2d0:	f107 010c 	add.w	r1, r7, #12
 800a2d4:	9102      	str	r1, [sp, #8]
 800a2d6:	9201      	str	r2, [sp, #4]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	462b      	mov	r3, r5
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6838      	ldr	r0, [r7, #0]
 800a2e2:	f000 fae7 	bl	800a8b4 <etharp_raw>
    break;
 800a2e6:	e006      	b.n	800a2f6 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6838      	ldr	r0, [r7, #0]
 800a2f0:	f7fe f952 	bl	8008598 <dhcp_arp_reply>
    break;
 800a2f4:	e000      	b.n	800a2f8 <etharp_input+0x104>
    break;
 800a2f6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f002 ffbd 	bl	800d278 <pbuf_free>
}
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bdb0      	pop	{r4, r5, r7, pc}
 800a304:	08016c6c 	.word	0x08016c6c
 800a308:	08016dbc 	.word	0x08016dbc
 800a30c:	08016ce4 	.word	0x08016ce4

0800a310 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af02      	add	r7, sp, #8
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a31e:	79fa      	ldrb	r2, [r7, #7]
 800a320:	4944      	ldr	r1, [pc, #272]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	440b      	add	r3, r1
 800a32c:	3314      	adds	r3, #20
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d806      	bhi.n	800a342 <etharp_output_to_arp_index+0x32>
 800a334:	4b40      	ldr	r3, [pc, #256]	; (800a438 <etharp_output_to_arp_index+0x128>)
 800a336:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a33a:	4940      	ldr	r1, [pc, #256]	; (800a43c <etharp_output_to_arp_index+0x12c>)
 800a33c:	4840      	ldr	r0, [pc, #256]	; (800a440 <etharp_output_to_arp_index+0x130>)
 800a33e:	f00a fcd3 	bl	8014ce8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a342:	79fa      	ldrb	r2, [r7, #7]
 800a344:	493b      	ldr	r1, [pc, #236]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a346:	4613      	mov	r3, r2
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	4413      	add	r3, r2
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	440b      	add	r3, r1
 800a350:	3314      	adds	r3, #20
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d153      	bne.n	800a400 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a358:	79fa      	ldrb	r2, [r7, #7]
 800a35a:	4936      	ldr	r1, [pc, #216]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a35c:	4613      	mov	r3, r2
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	4413      	add	r3, r2
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	440b      	add	r3, r1
 800a366:	3312      	adds	r3, #18
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a36e:	d919      	bls.n	800a3a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a370:	79fa      	ldrb	r2, [r7, #7]
 800a372:	4613      	mov	r3, r2
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	4413      	add	r3, r2
 800a378:	00db      	lsls	r3, r3, #3
 800a37a:	4a2e      	ldr	r2, [pc, #184]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a37c:	4413      	add	r3, r2
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 fb44 	bl	800aa10 <etharp_request>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d138      	bne.n	800a400 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a38e:	79fa      	ldrb	r2, [r7, #7]
 800a390:	4928      	ldr	r1, [pc, #160]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a392:	4613      	mov	r3, r2
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	4413      	add	r3, r2
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	440b      	add	r3, r1
 800a39c:	3314      	adds	r3, #20
 800a39e:	2203      	movs	r2, #3
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	e02d      	b.n	800a400 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a3a4:	79fa      	ldrb	r2, [r7, #7]
 800a3a6:	4923      	ldr	r1, [pc, #140]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	4413      	add	r3, r2
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	440b      	add	r3, r1
 800a3b2:	3312      	adds	r3, #18
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a3ba:	d321      	bcc.n	800a400 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a3bc:	79fa      	ldrb	r2, [r7, #7]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	4413      	add	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a3c8:	4413      	add	r3, r2
 800a3ca:	1d19      	adds	r1, r3, #4
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	4413      	add	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	4a16      	ldr	r2, [pc, #88]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a3da:	4413      	add	r3, r2
 800a3dc:	3304      	adds	r3, #4
 800a3de:	461a      	mov	r2, r3
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 faf3 	bl	800a9cc <etharp_request_dst>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d109      	bne.n	800a400 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a3ec:	79fa      	ldrb	r2, [r7, #7]
 800a3ee:	4911      	ldr	r1, [pc, #68]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	4413      	add	r3, r2
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	440b      	add	r3, r1
 800a3fa:	3314      	adds	r3, #20
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800a406:	79fa      	ldrb	r2, [r7, #7]
 800a408:	4613      	mov	r3, r2
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	3308      	adds	r3, #8
 800a412:	4a08      	ldr	r2, [pc, #32]	; (800a434 <etharp_output_to_arp_index+0x124>)
 800a414:	4413      	add	r3, r2
 800a416:	1d1a      	adds	r2, r3, #4
 800a418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	4613      	mov	r3, r2
 800a420:	460a      	mov	r2, r1
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f009 faf9 	bl	8013a1c <ethernet_output>
 800a42a:	4603      	mov	r3, r0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	2000428c 	.word	0x2000428c
 800a438:	08016c6c 	.word	0x08016c6c
 800a43c:	08016ddc 	.word	0x08016ddc
 800a440:	08016ce4 	.word	0x08016ce4

0800a444 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08a      	sub	sp, #40	; 0x28
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <etharp_output+0x24>
 800a45a:	4b69      	ldr	r3, [pc, #420]	; (800a600 <etharp_output+0x1bc>)
 800a45c:	f240 321b 	movw	r2, #795	; 0x31b
 800a460:	4968      	ldr	r1, [pc, #416]	; (800a604 <etharp_output+0x1c0>)
 800a462:	4869      	ldr	r0, [pc, #420]	; (800a608 <etharp_output+0x1c4>)
 800a464:	f00a fc40 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <etharp_output+0x38>
 800a46e:	4b64      	ldr	r3, [pc, #400]	; (800a600 <etharp_output+0x1bc>)
 800a470:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a474:	4965      	ldr	r1, [pc, #404]	; (800a60c <etharp_output+0x1c8>)
 800a476:	4864      	ldr	r0, [pc, #400]	; (800a608 <etharp_output+0x1c4>)
 800a478:	f00a fc36 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <etharp_output+0x4c>
 800a482:	4b5f      	ldr	r3, [pc, #380]	; (800a600 <etharp_output+0x1bc>)
 800a484:	f240 321d 	movw	r2, #797	; 0x31d
 800a488:	4961      	ldr	r1, [pc, #388]	; (800a610 <etharp_output+0x1cc>)
 800a48a:	485f      	ldr	r0, [pc, #380]	; (800a608 <etharp_output+0x1c4>)
 800a48c:	f00a fc2c 	bl	8014ce8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 feee 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a4a2:	4b5c      	ldr	r3, [pc, #368]	; (800a614 <etharp_output+0x1d0>)
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	e09b      	b.n	800a5e0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4b0:	2be0      	cmp	r3, #224	; 0xe0
 800a4b2:	d118      	bne.n	800a4e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a4bc:	235e      	movs	r3, #94	; 0x5e
 800a4be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3303      	adds	r3, #3
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a4de:	f107 0310 	add.w	r3, r7, #16
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e07c      	b.n	800a5e0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	405a      	eors	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d012      	beq.n	800a524 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a504:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00b      	beq.n	800a524 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	330c      	adds	r3, #12
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	330c      	adds	r3, #12
 800a51a:	61bb      	str	r3, [r7, #24]
 800a51c:	e002      	b.n	800a524 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a51e:	f06f 0303 	mvn.w	r3, #3
 800a522:	e069      	b.n	800a5f8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a524:	4b3c      	ldr	r3, [pc, #240]	; (800a618 <etharp_output+0x1d4>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	4619      	mov	r1, r3
 800a52a:	4a3c      	ldr	r2, [pc, #240]	; (800a61c <etharp_output+0x1d8>)
 800a52c:	460b      	mov	r3, r1
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	440b      	add	r3, r1
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	3314      	adds	r3, #20
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d917      	bls.n	800a56e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	4b35      	ldr	r3, [pc, #212]	; (800a618 <etharp_output+0x1d4>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	4934      	ldr	r1, [pc, #208]	; (800a61c <etharp_output+0x1d8>)
 800a54a:	4603      	mov	r3, r0
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	4403      	add	r3, r0
 800a550:	00db      	lsls	r3, r3, #3
 800a552:	440b      	add	r3, r1
 800a554:	3304      	adds	r3, #4
 800a556:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a558:	429a      	cmp	r2, r3
 800a55a:	d108      	bne.n	800a56e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a55c:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <etharp_output+0x1d4>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7ff fed3 	bl	800a310 <etharp_output_to_arp_index>
 800a56a:	4603      	mov	r3, r0
 800a56c:	e044      	b.n	800a5f8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a56e:	2300      	movs	r3, #0
 800a570:	75fb      	strb	r3, [r7, #23]
 800a572:	e02a      	b.n	800a5ca <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a574:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a578:	4928      	ldr	r1, [pc, #160]	; (800a61c <etharp_output+0x1d8>)
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4413      	add	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	440b      	add	r3, r1
 800a584:	3314      	adds	r3, #20
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d918      	bls.n	800a5be <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a594:	4821      	ldr	r0, [pc, #132]	; (800a61c <etharp_output+0x1d8>)
 800a596:	4613      	mov	r3, r2
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	4413      	add	r3, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	4403      	add	r3, r0
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d10a      	bne.n	800a5be <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800a5a8:	7dfa      	ldrb	r2, [r7, #23]
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <etharp_output+0x1d4>)
 800a5ac:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	68b9      	ldr	r1, [r7, #8]
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff feab 	bl	800a310 <etharp_output_to_arp_index>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	e01c      	b.n	800a5f8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a5be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	75fb      	strb	r3, [r7, #23]
 800a5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5ce:	2b09      	cmp	r3, #9
 800a5d0:	ddd0      	ble.n	800a574 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	69b9      	ldr	r1, [r7, #24]
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f822 	bl	800a620 <etharp_query>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	e00b      	b.n	800a5f8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800a5e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f009 fa13 	bl	8013a1c <ethernet_output>
 800a5f6:	4603      	mov	r3, r0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	08016c6c 	.word	0x08016c6c
 800a604:	08016dbc 	.word	0x08016dbc
 800a608:	08016ce4 	.word	0x08016ce4
 800a60c:	08016e0c 	.word	0x08016e0c
 800a610:	08016dac 	.word	0x08016dac
 800a614:	08018b04 	.word	0x08018b04
 800a618:	2000437c 	.word	0x2000437c
 800a61c:	2000428c 	.word	0x2000428c

0800a620 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08c      	sub	sp, #48	; 0x30
 800a624:	af02      	add	r7, sp, #8
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	3329      	adds	r3, #41	; 0x29
 800a630:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a632:	23ff      	movs	r3, #255	; 0xff
 800a634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68f9      	ldr	r1, [r7, #12]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fe18 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10c      	bne.n	800a668 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a656:	2be0      	cmp	r3, #224	; 0xe0
 800a658:	d006      	beq.n	800a668 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a668:	f06f 030f 	mvn.w	r3, #15
 800a66c:	e10f      	b.n	800a88e <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	2101      	movs	r1, #1
 800a672:	68b8      	ldr	r0, [r7, #8]
 800a674:	f7ff fb9e 	bl	8009db4 <etharp_find_entry>
 800a678:	4603      	mov	r3, r0
 800a67a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800a67c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da02      	bge.n	800a68a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800a684:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a688:	e101      	b.n	800a88e <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a68a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a68e:	4982      	ldr	r1, [pc, #520]	; (800a898 <etharp_query+0x278>)
 800a690:	4613      	mov	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	4413      	add	r3, r2
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	440b      	add	r3, r1
 800a69a:	3314      	adds	r3, #20
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d117      	bne.n	800a6d2 <etharp_query+0xb2>
    is_new_entry = 1;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a6a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a6aa:	497b      	ldr	r1, [pc, #492]	; (800a898 <etharp_query+0x278>)
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	005b      	lsls	r3, r3, #1
 800a6b0:	4413      	add	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	440b      	add	r3, r1
 800a6b6:	3314      	adds	r3, #20
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a6bc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a6c0:	4975      	ldr	r1, [pc, #468]	; (800a898 <etharp_query+0x278>)
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	440b      	add	r3, r1
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a6d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a6d6:	4970      	ldr	r1, [pc, #448]	; (800a898 <etharp_query+0x278>)
 800a6d8:	4613      	mov	r3, r2
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	4413      	add	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	440b      	add	r3, r1
 800a6e2:	3314      	adds	r3, #20
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d012      	beq.n	800a710 <etharp_query+0xf0>
 800a6ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a6ee:	496a      	ldr	r1, [pc, #424]	; (800a898 <etharp_query+0x278>)
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	4413      	add	r3, r2
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	440b      	add	r3, r1
 800a6fa:	3314      	adds	r3, #20
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d806      	bhi.n	800a710 <etharp_query+0xf0>
 800a702:	4b66      	ldr	r3, [pc, #408]	; (800a89c <etharp_query+0x27c>)
 800a704:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a708:	4965      	ldr	r1, [pc, #404]	; (800a8a0 <etharp_query+0x280>)
 800a70a:	4866      	ldr	r0, [pc, #408]	; (800a8a4 <etharp_query+0x284>)
 800a70c:	f00a faec 	bl	8014ce8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <etharp_query+0xfc>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10c      	bne.n	800a736 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 f976 	bl	800aa10 <etharp_request>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <etharp_query+0x116>
      return result;
 800a730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a734:	e0ab      	b.n	800a88e <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <etharp_query+0x12a>
 800a73c:	4b57      	ldr	r3, [pc, #348]	; (800a89c <etharp_query+0x27c>)
 800a73e:	f240 32db 	movw	r2, #987	; 0x3db
 800a742:	4959      	ldr	r1, [pc, #356]	; (800a8a8 <etharp_query+0x288>)
 800a744:	4857      	ldr	r0, [pc, #348]	; (800a8a4 <etharp_query+0x284>)
 800a746:	f00a facf 	bl	8014ce8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a74a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a74e:	4952      	ldr	r1, [pc, #328]	; (800a898 <etharp_query+0x278>)
 800a750:	4613      	mov	r3, r2
 800a752:	005b      	lsls	r3, r3, #1
 800a754:	4413      	add	r3, r2
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	440b      	add	r3, r1
 800a75a:	3314      	adds	r3, #20
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d919      	bls.n	800a796 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800a762:	7cfa      	ldrb	r2, [r7, #19]
 800a764:	4b51      	ldr	r3, [pc, #324]	; (800a8ac <etharp_query+0x28c>)
 800a766:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a768:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a76c:	4613      	mov	r3, r2
 800a76e:	005b      	lsls	r3, r3, #1
 800a770:	4413      	add	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	3308      	adds	r3, #8
 800a776:	4a48      	ldr	r2, [pc, #288]	; (800a898 <etharp_query+0x278>)
 800a778:	4413      	add	r3, r2
 800a77a:	1d1a      	adds	r2, r3, #4
 800a77c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4613      	mov	r3, r2
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f009 f947 	bl	8013a1c <ethernet_output>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a794:	e079      	b.n	800a88a <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a796:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a79a:	493f      	ldr	r1, [pc, #252]	; (800a898 <etharp_query+0x278>)
 800a79c:	4613      	mov	r3, r2
 800a79e:	005b      	lsls	r3, r3, #1
 800a7a0:	4413      	add	r3, r2
 800a7a2:	00db      	lsls	r3, r3, #3
 800a7a4:	440b      	add	r3, r1
 800a7a6:	3314      	adds	r3, #20
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d16d      	bne.n	800a88a <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a7b6:	e01a      	b.n	800a7ee <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	895a      	ldrh	r2, [r3, #10]
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	891b      	ldrh	r3, [r3, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d10a      	bne.n	800a7da <etharp_query+0x1ba>
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <etharp_query+0x1ba>
 800a7cc:	4b33      	ldr	r3, [pc, #204]	; (800a89c <etharp_query+0x27c>)
 800a7ce:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800a7d2:	4937      	ldr	r1, [pc, #220]	; (800a8b0 <etharp_query+0x290>)
 800a7d4:	4833      	ldr	r0, [pc, #204]	; (800a8a4 <etharp_query+0x284>)
 800a7d6:	f00a fa87 	bl	8014ce8 <iprintf>
      if (p->type != PBUF_ROM) {
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	7b1b      	ldrb	r3, [r3, #12]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d002      	beq.n	800a7e8 <etharp_query+0x1c8>
        copy_needed = 1;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	61bb      	str	r3, [r7, #24]
        break;
 800a7e6:	e005      	b.n	800a7f4 <etharp_query+0x1d4>
      }
      p = p->next;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e1      	bne.n	800a7b8 <etharp_query+0x198>
    }
    if (copy_needed) {
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d017      	beq.n	800a82a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	891b      	ldrh	r3, [r3, #8]
 800a7fe:	2200      	movs	r2, #0
 800a800:	4619      	mov	r1, r3
 800a802:	2002      	movs	r0, #2
 800a804:	f002 f9c6 	bl	800cb94 <pbuf_alloc>
 800a808:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d011      	beq.n	800a834 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	69f8      	ldr	r0, [r7, #28]
 800a814:	f002 fe70 	bl	800d4f8 <pbuf_copy>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <etharp_query+0x214>
          pbuf_free(p);
 800a81e:	69f8      	ldr	r0, [r7, #28]
 800a820:	f002 fd2a 	bl	800d278 <pbuf_free>
          p = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	61fb      	str	r3, [r7, #28]
 800a828:	e004      	b.n	800a834 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a82e:	69f8      	ldr	r0, [r7, #28]
 800a830:	f002 fdd4 	bl	800d3dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d024      	beq.n	800a884 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a83a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a83e:	4916      	ldr	r1, [pc, #88]	; (800a898 <etharp_query+0x278>)
 800a840:	4613      	mov	r3, r2
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	440b      	add	r3, r1
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800a850:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a854:	4910      	ldr	r1, [pc, #64]	; (800a898 <etharp_query+0x278>)
 800a856:	4613      	mov	r3, r2
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	4413      	add	r3, r2
 800a85c:	00db      	lsls	r3, r3, #3
 800a85e:	440b      	add	r3, r1
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	f002 fd08 	bl	800d278 <pbuf_free>
      }
      arp_table[i].q = p;
 800a868:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800a86c:	490a      	ldr	r1, [pc, #40]	; (800a898 <etharp_query+0x278>)
 800a86e:	4613      	mov	r3, r2
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	4413      	add	r3, r2
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	440b      	add	r3, r1
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a882:	e002      	b.n	800a88a <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a884:	23ff      	movs	r3, #255	; 0xff
 800a886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800a88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3728      	adds	r7, #40	; 0x28
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	2000428c 	.word	0x2000428c
 800a89c:	08016c6c 	.word	0x08016c6c
 800a8a0:	08016e18 	.word	0x08016e18
 800a8a4:	08016ce4 	.word	0x08016ce4
 800a8a8:	08016e0c 	.word	0x08016e0c
 800a8ac:	2000437c 	.word	0x2000437c
 800a8b0:	08016e40 	.word	0x08016e40

0800a8b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	; 0x28
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d106      	bne.n	800a8da <etharp_raw+0x26>
 800a8cc:	4b3a      	ldr	r3, [pc, #232]	; (800a9b8 <etharp_raw+0x104>)
 800a8ce:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800a8d2:	493a      	ldr	r1, [pc, #232]	; (800a9bc <etharp_raw+0x108>)
 800a8d4:	483a      	ldr	r0, [pc, #232]	; (800a9c0 <etharp_raw+0x10c>)
 800a8d6:	f00a fa07 	bl	8014ce8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	211c      	movs	r1, #28
 800a8de:	2002      	movs	r0, #2
 800a8e0:	f002 f958 	bl	800cb94 <pbuf_alloc>
 800a8e4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8f0:	e05d      	b.n	800a9ae <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	895b      	ldrh	r3, [r3, #10]
 800a8f6:	2b1b      	cmp	r3, #27
 800a8f8:	d806      	bhi.n	800a908 <etharp_raw+0x54>
 800a8fa:	4b2f      	ldr	r3, [pc, #188]	; (800a9b8 <etharp_raw+0x104>)
 800a8fc:	f240 4264 	movw	r2, #1124	; 0x464
 800a900:	4930      	ldr	r1, [pc, #192]	; (800a9c4 <etharp_raw+0x110>)
 800a902:	482f      	ldr	r0, [pc, #188]	; (800a9c0 <etharp_raw+0x10c>)
 800a904:	f00a f9f0 	bl	8014ce8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a90e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a910:	4618      	mov	r0, r3
 800a912:	f7fc ff6b 	bl	80077ec <lwip_htons>
 800a916:	4603      	mov	r3, r0
 800a918:	461a      	mov	r2, r3
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a924:	2b06      	cmp	r3, #6
 800a926:	d006      	beq.n	800a936 <etharp_raw+0x82>
 800a928:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <etharp_raw+0x104>)
 800a92a:	f240 426b 	movw	r2, #1131	; 0x46b
 800a92e:	4926      	ldr	r1, [pc, #152]	; (800a9c8 <etharp_raw+0x114>)
 800a930:	4823      	ldr	r0, [pc, #140]	; (800a9c0 <etharp_raw+0x10c>)
 800a932:	f00a f9d9 	bl	8014ce8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	3308      	adds	r3, #8
 800a93a:	2206      	movs	r2, #6
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	4618      	mov	r0, r3
 800a940:	f00a f9bf 	bl	8014cc2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	3312      	adds	r3, #18
 800a948:	2206      	movs	r2, #6
 800a94a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a94c:	4618      	mov	r0, r3
 800a94e:	f00a f9b8 	bl	8014cc2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	330e      	adds	r3, #14
 800a956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a958:	6812      	ldr	r2, [r2, #0]
 800a95a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	3318      	adds	r3, #24
 800a960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2200      	movs	r2, #0
 800a978:	f042 0208 	orr.w	r2, r2, #8
 800a97c:	709a      	strb	r2, [r3, #2]
 800a97e:	2200      	movs	r2, #0
 800a980:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2206      	movs	r2, #6
 800a986:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	2204      	movs	r2, #4
 800a98c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a98e:	f640 0306 	movw	r3, #2054	; 0x806
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	69b9      	ldr	r1, [r7, #24]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f009 f83e 	bl	8013a1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a9a0:	69b8      	ldr	r0, [r7, #24]
 800a9a2:	f002 fc69 	bl	800d278 <pbuf_free>
  p = NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a9aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3720      	adds	r7, #32
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	08016c6c 	.word	0x08016c6c
 800a9bc:	08016dbc 	.word	0x08016dbc
 800a9c0:	08016ce4 	.word	0x08016ce4
 800a9c4:	08016e5c 	.word	0x08016e5c
 800a9c8:	08016e90 	.word	0x08016e90

0800a9cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af04      	add	r7, sp, #16
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	9203      	str	r2, [sp, #12]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	9202      	str	r2, [sp, #8]
 800a9f0:	4a06      	ldr	r2, [pc, #24]	; (800aa0c <etharp_request_dst+0x40>)
 800a9f2:	9201      	str	r2, [sp, #4]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff ff5a 	bl	800a8b4 <etharp_raw>
 800aa00:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	08018b0c 	.word	0x08018b0c

0800aa10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800aa1a:	4a05      	ldr	r2, [pc, #20]	; (800aa30 <etharp_request+0x20>)
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff ffd4 	bl	800a9cc <etharp_request_dst>
 800aa24:	4603      	mov	r3, r0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	08018b04 	.word	0x08018b04

0800aa34 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af04      	add	r7, sp, #16
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800aa3e:	4b7a      	ldr	r3, [pc, #488]	; (800ac28 <icmp_input+0x1f4>)
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	f003 030f 	and.w	r3, r3, #15
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800aa54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa56:	2b13      	cmp	r3, #19
 800aa58:	f240 80d1 	bls.w	800abfe <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	895b      	ldrh	r3, [r3, #10]
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	f240 80ce 	bls.w	800ac02 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800aa70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 80bb 	beq.w	800abf0 <icmp_input+0x1bc>
 800aa7a:	2b08      	cmp	r3, #8
 800aa7c:	f040 80bb 	bne.w	800abf6 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800aa80:	4b6a      	ldr	r3, [pc, #424]	; (800ac2c <icmp_input+0x1f8>)
 800aa82:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aa84:	4b68      	ldr	r3, [pc, #416]	; (800ac28 <icmp_input+0x1f4>)
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa8c:	2be0      	cmp	r3, #224	; 0xe0
 800aa8e:	f000 80bf 	beq.w	800ac10 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800aa92:	4b65      	ldr	r3, [pc, #404]	; (800ac28 <icmp_input+0x1f4>)
 800aa94:	695a      	ldr	r2, [r3, #20]
 800aa96:	4b64      	ldr	r3, [pc, #400]	; (800ac28 <icmp_input+0x1f4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f000 fbeb 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 80b5 	bne.w	800ac14 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	2b07      	cmp	r3, #7
 800aab0:	f240 80a9 	bls.w	800ac06 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800aab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aab6:	330e      	adds	r3, #14
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21b      	sxth	r3, r3
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f002 fbb6 	bl	800d230 <pbuf_header>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d046      	beq.n	800ab58 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	891a      	ldrh	r2, [r3, #8]
 800aace:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aad0:	4413      	add	r3, r2
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	2200      	movs	r2, #0
 800aad6:	4619      	mov	r1, r3
 800aad8:	2002      	movs	r0, #2
 800aada:	f002 f85b 	bl	800cb94 <pbuf_alloc>
 800aade:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 8098 	beq.w	800ac18 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	895b      	ldrh	r3, [r3, #10]
 800aaec:	461a      	mov	r2, r3
 800aaee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d203      	bcs.n	800aafe <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800aaf6:	69b8      	ldr	r0, [r7, #24]
 800aaf8:	f002 fbbe 	bl	800d278 <pbuf_free>
        goto icmperr;
 800aafc:	e08d      	b.n	800ac1a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab06:	4618      	mov	r0, r3
 800ab08:	f00a f8db 	bl	8014cc2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800ab0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab0e:	425b      	negs	r3, r3
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	b21b      	sxth	r3, r3
 800ab14:	4619      	mov	r1, r3
 800ab16:	69b8      	ldr	r0, [r7, #24]
 800ab18:	f002 fb8a 	bl	800d230 <pbuf_header>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ab22:	4b43      	ldr	r3, [pc, #268]	; (800ac30 <icmp_input+0x1fc>)
 800ab24:	22af      	movs	r2, #175	; 0xaf
 800ab26:	4943      	ldr	r1, [pc, #268]	; (800ac34 <icmp_input+0x200>)
 800ab28:	4843      	ldr	r0, [pc, #268]	; (800ac38 <icmp_input+0x204>)
 800ab2a:	f00a f8dd 	bl	8014ce8 <iprintf>
        pbuf_free(r);
 800ab2e:	69b8      	ldr	r0, [r7, #24]
 800ab30:	f002 fba2 	bl	800d278 <pbuf_free>
        goto icmperr;
 800ab34:	e071      	b.n	800ac1a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	69b8      	ldr	r0, [r7, #24]
 800ab3a:	f002 fcdd 	bl	800d4f8 <pbuf_copy>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800ab44:	69b8      	ldr	r0, [r7, #24]
 800ab46:	f002 fb97 	bl	800d278 <pbuf_free>
        goto icmperr;
 800ab4a:	e066      	b.n	800ac1a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f002 fb93 	bl	800d278 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	607b      	str	r3, [r7, #4]
 800ab56:	e015      	b.n	800ab84 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800ab58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab5a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800ab5e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ab62:	33f2      	adds	r3, #242	; 0xf2
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	b21b      	sxth	r3, r3
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f002 fb60 	bl	800d230 <pbuf_header>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d006      	beq.n	800ab84 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ab76:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <icmp_input+0x1fc>)
 800ab78:	22c0      	movs	r2, #192	; 0xc0
 800ab7a:	4930      	ldr	r1, [pc, #192]	; (800ac3c <icmp_input+0x208>)
 800ab7c:	482e      	ldr	r0, [pc, #184]	; (800ac38 <icmp_input+0x204>)
 800ab7e:	f00a f8b3 	bl	8014ce8 <iprintf>
        goto icmperr;
 800ab82:	e04a      	b.n	800ac1a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800ab8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f002 fb4d 	bl	800d230 <pbuf_header>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d12b      	bne.n	800abf4 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800abaa:	4b1f      	ldr	r3, [pc, #124]	; (800ac28 <icmp_input+0x1f4>)
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2200      	movs	r2, #0
 800abbc:	709a      	strb	r2, [r3, #2]
 800abbe:	2200      	movs	r2, #0
 800abc0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2200      	movs	r2, #0
 800abcc:	729a      	strb	r2, [r3, #10]
 800abce:	2200      	movs	r2, #0
 800abd0:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	2301      	movs	r3, #1
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2300      	movs	r3, #0
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	23ff      	movs	r3, #255	; 0xff
 800abe0:	2200      	movs	r2, #0
 800abe2:	69f9      	ldr	r1, [r7, #28]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fa75 	bl	800b0d4 <ip4_output_if>
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800abee:	e001      	b.n	800abf4 <icmp_input+0x1c0>
    break;
 800abf0:	bf00      	nop
 800abf2:	e000      	b.n	800abf6 <icmp_input+0x1c2>
    break;
 800abf4:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f002 fb3e 	bl	800d278 <pbuf_free>
  return;
 800abfc:	e011      	b.n	800ac22 <icmp_input+0x1ee>
    goto lenerr;
 800abfe:	bf00      	nop
 800ac00:	e002      	b.n	800ac08 <icmp_input+0x1d4>
    goto lenerr;
 800ac02:	bf00      	nop
 800ac04:	e000      	b.n	800ac08 <icmp_input+0x1d4>
      goto lenerr;
 800ac06:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f002 fb35 	bl	800d278 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ac0e:	e008      	b.n	800ac22 <icmp_input+0x1ee>
      goto icmperr;
 800ac10:	bf00      	nop
 800ac12:	e002      	b.n	800ac1a <icmp_input+0x1e6>
      goto icmperr;
 800ac14:	bf00      	nop
 800ac16:	e000      	b.n	800ac1a <icmp_input+0x1e6>
        goto icmperr;
 800ac18:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f002 fb2c 	bl	800d278 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ac20:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ac22:	3728      	adds	r7, #40	; 0x28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	20004480 	.word	0x20004480
 800ac2c:	20004494 	.word	0x20004494
 800ac30:	08016ed4 	.word	0x08016ed4
 800ac34:	08016f0c 	.word	0x08016f0c
 800ac38:	08016f44 	.word	0x08016f44
 800ac3c:	08016f6c 	.word	0x08016f6c

0800ac40 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	2103      	movs	r1, #3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f814 	bl	800ac80 <icmp_send_response>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	210b      	movs	r1, #11
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f804 	bl	800ac80 <icmp_send_response>
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08c      	sub	sp, #48	; 0x30
 800ac84:	af04      	add	r7, sp, #16
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ac90:	2200      	movs	r2, #0
 800ac92:	2124      	movs	r1, #36	; 0x24
 800ac94:	2001      	movs	r0, #1
 800ac96:	f001 ff7d 	bl	800cb94 <pbuf_alloc>
 800ac9a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d04c      	beq.n	800ad3c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	895b      	ldrh	r3, [r3, #10]
 800aca6:	2b23      	cmp	r3, #35	; 0x23
 800aca8:	d806      	bhi.n	800acb8 <icmp_send_response+0x38>
 800acaa:	4b26      	ldr	r3, [pc, #152]	; (800ad44 <icmp_send_response+0xc4>)
 800acac:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800acb0:	4925      	ldr	r1, [pc, #148]	; (800ad48 <icmp_send_response+0xc8>)
 800acb2:	4826      	ldr	r0, [pc, #152]	; (800ad4c <icmp_send_response+0xcc>)
 800acb4:	f00a f818 	bl	8014ce8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	78ba      	ldrb	r2, [r7, #2]
 800acce:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2200      	movs	r2, #0
 800acd4:	711a      	strb	r2, [r3, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2200      	movs	r2, #0
 800acde:	719a      	strb	r2, [r3, #6]
 800ace0:	2200      	movs	r2, #0
 800ace2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	f103 0008 	add.w	r0, r3, #8
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	221c      	movs	r2, #28
 800acf2:	4619      	mov	r1, r3
 800acf4:	f009 ffe5 	bl	8014cc2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800acfe:	f107 030c 	add.w	r3, r7, #12
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 f824 	bl	800ad50 <ip4_route>
 800ad08:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d011      	beq.n	800ad34 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2200      	movs	r2, #0
 800ad14:	709a      	strb	r2, [r3, #2]
 800ad16:	2200      	movs	r2, #0
 800ad18:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ad1a:	f107 020c 	add.w	r2, r7, #12
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	2301      	movs	r3, #1
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	2300      	movs	r3, #0
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	23ff      	movs	r3, #255	; 0xff
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	69f8      	ldr	r0, [r7, #28]
 800ad30:	f000 f9d0 	bl	800b0d4 <ip4_output_if>
  }
  pbuf_free(q);
 800ad34:	69f8      	ldr	r0, [r7, #28]
 800ad36:	f002 fa9f 	bl	800d278 <pbuf_free>
 800ad3a:	e000      	b.n	800ad3e <icmp_send_response+0xbe>
    return;
 800ad3c:	bf00      	nop
}
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	08016ed4 	.word	0x08016ed4
 800ad48:	08016fa0 	.word	0x08016fa0
 800ad4c:	08016f44 	.word	0x08016f44

0800ad50 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800ad58:	4b2f      	ldr	r3, [pc, #188]	; (800ae18 <ip4_route+0xc8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	e033      	b.n	800adc8 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d029      	beq.n	800adc2 <ip4_route+0x72>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d022      	beq.n	800adc2 <ip4_route+0x72>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d01d      	beq.n	800adc2 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	405a      	eors	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3308      	adds	r3, #8
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4013      	ands	r3, r2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	e033      	b.n	800ae0a <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ada8:	f003 0302 	and.w	r3, r3, #2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <ip4_route+0x72>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	330c      	adds	r3, #12
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d101      	bne.n	800adc2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	e023      	b.n	800ae0a <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1c8      	bne.n	800ad60 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <ip4_route+0xcc>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d015      	beq.n	800ae02 <ip4_route+0xb2>
 800add6:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <ip4_route+0xcc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00d      	beq.n	800ae02 <ip4_route+0xb2>
 800ade6:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <ip4_route+0xcc>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adee:	f003 0304 	and.w	r3, r3, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800adf6:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <ip4_route+0xcc>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3304      	adds	r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e001      	b.n	800ae0a <ip4_route+0xba>
  }

  return netif_default;
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <ip4_route+0xcc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20007d1c 	.word	0x20007d1c
 800ae1c:	20007d20 	.word	0x20007d20

0800ae20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b088      	sub	sp, #32
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	091b      	lsrs	r3, r3, #4
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	2b04      	cmp	r3, #4
 800ae3e:	d004      	beq.n	800ae4a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f002 fa19 	bl	800d278 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	e13c      	b.n	800b0c4 <ip4_input+0x2a4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800ae56:	89fb      	ldrh	r3, [r7, #14]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	885b      	ldrh	r3, [r3, #2]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fc fcc2 	bl	80077ec <lwip_htons>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	891b      	ldrh	r3, [r3, #8]
 800ae70:	89ba      	ldrh	r2, [r7, #12]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d204      	bcs.n	800ae80 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800ae76:	89bb      	ldrh	r3, [r7, #12]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f002 f888 	bl	800cf90 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	895b      	ldrh	r3, [r3, #10]
 800ae84:	89fa      	ldrh	r2, [r7, #14]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d807      	bhi.n	800ae9a <ip4_input+0x7a>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	891b      	ldrh	r3, [r3, #8]
 800ae8e:	89ba      	ldrh	r2, [r7, #12]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d802      	bhi.n	800ae9a <ip4_input+0x7a>
 800ae94:	89fb      	ldrh	r3, [r7, #14]
 800ae96:	2b13      	cmp	r3, #19
 800ae98:	d804      	bhi.n	800aea4 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f002 f9ec 	bl	800d278 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	e10f      	b.n	800b0c4 <ip4_input+0x2a4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	4a88      	ldr	r2, [pc, #544]	; (800b0cc <ip4_input+0x2ac>)
 800aeaa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	4a86      	ldr	r2, [pc, #536]	; (800b0cc <ip4_input+0x2ac>)
 800aeb2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aeb4:	4b85      	ldr	r3, [pc, #532]	; (800b0cc <ip4_input+0x2ac>)
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aebc:	2be0      	cmp	r3, #224	; 0xe0
 800aebe:	d111      	bne.n	800aee4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d007      	beq.n	800aede <ip4_input+0xbe>
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	3304      	adds	r3, #4
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <ip4_input+0xbe>
      netif = inp;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	61bb      	str	r3, [r7, #24]
 800aedc:	e040      	b.n	800af60 <ip4_input+0x140>
    } else {
      netif = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	61bb      	str	r3, [r7, #24]
 800aee2:	e03d      	b.n	800af60 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800aee4:	2301      	movs	r3, #1
 800aee6:	613b      	str	r3, [r7, #16]
    netif = inp;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d014      	beq.n	800af24 <ip4_input+0x104>
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	3304      	adds	r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00f      	beq.n	800af24 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800af04:	4b71      	ldr	r3, [pc, #452]	; (800b0cc <ip4_input+0x2ac>)
 800af06:	695a      	ldr	r2, [r3, #20]
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	3304      	adds	r3, #4
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d026      	beq.n	800af60 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800af12:	4b6e      	ldr	r3, [pc, #440]	; (800b0cc <ip4_input+0x2ac>)
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	69b9      	ldr	r1, [r7, #24]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f9ad 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800af1e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800af20:	2b00      	cmp	r3, #0
 800af22:	d11d      	bne.n	800af60 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800af2a:	4b68      	ldr	r3, [pc, #416]	; (800b0cc <ip4_input+0x2ac>)
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b7f      	cmp	r3, #127	; 0x7f
 800af32:	d102      	bne.n	800af3a <ip4_input+0x11a>
          netif = NULL;
 800af34:	2300      	movs	r3, #0
 800af36:	61bb      	str	r3, [r7, #24]
          break;
 800af38:	e012      	b.n	800af60 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800af3e:	4b64      	ldr	r3, [pc, #400]	; (800b0d0 <ip4_input+0x2b0>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	61bb      	str	r3, [r7, #24]
 800af44:	e002      	b.n	800af4c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800af4c:	69ba      	ldr	r2, [r7, #24]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d102      	bne.n	800af5a <ip4_input+0x13a>
        netif = netif->next;
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1c5      	bne.n	800aeec <ip4_input+0xcc>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d111      	bne.n	800af8a <ip4_input+0x16a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	7a5b      	ldrb	r3, [r3, #9]
 800af6a:	2b11      	cmp	r3, #17
 800af6c:	d10d      	bne.n	800af8a <ip4_input+0x16a>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800af6e:	89fb      	ldrh	r3, [r7, #14]
 800af70:	69fa      	ldr	r2, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800af80:	d103      	bne.n	800af8a <ip4_input+0x16a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d017      	beq.n	800afc0 <ip4_input+0x1a0>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800af90:	4b4e      	ldr	r3, [pc, #312]	; (800b0cc <ip4_input+0x2ac>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d013      	beq.n	800afc0 <ip4_input+0x1a0>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800af98:	4b4c      	ldr	r3, [pc, #304]	; (800b0cc <ip4_input+0x2ac>)
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 f96a 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <ip4_input+0x196>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800afaa:	4b48      	ldr	r3, [pc, #288]	; (800b0cc <ip4_input+0x2ac>)
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800afb2:	2be0      	cmp	r3, #224	; 0xe0
 800afb4:	d104      	bne.n	800afc0 <ip4_input+0x1a0>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f002 f95e 	bl	800d278 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e081      	b.n	800b0c4 <ip4_input+0x2a4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d104      	bne.n	800afd0 <ip4_input+0x1b0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f002 f956 	bl	800d278 <pbuf_free>
    return ERR_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	e079      	b.n	800b0c4 <ip4_input+0x2a4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	88db      	ldrh	r3, [r3, #6]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	461a      	mov	r2, r3
 800afd8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800afdc:	4013      	ands	r3, r2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00b      	beq.n	800affa <ip4_input+0x1da>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fd1e 	bl	800ba24 <ip4_reass>
 800afe8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <ip4_input+0x1d4>
      return ERR_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e067      	b.n	800b0c4 <ip4_input+0x2a4>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800affa:	4a34      	ldr	r2, [pc, #208]	; (800b0cc <ip4_input+0x2ac>)
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b000:	4a32      	ldr	r2, [pc, #200]	; (800b0cc <ip4_input+0x2ac>)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b006:	4a31      	ldr	r2, [pc, #196]	; (800b0cc <ip4_input+0x2ac>)
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f003 030f 	and.w	r3, r3, #15
 800b016:	b29b      	uxth	r3, r3
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	4b2b      	ldr	r3, [pc, #172]	; (800b0cc <ip4_input+0x2ac>)
 800b01e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800b020:	89fb      	ldrh	r3, [r7, #14]
 800b022:	425b      	negs	r3, r3
 800b024:	b29b      	uxth	r3, r3
 800b026:	b21b      	sxth	r3, r3
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f002 f900 	bl	800d230 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	7a5b      	ldrb	r3, [r3, #9]
 800b034:	2b06      	cmp	r3, #6
 800b036:	d009      	beq.n	800b04c <ip4_input+0x22c>
 800b038:	2b11      	cmp	r3, #17
 800b03a:	d002      	beq.n	800b042 <ip4_input+0x222>
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d00a      	beq.n	800b056 <ip4_input+0x236>
 800b040:	e00e      	b.n	800b060 <ip4_input+0x240>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f008 f911 	bl	801326c <udp_input>
      break;
 800b04a:	e028      	b.n	800b09e <ip4_input+0x27e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f004 f930 	bl	800f2b4 <tcp_input>
      break;
 800b054:	e023      	b.n	800b09e <ip4_input+0x27e>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff fceb 	bl	800aa34 <icmp_input>
      break;
 800b05e:	e01e      	b.n	800b09e <ip4_input+0x27e>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <ip4_input+0x2ac>)
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f906 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d112      	bne.n	800b098 <ip4_input+0x278>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b072:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <ip4_input+0x2ac>)
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b07a:	2be0      	cmp	r3, #224	; 0xe0
 800b07c:	d00c      	beq.n	800b098 <ip4_input+0x278>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800b07e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f002 f8e5 	bl	800d254 <pbuf_header_force>
        p->payload = iphdr;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69fa      	ldr	r2, [r7, #28]
 800b08e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b090:	2102      	movs	r1, #2
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff fdd4 	bl	800ac40 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 f8ed 	bl	800d278 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b09e:	4b0b      	ldr	r3, [pc, #44]	; (800b0cc <ip4_input+0x2ac>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <ip4_input+0x2ac>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b0aa:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <ip4_input+0x2ac>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b0b0:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <ip4_input+0x2ac>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <ip4_input+0x2ac>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b0bc:	4b03      	ldr	r3, [pc, #12]	; (800b0cc <ip4_input+0x2ac>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3720      	adds	r7, #32
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20004480 	.word	0x20004480
 800b0d0:	20007d1c 	.word	0x20007d1c

0800b0d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af04      	add	r7, sp, #16
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d009      	beq.n	800b100 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <ip4_output_if+0x26>
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d102      	bne.n	800b100 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b100:	78fa      	ldrb	r2, [r7, #3]
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4613      	mov	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	6979      	ldr	r1, [r7, #20]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 f805 	bl	800b128 <ip4_output_if_src>
 800b11e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	89db      	ldrh	r3, [r3, #14]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d006      	beq.n	800b14c <ip4_output_if_src+0x24>
 800b13e:	4b48      	ldr	r3, [pc, #288]	; (800b260 <ip4_output_if_src+0x138>)
 800b140:	f240 3233 	movw	r2, #819	; 0x333
 800b144:	4947      	ldr	r1, [pc, #284]	; (800b264 <ip4_output_if_src+0x13c>)
 800b146:	4848      	ldr	r0, [pc, #288]	; (800b268 <ip4_output_if_src+0x140>)
 800b148:	f009 fdce 	bl	8014ce8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d060      	beq.n	800b214 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b152:	2314      	movs	r3, #20
 800b154:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800b156:	2114      	movs	r1, #20
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f002 f869 	bl	800d230 <pbuf_header>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b164:	f06f 0301 	mvn.w	r3, #1
 800b168:	e075      	b.n	800b256 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	895b      	ldrh	r3, [r3, #10]
 800b174:	2b13      	cmp	r3, #19
 800b176:	d806      	bhi.n	800b186 <ip4_output_if_src+0x5e>
 800b178:	4b39      	ldr	r3, [pc, #228]	; (800b260 <ip4_output_if_src+0x138>)
 800b17a:	f240 3261 	movw	r2, #865	; 0x361
 800b17e:	493b      	ldr	r1, [pc, #236]	; (800b26c <ip4_output_if_src+0x144>)
 800b180:	4839      	ldr	r0, [pc, #228]	; (800b268 <ip4_output_if_src+0x140>)
 800b182:	f009 fdb1 	bl	8014ce8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	78fa      	ldrb	r2, [r7, #3]
 800b18a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b192:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b19c:	8bfb      	ldrh	r3, [r7, #30]
 800b19e:	089b      	lsrs	r3, r3, #2
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b1b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	891b      	ldrh	r3, [r3, #8]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fc fb16 	bl	80077ec <lwip_htons>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	719a      	strb	r2, [r3, #6]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b1d2:	4b27      	ldr	r3, [pc, #156]	; (800b270 <ip4_output_if_src+0x148>)
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fc fb08 	bl	80077ec <lwip_htons>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b1e4:	4b22      	ldr	r3, [pc, #136]	; (800b270 <ip4_output_if_src+0x148>)
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	4b20      	ldr	r3, [pc, #128]	; (800b270 <ip4_output_if_src+0x148>)
 800b1ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d104      	bne.n	800b200 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	; (800b274 <ip4_output_if_src+0x14c>)
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	60da      	str	r2, [r3, #12]
 800b1fe:	e003      	b.n	800b208 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	2200      	movs	r2, #0
 800b20c:	729a      	strb	r2, [r3, #10]
 800b20e:	2200      	movs	r2, #0
 800b210:	72da      	strb	r2, [r3, #11]
 800b212:	e008      	b.n	800b226 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b220:	f107 0314 	add.w	r3, r7, #20
 800b224:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00c      	beq.n	800b248 <ip4_output_if_src+0x120>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	891a      	ldrh	r2, [r3, #8]
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b236:	429a      	cmp	r2, r3
 800b238:	d906      	bls.n	800b248 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 fd98 	bl	800bd74 <ip4_frag>
 800b244:	4603      	mov	r3, r0
 800b246:	e006      	b.n	800b256 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b252:	4798      	blx	r3
 800b254:	4603      	mov	r3, r0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3720      	adds	r7, #32
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	08016fcc 	.word	0x08016fcc
 800b264:	08017000 	.word	0x08017000
 800b268:	0801700c 	.word	0x0801700c
 800b26c:	08017034 	.word	0x08017034
 800b270:	2000437e 	.word	0x2000437e
 800b274:	080189c4 	.word	0x080189c4

0800b278 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b28c:	d002      	beq.n	800b294 <ip4_addr_isbroadcast_u32+0x1c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b294:	2301      	movs	r3, #1
 800b296:	e02a      	b.n	800b2ee <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e021      	b.n	800b2ee <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d101      	bne.n	800b2ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e019      	b.n	800b2ee <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	405a      	eors	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10d      	bne.n	800b2ec <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	43da      	mvns	r2, r3
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d101      	bne.n	800b2ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e000      	b.n	800b2ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b2ec:	2300      	movs	r3, #0
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
	...

0800b2fc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800b304:	2210      	movs	r2, #16
 800b306:	4904      	ldr	r1, [pc, #16]	; (800b318 <ip4addr_ntoa+0x1c>)
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f807 	bl	800b31c <ip4addr_ntoa_r>
 800b30e:	4603      	mov	r3, r0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20004380 	.word	0x20004380

0800b31c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b08d      	sub	sp, #52	; 0x34
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800b336:	f107 0318 	add.w	r3, r7, #24
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b342:	e059      	b.n	800b3f8 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	781a      	ldrb	r2, [r3, #0]
 800b34e:	4b33      	ldr	r3, [pc, #204]	; (800b41c <ip4addr_ntoa_r+0x100>)
 800b350:	fba3 1302 	umull	r1, r3, r3, r2
 800b354:	08d9      	lsrs	r1, r3, #3
 800b356:	460b      	mov	r3, r1
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	4a2d      	ldr	r2, [pc, #180]	; (800b41c <ip4addr_ntoa_r+0x100>)
 800b368:	fba2 2303 	umull	r2, r3, r2, r3
 800b36c:	08db      	lsrs	r3, r3, #3
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800b374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800b37e:	4619      	mov	r1, r3
 800b380:	7ffb      	ldrb	r3, [r7, #31]
 800b382:	3330      	adds	r3, #48	; 0x30
 800b384:	b2da      	uxtb	r2, r3
 800b386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b38a:	440b      	add	r3, r1
 800b38c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1d8      	bne.n	800b34a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800b398:	e012      	b.n	800b3c0 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	623a      	str	r2, [r7, #32]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	db01      	blt.n	800b3aa <ip4addr_ntoa_r+0x8e>
        return NULL;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e031      	b.n	800b40e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b3b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b3b8:	440a      	add	r2, r1
 800b3ba:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800b3be:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800b3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3c4:	1e5a      	subs	r2, r3, #1
 800b3c6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e5      	bne.n	800b39a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	623a      	str	r2, [r7, #32]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	db01      	blt.n	800b3de <ip4addr_ntoa_r+0xc2>
      return NULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e017      	b.n	800b40e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3e4:	222e      	movs	r2, #46	; 0x2e
 800b3e6:	701a      	strb	r2, [r3, #0]
    ap++;
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800b3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d9a1      	bls.n	800b344 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	3b01      	subs	r3, #1
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	2200      	movs	r2, #0
 800b40a:	701a      	strb	r2, [r3, #0]
  return buf;
 800b40c:	68bb      	ldr	r3, [r7, #8]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3734      	adds	r7, #52	; 0x34
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	cccccccd 	.word	0xcccccccd

0800b420 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b42a:	4b12      	ldr	r3, [pc, #72]	; (800b474 <ip_reass_tmr+0x54>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b430:	e018      	b.n	800b464 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	7fdb      	ldrb	r3, [r3, #31]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00b      	beq.n	800b452 <ip_reass_tmr+0x32>
      r->timer--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	7fdb      	ldrb	r3, [r3, #31]
 800b43e:	3b01      	subs	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e008      	b.n	800b464 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f80a 	bl	800b478 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e3      	bne.n	800b432 <ip_reass_tmr+0x12>
     }
   }
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20004390 	.word	0x20004390

0800b478 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d105      	bne.n	800b49a <ip_reass_free_complete_datagram+0x22>
 800b48e:	4b45      	ldr	r3, [pc, #276]	; (800b5a4 <ip_reass_free_complete_datagram+0x12c>)
 800b490:	22ab      	movs	r2, #171	; 0xab
 800b492:	4945      	ldr	r1, [pc, #276]	; (800b5a8 <ip_reass_free_complete_datagram+0x130>)
 800b494:	4845      	ldr	r0, [pc, #276]	; (800b5ac <ip_reass_free_complete_datagram+0x134>)
 800b496:	f009 fc27 	bl	8014ce8 <iprintf>
  if (prev != NULL) {
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d005      	beq.n	800b4b6 <ip_reass_free_complete_datagram+0x3e>
 800b4aa:	4b3e      	ldr	r3, [pc, #248]	; (800b5a4 <ip_reass_free_complete_datagram+0x12c>)
 800b4ac:	22ad      	movs	r2, #173	; 0xad
 800b4ae:	4940      	ldr	r1, [pc, #256]	; (800b5b0 <ip_reass_free_complete_datagram+0x138>)
 800b4b0:	483e      	ldr	r0, [pc, #248]	; (800b5ac <ip_reass_free_complete_datagram+0x134>)
 800b4b2:	f009 fc19 	bl	8014ce8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	889b      	ldrh	r3, [r3, #4]
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d12a      	bne.n	800b51e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	6858      	ldr	r0, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	2214      	movs	r2, #20
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f009 fbee 	bl	8014cc2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	69b8      	ldr	r0, [r7, #24]
 800b4ea:	f7ff fbb9 	bl	800ac60 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b4ee:	69b8      	ldr	r0, [r7, #24]
 800b4f0:	f001 ff5c 	bl	800d3ac <pbuf_clen>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b4f8:	8bfa      	ldrh	r2, [r7, #30]
 800b4fa:	8a7b      	ldrh	r3, [r7, #18]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b502:	db05      	blt.n	800b510 <ip_reass_free_complete_datagram+0x98>
 800b504:	4b27      	ldr	r3, [pc, #156]	; (800b5a4 <ip_reass_free_complete_datagram+0x12c>)
 800b506:	22bc      	movs	r2, #188	; 0xbc
 800b508:	492a      	ldr	r1, [pc, #168]	; (800b5b4 <ip_reass_free_complete_datagram+0x13c>)
 800b50a:	4828      	ldr	r0, [pc, #160]	; (800b5ac <ip_reass_free_complete_datagram+0x134>)
 800b50c:	f009 fbec 	bl	8014ce8 <iprintf>
    pbufs_freed += clen;
 800b510:	8bfa      	ldrh	r2, [r7, #30]
 800b512:	8a7b      	ldrh	r3, [r7, #18]
 800b514:	4413      	add	r3, r2
 800b516:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b518:	69b8      	ldr	r0, [r7, #24]
 800b51a:	f001 fead 	bl	800d278 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b524:	e01f      	b.n	800b566 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f001 ff38 	bl	800d3ac <pbuf_clen>
 800b53c:	4603      	mov	r3, r0
 800b53e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b540:	8bfa      	ldrh	r2, [r7, #30]
 800b542:	8a7b      	ldrh	r3, [r7, #18]
 800b544:	4413      	add	r3, r2
 800b546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b54a:	db05      	blt.n	800b558 <ip_reass_free_complete_datagram+0xe0>
 800b54c:	4b15      	ldr	r3, [pc, #84]	; (800b5a4 <ip_reass_free_complete_datagram+0x12c>)
 800b54e:	22cc      	movs	r2, #204	; 0xcc
 800b550:	4918      	ldr	r1, [pc, #96]	; (800b5b4 <ip_reass_free_complete_datagram+0x13c>)
 800b552:	4816      	ldr	r0, [pc, #88]	; (800b5ac <ip_reass_free_complete_datagram+0x134>)
 800b554:	f009 fbc8 	bl	8014ce8 <iprintf>
    pbufs_freed += clen;
 800b558:	8bfa      	ldrh	r2, [r7, #30]
 800b55a:	8a7b      	ldrh	r3, [r7, #18]
 800b55c:	4413      	add	r3, r2
 800b55e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f001 fe89 	bl	800d278 <pbuf_free>
  while (p != NULL) {
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1dc      	bne.n	800b526 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f8c2 	bl	800b6f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800b574:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <ip_reass_free_complete_datagram+0x140>)
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	8bfa      	ldrh	r2, [r7, #30]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d905      	bls.n	800b58a <ip_reass_free_complete_datagram+0x112>
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <ip_reass_free_complete_datagram+0x12c>)
 800b580:	22d2      	movs	r2, #210	; 0xd2
 800b582:	490e      	ldr	r1, [pc, #56]	; (800b5bc <ip_reass_free_complete_datagram+0x144>)
 800b584:	4809      	ldr	r0, [pc, #36]	; (800b5ac <ip_reass_free_complete_datagram+0x134>)
 800b586:	f009 fbaf 	bl	8014ce8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800b58a:	4b0b      	ldr	r3, [pc, #44]	; (800b5b8 <ip_reass_free_complete_datagram+0x140>)
 800b58c:	881a      	ldrh	r2, [r3, #0]
 800b58e:	8bfb      	ldrh	r3, [r7, #30]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	b29a      	uxth	r2, r3
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <ip_reass_free_complete_datagram+0x140>)
 800b596:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b598:	8bfb      	ldrh	r3, [r7, #30]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08017064 	.word	0x08017064
 800b5a8:	080170a0 	.word	0x080170a0
 800b5ac:	080170ac 	.word	0x080170ac
 800b5b0:	080170d4 	.word	0x080170d4
 800b5b4:	080170e8 	.word	0x080170e8
 800b5b8:	20004394 	.word	0x20004394
 800b5bc:	08017108 	.word	0x08017108

0800b5c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	; 0x28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b5de:	4b28      	ldr	r3, [pc, #160]	; (800b680 <ip_reass_remove_oldest_datagram+0xc0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b5e4:	e030      	b.n	800b648 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	695a      	ldr	r2, [r3, #20]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d10c      	bne.n	800b60c <ip_reass_remove_oldest_datagram+0x4c>
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	699a      	ldr	r2, [r3, #24]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d106      	bne.n	800b60c <ip_reass_remove_oldest_datagram+0x4c>
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b600:	899a      	ldrh	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	889b      	ldrh	r3, [r3, #4]
 800b606:	b29b      	uxth	r3, r3
 800b608:	429a      	cmp	r2, r3
 800b60a:	d014      	beq.n	800b636 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	3301      	adds	r3, #1
 800b610:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b612:	6a3b      	ldr	r3, [r7, #32]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	61bb      	str	r3, [r7, #24]
 800b620:	e009      	b.n	800b636 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	7fda      	ldrb	r2, [r3, #31]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	7fdb      	ldrb	r3, [r3, #31]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d803      	bhi.n	800b636 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d001      	beq.n	800b642 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b640:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1cb      	bne.n	800b5e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d008      	beq.n	800b666 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	6a38      	ldr	r0, [r7, #32]
 800b658:	f7ff ff0e 	bl	800b478 <ip_reass_free_complete_datagram>
 800b65c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4413      	add	r3, r2
 800b664:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	da02      	bge.n	800b674 <ip_reass_remove_oldest_datagram+0xb4>
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b01      	cmp	r3, #1
 800b672:	dcac      	bgt.n	800b5ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b674:	697b      	ldr	r3, [r7, #20]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3728      	adds	r7, #40	; 0x28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20004390 	.word	0x20004390

0800b684 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b68e:	2004      	movs	r0, #4
 800b690:	f001 f83e 	bl	800c710 <memp_malloc>
 800b694:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d110      	bne.n	800b6be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff ff8e 	bl	800b5c0 <ip_reass_remove_oldest_datagram>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	db03      	blt.n	800b6b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b6ac:	2004      	movs	r0, #4
 800b6ae:	f001 f82f 	bl	800c710 <memp_malloc>
 800b6b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e016      	b.n	800b6ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b6be:	2220      	movs	r2, #32
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f009 fb08 	bl	8014cd8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b6ce:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <ip_reass_enqueue_new_datagram+0x70>)
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b6d6:	4a07      	ldr	r2, [pc, #28]	; (800b6f4 <ip_reass_enqueue_new_datagram+0x70>)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	2214      	movs	r2, #20
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f009 faec 	bl	8014cc2 <memcpy>
  return ipr;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20004390 	.word	0x20004390

0800b6f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b702:	4b10      	ldr	r3, [pc, #64]	; (800b744 <ip_reass_dequeue_datagram+0x4c>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d104      	bne.n	800b716 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a0c      	ldr	r2, [pc, #48]	; (800b744 <ip_reass_dequeue_datagram+0x4c>)
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	e00d      	b.n	800b732 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <ip_reass_dequeue_datagram+0x32>
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <ip_reass_dequeue_datagram+0x50>)
 800b71e:	f240 1245 	movw	r2, #325	; 0x145
 800b722:	490a      	ldr	r1, [pc, #40]	; (800b74c <ip_reass_dequeue_datagram+0x54>)
 800b724:	480a      	ldr	r0, [pc, #40]	; (800b750 <ip_reass_dequeue_datagram+0x58>)
 800b726:	f009 fadf 	bl	8014ce8 <iprintf>
    prev->next = ipr->next;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	2004      	movs	r0, #4
 800b736:	f001 f83d 	bl	800c7b4 <memp_free>
}
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20004390 	.word	0x20004390
 800b748:	08017064 	.word	0x08017064
 800b74c:	08017124 	.word	0x08017124
 800b750:	080170ac 	.word	0x080170ac

0800b754 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08c      	sub	sp, #48	; 0x30
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800b760:	2300      	movs	r3, #0
 800b762:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b764:	2301      	movs	r3, #1
 800b766:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	b29b      	uxth	r3, r3
 800b774:	4618      	mov	r0, r3
 800b776:	f7fc f839 	bl	80077ec <lwip_htons>
 800b77a:	4603      	mov	r3, r0
 800b77c:	461a      	mov	r2, r3
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	b29b      	uxth	r3, r3
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	88db      	ldrh	r3, [r3, #6]
 800b796:	b29b      	uxth	r3, r3
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fc f827 	bl	80077ec <lwip_htons>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	705a      	strb	r2, [r3, #1]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	709a      	strb	r2, [r3, #2]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c4:	8b3a      	ldrh	r2, [r7, #24]
 800b7c6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800b7c8:	8b3a      	ldrh	r2, [r7, #24]
 800b7ca:	8b7b      	ldrh	r3, [r7, #26]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7da:	e061      	b.n	800b8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	889b      	ldrh	r3, [r3, #4]
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	889b      	ldrh	r3, [r3, #4]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d232      	bcs.n	800b858 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01f      	beq.n	800b83e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	889b      	ldrh	r3, [r3, #4]
 800b802:	b29a      	uxth	r2, r3
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	88db      	ldrh	r3, [r3, #6]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	429a      	cmp	r2, r3
 800b80c:	f0c0 80e8 	bcc.w	800b9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b812:	88db      	ldrh	r3, [r3, #6]
 800b814:	b29a      	uxth	r2, r3
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	889b      	ldrh	r3, [r3, #4]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	429a      	cmp	r2, r3
 800b81e:	f200 80df 	bhi.w	800b9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	88db      	ldrh	r3, [r3, #6]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	889b      	ldrh	r3, [r3, #4]
 800b832:	b29b      	uxth	r3, r3
 800b834:	429a      	cmp	r2, r3
 800b836:	d037      	beq.n	800b8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b83c:	e034      	b.n	800b8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800b83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b840:	88db      	ldrh	r3, [r3, #6]
 800b842:	b29a      	uxth	r2, r3
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	889b      	ldrh	r3, [r3, #4]
 800b848:	b29b      	uxth	r3, r3
 800b84a:	429a      	cmp	r2, r3
 800b84c:	f200 80c3 	bhi.w	800b9d6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	605a      	str	r2, [r3, #4]
      break;
 800b856:	e027      	b.n	800b8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800b858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85a:	889b      	ldrh	r3, [r3, #4]
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	889b      	ldrh	r3, [r3, #4]
 800b862:	b29b      	uxth	r3, r3
 800b864:	429a      	cmp	r2, r3
 800b866:	f000 80b8 	beq.w	800b9da <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86c:	889b      	ldrh	r3, [r3, #4]
 800b86e:	b29a      	uxth	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	88db      	ldrh	r3, [r3, #6]
 800b874:	b29b      	uxth	r3, r3
 800b876:	429a      	cmp	r2, r3
 800b878:	f0c0 80b1 	bcc.w	800b9de <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d009      	beq.n	800b896 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	88db      	ldrh	r3, [r3, #6]
 800b886:	b29a      	uxth	r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	889b      	ldrh	r3, [r3, #4]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	429a      	cmp	r2, r3
 800b890:	d001      	beq.n	800b896 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d19a      	bne.n	800b7dc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800b8a6:	e000      	b.n	800b8aa <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800b8a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d12d      	bne.n	800b90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01c      	beq.n	800b8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	88db      	ldrh	r3, [r3, #6]
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	889b      	ldrh	r3, [r3, #4]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d906      	bls.n	800b8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800b8c6:	4b50      	ldr	r3, [pc, #320]	; (800ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b8c8:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b8cc:	494f      	ldr	r1, [pc, #316]	; (800ba0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800b8ce:	4850      	ldr	r0, [pc, #320]	; (800ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b8d0:	f009 fa0a 	bl	8014ce8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	88db      	ldrh	r3, [r3, #6]
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	889b      	ldrh	r3, [r3, #4]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d010      	beq.n	800b90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	623b      	str	r3, [r7, #32]
 800b8ee:	e00d      	b.n	800b90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d006      	beq.n	800b906 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800b8f8:	4b43      	ldr	r3, [pc, #268]	; (800ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b8fa:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800b8fe:	4945      	ldr	r1, [pc, #276]	; (800ba14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b900:	4843      	ldr	r0, [pc, #268]	; (800ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b902:	f009 f9f1 	bl	8014ce8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d105      	bne.n	800b91e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	7f9b      	ldrb	r3, [r3, #30]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d059      	beq.n	800b9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d04f      	beq.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d006      	beq.n	800b93a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	889b      	ldrh	r3, [r3, #4]
 800b934:	b29b      	uxth	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	e041      	b.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b94a:	e012      	b.n	800b972 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	88db      	ldrh	r3, [r3, #6]
 800b956:	b29a      	uxth	r2, r3
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	889b      	ldrh	r3, [r3, #4]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	429a      	cmp	r2, r3
 800b960:	d002      	beq.n	800b968 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	623b      	str	r3, [r7, #32]
            break;
 800b966:	e007      	b.n	800b978 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1e9      	bne.n	800b94c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b978:	6a3b      	ldr	r3, [r7, #32]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d022      	beq.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800b986:	4b20      	ldr	r3, [pc, #128]	; (800ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b988:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800b98c:	4922      	ldr	r1, [pc, #136]	; (800ba18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b98e:	4820      	ldr	r0, [pc, #128]	; (800ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b990:	f009 f9aa 	bl	8014ce8 <iprintf>
          LWIP_ASSERT("sanity check",
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d106      	bne.n	800b9ae <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800b9a0:	4b19      	ldr	r3, [pc, #100]	; (800ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b9a2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b9a6:	491c      	ldr	r1, [pc, #112]	; (800ba18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b9a8:	4819      	ldr	r0, [pc, #100]	; (800ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b9aa:	f009 f99d 	bl	8014ce8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800b9b8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800b9bc:	4917      	ldr	r1, [pc, #92]	; (800ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b9be:	4814      	ldr	r0, [pc, #80]	; (800ba10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b9c0:	f009 f992 	bl	8014ce8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bf14      	ite	ne
 800b9ca:	2301      	movne	r3, #1
 800b9cc:	2300      	moveq	r3, #0
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	e016      	b.n	800ba00 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e014      	b.n	800ba00 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800b9de:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	f001 fce3 	bl	800d3ac <pbuf_clen>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b9f4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800b9f6:	68b8      	ldr	r0, [r7, #8]
 800b9f8:	f001 fc3e 	bl	800d278 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3730      	adds	r7, #48	; 0x30
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	08017064 	.word	0x08017064
 800ba0c:	08017140 	.word	0x08017140
 800ba10:	080170ac 	.word	0x080170ac
 800ba14:	08017160 	.word	0x08017160
 800ba18:	08017198 	.word	0x08017198
 800ba1c:	080171a8 	.word	0x080171a8
 800ba20:	20004394 	.word	0x20004394

0800ba24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08e      	sub	sp, #56	; 0x38
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	2b14      	cmp	r3, #20
 800ba3e:	f040 8131 	bne.w	800bca4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	88db      	ldrh	r3, [r3, #6]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fb fecf 	bl	80077ec <lwip_htons>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	885b      	ldrh	r3, [r3, #2]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fb fec3 	bl	80077ec <lwip_htons>
 800ba66:	4603      	mov	r3, r0
 800ba68:	461a      	mov	r2, r3
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	f003 030f 	and.w	r3, r3, #15
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f001 fc94 	bl	800d3ac <pbuf_clen>
 800ba84:	4603      	mov	r3, r0
 800ba86:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ba88:	4b8c      	ldr	r3, [pc, #560]	; (800bcbc <ip4_reass+0x298>)
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba90:	4413      	add	r3, r2
 800ba92:	2b0a      	cmp	r3, #10
 800ba94:	dd10      	ble.n	800bab8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ba96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba9c:	f7ff fd90 	bl	800b5c0 <ip_reass_remove_oldest_datagram>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 8101 	beq.w	800bcaa <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800baa8:	4b84      	ldr	r3, [pc, #528]	; (800bcbc <ip4_reass+0x298>)
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bab0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bab2:	2b0a      	cmp	r3, #10
 800bab4:	f300 80f9 	bgt.w	800bcaa <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bab8:	4b81      	ldr	r3, [pc, #516]	; (800bcc0 <ip4_reass+0x29c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	633b      	str	r3, [r7, #48]	; 0x30
 800babe:	e015      	b.n	800baec <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	695a      	ldr	r2, [r3, #20]
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d10c      	bne.n	800bae6 <ip4_reass+0xc2>
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	699a      	ldr	r2, [r3, #24]
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d106      	bne.n	800bae6 <ip4_reass+0xc2>
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	899a      	ldrh	r2, [r3, #12]
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	889b      	ldrh	r3, [r3, #4]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d006      	beq.n	800baf4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	633b      	str	r3, [r7, #48]	; 0x30
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e6      	bne.n	800bac0 <ip4_reass+0x9c>
 800baf2:	e000      	b.n	800baf6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800baf4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d109      	bne.n	800bb10 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bafc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bafe:	4619      	mov	r1, r3
 800bb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb02:	f7ff fdbf 	bl	800b684 <ip_reass_enqueue_new_datagram>
 800bb06:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d11c      	bne.n	800bb48 <ip4_reass+0x124>
      goto nullreturn;
 800bb0e:	e0cc      	b.n	800bcaa <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	88db      	ldrh	r3, [r3, #6]
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fb fe68 	bl	80077ec <lwip_htons>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d110      	bne.n	800bb48 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	89db      	ldrh	r3, [r3, #14]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fb fe5e 	bl	80077ec <lwip_htons>
 800bb30:	4603      	mov	r3, r0
 800bb32:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	2214      	movs	r2, #20
 800bb40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb42:	4618      	mov	r0, r3
 800bb44:	f009 f8bd 	bl	8014cc2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	88db      	ldrh	r3, [r3, #6]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f003 0320 	and.w	r3, r3, #32
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	bf0c      	ite	eq
 800bb56:	2301      	moveq	r3, #1
 800bb58:	2300      	movne	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00e      	beq.n	800bb82 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800bb64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb68:	4413      	add	r3, r2
 800bb6a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bb6c:	8b7a      	ldrh	r2, [r7, #26]
 800bb6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bb70:	429a      	cmp	r2, r3
 800bb72:	f0c0 809a 	bcc.w	800bcaa <ip4_reass+0x286>
 800bb76:	8b7b      	ldrh	r3, [r7, #26]
 800bb78:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	f200 8094 	bhi.w	800bcaa <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb88:	f7ff fde4 	bl	800b754 <ip_reass_chain_frag_into_datagram_and_validate>
 800bb8c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb94:	f000 8088 	beq.w	800bca8 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bb98:	4b48      	ldr	r3, [pc, #288]	; (800bcbc <ip4_reass+0x298>)
 800bb9a:	881a      	ldrh	r2, [r3, #0]
 800bb9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb9e:	4413      	add	r3, r2
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	4b46      	ldr	r3, [pc, #280]	; (800bcbc <ip4_reass+0x298>)
 800bba4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00d      	beq.n	800bbc8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800bbac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbb0:	4413      	add	r3, r2
 800bbb2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	8a7a      	ldrh	r2, [r7, #18]
 800bbb8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	7f9b      	ldrb	r3, [r3, #30]
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d168      	bne.n	800bca0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	8b9b      	ldrh	r3, [r3, #28]
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	3308      	adds	r3, #8
 800bbf0:	2214      	movs	r2, #20
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbf6:	f009 f864 	bl	8014cc2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	8b9b      	ldrh	r3, [r3, #28]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fb fdf4 	bl	80077ec <lwip_htons>
 800bc04:	4603      	mov	r3, r0
 800bc06:	461a      	mov	r2, r3
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	2200      	movs	r2, #0
 800bc10:	719a      	strb	r2, [r3, #6]
 800bc12:	2200      	movs	r2, #0
 800bc14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc18:	2200      	movs	r2, #0
 800bc1a:	729a      	strb	r2, [r3, #10]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bc26:	e00e      	b.n	800bc46 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800bc2e:	f06f 0113 	mvn.w	r1, #19
 800bc32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc34:	f001 fafc 	bl	800d230 <pbuf_header>
      pbuf_cat(p, r);
 800bc38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f001 fbf6 	bl	800d42c <pbuf_cat>
      r = iprh->next_pbuf;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1ed      	bne.n	800bc28 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bc4c:	4b1c      	ldr	r3, [pc, #112]	; (800bcc0 <ip4_reass+0x29c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d102      	bne.n	800bc5c <ip4_reass+0x238>
      ipr_prev = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc5a:	e010      	b.n	800bc7e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bc5c:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <ip4_reass+0x29c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc62:	e007      	b.n	800bc74 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d006      	beq.n	800bc7c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f4      	bne.n	800bc64 <ip4_reass+0x240>
 800bc7a:	e000      	b.n	800bc7e <ip4_reass+0x25a>
          break;
 800bc7c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bc7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc82:	f7ff fd39 	bl	800b6f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f001 fb90 	bl	800d3ac <pbuf_clen>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <ip4_reass+0x298>)
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	4b08      	ldr	r3, [pc, #32]	; (800bcbc <ip4_reass+0x298>)
 800bc9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	e008      	b.n	800bcb2 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	e006      	b.n	800bcb2 <ip4_reass+0x28e>
    goto nullreturn;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <ip4_reass+0x286>
    goto nullreturn;
 800bca8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f001 fae4 	bl	800d278 <pbuf_free>
  return NULL;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3738      	adds	r7, #56	; 0x38
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20004394 	.word	0x20004394
 800bcc0:	20004390 	.word	0x20004390

0800bcc4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800bcc8:	2005      	movs	r0, #5
 800bcca:	f000 fd21 	bl	800c710 <memp_malloc>
 800bcce:	4603      	mov	r3, r0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d106      	bne.n	800bcf0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800bce2:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800bce4:	f240 22ae 	movw	r2, #686	; 0x2ae
 800bce8:	4906      	ldr	r1, [pc, #24]	; (800bd04 <ip_frag_free_pbuf_custom_ref+0x30>)
 800bcea:	4807      	ldr	r0, [pc, #28]	; (800bd08 <ip_frag_free_pbuf_custom_ref+0x34>)
 800bcec:	f008 fffc 	bl	8014ce8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	2005      	movs	r0, #5
 800bcf4:	f000 fd5e 	bl	800c7b4 <memp_free>
}
 800bcf8:	bf00      	nop
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	08017064 	.word	0x08017064
 800bd04:	080171cc 	.word	0x080171cc
 800bd08:	080170ac 	.word	0x080170ac

0800bd0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <ipfrag_free_pbuf_custom+0x20>
 800bd1e:	4b11      	ldr	r3, [pc, #68]	; (800bd64 <ipfrag_free_pbuf_custom+0x58>)
 800bd20:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800bd24:	4910      	ldr	r1, [pc, #64]	; (800bd68 <ipfrag_free_pbuf_custom+0x5c>)
 800bd26:	4811      	ldr	r0, [pc, #68]	; (800bd6c <ipfrag_free_pbuf_custom+0x60>)
 800bd28:	f008 ffde 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d006      	beq.n	800bd42 <ipfrag_free_pbuf_custom+0x36>
 800bd34:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <ipfrag_free_pbuf_custom+0x58>)
 800bd36:	f240 22b9 	movw	r2, #697	; 0x2b9
 800bd3a:	490d      	ldr	r1, [pc, #52]	; (800bd70 <ipfrag_free_pbuf_custom+0x64>)
 800bd3c:	480b      	ldr	r0, [pc, #44]	; (800bd6c <ipfrag_free_pbuf_custom+0x60>)
 800bd3e:	f008 ffd3 	bl	8014ce8 <iprintf>
  if (pcr->original != NULL) {
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d004      	beq.n	800bd54 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f001 fa92 	bl	800d278 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f7ff ffbd 	bl	800bcd4 <ip_frag_free_pbuf_custom_ref>
}
 800bd5a:	bf00      	nop
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	08017064 	.word	0x08017064
 800bd68:	080171d8 	.word	0x080171d8
 800bd6c:	080170ac 	.word	0x080170ac
 800bd70:	080171e4 	.word	0x080171e4

0800bd74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b092      	sub	sp, #72	; 0x48
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd88:	3b14      	subs	r3, #20
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	da00      	bge.n	800bd90 <ip4_frag+0x1c>
 800bd8e:	3307      	adds	r3, #7
 800bd90:	10db      	asrs	r3, r3, #3
 800bd92:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800bd94:	2314      	movs	r3, #20
 800bd96:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	f003 030f 	and.w	r3, r3, #15
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	2b14      	cmp	r3, #20
 800bdae:	d009      	beq.n	800bdc4 <ip4_frag+0x50>
 800bdb0:	4b79      	ldr	r3, [pc, #484]	; (800bf98 <ip4_frag+0x224>)
 800bdb2:	f240 22e1 	movw	r2, #737	; 0x2e1
 800bdb6:	4979      	ldr	r1, [pc, #484]	; (800bf9c <ip4_frag+0x228>)
 800bdb8:	4879      	ldr	r0, [pc, #484]	; (800bfa0 <ip4_frag+0x22c>)
 800bdba:	f008 ff95 	bl	8014ce8 <iprintf>
 800bdbe:	f06f 0305 	mvn.w	r3, #5
 800bdc2:	e0e5      	b.n	800bf90 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	88db      	ldrh	r3, [r3, #6]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fb fd0e 	bl	80077ec <lwip_htons>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800bdd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bdd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdda:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800bddc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bdde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d009      	beq.n	800bdfa <ip4_frag+0x86>
 800bde6:	4b6c      	ldr	r3, [pc, #432]	; (800bf98 <ip4_frag+0x224>)
 800bde8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bdec:	496d      	ldr	r1, [pc, #436]	; (800bfa4 <ip4_frag+0x230>)
 800bdee:	486c      	ldr	r0, [pc, #432]	; (800bfa0 <ip4_frag+0x22c>)
 800bdf0:	f008 ff7a 	bl	8014ce8 <iprintf>
 800bdf4:	f06f 0305 	mvn.w	r3, #5
 800bdf8:	e0ca      	b.n	800bf90 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	3b14      	subs	r3, #20
 800be00:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800be02:	e0bc      	b.n	800bf7e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800be04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800be06:	00da      	lsls	r2, r3, #3
 800be08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800be0a:	4293      	cmp	r3, r2
 800be0c:	bfa8      	it	ge
 800be0e:	4613      	movge	r3, r2
 800be10:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800be12:	2200      	movs	r2, #0
 800be14:	2114      	movs	r1, #20
 800be16:	2002      	movs	r0, #2
 800be18:	f000 febc 	bl	800cb94 <pbuf_alloc>
 800be1c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 80b2 	beq.w	800bf8a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	895b      	ldrh	r3, [r3, #10]
 800be2a:	2b13      	cmp	r3, #19
 800be2c:	d806      	bhi.n	800be3c <ip4_frag+0xc8>
 800be2e:	4b5a      	ldr	r3, [pc, #360]	; (800bf98 <ip4_frag+0x224>)
 800be30:	f240 3209 	movw	r2, #777	; 0x309
 800be34:	495c      	ldr	r1, [pc, #368]	; (800bfa8 <ip4_frag+0x234>)
 800be36:	485a      	ldr	r0, [pc, #360]	; (800bfa0 <ip4_frag+0x22c>)
 800be38:	f008 ff56 	bl	8014ce8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2214      	movs	r2, #20
 800be42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be44:	4618      	mov	r0, r3
 800be46:	f008 ff3c 	bl	8014cc2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800be50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be52:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800be54:	e04f      	b.n	800bef6 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	895a      	ldrh	r2, [r3, #10]
 800be5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800be60:	8bfa      	ldrh	r2, [r7, #30]
 800be62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be64:	4293      	cmp	r3, r2
 800be66:	bf28      	it	cs
 800be68:	4613      	movcs	r3, r2
 800be6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800be6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d105      	bne.n	800be7e <ip4_frag+0x10a>
        poff = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
        continue;
 800be7c:	e03b      	b.n	800bef6 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800be7e:	f7ff ff21 	bl	800bcc4 <ip_frag_alloc_pbuf_custom_ref>
 800be82:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d103      	bne.n	800be92 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800be8a:	6a38      	ldr	r0, [r7, #32]
 800be8c:	f001 f9f4 	bl	800d278 <pbuf_free>
        goto memerr;
 800be90:	e07c      	b.n	800bf8c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800be92:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800be98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be9a:	4413      	add	r3, r2
 800be9c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800be9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bea0:	9201      	str	r2, [sp, #4]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	4603      	mov	r3, r0
 800bea6:	2202      	movs	r2, #2
 800bea8:	2004      	movs	r0, #4
 800beaa:	f001 f807 	bl	800cebc <pbuf_alloced_custom>
 800beae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800beb6:	69b8      	ldr	r0, [r7, #24]
 800beb8:	f7ff ff0c 	bl	800bcd4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800bebc:	6a38      	ldr	r0, [r7, #32]
 800bebe:	f001 f9db 	bl	800d278 <pbuf_free>
        goto memerr;
 800bec2:	e063      	b.n	800bf8c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f001 fa89 	bl	800d3dc <pbuf_ref>
      pcr->original = p;
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	68fa      	ldr	r2, [r7, #12]
 800bece:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	4a36      	ldr	r2, [pc, #216]	; (800bfac <ip4_frag+0x238>)
 800bed4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800bed6:	6979      	ldr	r1, [r7, #20]
 800bed8:	6a38      	ldr	r0, [r7, #32]
 800beda:	f001 faa7 	bl	800d42c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800bede:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800bee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800bee6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <ip4_frag+0x182>
        poff = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800bef6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1ac      	bne.n	800be56 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800befc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800befe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bf00:	4413      	add	r3, r2
 800bf02:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800bf04:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf0a:	3b14      	subs	r3, #20
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	bfd4      	ite	le
 800bf10:	2301      	movle	r3, #1
 800bf12:	2300      	movgt	r3, #0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800bf18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bf1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf1e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800bf26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bf28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bf2c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800bf2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fb fc5b 	bl	80077ec <lwip_htons>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800bf3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf40:	3314      	adds	r3, #20
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fb fc51 	bl	80077ec <lwip_htons>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	2200      	movs	r2, #0
 800bf56:	729a      	strb	r2, [r3, #10]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	6a39      	ldr	r1, [r7, #32]
 800bf64:	68b8      	ldr	r0, [r7, #8]
 800bf66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800bf68:	6a38      	ldr	r0, [r7, #32]
 800bf6a:	f001 f985 	bl	800d278 <pbuf_free>
    left -= fragsize;
 800bf6e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bf70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800bf76:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800bf78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bf7a:	4413      	add	r3, r2
 800bf7c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800bf7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f47f af3f 	bne.w	800be04 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	e002      	b.n	800bf90 <ip4_frag+0x21c>
      goto memerr;
 800bf8a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3740      	adds	r7, #64	; 0x40
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	08017064 	.word	0x08017064
 800bf9c:	080171f0 	.word	0x080171f0
 800bfa0:	080170ac 	.word	0x080170ac
 800bfa4:	08017218 	.word	0x08017218
 800bfa8:	08017234 	.word	0x08017234
 800bfac:	0800bd0d 	.word	0x0800bd0d

0800bfb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bfb8:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <plug_holes+0x10c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d206      	bcs.n	800bfd0 <plug_holes+0x20>
 800bfc2:	4b3f      	ldr	r3, [pc, #252]	; (800c0c0 <plug_holes+0x110>)
 800bfc4:	f240 125d 	movw	r2, #349	; 0x15d
 800bfc8:	493e      	ldr	r1, [pc, #248]	; (800c0c4 <plug_holes+0x114>)
 800bfca:	483f      	ldr	r0, [pc, #252]	; (800c0c8 <plug_holes+0x118>)
 800bfcc:	f008 fe8c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bfd0:	4b3e      	ldr	r3, [pc, #248]	; (800c0cc <plug_holes+0x11c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d306      	bcc.n	800bfe8 <plug_holes+0x38>
 800bfda:	4b39      	ldr	r3, [pc, #228]	; (800c0c0 <plug_holes+0x110>)
 800bfdc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bfe0:	493b      	ldr	r1, [pc, #236]	; (800c0d0 <plug_holes+0x120>)
 800bfe2:	4839      	ldr	r0, [pc, #228]	; (800c0c8 <plug_holes+0x118>)
 800bfe4:	f008 fe80 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	791b      	ldrb	r3, [r3, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <plug_holes+0x4e>
 800bff0:	4b33      	ldr	r3, [pc, #204]	; (800c0c0 <plug_holes+0x110>)
 800bff2:	f240 125f 	movw	r2, #351	; 0x15f
 800bff6:	4937      	ldr	r1, [pc, #220]	; (800c0d4 <plug_holes+0x124>)
 800bff8:	4833      	ldr	r0, [pc, #204]	; (800c0c8 <plug_holes+0x118>)
 800bffa:	f008 fe75 	bl	8014ce8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c006:	d906      	bls.n	800c016 <plug_holes+0x66>
 800c008:	4b2d      	ldr	r3, [pc, #180]	; (800c0c0 <plug_holes+0x110>)
 800c00a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c00e:	4932      	ldr	r1, [pc, #200]	; (800c0d8 <plug_holes+0x128>)
 800c010:	482d      	ldr	r0, [pc, #180]	; (800c0c8 <plug_holes+0x118>)
 800c012:	f008 fe69 	bl	8014ce8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c016:	4b29      	ldr	r3, [pc, #164]	; (800c0bc <plug_holes+0x10c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	8812      	ldrh	r2, [r2, #0]
 800c01e:	4413      	add	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	429a      	cmp	r2, r3
 800c028:	d01f      	beq.n	800c06a <plug_holes+0xba>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	791b      	ldrb	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d11b      	bne.n	800c06a <plug_holes+0xba>
 800c032:	4b26      	ldr	r3, [pc, #152]	; (800c0cc <plug_holes+0x11c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d016      	beq.n	800c06a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c03c:	4b27      	ldr	r3, [pc, #156]	; (800c0dc <plug_holes+0x12c>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	429a      	cmp	r2, r3
 800c044:	d102      	bne.n	800c04c <plug_holes+0x9c>
      lfree = mem;
 800c046:	4a25      	ldr	r2, [pc, #148]	; (800c0dc <plug_holes+0x12c>)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	881a      	ldrh	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c054:	4b19      	ldr	r3, [pc, #100]	; (800c0bc <plug_holes+0x10c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	8812      	ldrh	r2, [r2, #0]
 800c05c:	4413      	add	r3, r2
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	4916      	ldr	r1, [pc, #88]	; (800c0bc <plug_holes+0x10c>)
 800c062:	6809      	ldr	r1, [r1, #0]
 800c064:	1a52      	subs	r2, r2, r1
 800c066:	b292      	uxth	r2, r2
 800c068:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c06a:	4b14      	ldr	r3, [pc, #80]	; (800c0bc <plug_holes+0x10c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	8852      	ldrh	r2, [r2, #2]
 800c072:	4413      	add	r3, r2
 800c074:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d01a      	beq.n	800c0b4 <plug_holes+0x104>
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d116      	bne.n	800c0b4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c086:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <plug_holes+0x12c>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d102      	bne.n	800c096 <plug_holes+0xe6>
      lfree = pmem;
 800c090:	4a12      	ldr	r2, [pc, #72]	; (800c0dc <plug_holes+0x12c>)
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	881a      	ldrh	r2, [r3, #0]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c09e:	4b07      	ldr	r3, [pc, #28]	; (800c0bc <plug_holes+0x10c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	8812      	ldrh	r2, [r2, #0]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	4904      	ldr	r1, [pc, #16]	; (800c0bc <plug_holes+0x10c>)
 800c0ac:	6809      	ldr	r1, [r1, #0]
 800c0ae:	1a52      	subs	r2, r2, r1
 800c0b0:	b292      	uxth	r2, r2
 800c0b2:	805a      	strh	r2, [r3, #2]
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20004398 	.word	0x20004398
 800c0c0:	08017254 	.word	0x08017254
 800c0c4:	08017284 	.word	0x08017284
 800c0c8:	0801729c 	.word	0x0801729c
 800c0cc:	2000439c 	.word	0x2000439c
 800c0d0:	080172c4 	.word	0x080172c4
 800c0d4:	080172e0 	.word	0x080172e0
 800c0d8:	080172fc 	.word	0x080172fc
 800c0dc:	200043a0 	.word	0x200043a0

0800c0e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c0e6:	4b1e      	ldr	r3, [pc, #120]	; (800c160 <mem_init+0x80>)
 800c0e8:	3303      	adds	r3, #3
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4b1c      	ldr	r3, [pc, #112]	; (800c164 <mem_init+0x84>)
 800c0f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c0f4:	4b1b      	ldr	r3, [pc, #108]	; (800c164 <mem_init+0x84>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c100:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c10e:	4b15      	ldr	r3, [pc, #84]	; (800c164 <mem_init+0x84>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c116:	4a14      	ldr	r2, [pc, #80]	; (800c168 <mem_init+0x88>)
 800c118:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <mem_init+0x88>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2201      	movs	r2, #1
 800c120:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c122:	4b11      	ldr	r3, [pc, #68]	; (800c168 <mem_init+0x88>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c12a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c12c:	4b0e      	ldr	r3, [pc, #56]	; (800c168 <mem_init+0x88>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c134:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <mem_init+0x84>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a0c      	ldr	r2, [pc, #48]	; (800c16c <mem_init+0x8c>)
 800c13c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c13e:	480c      	ldr	r0, [pc, #48]	; (800c170 <mem_init+0x90>)
 800c140:	f007 fe2a 	bl	8013d98 <sys_mutex_new>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d006      	beq.n	800c158 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <mem_init+0x94>)
 800c14c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c150:	4909      	ldr	r1, [pc, #36]	; (800c178 <mem_init+0x98>)
 800c152:	480a      	ldr	r0, [pc, #40]	; (800c17c <mem_init+0x9c>)
 800c154:	f008 fdc8 	bl	8014ce8 <iprintf>
  }
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	200044cc 	.word	0x200044cc
 800c164:	20004398 	.word	0x20004398
 800c168:	2000439c 	.word	0x2000439c
 800c16c:	200043a0 	.word	0x200043a0
 800c170:	200043a4 	.word	0x200043a4
 800c174:	08017254 	.word	0x08017254
 800c178:	08017328 	.word	0x08017328
 800c17c:	0801729c 	.word	0x0801729c

0800c180 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d050      	beq.n	800c230 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f003 0303 	and.w	r3, r3, #3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d006      	beq.n	800c1a6 <mem_free+0x26>
 800c198:	4b27      	ldr	r3, [pc, #156]	; (800c238 <mem_free+0xb8>)
 800c19a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c19e:	4927      	ldr	r1, [pc, #156]	; (800c23c <mem_free+0xbc>)
 800c1a0:	4827      	ldr	r0, [pc, #156]	; (800c240 <mem_free+0xc0>)
 800c1a2:	f008 fda1 	bl	8014ce8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c1a6:	4b27      	ldr	r3, [pc, #156]	; (800c244 <mem_free+0xc4>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d304      	bcc.n	800c1ba <mem_free+0x3a>
 800c1b0:	4b25      	ldr	r3, [pc, #148]	; (800c248 <mem_free+0xc8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d306      	bcc.n	800c1c8 <mem_free+0x48>
 800c1ba:	4b1f      	ldr	r3, [pc, #124]	; (800c238 <mem_free+0xb8>)
 800c1bc:	f240 12af 	movw	r2, #431	; 0x1af
 800c1c0:	4922      	ldr	r1, [pc, #136]	; (800c24c <mem_free+0xcc>)
 800c1c2:	481f      	ldr	r0, [pc, #124]	; (800c240 <mem_free+0xc0>)
 800c1c4:	f008 fd90 	bl	8014ce8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c1c8:	4b1e      	ldr	r3, [pc, #120]	; (800c244 <mem_free+0xc4>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d304      	bcc.n	800c1dc <mem_free+0x5c>
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <mem_free+0xc8>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d306      	bcc.n	800c1ea <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c1dc:	f007 fe30 	bl	8013e40 <sys_arch_protect>
 800c1e0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c1e2:	68b8      	ldr	r0, [r7, #8]
 800c1e4:	f007 fe3a 	bl	8013e5c <sys_arch_unprotect>
    return;
 800c1e8:	e023      	b.n	800c232 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c1ea:	4819      	ldr	r0, [pc, #100]	; (800c250 <mem_free+0xd0>)
 800c1ec:	f007 fdee 	bl	8013dcc <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3b08      	subs	r3, #8
 800c1f4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	791b      	ldrb	r3, [r3, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <mem_free+0x8c>
 800c1fe:	4b0e      	ldr	r3, [pc, #56]	; (800c238 <mem_free+0xb8>)
 800c200:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c204:	4913      	ldr	r1, [pc, #76]	; (800c254 <mem_free+0xd4>)
 800c206:	480e      	ldr	r0, [pc, #56]	; (800c240 <mem_free+0xc0>)
 800c208:	f008 fd6e 	bl	8014ce8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c212:	4b11      	ldr	r3, [pc, #68]	; (800c258 <mem_free+0xd8>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d202      	bcs.n	800c222 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c21c:	4a0e      	ldr	r2, [pc, #56]	; (800c258 <mem_free+0xd8>)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fec4 	bl	800bfb0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c228:	4809      	ldr	r0, [pc, #36]	; (800c250 <mem_free+0xd0>)
 800c22a:	f007 fdde 	bl	8013dea <sys_mutex_unlock>
 800c22e:	e000      	b.n	800c232 <mem_free+0xb2>
    return;
 800c230:	bf00      	nop
}
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	08017254 	.word	0x08017254
 800c23c:	08017344 	.word	0x08017344
 800c240:	0801729c 	.word	0x0801729c
 800c244:	20004398 	.word	0x20004398
 800c248:	2000439c 	.word	0x2000439c
 800c24c:	08017368 	.word	0x08017368
 800c250:	200043a4 	.word	0x200043a4
 800c254:	08017380 	.word	0x08017380
 800c258:	200043a0 	.word	0x200043a0

0800c25c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c268:	887b      	ldrh	r3, [r7, #2]
 800c26a:	3303      	adds	r3, #3
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	f023 0303 	bic.w	r3, r3, #3
 800c272:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c274:	887b      	ldrh	r3, [r7, #2]
 800c276:	2b0b      	cmp	r3, #11
 800c278:	d801      	bhi.n	800c27e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c27a:	230c      	movs	r3, #12
 800c27c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c27e:	887b      	ldrh	r3, [r7, #2]
 800c280:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c284:	d901      	bls.n	800c28a <mem_trim+0x2e>
    return NULL;
 800c286:	2300      	movs	r3, #0
 800c288:	e0bd      	b.n	800c406 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c28a:	4b61      	ldr	r3, [pc, #388]	; (800c410 <mem_trim+0x1b4>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	429a      	cmp	r2, r3
 800c292:	d304      	bcc.n	800c29e <mem_trim+0x42>
 800c294:	4b5f      	ldr	r3, [pc, #380]	; (800c414 <mem_trim+0x1b8>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d306      	bcc.n	800c2ac <mem_trim+0x50>
 800c29e:	4b5e      	ldr	r3, [pc, #376]	; (800c418 <mem_trim+0x1bc>)
 800c2a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c2a4:	495d      	ldr	r1, [pc, #372]	; (800c41c <mem_trim+0x1c0>)
 800c2a6:	485e      	ldr	r0, [pc, #376]	; (800c420 <mem_trim+0x1c4>)
 800c2a8:	f008 fd1e 	bl	8014ce8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2ac:	4b58      	ldr	r3, [pc, #352]	; (800c410 <mem_trim+0x1b4>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d304      	bcc.n	800c2c0 <mem_trim+0x64>
 800c2b6:	4b57      	ldr	r3, [pc, #348]	; (800c414 <mem_trim+0x1b8>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d307      	bcc.n	800c2d0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c2c0:	f007 fdbe 	bl	8013e40 <sys_arch_protect>
 800c2c4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f007 fdc8 	bl	8013e5c <sys_arch_unprotect>
    return rmem;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	e09a      	b.n	800c406 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3b08      	subs	r3, #8
 800c2d4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	4a4d      	ldr	r2, [pc, #308]	; (800c410 <mem_trim+0x1b4>)
 800c2da:	6812      	ldr	r2, [r2, #0]
 800c2dc:	1a9b      	subs	r3, r3, r2
 800c2de:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	881a      	ldrh	r2, [r3, #0]
 800c2e4:	8b7b      	ldrh	r3, [r7, #26]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	3b08      	subs	r3, #8
 800c2ec:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c2ee:	887a      	ldrh	r2, [r7, #2]
 800c2f0:	8b3b      	ldrh	r3, [r7, #24]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d906      	bls.n	800c304 <mem_trim+0xa8>
 800c2f6:	4b48      	ldr	r3, [pc, #288]	; (800c418 <mem_trim+0x1bc>)
 800c2f8:	f240 2206 	movw	r2, #518	; 0x206
 800c2fc:	4949      	ldr	r1, [pc, #292]	; (800c424 <mem_trim+0x1c8>)
 800c2fe:	4848      	ldr	r0, [pc, #288]	; (800c420 <mem_trim+0x1c4>)
 800c300:	f008 fcf2 	bl	8014ce8 <iprintf>
  if (newsize > size) {
 800c304:	887a      	ldrh	r2, [r7, #2]
 800c306:	8b3b      	ldrh	r3, [r7, #24]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d901      	bls.n	800c310 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c30c:	2300      	movs	r3, #0
 800c30e:	e07a      	b.n	800c406 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c310:	887a      	ldrh	r2, [r7, #2]
 800c312:	8b3b      	ldrh	r3, [r7, #24]
 800c314:	429a      	cmp	r2, r3
 800c316:	d101      	bne.n	800c31c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	e074      	b.n	800c406 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c31c:	4842      	ldr	r0, [pc, #264]	; (800c428 <mem_trim+0x1cc>)
 800c31e:	f007 fd55 	bl	8013dcc <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c322:	4b3b      	ldr	r3, [pc, #236]	; (800c410 <mem_trim+0x1b4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	69fa      	ldr	r2, [r7, #28]
 800c328:	8812      	ldrh	r2, [r2, #0]
 800c32a:	4413      	add	r3, r2
 800c32c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	791b      	ldrb	r3, [r3, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d131      	bne.n	800c39a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c33c:	8b7a      	ldrh	r2, [r7, #26]
 800c33e:	887b      	ldrh	r3, [r7, #2]
 800c340:	4413      	add	r3, r2
 800c342:	b29b      	uxth	r3, r3
 800c344:	3308      	adds	r3, #8
 800c346:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800c348:	4b38      	ldr	r3, [pc, #224]	; (800c42c <mem_trim+0x1d0>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d105      	bne.n	800c35e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c352:	4b2f      	ldr	r3, [pc, #188]	; (800c410 <mem_trim+0x1b4>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	8a3b      	ldrh	r3, [r7, #16]
 800c358:	4413      	add	r3, r2
 800c35a:	4a34      	ldr	r2, [pc, #208]	; (800c42c <mem_trim+0x1d0>)
 800c35c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c35e:	4b2c      	ldr	r3, [pc, #176]	; (800c410 <mem_trim+0x1b4>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	8a3b      	ldrh	r3, [r7, #16]
 800c364:	4413      	add	r3, r2
 800c366:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2200      	movs	r2, #0
 800c36c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	8a7a      	ldrh	r2, [r7, #18]
 800c372:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	8b7a      	ldrh	r2, [r7, #26]
 800c378:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	8a3a      	ldrh	r2, [r7, #16]
 800c37e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c388:	d039      	beq.n	800c3fe <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c38a:	4b21      	ldr	r3, [pc, #132]	; (800c410 <mem_trim+0x1b4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	8812      	ldrh	r2, [r2, #0]
 800c392:	4413      	add	r3, r2
 800c394:	8a3a      	ldrh	r2, [r7, #16]
 800c396:	805a      	strh	r2, [r3, #2]
 800c398:	e031      	b.n	800c3fe <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c39a:	887b      	ldrh	r3, [r7, #2]
 800c39c:	f103 0214 	add.w	r2, r3, #20
 800c3a0:	8b3b      	ldrh	r3, [r7, #24]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d82b      	bhi.n	800c3fe <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c3a6:	8b7a      	ldrh	r2, [r7, #26]
 800c3a8:	887b      	ldrh	r3, [r7, #2]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c3b2:	4b17      	ldr	r3, [pc, #92]	; (800c410 <mem_trim+0x1b4>)
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	8a3b      	ldrh	r3, [r7, #16]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c3bc:	4b1b      	ldr	r3, [pc, #108]	; (800c42c <mem_trim+0x1d0>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d202      	bcs.n	800c3cc <mem_trim+0x170>
      lfree = mem2;
 800c3c6:	4a19      	ldr	r2, [pc, #100]	; (800c42c <mem_trim+0x1d0>)
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	881a      	ldrh	r2, [r3, #0]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	8b7a      	ldrh	r2, [r7, #26]
 800c3de:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	8a3a      	ldrh	r2, [r7, #16]
 800c3e4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3ee:	d006      	beq.n	800c3fe <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <mem_trim+0x1b4>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	8812      	ldrh	r2, [r2, #0]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	8a3a      	ldrh	r2, [r7, #16]
 800c3fc:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c3fe:	480a      	ldr	r0, [pc, #40]	; (800c428 <mem_trim+0x1cc>)
 800c400:	f007 fcf3 	bl	8013dea <sys_mutex_unlock>
  return rmem;
 800c404:	687b      	ldr	r3, [r7, #4]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	20004398 	.word	0x20004398
 800c414:	2000439c 	.word	0x2000439c
 800c418:	08017254 	.word	0x08017254
 800c41c:	08017394 	.word	0x08017394
 800c420:	0801729c 	.word	0x0801729c
 800c424:	080173ac 	.word	0x080173ac
 800c428:	200043a4 	.word	0x200043a4
 800c42c:	200043a0 	.word	0x200043a0

0800c430 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b088      	sub	sp, #32
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <mem_malloc+0x14>
    return NULL;
 800c440:	2300      	movs	r3, #0
 800c442:	e0d1      	b.n	800c5e8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c444:	88fb      	ldrh	r3, [r7, #6]
 800c446:	3303      	adds	r3, #3
 800c448:	b29b      	uxth	r3, r3
 800c44a:	f023 0303 	bic.w	r3, r3, #3
 800c44e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c450:	88fb      	ldrh	r3, [r7, #6]
 800c452:	2b0b      	cmp	r3, #11
 800c454:	d801      	bhi.n	800c45a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c456:	230c      	movs	r3, #12
 800c458:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c460:	d901      	bls.n	800c466 <mem_malloc+0x36>
    return NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	e0c0      	b.n	800c5e8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c466:	4862      	ldr	r0, [pc, #392]	; (800c5f0 <mem_malloc+0x1c0>)
 800c468:	f007 fcb0 	bl	8013dcc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c46c:	4b61      	ldr	r3, [pc, #388]	; (800c5f4 <mem_malloc+0x1c4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	4b61      	ldr	r3, [pc, #388]	; (800c5f8 <mem_malloc+0x1c8>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	83fb      	strh	r3, [r7, #30]
 800c47a:	e0aa      	b.n	800c5d2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c47c:	4b5e      	ldr	r3, [pc, #376]	; (800c5f8 <mem_malloc+0x1c8>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	8bfb      	ldrh	r3, [r7, #30]
 800c482:	4413      	add	r3, r2
 800c484:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	791b      	ldrb	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f040 809b 	bne.w	800c5c6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	461a      	mov	r2, r3
 800c496:	8bfb      	ldrh	r3, [r7, #30]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	f1a3 0208 	sub.w	r2, r3, #8
 800c49e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	f0c0 8090 	bcc.w	800c5c6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	8bfb      	ldrh	r3, [r7, #30]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	f1a3 0208 	sub.w	r2, r3, #8
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	3314      	adds	r3, #20
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d327      	bcc.n	800c50c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c4bc:	8bfa      	ldrh	r2, [r7, #30]
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c4c8:	4b4b      	ldr	r3, [pc, #300]	; (800c5f8 <mem_malloc+0x1c8>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	8a7b      	ldrh	r3, [r7, #18]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	881a      	ldrh	r2, [r3, #0]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	8bfa      	ldrh	r2, [r7, #30]
 800c4e4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	8a7a      	ldrh	r2, [r7, #18]
 800c4ea:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4fa:	d00a      	beq.n	800c512 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c4fc:	4b3e      	ldr	r3, [pc, #248]	; (800c5f8 <mem_malloc+0x1c8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	8812      	ldrh	r2, [r2, #0]
 800c504:	4413      	add	r3, r2
 800c506:	8a7a      	ldrh	r2, [r7, #18]
 800c508:	805a      	strh	r2, [r3, #2]
 800c50a:	e002      	b.n	800c512 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2201      	movs	r2, #1
 800c510:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c512:	4b38      	ldr	r3, [pc, #224]	; (800c5f4 <mem_malloc+0x1c4>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d127      	bne.n	800c56c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c51c:	4b35      	ldr	r3, [pc, #212]	; (800c5f4 <mem_malloc+0x1c4>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c522:	e005      	b.n	800c530 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c524:	4b34      	ldr	r3, [pc, #208]	; (800c5f8 <mem_malloc+0x1c8>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	8812      	ldrh	r2, [r2, #0]
 800c52c:	4413      	add	r3, r2
 800c52e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	791b      	ldrb	r3, [r3, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <mem_malloc+0x112>
 800c538:	4b30      	ldr	r3, [pc, #192]	; (800c5fc <mem_malloc+0x1cc>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d1f0      	bne.n	800c524 <mem_malloc+0xf4>
          }
          lfree = cur;
 800c542:	4a2c      	ldr	r2, [pc, #176]	; (800c5f4 <mem_malloc+0x1c4>)
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c548:	4b2a      	ldr	r3, [pc, #168]	; (800c5f4 <mem_malloc+0x1c4>)
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	4b2b      	ldr	r3, [pc, #172]	; (800c5fc <mem_malloc+0x1cc>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d00b      	beq.n	800c56c <mem_malloc+0x13c>
 800c554:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <mem_malloc+0x1c4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	791b      	ldrb	r3, [r3, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d006      	beq.n	800c56c <mem_malloc+0x13c>
 800c55e:	4b28      	ldr	r3, [pc, #160]	; (800c600 <mem_malloc+0x1d0>)
 800c560:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c564:	4927      	ldr	r1, [pc, #156]	; (800c604 <mem_malloc+0x1d4>)
 800c566:	4828      	ldr	r0, [pc, #160]	; (800c608 <mem_malloc+0x1d8>)
 800c568:	f008 fbbe 	bl	8014ce8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c56c:	4820      	ldr	r0, [pc, #128]	; (800c5f0 <mem_malloc+0x1c0>)
 800c56e:	f007 fc3c 	bl	8013dea <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c572:	88fa      	ldrh	r2, [r7, #6]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	4413      	add	r3, r2
 800c578:	3308      	adds	r3, #8
 800c57a:	4a20      	ldr	r2, [pc, #128]	; (800c5fc <mem_malloc+0x1cc>)
 800c57c:	6812      	ldr	r2, [r2, #0]
 800c57e:	4293      	cmp	r3, r2
 800c580:	d906      	bls.n	800c590 <mem_malloc+0x160>
 800c582:	4b1f      	ldr	r3, [pc, #124]	; (800c600 <mem_malloc+0x1d0>)
 800c584:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c588:	4920      	ldr	r1, [pc, #128]	; (800c60c <mem_malloc+0x1dc>)
 800c58a:	481f      	ldr	r0, [pc, #124]	; (800c608 <mem_malloc+0x1d8>)
 800c58c:	f008 fbac 	bl	8014ce8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d006      	beq.n	800c5a8 <mem_malloc+0x178>
 800c59a:	4b19      	ldr	r3, [pc, #100]	; (800c600 <mem_malloc+0x1d0>)
 800c59c:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c5a0:	491b      	ldr	r1, [pc, #108]	; (800c610 <mem_malloc+0x1e0>)
 800c5a2:	4819      	ldr	r0, [pc, #100]	; (800c608 <mem_malloc+0x1d8>)
 800c5a4:	f008 fba0 	bl	8014ce8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d006      	beq.n	800c5c0 <mem_malloc+0x190>
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <mem_malloc+0x1d0>)
 800c5b4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c5b8:	4916      	ldr	r1, [pc, #88]	; (800c614 <mem_malloc+0x1e4>)
 800c5ba:	4813      	ldr	r0, [pc, #76]	; (800c608 <mem_malloc+0x1d8>)
 800c5bc:	f008 fb94 	bl	8014ce8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	e010      	b.n	800c5e8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <mem_malloc+0x1c8>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	8bfb      	ldrh	r3, [r7, #30]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c5d2:	8bfa      	ldrh	r2, [r7, #30]
 800c5d4:	88fb      	ldrh	r3, [r7, #6]
 800c5d6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	f4ff af4e 	bcc.w	800c47c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c5e0:	4803      	ldr	r0, [pc, #12]	; (800c5f0 <mem_malloc+0x1c0>)
 800c5e2:	f007 fc02 	bl	8013dea <sys_mutex_unlock>
  return NULL;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3720      	adds	r7, #32
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200043a4 	.word	0x200043a4
 800c5f4:	200043a0 	.word	0x200043a0
 800c5f8:	20004398 	.word	0x20004398
 800c5fc:	2000439c 	.word	0x2000439c
 800c600:	08017254 	.word	0x08017254
 800c604:	080173cc 	.word	0x080173cc
 800c608:	0801729c 	.word	0x0801729c
 800c60c:	080173e8 	.word	0x080173e8
 800c610:	08017418 	.word	0x08017418
 800c614:	08017448 	.word	0x08017448

0800c618 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2200      	movs	r2, #0
 800c626:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	3303      	adds	r3, #3
 800c62e:	f023 0303 	bic.w	r3, r3, #3
 800c632:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c634:	2300      	movs	r3, #0
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e011      	b.n	800c65e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	461a      	mov	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4413      	add	r3, r2
 800c656:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	461a      	mov	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	429a      	cmp	r2, r3
 800c668:	dce7      	bgt.n	800c63a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c66a:	bf00      	nop
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
	...

0800c678 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c67e:	2300      	movs	r3, #0
 800c680:	80fb      	strh	r3, [r7, #6]
 800c682:	e009      	b.n	800c698 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c684:	88fb      	ldrh	r3, [r7, #6]
 800c686:	4a08      	ldr	r2, [pc, #32]	; (800c6a8 <memp_init+0x30>)
 800c688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff ffc3 	bl	800c618 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c692:	88fb      	ldrh	r3, [r7, #6]
 800c694:	3301      	adds	r3, #1
 800c696:	80fb      	strh	r3, [r7, #6]
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	2b0d      	cmp	r3, #13
 800c69c:	d9f2      	bls.n	800c684 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c69e:	bf00      	nop
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08018a74 	.word	0x08018a74

0800c6ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c6b4:	f007 fbc4 	bl	8013e40 <sys_arch_protect>
 800c6b8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d015      	beq.n	800c6f4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d006      	beq.n	800c6ea <do_memp_malloc_pool+0x3e>
 800c6dc:	4b09      	ldr	r3, [pc, #36]	; (800c704 <do_memp_malloc_pool+0x58>)
 800c6de:	f240 1249 	movw	r2, #329	; 0x149
 800c6e2:	4909      	ldr	r1, [pc, #36]	; (800c708 <do_memp_malloc_pool+0x5c>)
 800c6e4:	4809      	ldr	r0, [pc, #36]	; (800c70c <do_memp_malloc_pool+0x60>)
 800c6e6:	f008 faff 	bl	8014ce8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f007 fbb6 	bl	8013e5c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	e003      	b.n	800c6fc <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f007 fbb1 	bl	8013e5c <sys_arch_unprotect>
  return NULL;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	0801746c 	.word	0x0801746c
 800c708:	0801749c 	.word	0x0801749c
 800c70c:	080174c0 	.word	0x080174c0

0800c710 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	4603      	mov	r3, r0
 800c718:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c71a:	79fb      	ldrb	r3, [r7, #7]
 800c71c:	2b0d      	cmp	r3, #13
 800c71e:	d908      	bls.n	800c732 <memp_malloc+0x22>
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <memp_malloc+0x3c>)
 800c722:	f240 1287 	movw	r2, #391	; 0x187
 800c726:	490a      	ldr	r1, [pc, #40]	; (800c750 <memp_malloc+0x40>)
 800c728:	480a      	ldr	r0, [pc, #40]	; (800c754 <memp_malloc+0x44>)
 800c72a:	f008 fadd 	bl	8014ce8 <iprintf>
 800c72e:	2300      	movs	r3, #0
 800c730:	e008      	b.n	800c744 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	4a08      	ldr	r2, [pc, #32]	; (800c758 <memp_malloc+0x48>)
 800c736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff ffb6 	bl	800c6ac <do_memp_malloc_pool>
 800c740:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c742:	68fb      	ldr	r3, [r7, #12]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0801746c 	.word	0x0801746c
 800c750:	080174fc 	.word	0x080174fc
 800c754:	080174c0 	.word	0x080174c0
 800c758:	08018a74 	.word	0x08018a74

0800c75c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	f003 0303 	and.w	r3, r3, #3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d006      	beq.n	800c77e <do_memp_free_pool+0x22>
 800c770:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <do_memp_free_pool+0x4c>)
 800c772:	f240 129d 	movw	r2, #413	; 0x19d
 800c776:	490d      	ldr	r1, [pc, #52]	; (800c7ac <do_memp_free_pool+0x50>)
 800c778:	480d      	ldr	r0, [pc, #52]	; (800c7b0 <do_memp_free_pool+0x54>)
 800c77a:	f008 fab5 	bl	8014ce8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c782:	f007 fb5d 	bl	8013e40 <sys_arch_protect>
 800c786:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	68fa      	ldr	r2, [r7, #12]
 800c798:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c79a:	68b8      	ldr	r0, [r7, #8]
 800c79c:	f007 fb5e 	bl	8013e5c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	0801746c 	.word	0x0801746c
 800c7ac:	0801751c 	.word	0x0801751c
 800c7b0:	080174c0 	.word	0x080174c0

0800c7b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	6039      	str	r1, [r7, #0]
 800c7be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c7c0:	79fb      	ldrb	r3, [r7, #7]
 800c7c2:	2b0d      	cmp	r3, #13
 800c7c4:	d907      	bls.n	800c7d6 <memp_free+0x22>
 800c7c6:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <memp_free+0x44>)
 800c7c8:	f240 12db 	movw	r2, #475	; 0x1db
 800c7cc:	490b      	ldr	r1, [pc, #44]	; (800c7fc <memp_free+0x48>)
 800c7ce:	480c      	ldr	r0, [pc, #48]	; (800c800 <memp_free+0x4c>)
 800c7d0:	f008 fa8a 	bl	8014ce8 <iprintf>
 800c7d4:	e00c      	b.n	800c7f0 <memp_free+0x3c>

  if (mem == NULL) {
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d008      	beq.n	800c7ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	4a09      	ldr	r2, [pc, #36]	; (800c804 <memp_free+0x50>)
 800c7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff ffb8 	bl	800c75c <do_memp_free_pool>
 800c7ec:	e000      	b.n	800c7f0 <memp_free+0x3c>
    return;
 800c7ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0801746c 	.word	0x0801746c
 800c7fc:	0801753c 	.word	0x0801753c
 800c800:	080174c0 	.word	0x080174c0
 800c804:	08018a74 	.word	0x08018a74

0800c808 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c80c:	bf00      	nop
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
	...

0800c818 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d105      	bne.n	800c838 <netif_add+0x20>
 800c82c:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <netif_add+0xa4>)
 800c82e:	22fb      	movs	r2, #251	; 0xfb
 800c830:	4923      	ldr	r1, [pc, #140]	; (800c8c0 <netif_add+0xa8>)
 800c832:	4824      	ldr	r0, [pc, #144]	; (800c8c4 <netif_add+0xac>)
 800c834:	f008 fa58 	bl	8014ce8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3320      	adds	r3, #32
 800c856:	2204      	movs	r2, #4
 800c858:	2100      	movs	r1, #0
 800c85a:	4618      	mov	r0, r3
 800c85c:	f008 fa3c 	bl	8014cd8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2203      	movs	r2, #3
 800c864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c86e:	4b16      	ldr	r3, [pc, #88]	; (800c8c8 <netif_add+0xb0>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	b2d1      	uxtb	r1, r2
 800c876:	4a14      	ldr	r2, [pc, #80]	; (800c8c8 <netif_add+0xb0>)
 800c878:	7011      	strb	r1, [r2, #0]
 800c87a:	68fa      	ldr	r2, [r7, #12]
 800c87c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6a3a      	ldr	r2, [r7, #32]
 800c884:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 f81f 	bl	800c8d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	4798      	blx	r3
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <netif_add+0x8a>
    return NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e007      	b.n	800c8b2 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c8a2:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <netif_add+0xb4>)
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c8aa:	4a08      	ldr	r2, [pc, #32]	; (800c8cc <netif_add+0xb4>)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	08017558 	.word	0x08017558
 800c8c0:	0801758c 	.word	0x0801758c
 800c8c4:	080175a4 	.word	0x080175a4
 800c8c8:	200043e0 	.word	0x200043e0
 800c8cc:	20007d1c 	.word	0x20007d1c

0800c8d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <netif_set_addr+0x1c>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10c      	bne.n	800c906 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f000 f81a 	bl	800c928 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f000 f862 	bl	800c9c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f84a 	bl	800c998 <netif_set_gw>
 800c904:	e00b      	b.n	800c91e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 f859 	bl	800c9c0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c90e:	6839      	ldr	r1, [r7, #0]
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f841 	bl	800c998 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 f805 	bl	800c928 <netif_set_ipaddr>
  }
}
 800c91e:	bf00      	nop
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
	...

0800c928 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <netif_set_ipaddr+0x18>
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	60fb      	str	r3, [r7, #12]
 800c93e:	e002      	b.n	800c946 <netif_set_ipaddr+0x1e>
 800c940:	4b14      	ldr	r3, [pc, #80]	; (800c994 <netif_set_ipaddr+0x6c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3304      	adds	r3, #4
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d01c      	beq.n	800c98c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	3304      	adds	r3, #4
 800c956:	f107 020c 	add.w	r2, r7, #12
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f002 fc69 	bl	800f234 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3304      	adds	r3, #4
 800c966:	f107 020c 	add.w	r2, r7, #12
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f006 ff93 	bl	8013898 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <netif_set_ipaddr+0x56>
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	e000      	b.n	800c980 <netif_set_ipaddr+0x58>
 800c97e:	2300      	movs	r3, #0
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c984:	2101      	movs	r1, #1
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f861 	bl	800ca4e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800c98c:	bf00      	nop
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	080189c4 	.word	0x080189c4

0800c998 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <netif_set_gw+0x16>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	e000      	b.n	800c9b0 <netif_set_gw+0x18>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800c9b4:	bf00      	nop
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <netif_set_netmask+0x16>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	e000      	b.n	800c9d8 <netif_set_netmask+0x18>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c9f0:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <netif_set_default+0x1c>)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	20007d20 	.word	0x20007d20

0800ca08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d113      	bne.n	800ca46 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca24:	f043 0301 	orr.w	r3, r3, #1
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ca3e:	2103      	movs	r1, #3
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f804 	bl	800ca4e <netif_issue_reports>
    }
  }
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	460b      	mov	r3, r1
 800ca58:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca5a:	78fb      	ldrb	r3, [r7, #3]
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d011      	beq.n	800ca88 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3304      	adds	r3, #4
 800ca68:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00c      	beq.n	800ca88 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca74:	f003 0308 	and.w	r3, r3, #8
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d005      	beq.n	800ca88 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7fd ffc4 	bl	800aa10 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d012      	beq.n	800cacc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caac:	f023 0301 	bic.w	r3, r3, #1
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cabe:	f003 0308 	and.w	r3, r3, #8
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d002      	beq.n	800cacc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7fd fb64 	bl	800a194 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cada:	f007 f9b1 	bl	8013e40 <sys_arch_protect>
 800cade:	6038      	str	r0, [r7, #0]
 800cae0:	4b0f      	ldr	r3, [pc, #60]	; (800cb20 <pbuf_free_ooseq+0x4c>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	f007 f9b8 	bl	8013e5c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800caec:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <pbuf_free_ooseq+0x50>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	607b      	str	r3, [r7, #4]
 800caf2:	e00f      	b.n	800cb14 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d008      	beq.n	800cb0e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb00:	4618      	mov	r0, r3
 800cb02:	f002 f812 	bl	800eb2a <tcp_segs_free>
      pcb->ooseq = NULL;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800cb0c:	e005      	b.n	800cb1a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	607b      	str	r3, [r7, #4]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1ec      	bne.n	800caf4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20007d24 	.word	0x20007d24
 800cb24:	20007d2c 	.word	0x20007d2c

0800cb28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cb30:	f7ff ffd0 	bl	800cad4 <pbuf_free_ooseq>
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb42:	f007 f97d 	bl	8013e40 <sys_arch_protect>
 800cb46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <pbuf_pool_is_empty+0x50>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb4e:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <pbuf_pool_is_empty+0x50>)
 800cb50:	2201      	movs	r2, #1
 800cb52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f007 f981 	bl	8013e5c <sys_arch_unprotect>

  if (!queued) {
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d110      	bne.n	800cb82 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb60:	2200      	movs	r2, #0
 800cb62:	2100      	movs	r1, #0
 800cb64:	480a      	ldr	r0, [pc, #40]	; (800cb90 <pbuf_pool_is_empty+0x54>)
 800cb66:	f7fa fd97 	bl	8007698 <tcpip_callback_with_block>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d008      	beq.n	800cb82 <pbuf_pool_is_empty+0x46>
 800cb70:	f007 f966 	bl	8013e40 <sys_arch_protect>
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <pbuf_pool_is_empty+0x50>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f007 f96d 	bl	8013e5c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20007d24 	.word	0x20007d24
 800cb90:	0800cb29 	.word	0x0800cb29

0800cb94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	71fb      	strb	r3, [r7, #7]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	80bb      	strh	r3, [r7, #4]
 800cba2:	4613      	mov	r3, r2
 800cba4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d81c      	bhi.n	800cbe6 <pbuf_alloc+0x52>
 800cbac:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <pbuf_alloc+0x20>)
 800cbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb2:	bf00      	nop
 800cbb4:	0800cbc9 	.word	0x0800cbc9
 800cbb8:	0800cbcf 	.word	0x0800cbcf
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbdb 	.word	0x0800cbdb
 800cbc4:	0800cbe1 	.word	0x0800cbe1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cbc8:	2336      	movs	r3, #54	; 0x36
 800cbca:	82fb      	strh	r3, [r7, #22]
    break;
 800cbcc:	e014      	b.n	800cbf8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cbce:	2322      	movs	r3, #34	; 0x22
 800cbd0:	82fb      	strh	r3, [r7, #22]
    break;
 800cbd2:	e011      	b.n	800cbf8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cbd4:	230e      	movs	r3, #14
 800cbd6:	82fb      	strh	r3, [r7, #22]
    break;
 800cbd8:	e00e      	b.n	800cbf8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	82fb      	strh	r3, [r7, #22]
    break;
 800cbde:	e00b      	b.n	800cbf8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	82fb      	strh	r3, [r7, #22]
    break;
 800cbe4:	e008      	b.n	800cbf8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800cbe6:	4ba5      	ldr	r3, [pc, #660]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cbe8:	f44f 728b 	mov.w	r2, #278	; 0x116
 800cbec:	49a4      	ldr	r1, [pc, #656]	; (800ce80 <pbuf_alloc+0x2ec>)
 800cbee:	48a5      	ldr	r0, [pc, #660]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cbf0:	f008 f87a 	bl	8014ce8 <iprintf>
    return NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e15d      	b.n	800ceb4 <pbuf_alloc+0x320>
  }

  switch (type) {
 800cbf8:	79bb      	ldrb	r3, [r7, #6]
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	f200 8134 	bhi.w	800ce68 <pbuf_alloc+0x2d4>
 800cc00:	a201      	add	r2, pc, #4	; (adr r2, 800cc08 <pbuf_alloc+0x74>)
 800cc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc06:	bf00      	nop
 800cc08:	0800cda9 	.word	0x0800cda9
 800cc0c:	0800ce35 	.word	0x0800ce35
 800cc10:	0800ce35 	.word	0x0800ce35
 800cc14:	0800cc19 	.word	0x0800cc19
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc18:	200d      	movs	r0, #13
 800cc1a:	f7ff fd79 	bl	800c710 <memp_malloc>
 800cc1e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800cc26:	f7ff ff89 	bl	800cb3c <pbuf_pool_is_empty>
      return NULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e142      	b.n	800ceb4 <pbuf_alloc+0x320>
    }
    p->type = type;
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	79ba      	ldrb	r2, [r7, #6]
 800cc32:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800cc3a:	8afb      	ldrh	r3, [r7, #22]
 800cc3c:	3310      	adds	r3, #16
 800cc3e:	69fa      	ldr	r2, [r7, #28]
 800cc40:	4413      	add	r3, r2
 800cc42:	3303      	adds	r3, #3
 800cc44:	f023 0303 	bic.w	r3, r3, #3
 800cc48:	461a      	mov	r2, r3
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	f003 0303 	and.w	r3, r3, #3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d006      	beq.n	800cc68 <pbuf_alloc+0xd4>
 800cc5a:	4b88      	ldr	r3, [pc, #544]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cc5c:	f240 1229 	movw	r2, #297	; 0x129
 800cc60:	4989      	ldr	r1, [pc, #548]	; (800ce88 <pbuf_alloc+0x2f4>)
 800cc62:	4888      	ldr	r0, [pc, #544]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cc64:	f008 f840 	bl	8014ce8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	88ba      	ldrh	r2, [r7, #4]
 800cc6c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800cc6e:	8afb      	ldrh	r3, [r7, #22]
 800cc70:	3303      	adds	r3, #3
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800cc7a:	88bb      	ldrh	r3, [r7, #4]
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	bf28      	it	cs
 800cc80:	4613      	movcs	r3, r2
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	69fa      	ldr	r2, [r7, #28]
 800cc8e:	8952      	ldrh	r2, [r2, #10]
 800cc90:	441a      	add	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d906      	bls.n	800ccaa <pbuf_alloc+0x116>
 800cc9c:	4b77      	ldr	r3, [pc, #476]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cc9e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800cca2:	497a      	ldr	r1, [pc, #488]	; (800ce8c <pbuf_alloc+0x2f8>)
 800cca4:	4877      	ldr	r0, [pc, #476]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cca6:	f008 f81f 	bl	8014ce8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ccaa:	8afb      	ldrh	r3, [r7, #22]
 800ccac:	3303      	adds	r3, #3
 800ccae:	f023 0303 	bic.w	r3, r3, #3
 800ccb2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ccb6:	d106      	bne.n	800ccc6 <pbuf_alloc+0x132>
 800ccb8:	4b70      	ldr	r3, [pc, #448]	; (800ce7c <pbuf_alloc+0x2e8>)
 800ccba:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ccbe:	4974      	ldr	r1, [pc, #464]	; (800ce90 <pbuf_alloc+0x2fc>)
 800ccc0:	4870      	ldr	r0, [pc, #448]	; (800ce84 <pbuf_alloc+0x2f0>)
 800ccc2:	f008 f811 	bl	8014ce8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800ccd0:	88bb      	ldrh	r3, [r7, #4]
 800ccd2:	69fa      	ldr	r2, [r7, #28]
 800ccd4:	8952      	ldrh	r2, [r2, #10]
 800ccd6:	1a9b      	subs	r3, r3, r2
 800ccd8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800ccda:	e061      	b.n	800cda0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ccdc:	200d      	movs	r0, #13
 800ccde:	f7ff fd17 	bl	800c710 <memp_malloc>
 800cce2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d106      	bne.n	800ccf8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800ccea:	f7ff ff27 	bl	800cb3c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800ccee:	69f8      	ldr	r0, [r7, #28]
 800ccf0:	f000 fac2 	bl	800d278 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e0dd      	b.n	800ceb4 <pbuf_alloc+0x320>
      }
      q->type = type;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	79ba      	ldrb	r2, [r7, #6]
 800ccfc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cd16:	4293      	cmp	r3, r2
 800cd18:	dd06      	ble.n	800cd28 <pbuf_alloc+0x194>
 800cd1a:	4b58      	ldr	r3, [pc, #352]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cd1c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800cd20:	495c      	ldr	r1, [pc, #368]	; (800ce94 <pbuf_alloc+0x300>)
 800cd22:	4858      	ldr	r0, [pc, #352]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cd24:	f007 ffe0 	bl	8014ce8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd38:	bf28      	it	cs
 800cd3a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f103 0210 	add.w	r2, r3, #16
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	f003 0303 	and.w	r3, r3, #3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d006      	beq.n	800cd68 <pbuf_alloc+0x1d4>
 800cd5a:	4b48      	ldr	r3, [pc, #288]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cd5c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800cd60:	494d      	ldr	r1, [pc, #308]	; (800ce98 <pbuf_alloc+0x304>)
 800cd62:	4848      	ldr	r0, [pc, #288]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cd64:	f007 ffc0 	bl	8014ce8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	8952      	ldrh	r2, [r2, #10]
 800cd70:	441a      	add	r2, r3
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d906      	bls.n	800cd8a <pbuf_alloc+0x1f6>
 800cd7c:	4b3f      	ldr	r3, [pc, #252]	; (800ce7c <pbuf_alloc+0x2e8>)
 800cd7e:	f240 1255 	movw	r2, #341	; 0x155
 800cd82:	4942      	ldr	r1, [pc, #264]	; (800ce8c <pbuf_alloc+0x2f8>)
 800cd84:	483f      	ldr	r0, [pc, #252]	; (800ce84 <pbuf_alloc+0x2f0>)
 800cd86:	f007 ffaf 	bl	8014ce8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	895b      	ldrh	r3, [r3, #10]
 800cd94:	461a      	mov	r2, r3
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	1a9b      	subs	r3, r3, r2
 800cd9a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	dc9a      	bgt.n	800ccdc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800cda6:	e07e      	b.n	800cea6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800cda8:	8afb      	ldrh	r3, [r7, #22]
 800cdaa:	3313      	adds	r3, #19
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f023 0303 	bic.w	r3, r3, #3
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	88bb      	ldrh	r3, [r7, #4]
 800cdb6:	3303      	adds	r3, #3
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f023 0303 	bic.w	r3, r3, #3
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	4413      	add	r3, r2
 800cdc2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800cdc4:	897a      	ldrh	r2, [r7, #10]
 800cdc6:	88bb      	ldrh	r3, [r7, #4]
 800cdc8:	3303      	adds	r3, #3
 800cdca:	f023 0303 	bic.w	r3, r3, #3
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d201      	bcs.n	800cdd6 <pbuf_alloc+0x242>
        return NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e06e      	b.n	800ceb4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800cdd6:	897b      	ldrh	r3, [r7, #10]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fb29 	bl	800c430 <mem_malloc>
 800cdde:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <pbuf_alloc+0x256>
      return NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	e064      	b.n	800ceb4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800cdea:	8afb      	ldrh	r3, [r7, #22]
 800cdec:	3310      	adds	r3, #16
 800cdee:	69fa      	ldr	r2, [r7, #28]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	3303      	adds	r3, #3
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	88ba      	ldrh	r2, [r7, #4]
 800ce02:	811a      	strh	r2, [r3, #8]
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	891a      	ldrh	r2, [r3, #8]
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	79ba      	ldrb	r2, [r7, #6]
 800ce16:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	f003 0303 	and.w	r3, r3, #3
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d03f      	beq.n	800cea4 <pbuf_alloc+0x310>
 800ce24:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <pbuf_alloc+0x2e8>)
 800ce26:	f240 1277 	movw	r2, #375	; 0x177
 800ce2a:	491c      	ldr	r1, [pc, #112]	; (800ce9c <pbuf_alloc+0x308>)
 800ce2c:	4815      	ldr	r0, [pc, #84]	; (800ce84 <pbuf_alloc+0x2f0>)
 800ce2e:	f007 ff5b 	bl	8014ce8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ce32:	e037      	b.n	800cea4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce34:	200c      	movs	r0, #12
 800ce36:	f7ff fc6b 	bl	800c710 <memp_malloc>
 800ce3a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e036      	b.n	800ceb4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	88ba      	ldrh	r2, [r7, #4]
 800ce50:	811a      	strh	r2, [r3, #8]
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	891a      	ldrh	r2, [r3, #8]
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	79ba      	ldrb	r2, [r7, #6]
 800ce64:	731a      	strb	r2, [r3, #12]
    break;
 800ce66:	e01e      	b.n	800cea6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce68:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <pbuf_alloc+0x2e8>)
 800ce6a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ce6e:	490c      	ldr	r1, [pc, #48]	; (800cea0 <pbuf_alloc+0x30c>)
 800ce70:	4804      	ldr	r0, [pc, #16]	; (800ce84 <pbuf_alloc+0x2f0>)
 800ce72:	f007 ff39 	bl	8014ce8 <iprintf>
    return NULL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e01c      	b.n	800ceb4 <pbuf_alloc+0x320>
 800ce7a:	bf00      	nop
 800ce7c:	080175cc 	.word	0x080175cc
 800ce80:	080175fc 	.word	0x080175fc
 800ce84:	08017618 	.word	0x08017618
 800ce88:	08017640 	.word	0x08017640
 800ce8c:	08017670 	.word	0x08017670
 800ce90:	080176a4 	.word	0x080176a4
 800ce94:	080176d8 	.word	0x080176d8
 800ce98:	080176ec 	.word	0x080176ec
 800ce9c:	0801771c 	.word	0x0801771c
 800cea0:	08017748 	.word	0x08017748
    break;
 800cea4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3720      	adds	r7, #32
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	603b      	str	r3, [r7, #0]
 800cec4:	4603      	mov	r3, r0
 800cec6:	71fb      	strb	r3, [r7, #7]
 800cec8:	460b      	mov	r3, r1
 800ceca:	80bb      	strh	r3, [r7, #4]
 800cecc:	4613      	mov	r3, r2
 800cece:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	d81b      	bhi.n	800cf0e <pbuf_alloced_custom+0x52>
 800ced6:	a201      	add	r2, pc, #4	; (adr r2, 800cedc <pbuf_alloced_custom+0x20>)
 800ced8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cedc:	0800cef1 	.word	0x0800cef1
 800cee0:	0800cef7 	.word	0x0800cef7
 800cee4:	0800cefd 	.word	0x0800cefd
 800cee8:	0800cf03 	.word	0x0800cf03
 800ceec:	0800cf09 	.word	0x0800cf09
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cef0:	2336      	movs	r3, #54	; 0x36
 800cef2:	81fb      	strh	r3, [r7, #14]
    break;
 800cef4:	e014      	b.n	800cf20 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cef6:	2322      	movs	r3, #34	; 0x22
 800cef8:	81fb      	strh	r3, [r7, #14]
    break;
 800cefa:	e011      	b.n	800cf20 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cefc:	230e      	movs	r3, #14
 800cefe:	81fb      	strh	r3, [r7, #14]
    break;
 800cf00:	e00e      	b.n	800cf20 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cf02:	2300      	movs	r3, #0
 800cf04:	81fb      	strh	r3, [r7, #14]
    break;
 800cf06:	e00b      	b.n	800cf20 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	81fb      	strh	r3, [r7, #14]
    break;
 800cf0c:	e008      	b.n	800cf20 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800cf0e:	4b1d      	ldr	r3, [pc, #116]	; (800cf84 <pbuf_alloced_custom+0xc8>)
 800cf10:	f240 12c5 	movw	r2, #453	; 0x1c5
 800cf14:	491c      	ldr	r1, [pc, #112]	; (800cf88 <pbuf_alloced_custom+0xcc>)
 800cf16:	481d      	ldr	r0, [pc, #116]	; (800cf8c <pbuf_alloced_custom+0xd0>)
 800cf18:	f007 fee6 	bl	8014ce8 <iprintf>
    return NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e02d      	b.n	800cf7c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf20:	89fb      	ldrh	r3, [r7, #14]
 800cf22:	3303      	adds	r3, #3
 800cf24:	f023 0203 	bic.w	r2, r3, #3
 800cf28:	88bb      	ldrh	r3, [r7, #4]
 800cf2a:	441a      	add	r2, r3
 800cf2c:	8bbb      	ldrh	r3, [r7, #28]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d901      	bls.n	800cf36 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e022      	b.n	800cf7c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d008      	beq.n	800cf54 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf42:	89fb      	ldrh	r3, [r7, #14]
 800cf44:	3303      	adds	r3, #3
 800cf46:	f023 0303 	bic.w	r3, r3, #3
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	441a      	add	r2, r3
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	605a      	str	r2, [r3, #4]
 800cf52:	e002      	b.n	800cf5a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2200      	movs	r2, #0
 800cf58:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	88ba      	ldrh	r2, [r7, #4]
 800cf64:	811a      	strh	r2, [r3, #8]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	891a      	ldrh	r2, [r3, #8]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	79ba      	ldrb	r2, [r7, #6]
 800cf72:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2201      	movs	r2, #1
 800cf78:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800cf7a:	683b      	ldr	r3, [r7, #0]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	080175cc 	.word	0x080175cc
 800cf88:	08017764 	.word	0x08017764
 800cf8c:	08017618 	.word	0x08017618

0800cf90 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <pbuf_realloc+0x20>
 800cfa2:	4b4b      	ldr	r3, [pc, #300]	; (800d0d0 <pbuf_realloc+0x140>)
 800cfa4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800cfa8:	494a      	ldr	r1, [pc, #296]	; (800d0d4 <pbuf_realloc+0x144>)
 800cfaa:	484b      	ldr	r0, [pc, #300]	; (800d0d8 <pbuf_realloc+0x148>)
 800cfac:	f007 fe9c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7b1b      	ldrb	r3, [r3, #12]
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d012      	beq.n	800cfde <pbuf_realloc+0x4e>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	7b1b      	ldrb	r3, [r3, #12]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d00e      	beq.n	800cfde <pbuf_realloc+0x4e>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7b1b      	ldrb	r3, [r3, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00a      	beq.n	800cfde <pbuf_realloc+0x4e>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7b1b      	ldrb	r3, [r3, #12]
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d006      	beq.n	800cfde <pbuf_realloc+0x4e>
 800cfd0:	4b3f      	ldr	r3, [pc, #252]	; (800d0d0 <pbuf_realloc+0x140>)
 800cfd2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800cfd6:	4941      	ldr	r1, [pc, #260]	; (800d0dc <pbuf_realloc+0x14c>)
 800cfd8:	483f      	ldr	r0, [pc, #252]	; (800d0d8 <pbuf_realloc+0x148>)
 800cfda:	f007 fe85 	bl	8014ce8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	891b      	ldrh	r3, [r3, #8]
 800cfe2:	887a      	ldrh	r2, [r7, #2]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d26f      	bcs.n	800d0c8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800cfe8:	887b      	ldrh	r3, [r7, #2]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	8912      	ldrh	r2, [r2, #8]
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cff2:	887b      	ldrh	r3, [r7, #2]
 800cff4:	827b      	strh	r3, [r7, #18]
  q = p;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cffa:	e025      	b.n	800d048 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	895b      	ldrh	r3, [r3, #10]
 800d000:	8a7a      	ldrh	r2, [r7, #18]
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d00c:	4293      	cmp	r3, r2
 800d00e:	dd06      	ble.n	800d01e <pbuf_realloc+0x8e>
 800d010:	4b2f      	ldr	r3, [pc, #188]	; (800d0d0 <pbuf_realloc+0x140>)
 800d012:	f240 220b 	movw	r2, #523	; 0x20b
 800d016:	4932      	ldr	r1, [pc, #200]	; (800d0e0 <pbuf_realloc+0x150>)
 800d018:	482f      	ldr	r0, [pc, #188]	; (800d0d8 <pbuf_realloc+0x148>)
 800d01a:	f007 fe65 	bl	8014ce8 <iprintf>
    q->tot_len += (u16_t)grow;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	891a      	ldrh	r2, [r3, #8]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	b29b      	uxth	r3, r3
 800d026:	4413      	add	r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <pbuf_realloc+0xb8>
 800d03a:	4b25      	ldr	r3, [pc, #148]	; (800d0d0 <pbuf_realloc+0x140>)
 800d03c:	f240 220f 	movw	r2, #527	; 0x20f
 800d040:	4928      	ldr	r1, [pc, #160]	; (800d0e4 <pbuf_realloc+0x154>)
 800d042:	4825      	ldr	r0, [pc, #148]	; (800d0d8 <pbuf_realloc+0x148>)
 800d044:	f007 fe50 	bl	8014ce8 <iprintf>
  while (rem_len > q->len) {
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	8a7a      	ldrh	r2, [r7, #18]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d8d4      	bhi.n	800cffc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	7b1b      	ldrb	r3, [r3, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d122      	bne.n	800d0a0 <pbuf_realloc+0x110>
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	895b      	ldrh	r3, [r3, #10]
 800d05e:	8a7a      	ldrh	r2, [r7, #18]
 800d060:	429a      	cmp	r2, r3
 800d062:	d01d      	beq.n	800d0a0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	7b5b      	ldrb	r3, [r3, #13]
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d117      	bne.n	800d0a0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	461a      	mov	r2, r3
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	8a7b      	ldrh	r3, [r7, #18]
 800d07e:	4413      	add	r3, r2
 800d080:	b29b      	uxth	r3, r3
 800d082:	4619      	mov	r1, r3
 800d084:	6978      	ldr	r0, [r7, #20]
 800d086:	f7ff f8e9 	bl	800c25c <mem_trim>
 800d08a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <pbuf_realloc+0x110>
 800d092:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <pbuf_realloc+0x140>)
 800d094:	f240 221d 	movw	r2, #541	; 0x21d
 800d098:	4913      	ldr	r1, [pc, #76]	; (800d0e8 <pbuf_realloc+0x158>)
 800d09a:	480f      	ldr	r0, [pc, #60]	; (800d0d8 <pbuf_realloc+0x148>)
 800d09c:	f007 fe24 	bl	8014ce8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	8a7a      	ldrh	r2, [r7, #18]
 800d0a4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	895a      	ldrh	r2, [r3, #10]
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d004      	beq.n	800d0c0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f000 f8dc 	bl	800d278 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	601a      	str	r2, [r3, #0]
 800d0c6:	e000      	b.n	800d0ca <pbuf_realloc+0x13a>
    return;
 800d0c8:	bf00      	nop

}
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	080175cc 	.word	0x080175cc
 800d0d4:	08017788 	.word	0x08017788
 800d0d8:	08017618 	.word	0x08017618
 800d0dc:	080177a0 	.word	0x080177a0
 800d0e0:	080177bc 	.word	0x080177bc
 800d0e4:	080177d0 	.word	0x080177d0
 800d0e8:	080177e8 	.word	0x080177e8

0800d0ec <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	807b      	strh	r3, [r7, #2]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <pbuf_header_impl+0x24>
 800d102:	4b46      	ldr	r3, [pc, #280]	; (800d21c <pbuf_header_impl+0x130>)
 800d104:	f240 223f 	movw	r2, #575	; 0x23f
 800d108:	4945      	ldr	r1, [pc, #276]	; (800d220 <pbuf_header_impl+0x134>)
 800d10a:	4846      	ldr	r0, [pc, #280]	; (800d224 <pbuf_header_impl+0x138>)
 800d10c:	f007 fdec 	bl	8014ce8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <pbuf_header_impl+0x32>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <pbuf_header_impl+0x36>
    return 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	e078      	b.n	800d214 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d122:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d126:	2b00      	cmp	r3, #0
 800d128:	da10      	bge.n	800d14c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d12a:	887b      	ldrh	r3, [r7, #2]
 800d12c:	425b      	negs	r3, r3
 800d12e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	895b      	ldrh	r3, [r3, #10]
 800d134:	89fa      	ldrh	r2, [r7, #14]
 800d136:	429a      	cmp	r2, r3
 800d138:	d90a      	bls.n	800d150 <pbuf_header_impl+0x64>
 800d13a:	4b38      	ldr	r3, [pc, #224]	; (800d21c <pbuf_header_impl+0x130>)
 800d13c:	f240 2247 	movw	r2, #583	; 0x247
 800d140:	4939      	ldr	r1, [pc, #228]	; (800d228 <pbuf_header_impl+0x13c>)
 800d142:	4838      	ldr	r0, [pc, #224]	; (800d224 <pbuf_header_impl+0x138>)
 800d144:	f007 fdd0 	bl	8014ce8 <iprintf>
 800d148:	2301      	movs	r3, #1
 800d14a:	e063      	b.n	800d214 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d14c:	887b      	ldrh	r3, [r7, #2]
 800d14e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7b1b      	ldrb	r3, [r3, #12]
 800d154:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d15c:	89bb      	ldrh	r3, [r7, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <pbuf_header_impl+0x7c>
 800d162:	89bb      	ldrh	r3, [r7, #12]
 800d164:	2b03      	cmp	r3, #3
 800d166:	d112      	bne.n	800d18e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d170:	425b      	negs	r3, r3
 800d172:	441a      	add	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3310      	adds	r3, #16
 800d180:	429a      	cmp	r2, r3
 800d182:	d238      	bcs.n	800d1f6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e042      	b.n	800d214 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d18e:	89bb      	ldrh	r3, [r7, #12]
 800d190:	2b02      	cmp	r3, #2
 800d192:	d002      	beq.n	800d19a <pbuf_header_impl+0xae>
 800d194:	89bb      	ldrh	r3, [r7, #12]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d124      	bne.n	800d1e4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d19a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	da0d      	bge.n	800d1be <pbuf_header_impl+0xd2>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	895b      	ldrh	r3, [r3, #10]
 800d1a6:	89fa      	ldrh	r2, [r7, #14]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d808      	bhi.n	800d1be <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1b4:	425b      	negs	r3, r3
 800d1b6:	441a      	add	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	605a      	str	r2, [r3, #4]
 800d1bc:	e011      	b.n	800d1e2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d1be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	dd0b      	ble.n	800d1de <pbuf_header_impl+0xf2>
 800d1c6:	787b      	ldrb	r3, [r7, #1]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d008      	beq.n	800d1de <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1d4:	425b      	negs	r3, r3
 800d1d6:	441a      	add	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	605a      	str	r2, [r3, #4]
 800d1dc:	e001      	b.n	800d1e2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e018      	b.n	800d214 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d1e2:	e008      	b.n	800d1f6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d1e4:	4b0d      	ldr	r3, [pc, #52]	; (800d21c <pbuf_header_impl+0x130>)
 800d1e6:	f240 2277 	movw	r2, #631	; 0x277
 800d1ea:	4910      	ldr	r1, [pc, #64]	; (800d22c <pbuf_header_impl+0x140>)
 800d1ec:	480d      	ldr	r0, [pc, #52]	; (800d224 <pbuf_header_impl+0x138>)
 800d1ee:	f007 fd7b 	bl	8014ce8 <iprintf>
    return 1;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e00e      	b.n	800d214 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	895a      	ldrh	r2, [r3, #10]
 800d1fa:	887b      	ldrh	r3, [r7, #2]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	891a      	ldrh	r2, [r3, #8]
 800d208:	887b      	ldrh	r3, [r7, #2]
 800d20a:	4413      	add	r3, r2
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	080175cc 	.word	0x080175cc
 800d220:	08017804 	.word	0x08017804
 800d224:	08017618 	.word	0x08017618
 800d228:	08017810 	.word	0x08017810
 800d22c:	08017830 	.word	0x08017830

0800d230 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b082      	sub	sp, #8
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d23c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d240:	2200      	movs	r2, #0
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ff51 	bl	800d0ec <pbuf_header_impl>
 800d24a:	4603      	mov	r3, r0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d264:	2201      	movs	r2, #1
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff ff3f 	bl	800d0ec <pbuf_header_impl>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <pbuf_free+0x22>
 800d28c:	4b41      	ldr	r3, [pc, #260]	; (800d394 <pbuf_free+0x11c>)
 800d28e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d292:	4941      	ldr	r1, [pc, #260]	; (800d398 <pbuf_free+0x120>)
 800d294:	4841      	ldr	r0, [pc, #260]	; (800d39c <pbuf_free+0x124>)
 800d296:	f007 fd27 	bl	8014ce8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	e076      	b.n	800d38c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	7b1b      	ldrb	r3, [r3, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d012      	beq.n	800d2cc <pbuf_free+0x54>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7b1b      	ldrb	r3, [r3, #12]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d00e      	beq.n	800d2cc <pbuf_free+0x54>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	7b1b      	ldrb	r3, [r3, #12]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d00a      	beq.n	800d2cc <pbuf_free+0x54>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7b1b      	ldrb	r3, [r3, #12]
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d006      	beq.n	800d2cc <pbuf_free+0x54>
 800d2be:	4b35      	ldr	r3, [pc, #212]	; (800d394 <pbuf_free+0x11c>)
 800d2c0:	f240 22de 	movw	r2, #734	; 0x2de
 800d2c4:	4936      	ldr	r1, [pc, #216]	; (800d3a0 <pbuf_free+0x128>)
 800d2c6:	4835      	ldr	r0, [pc, #212]	; (800d39c <pbuf_free+0x124>)
 800d2c8:	f007 fd0e 	bl	8014ce8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d2d0:	e058      	b.n	800d384 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d2d2:	f006 fdb5 	bl	8013e40 <sys_arch_protect>
 800d2d6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	89db      	ldrh	r3, [r3, #14]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d106      	bne.n	800d2ee <pbuf_free+0x76>
 800d2e0:	4b2c      	ldr	r3, [pc, #176]	; (800d394 <pbuf_free+0x11c>)
 800d2e2:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d2e6:	492f      	ldr	r1, [pc, #188]	; (800d3a4 <pbuf_free+0x12c>)
 800d2e8:	482c      	ldr	r0, [pc, #176]	; (800d39c <pbuf_free+0x124>)
 800d2ea:	f007 fcfd 	bl	8014ce8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	89db      	ldrh	r3, [r3, #14]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	81da      	strh	r2, [r3, #14]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	89db      	ldrh	r3, [r3, #14]
 800d2fe:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d300:	69b8      	ldr	r0, [r7, #24]
 800d302:	f006 fdab 	bl	8013e5c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d306:	8afb      	ldrh	r3, [r7, #22]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d139      	bne.n	800d380 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7b1b      	ldrb	r3, [r3, #12]
 800d316:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7b5b      	ldrb	r3, [r3, #13]
 800d31c:	f003 0302 	and.w	r3, r3, #2
 800d320:	2b00      	cmp	r3, #0
 800d322:	d011      	beq.n	800d348 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <pbuf_free+0xc6>
 800d330:	4b18      	ldr	r3, [pc, #96]	; (800d394 <pbuf_free+0x11c>)
 800d332:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d336:	491c      	ldr	r1, [pc, #112]	; (800d3a8 <pbuf_free+0x130>)
 800d338:	4818      	ldr	r0, [pc, #96]	; (800d39c <pbuf_free+0x124>)
 800d33a:	f007 fcd5 	bl	8014ce8 <iprintf>
        pc->custom_free_function(p);
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	4798      	blx	r3
 800d346:	e015      	b.n	800d374 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d348:	89fb      	ldrh	r3, [r7, #14]
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d104      	bne.n	800d358 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d34e:	6879      	ldr	r1, [r7, #4]
 800d350:	200d      	movs	r0, #13
 800d352:	f7ff fa2f 	bl	800c7b4 <memp_free>
 800d356:	e00d      	b.n	800d374 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d358:	89fb      	ldrh	r3, [r7, #14]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d002      	beq.n	800d364 <pbuf_free+0xec>
 800d35e:	89fb      	ldrh	r3, [r7, #14]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d104      	bne.n	800d36e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	200c      	movs	r0, #12
 800d368:	f7ff fa24 	bl	800c7b4 <memp_free>
 800d36c:	e002      	b.n	800d374 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7fe ff06 	bl	800c180 <mem_free>
        }
      }
      count++;
 800d374:	7ffb      	ldrb	r3, [r7, #31]
 800d376:	3301      	adds	r3, #1
 800d378:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	607b      	str	r3, [r7, #4]
 800d37e:	e001      	b.n	800d384 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1a3      	bne.n	800d2d2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d38a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	080175cc 	.word	0x080175cc
 800d398:	08017804 	.word	0x08017804
 800d39c:	08017618 	.word	0x08017618
 800d3a0:	08017840 	.word	0x08017840
 800d3a4:	08017858 	.word	0x08017858
 800d3a8:	08017870 	.word	0x08017870

0800d3ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d3b8:	e005      	b.n	800d3c6 <pbuf_clen+0x1a>
    ++len;
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1f6      	bne.n	800d3ba <pbuf_clen+0xe>
  }
  return len;
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3714      	adds	r7, #20
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
	...

0800d3dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d016      	beq.n	800d418 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d3ea:	f006 fd29 	bl	8013e40 <sys_arch_protect>
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	89db      	ldrh	r3, [r3, #14]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	81da      	strh	r2, [r3, #14]
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f006 fd2d 	bl	8013e5c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	89db      	ldrh	r3, [r3, #14]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <pbuf_ref+0x3c>
 800d40a:	4b05      	ldr	r3, [pc, #20]	; (800d420 <pbuf_ref+0x44>)
 800d40c:	f240 3239 	movw	r2, #825	; 0x339
 800d410:	4904      	ldr	r1, [pc, #16]	; (800d424 <pbuf_ref+0x48>)
 800d412:	4805      	ldr	r0, [pc, #20]	; (800d428 <pbuf_ref+0x4c>)
 800d414:	f007 fc68 	bl	8014ce8 <iprintf>
  }
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	080175cc 	.word	0x080175cc
 800d424:	08017894 	.word	0x08017894
 800d428:	08017618 	.word	0x08017618

0800d42c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <pbuf_cat+0x16>
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d107      	bne.n	800d452 <pbuf_cat+0x26>
 800d442:	4b20      	ldr	r3, [pc, #128]	; (800d4c4 <pbuf_cat+0x98>)
 800d444:	f240 324d 	movw	r2, #845	; 0x34d
 800d448:	491f      	ldr	r1, [pc, #124]	; (800d4c8 <pbuf_cat+0x9c>)
 800d44a:	4820      	ldr	r0, [pc, #128]	; (800d4cc <pbuf_cat+0xa0>)
 800d44c:	f007 fc4c 	bl	8014ce8 <iprintf>
 800d450:	e034      	b.n	800d4bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	e00a      	b.n	800d46e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	891a      	ldrh	r2, [r3, #8]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	891b      	ldrh	r3, [r3, #8]
 800d460:	4413      	add	r3, r2
 800d462:	b29a      	uxth	r2, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1f0      	bne.n	800d458 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	891a      	ldrh	r2, [r3, #8]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d006      	beq.n	800d490 <pbuf_cat+0x64>
 800d482:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <pbuf_cat+0x98>)
 800d484:	f240 3255 	movw	r2, #853	; 0x355
 800d488:	4911      	ldr	r1, [pc, #68]	; (800d4d0 <pbuf_cat+0xa4>)
 800d48a:	4810      	ldr	r0, [pc, #64]	; (800d4cc <pbuf_cat+0xa0>)
 800d48c:	f007 fc2c 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d006      	beq.n	800d4a6 <pbuf_cat+0x7a>
 800d498:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <pbuf_cat+0x98>)
 800d49a:	f240 3256 	movw	r2, #854	; 0x356
 800d49e:	490d      	ldr	r1, [pc, #52]	; (800d4d4 <pbuf_cat+0xa8>)
 800d4a0:	480a      	ldr	r0, [pc, #40]	; (800d4cc <pbuf_cat+0xa0>)
 800d4a2:	f007 fc21 	bl	8014ce8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	891a      	ldrh	r2, [r3, #8]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	891b      	ldrh	r3, [r3, #8]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	080175cc 	.word	0x080175cc
 800d4c8:	080178a8 	.word	0x080178a8
 800d4cc:	08017618 	.word	0x08017618
 800d4d0:	080178e0 	.word	0x080178e0
 800d4d4:	08017910 	.word	0x08017910

0800d4d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff ffa1 	bl	800d42c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d4ea:	6838      	ldr	r0, [r7, #0]
 800d4ec:	f7ff ff76 	bl	800d3dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d502:	2300      	movs	r3, #0
 800d504:	81fb      	strh	r3, [r7, #14]
 800d506:	2300      	movs	r3, #0
 800d508:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <pbuf_copy+0x2a>
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <pbuf_copy+0x2a>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	891a      	ldrh	r2, [r3, #8]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	891b      	ldrh	r3, [r3, #8]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d209      	bcs.n	800d536 <pbuf_copy+0x3e>
 800d522:	4b54      	ldr	r3, [pc, #336]	; (800d674 <pbuf_copy+0x17c>)
 800d524:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d528:	4953      	ldr	r1, [pc, #332]	; (800d678 <pbuf_copy+0x180>)
 800d52a:	4854      	ldr	r0, [pc, #336]	; (800d67c <pbuf_copy+0x184>)
 800d52c:	f007 fbdc 	bl	8014ce8 <iprintf>
 800d530:	f06f 030f 	mvn.w	r3, #15
 800d534:	e099      	b.n	800d66a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	895b      	ldrh	r3, [r3, #10]
 800d53a:	461a      	mov	r2, r3
 800d53c:	89fb      	ldrh	r3, [r7, #14]
 800d53e:	1ad2      	subs	r2, r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	895b      	ldrh	r3, [r3, #10]
 800d544:	4619      	mov	r1, r3
 800d546:	89bb      	ldrh	r3, [r7, #12]
 800d548:	1acb      	subs	r3, r1, r3
 800d54a:	429a      	cmp	r2, r3
 800d54c:	db05      	blt.n	800d55a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	895a      	ldrh	r2, [r3, #10]
 800d552:	89bb      	ldrh	r3, [r7, #12]
 800d554:	1ad3      	subs	r3, r2, r3
 800d556:	817b      	strh	r3, [r7, #10]
 800d558:	e004      	b.n	800d564 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	895a      	ldrh	r2, [r3, #10]
 800d55e:	89fb      	ldrh	r3, [r7, #14]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685a      	ldr	r2, [r3, #4]
 800d568:	89fb      	ldrh	r3, [r7, #14]
 800d56a:	18d0      	adds	r0, r2, r3
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	89bb      	ldrh	r3, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	897a      	ldrh	r2, [r7, #10]
 800d576:	4619      	mov	r1, r3
 800d578:	f007 fba3 	bl	8014cc2 <memcpy>
    offset_to += len;
 800d57c:	89fa      	ldrh	r2, [r7, #14]
 800d57e:	897b      	ldrh	r3, [r7, #10]
 800d580:	4413      	add	r3, r2
 800d582:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d584:	89ba      	ldrh	r2, [r7, #12]
 800d586:	897b      	ldrh	r3, [r7, #10]
 800d588:	4413      	add	r3, r2
 800d58a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	895b      	ldrh	r3, [r3, #10]
 800d590:	89fa      	ldrh	r2, [r7, #14]
 800d592:	429a      	cmp	r2, r3
 800d594:	d906      	bls.n	800d5a4 <pbuf_copy+0xac>
 800d596:	4b37      	ldr	r3, [pc, #220]	; (800d674 <pbuf_copy+0x17c>)
 800d598:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d59c:	4938      	ldr	r1, [pc, #224]	; (800d680 <pbuf_copy+0x188>)
 800d59e:	4837      	ldr	r0, [pc, #220]	; (800d67c <pbuf_copy+0x184>)
 800d5a0:	f007 fba2 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	895b      	ldrh	r3, [r3, #10]
 800d5a8:	89ba      	ldrh	r2, [r7, #12]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d906      	bls.n	800d5bc <pbuf_copy+0xc4>
 800d5ae:	4b31      	ldr	r3, [pc, #196]	; (800d674 <pbuf_copy+0x17c>)
 800d5b0:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d5b4:	4933      	ldr	r1, [pc, #204]	; (800d684 <pbuf_copy+0x18c>)
 800d5b6:	4831      	ldr	r0, [pc, #196]	; (800d67c <pbuf_copy+0x184>)
 800d5b8:	f007 fb96 	bl	8014ce8 <iprintf>
    if (offset_from >= p_from->len) {
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	89ba      	ldrh	r2, [r7, #12]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d304      	bcc.n	800d5d0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	895b      	ldrh	r3, [r3, #10]
 800d5d4:	89fa      	ldrh	r2, [r7, #14]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d114      	bne.n	800d604 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10c      	bne.n	800d604 <pbuf_copy+0x10c>
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d009      	beq.n	800d604 <pbuf_copy+0x10c>
 800d5f0:	4b20      	ldr	r3, [pc, #128]	; (800d674 <pbuf_copy+0x17c>)
 800d5f2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d5f6:	4924      	ldr	r1, [pc, #144]	; (800d688 <pbuf_copy+0x190>)
 800d5f8:	4820      	ldr	r0, [pc, #128]	; (800d67c <pbuf_copy+0x184>)
 800d5fa:	f007 fb75 	bl	8014ce8 <iprintf>
 800d5fe:	f06f 030f 	mvn.w	r3, #15
 800d602:	e032      	b.n	800d66a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d013      	beq.n	800d632 <pbuf_copy+0x13a>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	895a      	ldrh	r2, [r3, #10]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	891b      	ldrh	r3, [r3, #8]
 800d612:	429a      	cmp	r2, r3
 800d614:	d10d      	bne.n	800d632 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d009      	beq.n	800d632 <pbuf_copy+0x13a>
 800d61e:	4b15      	ldr	r3, [pc, #84]	; (800d674 <pbuf_copy+0x17c>)
 800d620:	f240 32de 	movw	r2, #990	; 0x3de
 800d624:	4919      	ldr	r1, [pc, #100]	; (800d68c <pbuf_copy+0x194>)
 800d626:	4815      	ldr	r0, [pc, #84]	; (800d67c <pbuf_copy+0x184>)
 800d628:	f007 fb5e 	bl	8014ce8 <iprintf>
 800d62c:	f06f 0305 	mvn.w	r3, #5
 800d630:	e01b      	b.n	800d66a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d013      	beq.n	800d660 <pbuf_copy+0x168>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	895a      	ldrh	r2, [r3, #10]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	891b      	ldrh	r3, [r3, #8]
 800d640:	429a      	cmp	r2, r3
 800d642:	d10d      	bne.n	800d660 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d009      	beq.n	800d660 <pbuf_copy+0x168>
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <pbuf_copy+0x17c>)
 800d64e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d652:	490e      	ldr	r1, [pc, #56]	; (800d68c <pbuf_copy+0x194>)
 800d654:	4809      	ldr	r0, [pc, #36]	; (800d67c <pbuf_copy+0x184>)
 800d656:	f007 fb47 	bl	8014ce8 <iprintf>
 800d65a:	f06f 0305 	mvn.w	r3, #5
 800d65e:	e004      	b.n	800d66a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	f47f af67 	bne.w	800d536 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	080175cc 	.word	0x080175cc
 800d678:	0801795c 	.word	0x0801795c
 800d67c:	08017618 	.word	0x08017618
 800d680:	0801798c 	.word	0x0801798c
 800d684:	080179a4 	.word	0x080179a4
 800d688:	080179c0 	.word	0x080179c0
 800d68c:	080179d0 	.word	0x080179d0

0800d690 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b088      	sub	sp, #32
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	4611      	mov	r1, r2
 800d69c:	461a      	mov	r2, r3
 800d69e:	460b      	mov	r3, r1
 800d6a0:	80fb      	strh	r3, [r7, #6]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d108      	bne.n	800d6c2 <pbuf_copy_partial+0x32>
 800d6b0:	4b30      	ldr	r3, [pc, #192]	; (800d774 <pbuf_copy_partial+0xe4>)
 800d6b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d6b6:	4930      	ldr	r1, [pc, #192]	; (800d778 <pbuf_copy_partial+0xe8>)
 800d6b8:	4830      	ldr	r0, [pc, #192]	; (800d77c <pbuf_copy_partial+0xec>)
 800d6ba:	f007 fb15 	bl	8014ce8 <iprintf>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	e054      	b.n	800d76c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d108      	bne.n	800d6da <pbuf_copy_partial+0x4a>
 800d6c8:	4b2a      	ldr	r3, [pc, #168]	; (800d774 <pbuf_copy_partial+0xe4>)
 800d6ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d6ce:	492c      	ldr	r1, [pc, #176]	; (800d780 <pbuf_copy_partial+0xf0>)
 800d6d0:	482a      	ldr	r0, [pc, #168]	; (800d77c <pbuf_copy_partial+0xec>)
 800d6d2:	f007 fb09 	bl	8014ce8 <iprintf>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e048      	b.n	800d76c <pbuf_copy_partial+0xdc>

  left = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <pbuf_copy_partial+0x5a>
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d101      	bne.n	800d6ee <pbuf_copy_partial+0x5e>
    return 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e03e      	b.n	800d76c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	61fb      	str	r3, [r7, #28]
 800d6f2:	e034      	b.n	800d75e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d6f4:	88bb      	ldrh	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <pbuf_copy_partial+0x80>
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	895b      	ldrh	r3, [r3, #10]
 800d6fe:	88ba      	ldrh	r2, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d305      	bcc.n	800d710 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	895b      	ldrh	r3, [r3, #10]
 800d708:	88ba      	ldrh	r2, [r7, #4]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	80bb      	strh	r3, [r7, #4]
 800d70e:	e023      	b.n	800d758 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	895a      	ldrh	r2, [r3, #10]
 800d714:	88bb      	ldrh	r3, [r7, #4]
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d71a:	8b3a      	ldrh	r2, [r7, #24]
 800d71c:	88fb      	ldrh	r3, [r7, #6]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d901      	bls.n	800d726 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d722:	88fb      	ldrh	r3, [r7, #6]
 800d724:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d726:	8b7b      	ldrh	r3, [r7, #26]
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	18d0      	adds	r0, r2, r3
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	88bb      	ldrh	r3, [r7, #4]
 800d732:	4413      	add	r3, r2
 800d734:	8b3a      	ldrh	r2, [r7, #24]
 800d736:	4619      	mov	r1, r3
 800d738:	f007 fac3 	bl	8014cc2 <memcpy>
      copied_total += buf_copy_len;
 800d73c:	8afa      	ldrh	r2, [r7, #22]
 800d73e:	8b3b      	ldrh	r3, [r7, #24]
 800d740:	4413      	add	r3, r2
 800d742:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d744:	8b7a      	ldrh	r2, [r7, #26]
 800d746:	8b3b      	ldrh	r3, [r7, #24]
 800d748:	4413      	add	r3, r2
 800d74a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d74c:	88fa      	ldrh	r2, [r7, #6]
 800d74e:	8b3b      	ldrh	r3, [r7, #24]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	61fb      	str	r3, [r7, #28]
 800d75e:	88fb      	ldrh	r3, [r7, #6]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <pbuf_copy_partial+0xda>
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d1c4      	bne.n	800d6f4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d76a:	8afb      	ldrh	r3, [r7, #22]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3720      	adds	r7, #32
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	080175cc 	.word	0x080175cc
 800d778:	080179fc 	.word	0x080179fc
 800d77c:	08017618 	.word	0x08017618
 800d780:	08017a1c 	.word	0x08017a1c

0800d784 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	460b      	mov	r3, r1
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d792:	897b      	ldrh	r3, [r7, #10]
 800d794:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d79a:	e007      	b.n	800d7ac <pbuf_skip_const+0x28>
    offset_left -= q->len;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	895b      	ldrh	r3, [r3, #10]
 800d7a0:	8afa      	ldrh	r2, [r7, #22]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d004      	beq.n	800d7bc <pbuf_skip_const+0x38>
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	895b      	ldrh	r3, [r3, #10]
 800d7b6:	8afa      	ldrh	r2, [r7, #22]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d2ef      	bcs.n	800d79c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8afa      	ldrh	r2, [r7, #22]
 800d7c6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d7c8:	693b      	ldr	r3, [r7, #16]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	371c      	adds	r7, #28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b086      	sub	sp, #24
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	460b      	mov	r3, r1
 800d7e0:	607a      	str	r2, [r7, #4]
 800d7e2:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 800d7e4:	897b      	ldrh	r3, [r7, #10]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f7ff ffca 	bl	800d784 <pbuf_skip_const>
 800d7f0:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 800d7f2:	697b      	ldr	r3, [r7, #20]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800d80a:	88fb      	ldrh	r3, [r7, #6]
 800d80c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d109      	bne.n	800d82c <pbuf_take+0x30>
 800d818:	4b3a      	ldr	r3, [pc, #232]	; (800d904 <pbuf_take+0x108>)
 800d81a:	f240 4284 	movw	r2, #1156	; 0x484
 800d81e:	493a      	ldr	r1, [pc, #232]	; (800d908 <pbuf_take+0x10c>)
 800d820:	483a      	ldr	r0, [pc, #232]	; (800d90c <pbuf_take+0x110>)
 800d822:	f007 fa61 	bl	8014ce8 <iprintf>
 800d826:	f06f 030f 	mvn.w	r3, #15
 800d82a:	e066      	b.n	800d8fa <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d109      	bne.n	800d846 <pbuf_take+0x4a>
 800d832:	4b34      	ldr	r3, [pc, #208]	; (800d904 <pbuf_take+0x108>)
 800d834:	f240 4285 	movw	r2, #1157	; 0x485
 800d838:	4935      	ldr	r1, [pc, #212]	; (800d910 <pbuf_take+0x114>)
 800d83a:	4834      	ldr	r0, [pc, #208]	; (800d90c <pbuf_take+0x110>)
 800d83c:	f007 fa54 	bl	8014ce8 <iprintf>
 800d840:	f06f 030f 	mvn.w	r3, #15
 800d844:	e059      	b.n	800d8fa <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	891b      	ldrh	r3, [r3, #8]
 800d84a:	88fa      	ldrh	r2, [r7, #6]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d909      	bls.n	800d864 <pbuf_take+0x68>
 800d850:	4b2c      	ldr	r3, [pc, #176]	; (800d904 <pbuf_take+0x108>)
 800d852:	f240 4286 	movw	r2, #1158	; 0x486
 800d856:	492f      	ldr	r1, [pc, #188]	; (800d914 <pbuf_take+0x118>)
 800d858:	482c      	ldr	r0, [pc, #176]	; (800d90c <pbuf_take+0x110>)
 800d85a:	f007 fa45 	bl	8014ce8 <iprintf>
 800d85e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d862:	e04a      	b.n	800d8fa <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d007      	beq.n	800d87a <pbuf_take+0x7e>
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <pbuf_take+0x7e>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	891b      	ldrh	r3, [r3, #8]
 800d874:	88fa      	ldrh	r2, [r7, #6]
 800d876:	429a      	cmp	r2, r3
 800d878:	d902      	bls.n	800d880 <pbuf_take+0x84>
    return ERR_ARG;
 800d87a:	f06f 030f 	mvn.w	r3, #15
 800d87e:	e03c      	b.n	800d8fa <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	61fb      	str	r3, [r7, #28]
 800d884:	e027      	b.n	800d8d6 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <pbuf_take+0x9e>
 800d88c:	4b1d      	ldr	r3, [pc, #116]	; (800d904 <pbuf_take+0x108>)
 800d88e:	f240 428e 	movw	r2, #1166	; 0x48e
 800d892:	4921      	ldr	r1, [pc, #132]	; (800d918 <pbuf_take+0x11c>)
 800d894:	481d      	ldr	r0, [pc, #116]	; (800d90c <pbuf_take+0x110>)
 800d896:	f007 fa27 	bl	8014ce8 <iprintf>
    buf_copy_len = total_copy_len;
 800d89a:	8b3b      	ldrh	r3, [r7, #24]
 800d89c:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	895b      	ldrh	r3, [r3, #10]
 800d8a2:	8b7a      	ldrh	r2, [r7, #26]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d902      	bls.n	800d8ae <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	895b      	ldrh	r3, [r3, #10]
 800d8ac:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	6858      	ldr	r0, [r3, #4]
 800d8b2:	8afb      	ldrh	r3, [r7, #22]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	8b7a      	ldrh	r2, [r7, #26]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	f007 fa01 	bl	8014cc2 <memcpy>
    total_copy_len -= buf_copy_len;
 800d8c0:	8b3a      	ldrh	r2, [r7, #24]
 800d8c2:	8b7b      	ldrh	r3, [r7, #26]
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800d8c8:	8afa      	ldrh	r2, [r7, #22]
 800d8ca:	8b7b      	ldrh	r3, [r7, #26]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	61fb      	str	r3, [r7, #28]
 800d8d6:	8b3b      	ldrh	r3, [r7, #24]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1d4      	bne.n	800d886 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d8dc:	8b3b      	ldrh	r3, [r7, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d103      	bne.n	800d8ea <pbuf_take+0xee>
 800d8e2:	8afa      	ldrh	r2, [r7, #22]
 800d8e4:	88fb      	ldrh	r3, [r7, #6]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d006      	beq.n	800d8f8 <pbuf_take+0xfc>
 800d8ea:	4b06      	ldr	r3, [pc, #24]	; (800d904 <pbuf_take+0x108>)
 800d8ec:	f240 4299 	movw	r2, #1177	; 0x499
 800d8f0:	490a      	ldr	r1, [pc, #40]	; (800d91c <pbuf_take+0x120>)
 800d8f2:	4806      	ldr	r0, [pc, #24]	; (800d90c <pbuf_take+0x110>)
 800d8f4:	f007 f9f8 	bl	8014ce8 <iprintf>
  return ERR_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3720      	adds	r7, #32
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	080175cc 	.word	0x080175cc
 800d908:	08017a40 	.word	0x08017a40
 800d90c:	08017618 	.word	0x08017618
 800d910:	08017a58 	.word	0x08017a58
 800d914:	08017a74 	.word	0x08017a74
 800d918:	08017a94 	.word	0x08017a94
 800d91c:	08017aac 	.word	0x08017aac

0800d920 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b088      	sub	sp, #32
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	4611      	mov	r1, r2
 800d92c:	461a      	mov	r2, r3
 800d92e:	460b      	mov	r3, r1
 800d930:	80fb      	strh	r3, [r7, #6]
 800d932:	4613      	mov	r3, r2
 800d934:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 800d936:	f107 0210 	add.w	r2, r7, #16
 800d93a:	88bb      	ldrh	r3, [r7, #4]
 800d93c:	4619      	mov	r1, r3
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7ff ff49 	bl	800d7d6 <pbuf_skip>
 800d944:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d035      	beq.n	800d9b8 <pbuf_take_at+0x98>
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	891b      	ldrh	r3, [r3, #8]
 800d950:	461a      	mov	r2, r3
 800d952:	8a3b      	ldrh	r3, [r7, #16]
 800d954:	4619      	mov	r1, r3
 800d956:	88fb      	ldrh	r3, [r7, #6]
 800d958:	440b      	add	r3, r1
 800d95a:	429a      	cmp	r2, r3
 800d95c:	db2c      	blt.n	800d9b8 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 800d95e:	88fb      	ldrh	r3, [r7, #6]
 800d960:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800d966:	88fa      	ldrh	r2, [r7, #6]
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	895b      	ldrh	r3, [r3, #10]
 800d96c:	4619      	mov	r1, r3
 800d96e:	8a3b      	ldrh	r3, [r7, #16]
 800d970:	1acb      	subs	r3, r1, r3
 800d972:	4293      	cmp	r3, r2
 800d974:	bfa8      	it	ge
 800d976:	4613      	movge	r3, r2
 800d978:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	8a3a      	ldrh	r2, [r7, #16]
 800d980:	4413      	add	r3, r2
 800d982:	8a7a      	ldrh	r2, [r7, #18]
 800d984:	68b9      	ldr	r1, [r7, #8]
 800d986:	4618      	mov	r0, r3
 800d988:	f007 f99b 	bl	8014cc2 <memcpy>
    remaining_len -= first_copy_len;
 800d98c:	8b7a      	ldrh	r2, [r7, #26]
 800d98e:	8a7b      	ldrh	r3, [r7, #18]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800d994:	8a7b      	ldrh	r3, [r7, #18]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	4413      	add	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800d99c:	8b7b      	ldrh	r3, [r7, #26]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d008      	beq.n	800d9b4 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	8b7a      	ldrh	r2, [r7, #26]
 800d9a8:	6979      	ldr	r1, [r7, #20]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7ff ff26 	bl	800d7fc <pbuf_take>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	e003      	b.n	800d9bc <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e001      	b.n	800d9bc <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3720      	adds	r7, #32
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	807b      	strh	r3, [r7, #2]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
 800d9d4:	f107 020a 	add.w	r2, r7, #10
 800d9d8:	887b      	ldrh	r3, [r7, #2]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff fefa 	bl	800d7d6 <pbuf_skip>
 800d9e2:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00a      	beq.n	800da00 <pbuf_put_at+0x3c>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	895a      	ldrh	r2, [r3, #10]
 800d9ee:	897b      	ldrh	r3, [r7, #10]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d905      	bls.n	800da00 <pbuf_put_at+0x3c>
    ((u8_t*)q->payload)[q_idx] = data;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	897a      	ldrh	r2, [r7, #10]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	787a      	ldrb	r2, [r7, #1]
 800d9fe:	701a      	strb	r2, [r3, #0]
  }
}
 800da00:	bf00      	nop
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800da0c:	bf00      	nop
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
	...

0800da18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800da1c:	f000 ffb8 	bl	800e990 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800da20:	4b07      	ldr	r3, [pc, #28]	; (800da40 <tcp_tmr+0x28>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	b2da      	uxtb	r2, r3
 800da28:	4b05      	ldr	r3, [pc, #20]	; (800da40 <tcp_tmr+0x28>)
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <tcp_tmr+0x28>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da38:	f000 fcea 	bl	800e410 <tcp_slowtmr>
  }
}
 800da3c:	bf00      	nop
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200043e1 	.word	0x200043e1

0800da44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	e00a      	b.n	800da6a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d102      	bne.n	800da64 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	60fb      	str	r3, [r7, #12]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1f1      	bne.n	800da54 <tcp_remove_listener+0x10>
      }
   }
}
 800da70:	bf00      	nop
 800da72:	3714      	adds	r7, #20
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d105      	bne.n	800da96 <tcp_listen_closed+0x1a>
 800da8a:	4b13      	ldr	r3, [pc, #76]	; (800dad8 <tcp_listen_closed+0x5c>)
 800da8c:	22c0      	movs	r2, #192	; 0xc0
 800da8e:	4913      	ldr	r1, [pc, #76]	; (800dadc <tcp_listen_closed+0x60>)
 800da90:	4813      	ldr	r0, [pc, #76]	; (800dae0 <tcp_listen_closed+0x64>)
 800da92:	f007 f929 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7d1b      	ldrb	r3, [r3, #20]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d005      	beq.n	800daaa <tcp_listen_closed+0x2e>
 800da9e:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <tcp_listen_closed+0x5c>)
 800daa0:	22c1      	movs	r2, #193	; 0xc1
 800daa2:	4910      	ldr	r1, [pc, #64]	; (800dae4 <tcp_listen_closed+0x68>)
 800daa4:	480e      	ldr	r0, [pc, #56]	; (800dae0 <tcp_listen_closed+0x64>)
 800daa6:	f007 f91f 	bl	8014ce8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800daaa:	2301      	movs	r3, #1
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e00b      	b.n	800dac8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800dab0:	4a0d      	ldr	r2, [pc, #52]	; (800dae8 <tcp_listen_closed+0x6c>)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6879      	ldr	r1, [r7, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff ffc1 	bl	800da44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3301      	adds	r3, #1
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b03      	cmp	r3, #3
 800dacc:	d9f0      	bls.n	800dab0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dace:	bf00      	nop
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	08017b50 	.word	0x08017b50
 800dadc:	08017b80 	.word	0x08017b80
 800dae0:	08017b8c 	.word	0x08017b8c
 800dae4:	08017bb4 	.word	0x08017bb4
 800dae8:	08018ac4 	.word	0x08018ac4

0800daec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800daec:	b5b0      	push	{r4, r5, r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af02      	add	r7, sp, #8
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800daf8:	78fb      	ldrb	r3, [r7, #3]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d075      	beq.n	800dbea <tcp_close_shutdown+0xfe>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7d1b      	ldrb	r3, [r3, #20]
 800db02:	2b04      	cmp	r3, #4
 800db04:	d003      	beq.n	800db0e <tcp_close_shutdown+0x22>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	7d1b      	ldrb	r3, [r3, #20]
 800db0a:	2b07      	cmp	r3, #7
 800db0c:	d16d      	bne.n	800dbea <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db12:	2b00      	cmp	r3, #0
 800db14:	d104      	bne.n	800db20 <tcp_close_shutdown+0x34>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db1e:	d064      	beq.n	800dbea <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	7e9b      	ldrb	r3, [r3, #26]
 800db24:	f003 0310 	and.w	r3, r3, #16
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d106      	bne.n	800db3a <tcp_close_shutdown+0x4e>
 800db2c:	4b59      	ldr	r3, [pc, #356]	; (800dc94 <tcp_close_shutdown+0x1a8>)
 800db2e:	f240 120f 	movw	r2, #271	; 0x10f
 800db32:	4959      	ldr	r1, [pc, #356]	; (800dc98 <tcp_close_shutdown+0x1ac>)
 800db34:	4859      	ldr	r0, [pc, #356]	; (800dc9c <tcp_close_shutdown+0x1b0>)
 800db36:	f007 f8d7 	bl	8014ce8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800db42:	687c      	ldr	r4, [r7, #4]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	1d1d      	adds	r5, r3, #4
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	8adb      	ldrh	r3, [r3, #22]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	8b12      	ldrh	r2, [r2, #24]
 800db50:	9201      	str	r2, [sp, #4]
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	462b      	mov	r3, r5
 800db56:	4622      	mov	r2, r4
 800db58:	f004 ff1c 	bl	8012994 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 fa4d 	bl	800effc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800db62:	4b4f      	ldr	r3, [pc, #316]	; (800dca0 <tcp_close_shutdown+0x1b4>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d105      	bne.n	800db78 <tcp_close_shutdown+0x8c>
 800db6c:	4b4c      	ldr	r3, [pc, #304]	; (800dca0 <tcp_close_shutdown+0x1b4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	4a4b      	ldr	r2, [pc, #300]	; (800dca0 <tcp_close_shutdown+0x1b4>)
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	e013      	b.n	800dba0 <tcp_close_shutdown+0xb4>
 800db78:	4b49      	ldr	r3, [pc, #292]	; (800dca0 <tcp_close_shutdown+0x1b4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	60fb      	str	r3, [r7, #12]
 800db7e:	e00c      	b.n	800db9a <tcp_close_shutdown+0xae>
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	68da      	ldr	r2, [r3, #12]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	429a      	cmp	r2, r3
 800db88:	d104      	bne.n	800db94 <tcp_close_shutdown+0xa8>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68da      	ldr	r2, [r3, #12]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	60da      	str	r2, [r3, #12]
 800db92:	e005      	b.n	800dba0 <tcp_close_shutdown+0xb4>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	60fb      	str	r3, [r7, #12]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1ef      	bne.n	800db80 <tcp_close_shutdown+0x94>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	60da      	str	r2, [r3, #12]
 800dba6:	4b3f      	ldr	r3, [pc, #252]	; (800dca4 <tcp_close_shutdown+0x1b8>)
 800dba8:	2201      	movs	r2, #1
 800dbaa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7d1b      	ldrb	r3, [r3, #20]
 800dbb0:	2b04      	cmp	r3, #4
 800dbb2:	d10c      	bne.n	800dbce <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	220a      	movs	r2, #10
 800dbb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dbba:	4b3b      	ldr	r3, [pc, #236]	; (800dca8 <tcp_close_shutdown+0x1bc>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	60da      	str	r2, [r3, #12]
 800dbc2:	4a39      	ldr	r2, [pc, #228]	; (800dca8 <tcp_close_shutdown+0x1bc>)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	f005 f934 	bl	8012e34 <tcp_timer_needed>
 800dbcc:	e00b      	b.n	800dbe6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800dbce:	4b37      	ldr	r3, [pc, #220]	; (800dcac <tcp_close_shutdown+0x1c0>)
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d102      	bne.n	800dbde <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800dbd8:	f003 fd72 	bl	80116c0 <tcp_trigger_input_pcb_close>
 800dbdc:	e003      	b.n	800dbe6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	f7fe fde7 	bl	800c7b4 <memp_free>
        }
      }
      return ERR_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e050      	b.n	800dc8c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	7d1b      	ldrb	r3, [r3, #20]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d02e      	beq.n	800dc50 <tcp_close_shutdown+0x164>
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d038      	beq.n	800dc68 <tcp_close_shutdown+0x17c>
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d142      	bne.n	800dc80 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	8adb      	ldrh	r3, [r3, #22]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d021      	beq.n	800dc46 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc02:	4b2b      	ldr	r3, [pc, #172]	; (800dcb0 <tcp_close_shutdown+0x1c4>)
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d105      	bne.n	800dc18 <tcp_close_shutdown+0x12c>
 800dc0c:	4b28      	ldr	r3, [pc, #160]	; (800dcb0 <tcp_close_shutdown+0x1c4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	4a27      	ldr	r2, [pc, #156]	; (800dcb0 <tcp_close_shutdown+0x1c4>)
 800dc14:	6013      	str	r3, [r2, #0]
 800dc16:	e013      	b.n	800dc40 <tcp_close_shutdown+0x154>
 800dc18:	4b25      	ldr	r3, [pc, #148]	; (800dcb0 <tcp_close_shutdown+0x1c4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	60bb      	str	r3, [r7, #8]
 800dc1e:	e00c      	b.n	800dc3a <tcp_close_shutdown+0x14e>
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	68da      	ldr	r2, [r3, #12]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d104      	bne.n	800dc34 <tcp_close_shutdown+0x148>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68da      	ldr	r2, [r3, #12]
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	60da      	str	r2, [r3, #12]
 800dc32:	e005      	b.n	800dc40 <tcp_close_shutdown+0x154>
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	60bb      	str	r3, [r7, #8]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1ef      	bne.n	800dc20 <tcp_close_shutdown+0x134>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	2001      	movs	r0, #1
 800dc4a:	f7fe fdb3 	bl	800c7b4 <memp_free>
    break;
 800dc4e:	e01c      	b.n	800dc8a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7ff ff13 	bl	800da7c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	4816      	ldr	r0, [pc, #88]	; (800dcb4 <tcp_close_shutdown+0x1c8>)
 800dc5a:	f001 fa11 	bl	800f080 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	2002      	movs	r0, #2
 800dc62:	f7fe fda7 	bl	800c7b4 <memp_free>
    break;
 800dc66:	e010      	b.n	800dc8a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	480d      	ldr	r0, [pc, #52]	; (800dca0 <tcp_close_shutdown+0x1b4>)
 800dc6c:	f001 fa08 	bl	800f080 <tcp_pcb_remove>
 800dc70:	4b0c      	ldr	r3, [pc, #48]	; (800dca4 <tcp_close_shutdown+0x1b8>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7fe fd9b 	bl	800c7b4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800dc7e:	e004      	b.n	800dc8a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f819 	bl	800dcb8 <tcp_close_shutdown_fin>
 800dc86:	4603      	mov	r3, r0
 800dc88:	e000      	b.n	800dc8c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bdb0      	pop	{r4, r5, r7, pc}
 800dc94:	08017b50 	.word	0x08017b50
 800dc98:	08017bcc 	.word	0x08017bcc
 800dc9c:	08017b8c 	.word	0x08017b8c
 800dca0:	20007d2c 	.word	0x20007d2c
 800dca4:	20007d28 	.word	0x20007d28
 800dca8:	20007d3c 	.word	0x20007d3c
 800dcac:	20007d40 	.word	0x20007d40
 800dcb0:	20007d38 	.word	0x20007d38
 800dcb4:	20007d34 	.word	0x20007d34

0800dcb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <tcp_close_shutdown_fin+0x1c>
 800dcc6:	4b2c      	ldr	r3, [pc, #176]	; (800dd78 <tcp_close_shutdown_fin+0xc0>)
 800dcc8:	f240 124d 	movw	r2, #333	; 0x14d
 800dccc:	492b      	ldr	r1, [pc, #172]	; (800dd7c <tcp_close_shutdown_fin+0xc4>)
 800dcce:	482c      	ldr	r0, [pc, #176]	; (800dd80 <tcp_close_shutdown_fin+0xc8>)
 800dcd0:	f007 f80a 	bl	8014ce8 <iprintf>

  switch (pcb->state) {
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	7d1b      	ldrb	r3, [r3, #20]
 800dcd8:	2b04      	cmp	r3, #4
 800dcda:	d010      	beq.n	800dcfe <tcp_close_shutdown_fin+0x46>
 800dcdc:	2b07      	cmp	r3, #7
 800dcde:	d01b      	beq.n	800dd18 <tcp_close_shutdown_fin+0x60>
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d126      	bne.n	800dd32 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f003 fd77 	bl	80117d8 <tcp_send_fin>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d11f      	bne.n	800dd36 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2205      	movs	r2, #5
 800dcfa:	751a      	strb	r2, [r3, #20]
    }
    break;
 800dcfc:	e01b      	b.n	800dd36 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f003 fd6a 	bl	80117d8 <tcp_send_fin>
 800dd04:	4603      	mov	r3, r0
 800dd06:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d114      	bne.n	800dd3a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2205      	movs	r2, #5
 800dd14:	751a      	strb	r2, [r3, #20]
    }
    break;
 800dd16:	e010      	b.n	800dd3a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f003 fd5d 	bl	80117d8 <tcp_send_fin>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2209      	movs	r2, #9
 800dd2e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800dd30:	e005      	b.n	800dd3e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	e01c      	b.n	800dd70 <tcp_close_shutdown_fin+0xb8>
    break;
 800dd36:	bf00      	nop
 800dd38:	e002      	b.n	800dd40 <tcp_close_shutdown_fin+0x88>
    break;
 800dd3a:	bf00      	nop
 800dd3c:	e000      	b.n	800dd40 <tcp_close_shutdown_fin+0x88>
    break;
 800dd3e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d103      	bne.n	800dd50 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f004 fb9b 	bl	8012484 <tcp_output>
 800dd4e:	e00d      	b.n	800dd6c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dd50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd58:	d108      	bne.n	800dd6c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	7e9b      	ldrb	r3, [r3, #26]
 800dd5e:	f043 0308 	orr.w	r3, r3, #8
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e001      	b.n	800dd70 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800dd6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	08017b50 	.word	0x08017b50
 800dd7c:	08017b80 	.word	0x08017b80
 800dd80:	08017b8c 	.word	0x08017b8c

0800dd84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	7d1b      	ldrb	r3, [r3, #20]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d006      	beq.n	800dda2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7e9b      	ldrb	r3, [r3, #26]
 800dd98:	f043 0310 	orr.w	r3, r3, #16
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dda2:	2101      	movs	r1, #1
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff fea1 	bl	800daec <tcp_close_shutdown>
 800ddaa:	4603      	mov	r3, r0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	7d1b      	ldrb	r3, [r3, #20]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d102      	bne.n	800ddce <tcp_shutdown+0x1a>
    return ERR_CONN;
 800ddc8:	f06f 030a 	mvn.w	r3, #10
 800ddcc:	e035      	b.n	800de3a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d01b      	beq.n	800de0c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	7e9b      	ldrb	r3, [r3, #26]
 800ddd8:	f043 0310 	orr.w	r3, r3, #16
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dde8:	2101      	movs	r1, #1
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff fe7e 	bl	800daec <tcp_close_shutdown>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	e022      	b.n	800de3a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d007      	beq.n	800de0c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de00:	4618      	mov	r0, r3
 800de02:	f7ff fa39 	bl	800d278 <pbuf_free>
      pcb->refused_data = NULL;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d012      	beq.n	800de38 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	7d1b      	ldrb	r3, [r3, #20]
 800de16:	2b03      	cmp	r3, #3
 800de18:	db0b      	blt.n	800de32 <tcp_shutdown+0x7e>
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	dd01      	ble.n	800de22 <tcp_shutdown+0x6e>
 800de1e:	2b07      	cmp	r3, #7
 800de20:	d107      	bne.n	800de32 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	b2db      	uxtb	r3, r3
 800de26:	4619      	mov	r1, r3
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f7ff fe5f 	bl	800daec <tcp_close_shutdown>
 800de2e:	4603      	mov	r3, r0
 800de30:	e003      	b.n	800de3a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800de32:	f06f 030a 	mvn.w	r3, #10
 800de36:	e000      	b.n	800de3a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
	...

0800de44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08c      	sub	sp, #48	; 0x30
 800de48:	af02      	add	r7, sp, #8
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	7d1b      	ldrb	r3, [r3, #20]
 800de52:	2b01      	cmp	r3, #1
 800de54:	d106      	bne.n	800de64 <tcp_abandon+0x20>
 800de56:	4b4d      	ldr	r3, [pc, #308]	; (800df8c <tcp_abandon+0x148>)
 800de58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800de5c:	494c      	ldr	r1, [pc, #304]	; (800df90 <tcp_abandon+0x14c>)
 800de5e:	484d      	ldr	r0, [pc, #308]	; (800df94 <tcp_abandon+0x150>)
 800de60:	f006 ff42 	bl	8014ce8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7d1b      	ldrb	r3, [r3, #20]
 800de68:	2b0a      	cmp	r3, #10
 800de6a:	d108      	bne.n	800de7e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de6c:	6879      	ldr	r1, [r7, #4]
 800de6e:	484a      	ldr	r0, [pc, #296]	; (800df98 <tcp_abandon+0x154>)
 800de70:	f001 f906 	bl	800f080 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	2001      	movs	r0, #1
 800de78:	f7fe fc9c 	bl	800c7b4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800de7c:	e081      	b.n	800df82 <tcp_abandon+0x13e>
    int send_rst = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800de82:	2300      	movs	r3, #0
 800de84:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de8a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de98:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7d1b      	ldrb	r3, [r3, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d126      	bne.n	800def6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	8adb      	ldrh	r3, [r3, #22]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d02e      	beq.n	800df0e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800deb0:	4b3a      	ldr	r3, [pc, #232]	; (800df9c <tcp_abandon+0x158>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d105      	bne.n	800dec6 <tcp_abandon+0x82>
 800deba:	4b38      	ldr	r3, [pc, #224]	; (800df9c <tcp_abandon+0x158>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	4a36      	ldr	r2, [pc, #216]	; (800df9c <tcp_abandon+0x158>)
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	e013      	b.n	800deee <tcp_abandon+0xaa>
 800dec6:	4b35      	ldr	r3, [pc, #212]	; (800df9c <tcp_abandon+0x158>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	61fb      	str	r3, [r7, #28]
 800decc:	e00c      	b.n	800dee8 <tcp_abandon+0xa4>
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	68da      	ldr	r2, [r3, #12]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d104      	bne.n	800dee2 <tcp_abandon+0x9e>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	60da      	str	r2, [r3, #12]
 800dee0:	e005      	b.n	800deee <tcp_abandon+0xaa>
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	61fb      	str	r3, [r7, #28]
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d1ef      	bne.n	800dece <tcp_abandon+0x8a>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	60da      	str	r2, [r3, #12]
 800def4:	e00b      	b.n	800df0e <tcp_abandon+0xca>
      send_rst = reset;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8adb      	ldrh	r3, [r3, #22]
 800defe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4827      	ldr	r0, [pc, #156]	; (800dfa0 <tcp_abandon+0x15c>)
 800df04:	f001 f8bc 	bl	800f080 <tcp_pcb_remove>
 800df08:	4b26      	ldr	r3, [pc, #152]	; (800dfa4 <tcp_abandon+0x160>)
 800df0a:	2201      	movs	r2, #1
 800df0c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d004      	beq.n	800df20 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df1a:	4618      	mov	r0, r3
 800df1c:	f000 fe05 	bl	800eb2a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 fdfc 	bl	800eb2a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df36:	2b00      	cmp	r3, #0
 800df38:	d004      	beq.n	800df44 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 fdf3 	bl	800eb2a <tcp_segs_free>
    if (send_rst) {
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00c      	beq.n	800df64 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	1d19      	adds	r1, r3, #4
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	8b1b      	ldrh	r3, [r3, #24]
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	460b      	mov	r3, r1
 800df5c:	6979      	ldr	r1, [r7, #20]
 800df5e:	69b8      	ldr	r0, [r7, #24]
 800df60:	f004 fd18 	bl	8012994 <tcp_rst>
    last_state = pcb->state;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	7d1b      	ldrb	r3, [r3, #20]
 800df68:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800df6a:	6879      	ldr	r1, [r7, #4]
 800df6c:	2001      	movs	r0, #1
 800df6e:	f7fe fc21 	bl	800c7b4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d004      	beq.n	800df82 <tcp_abandon+0x13e>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	f06f 010c 	mvn.w	r1, #12
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	4798      	blx	r3
}
 800df82:	bf00      	nop
 800df84:	3728      	adds	r7, #40	; 0x28
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	08017b50 	.word	0x08017b50
 800df90:	08017be8 	.word	0x08017be8
 800df94:	08017b8c 	.word	0x08017b8c
 800df98:	20007d3c 	.word	0x20007d3c
 800df9c:	20007d38 	.word	0x20007d38
 800dfa0:	20007d2c 	.word	0x20007d2c
 800dfa4:	20007d28 	.word	0x20007d28

0800dfa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff ff46 	bl	800de44 <tcp_abandon>
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dfce:	2304      	movs	r3, #4
 800dfd0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dfd8:	4b3c      	ldr	r3, [pc, #240]	; (800e0cc <tcp_bind+0x10c>)
 800dfda:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <tcp_bind+0x28>
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <tcp_bind+0x2e>
    return ERR_VAL;
 800dfe8:	f06f 0305 	mvn.w	r3, #5
 800dfec:	e06a      	b.n	800e0c4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	7d1b      	ldrb	r3, [r3, #20]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d009      	beq.n	800e00a <tcp_bind+0x4a>
 800dff6:	4b36      	ldr	r3, [pc, #216]	; (800e0d0 <tcp_bind+0x110>)
 800dff8:	f44f 7211 	mov.w	r2, #580	; 0x244
 800dffc:	4935      	ldr	r1, [pc, #212]	; (800e0d4 <tcp_bind+0x114>)
 800dffe:	4836      	ldr	r0, [pc, #216]	; (800e0d8 <tcp_bind+0x118>)
 800e000:	f006 fe72 	bl	8014ce8 <iprintf>
 800e004:	f06f 0305 	mvn.w	r3, #5
 800e008:	e05c      	b.n	800e0c4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800e00a:	88fb      	ldrh	r3, [r7, #6]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d109      	bne.n	800e024 <tcp_bind+0x64>
    port = tcp_new_port();
 800e010:	f000 f9ba 	bl	800e388 <tcp_new_port>
 800e014:	4603      	mov	r3, r0
 800e016:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e018:	88fb      	ldrh	r3, [r7, #6]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d135      	bne.n	800e08a <tcp_bind+0xca>
      return ERR_BUF;
 800e01e:	f06f 0301 	mvn.w	r3, #1
 800e022:	e04f      	b.n	800e0c4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e024:	2300      	movs	r3, #0
 800e026:	61fb      	str	r3, [r7, #28]
 800e028:	e02b      	b.n	800e082 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e02a:	4a2c      	ldr	r2, [pc, #176]	; (800e0dc <tcp_bind+0x11c>)
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	61bb      	str	r3, [r7, #24]
 800e036:	e01e      	b.n	800e076 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	8adb      	ldrh	r3, [r3, #22]
 800e03c:	88fa      	ldrh	r2, [r7, #6]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d116      	bne.n	800e070 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e042:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e044:	2b00      	cmp	r3, #0
 800e046:	d010      	beq.n	800e06a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00c      	beq.n	800e06a <tcp_bind+0xaa>
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d009      	beq.n	800e06a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e066:	429a      	cmp	r2, r3
 800e068:	d102      	bne.n	800e070 <tcp_bind+0xb0>
              return ERR_USE;
 800e06a:	f06f 0307 	mvn.w	r3, #7
 800e06e:	e029      	b.n	800e0c4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	61bb      	str	r3, [r7, #24]
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1dd      	bne.n	800e038 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	3301      	adds	r3, #1
 800e080:	61fb      	str	r3, [r7, #28]
 800e082:	69fa      	ldr	r2, [r7, #28]
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	429a      	cmp	r2, r3
 800e088:	dbcf      	blt.n	800e02a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00c      	beq.n	800e0aa <tcp_bind+0xea>
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d008      	beq.n	800e0aa <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <tcp_bind+0xe4>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	e000      	b.n	800e0a6 <tcp_bind+0xe6>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	88fa      	ldrh	r2, [r7, #6]
 800e0ae:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e0b0:	4b0b      	ldr	r3, [pc, #44]	; (800e0e0 <tcp_bind+0x120>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	60da      	str	r2, [r3, #12]
 800e0b8:	4a09      	ldr	r2, [pc, #36]	; (800e0e0 <tcp_bind+0x120>)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6013      	str	r3, [r2, #0]
 800e0be:	f004 feb9 	bl	8012e34 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e0c2:	2300      	movs	r3, #0
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	080189c4 	.word	0x080189c4
 800e0d0:	08017b50 	.word	0x08017b50
 800e0d4:	08017c1c 	.word	0x08017c1c
 800e0d8:	08017b8c 	.word	0x08017b8c
 800e0dc:	08018ac4 	.word	0x08018ac4
 800e0e0:	20007d38 	.word	0x20007d38

0800e0e4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800e0f2:	68b8      	ldr	r0, [r7, #8]
 800e0f4:	f7ff ff58 	bl	800dfa8 <tcp_abort>

  return ERR_ABRT;
 800e0f8:	f06f 030c 	mvn.w	r3, #12
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	460b      	mov	r3, r1
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e112:	2300      	movs	r3, #0
 800e114:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	7d1b      	ldrb	r3, [r3, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d009      	beq.n	800e132 <tcp_listen_with_backlog_and_err+0x2e>
 800e11e:	4b3f      	ldr	r3, [pc, #252]	; (800e21c <tcp_listen_with_backlog_and_err+0x118>)
 800e120:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800e124:	493e      	ldr	r1, [pc, #248]	; (800e220 <tcp_listen_with_backlog_and_err+0x11c>)
 800e126:	483f      	ldr	r0, [pc, #252]	; (800e224 <tcp_listen_with_backlog_and_err+0x120>)
 800e128:	f006 fdde 	bl	8014ce8 <iprintf>
 800e12c:	23f1      	movs	r3, #241	; 0xf1
 800e12e:	76fb      	strb	r3, [r7, #27]
 800e130:	e069      	b.n	800e206 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	7d1b      	ldrb	r3, [r3, #20]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d104      	bne.n	800e144 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e13e:	23f7      	movs	r3, #247	; 0xf7
 800e140:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e142:	e060      	b.n	800e206 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e144:	2002      	movs	r0, #2
 800e146:	f7fe fae3 	bl	800c710 <memp_malloc>
 800e14a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d102      	bne.n	800e158 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800e152:	23ff      	movs	r3, #255	; 0xff
 800e154:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e156:	e056      	b.n	800e206 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	691a      	ldr	r2, [r3, #16]
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	8ada      	ldrh	r2, [r3, #22]
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	2201      	movs	r2, #1
 800e16c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	7d5a      	ldrb	r2, [r3, #21]
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	7a1a      	ldrb	r2, [r3, #8]
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	7a9a      	ldrb	r2, [r3, #10]
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	7a5a      	ldrb	r2, [r3, #9]
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8adb      	ldrh	r3, [r3, #22]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d021      	beq.n	800e1e2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e19e:	4b22      	ldr	r3, [pc, #136]	; (800e228 <tcp_listen_with_backlog_and_err+0x124>)
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d105      	bne.n	800e1b4 <tcp_listen_with_backlog_and_err+0xb0>
 800e1a8:	4b1f      	ldr	r3, [pc, #124]	; (800e228 <tcp_listen_with_backlog_and_err+0x124>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	4a1e      	ldr	r2, [pc, #120]	; (800e228 <tcp_listen_with_backlog_and_err+0x124>)
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	e013      	b.n	800e1dc <tcp_listen_with_backlog_and_err+0xd8>
 800e1b4:	4b1c      	ldr	r3, [pc, #112]	; (800e228 <tcp_listen_with_backlog_and_err+0x124>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	617b      	str	r3, [r7, #20]
 800e1ba:	e00c      	b.n	800e1d6 <tcp_listen_with_backlog_and_err+0xd2>
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d104      	bne.n	800e1d0 <tcp_listen_with_backlog_and_err+0xcc>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	68da      	ldr	r2, [r3, #12]
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	e005      	b.n	800e1dc <tcp_listen_with_backlog_and_err+0xd8>
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1ef      	bne.n	800e1bc <tcp_listen_with_backlog_and_err+0xb8>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	f7fe fae5 	bl	800c7b4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	4a0f      	ldr	r2, [pc, #60]	; (800e22c <tcp_listen_with_backlog_and_err+0x128>)
 800e1ee:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e1f0:	4b0f      	ldr	r3, [pc, #60]	; (800e230 <tcp_listen_with_backlog_and_err+0x12c>)
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	60da      	str	r2, [r3, #12]
 800e1f8:	4a0d      	ldr	r2, [pc, #52]	; (800e230 <tcp_listen_with_backlog_and_err+0x12c>)
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	f004 fe19 	bl	8012e34 <tcp_timer_needed>
  res = ERR_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	7efa      	ldrb	r2, [r7, #27]
 800e210:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e212:	69fb      	ldr	r3, [r7, #28]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3720      	adds	r7, #32
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	08017b50 	.word	0x08017b50
 800e220:	08017c44 	.word	0x08017c44
 800e224:	08017b8c 	.word	0x08017b8c
 800e228:	20007d38 	.word	0x20007d38
 800e22c:	0800e0e5 	.word	0x0800e0e5
 800e230:	20007d34 	.word	0x20007d34

0800e234 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e244:	4413      	add	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e250:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e254:	d802      	bhi.n	800e25c <tcp_update_rcv_ann_wnd+0x28>
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e25a:	e001      	b.n	800e260 <tcp_update_rcv_ann_wnd+0x2c>
 800e25c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e260:	4413      	add	r3, r2
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	db08      	blt.n	800e27c <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	e020      	b.n	800e2be <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	dd03      	ble.n	800e292 <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e290:	e014      	b.n	800e2bc <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2a4:	d306      	bcc.n	800e2b4 <tcp_update_rcv_ann_wnd+0x80>
 800e2a6:	4b08      	ldr	r3, [pc, #32]	; (800e2c8 <tcp_update_rcv_ann_wnd+0x94>)
 800e2a8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e2ac:	4907      	ldr	r1, [pc, #28]	; (800e2cc <tcp_update_rcv_ann_wnd+0x98>)
 800e2ae:	4808      	ldr	r0, [pc, #32]	; (800e2d0 <tcp_update_rcv_ann_wnd+0x9c>)
 800e2b0:	f006 fd1a 	bl	8014ce8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e2bc:	2300      	movs	r3, #0
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	08017b50 	.word	0x08017b50
 800e2cc:	08017c68 	.word	0x08017c68
 800e2d0:	08017b8c 	.word	0x08017b8c

0800e2d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	7d1b      	ldrb	r3, [r3, #20]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d106      	bne.n	800e2f6 <tcp_recved+0x22>
 800e2e8:	4b23      	ldr	r3, [pc, #140]	; (800e378 <tcp_recved+0xa4>)
 800e2ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e2ee:	4923      	ldr	r1, [pc, #140]	; (800e37c <tcp_recved+0xa8>)
 800e2f0:	4823      	ldr	r0, [pc, #140]	; (800e380 <tcp_recved+0xac>)
 800e2f2:	f006 fcf9 	bl	8014ce8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2fa:	887b      	ldrh	r3, [r7, #2]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e308:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e30c:	d904      	bls.n	800e318 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e314:	851a      	strh	r2, [r3, #40]	; 0x28
 800e316:	e017      	b.n	800e348 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d113      	bne.n	800e348 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7d1b      	ldrb	r3, [r3, #20]
 800e324:	2b07      	cmp	r3, #7
 800e326:	d003      	beq.n	800e330 <tcp_recved+0x5c>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	2b09      	cmp	r3, #9
 800e32e:	d104      	bne.n	800e33a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e336:	851a      	strh	r2, [r3, #40]	; 0x28
 800e338:	e006      	b.n	800e348 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e33a:	4b0f      	ldr	r3, [pc, #60]	; (800e378 <tcp_recved+0xa4>)
 800e33c:	f240 322d 	movw	r2, #813	; 0x32d
 800e340:	4910      	ldr	r1, [pc, #64]	; (800e384 <tcp_recved+0xb0>)
 800e342:	480f      	ldr	r0, [pc, #60]	; (800e380 <tcp_recved+0xac>)
 800e344:	f006 fcd0 	bl	8014ce8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff ff73 	bl	800e234 <tcp_update_rcv_ann_wnd>
 800e34e:	4603      	mov	r3, r0
 800e350:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e358:	db09      	blt.n	800e36e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	7e9b      	ldrb	r3, [r3, #26]
 800e35e:	f043 0302 	orr.w	r3, r3, #2
 800e362:	b2da      	uxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f004 f88b 	bl	8012484 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e36e:	bf00      	nop
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	08017b50 	.word	0x08017b50
 800e37c:	08017c84 	.word	0x08017c84
 800e380:	08017b8c 	.word	0x08017b8c
 800e384:	08017cac 	.word	0x08017cac

0800e388 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800e392:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <tcp_new_port+0x80>)
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	b291      	uxth	r1, r2
 800e39a:	4a1b      	ldr	r2, [pc, #108]	; (800e408 <tcp_new_port+0x80>)
 800e39c:	8011      	strh	r1, [r2, #0]
 800e39e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d103      	bne.n	800e3ae <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e3a6:	4b18      	ldr	r3, [pc, #96]	; (800e408 <tcp_new_port+0x80>)
 800e3a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e3ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	71fb      	strb	r3, [r7, #7]
 800e3b2:	e01e      	b.n	800e3f2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	4a15      	ldr	r2, [pc, #84]	; (800e40c <tcp_new_port+0x84>)
 800e3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	603b      	str	r3, [r7, #0]
 800e3c0:	e011      	b.n	800e3e6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	8ada      	ldrh	r2, [r3, #22]
 800e3c6:	4b10      	ldr	r3, [pc, #64]	; (800e408 <tcp_new_port+0x80>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d108      	bne.n	800e3e0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e3ce:	88bb      	ldrh	r3, [r7, #4]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	80bb      	strh	r3, [r7, #4]
 800e3d4:	88bb      	ldrh	r3, [r7, #4]
 800e3d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3da:	d3da      	bcc.n	800e392 <tcp_new_port+0xa>
          return 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	e00d      	b.n	800e3fc <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	603b      	str	r3, [r7, #0]
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1ea      	bne.n	800e3c2 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	71fb      	strb	r3, [r7, #7]
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	2b03      	cmp	r3, #3
 800e3f6:	d9dd      	bls.n	800e3b4 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e3f8:	4b03      	ldr	r3, [pc, #12]	; (800e408 <tcp_new_port+0x80>)
 800e3fa:	881b      	ldrh	r3, [r3, #0]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	20000010 	.word	0x20000010
 800e40c:	08018ac4 	.word	0x08018ac4

0800e410 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e410:	b5b0      	push	{r4, r5, r7, lr}
 800e412:	b08c      	sub	sp, #48	; 0x30
 800e414:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e41a:	4b97      	ldr	r3, [pc, #604]	; (800e678 <tcp_slowtmr+0x268>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3301      	adds	r3, #1
 800e420:	4a95      	ldr	r2, [pc, #596]	; (800e678 <tcp_slowtmr+0x268>)
 800e422:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e424:	4b95      	ldr	r3, [pc, #596]	; (800e67c <tcp_slowtmr+0x26c>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	4b93      	ldr	r3, [pc, #588]	; (800e67c <tcp_slowtmr+0x26c>)
 800e42e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e430:	2300      	movs	r3, #0
 800e432:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e434:	4b92      	ldr	r3, [pc, #584]	; (800e680 <tcp_slowtmr+0x270>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e43a:	e227      	b.n	800e88c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	7d1b      	ldrb	r3, [r3, #20]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d106      	bne.n	800e452 <tcp_slowtmr+0x42>
 800e444:	4b8f      	ldr	r3, [pc, #572]	; (800e684 <tcp_slowtmr+0x274>)
 800e446:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e44a:	498f      	ldr	r1, [pc, #572]	; (800e688 <tcp_slowtmr+0x278>)
 800e44c:	488f      	ldr	r0, [pc, #572]	; (800e68c <tcp_slowtmr+0x27c>)
 800e44e:	f006 fc4b 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	7d1b      	ldrb	r3, [r3, #20]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d106      	bne.n	800e468 <tcp_slowtmr+0x58>
 800e45a:	4b8a      	ldr	r3, [pc, #552]	; (800e684 <tcp_slowtmr+0x274>)
 800e45c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e460:	498b      	ldr	r1, [pc, #556]	; (800e690 <tcp_slowtmr+0x280>)
 800e462:	488a      	ldr	r0, [pc, #552]	; (800e68c <tcp_slowtmr+0x27c>)
 800e464:	f006 fc40 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	7d1b      	ldrb	r3, [r3, #20]
 800e46c:	2b0a      	cmp	r3, #10
 800e46e:	d106      	bne.n	800e47e <tcp_slowtmr+0x6e>
 800e470:	4b84      	ldr	r3, [pc, #528]	; (800e684 <tcp_slowtmr+0x274>)
 800e472:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e476:	4987      	ldr	r1, [pc, #540]	; (800e694 <tcp_slowtmr+0x284>)
 800e478:	4884      	ldr	r0, [pc, #528]	; (800e68c <tcp_slowtmr+0x27c>)
 800e47a:	f006 fc35 	bl	8014ce8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	7f5a      	ldrb	r2, [r3, #29]
 800e482:	4b7e      	ldr	r3, [pc, #504]	; (800e67c <tcp_slowtmr+0x26c>)
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d103      	bne.n	800e492 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e490:	e1fc      	b.n	800e88c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e492:	4b7a      	ldr	r3, [pc, #488]	; (800e67c <tcp_slowtmr+0x26c>)
 800e494:	781a      	ldrb	r2, [r3, #0]
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a4:	7d1b      	ldrb	r3, [r3, #20]
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d108      	bne.n	800e4bc <tcp_slowtmr+0xac>
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	d903      	bls.n	800e4bc <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e4b4:	7ffb      	ldrb	r3, [r7, #31]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	77fb      	strb	r3, [r7, #31]
 800e4ba:	e0a2      	b.n	800e602 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4c2:	2b0b      	cmp	r3, #11
 800e4c4:	d903      	bls.n	800e4ce <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e4c6:	7ffb      	ldrb	r3, [r7, #31]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	77fb      	strb	r3, [r7, #31]
 800e4cc:	e099      	b.n	800e602 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d032      	beq.n	800e53e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	4a6d      	ldr	r2, [pc, #436]	; (800e698 <tcp_slowtmr+0x288>)
 800e4e2:	5cd3      	ldrb	r3, [r2, r3]
 800e4e4:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e4ec:	7f3a      	ldrb	r2, [r7, #28]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d907      	bls.n	800e502 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e508:	7f3a      	ldrb	r2, [r7, #28]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d879      	bhi.n	800e602 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e50e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e510:	f004 fbd0 	bl	8012cb4 <tcp_zero_window_probe>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d173      	bne.n	800e602 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	2200      	movs	r2, #0
 800e51e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e528:	2b06      	cmp	r3, #6
 800e52a:	d86a      	bhi.n	800e602 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e532:	3301      	adds	r3, #1
 800e534:	b2da      	uxtb	r2, r3
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e53c:	e061      	b.n	800e602 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e544:	2b00      	cmp	r3, #0
 800e546:	db08      	blt.n	800e55a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e54e:	b29b      	uxth	r3, r3
 800e550:	3301      	adds	r3, #1
 800e552:	b29b      	uxth	r3, r3
 800e554:	b21a      	sxth	r2, r3
 800e556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e558:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d04f      	beq.n	800e602 <tcp_slowtmr+0x1f2>
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e56e:	429a      	cmp	r2, r3
 800e570:	db47      	blt.n	800e602 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d018      	beq.n	800e5ac <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e580:	2b0c      	cmp	r3, #12
 800e582:	bf28      	it	cs
 800e584:	230c      	movcs	r3, #12
 800e586:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e58e:	10db      	asrs	r3, r3, #3
 800e590:	b21b      	sxth	r3, r3
 800e592:	461a      	mov	r2, r3
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e59a:	4413      	add	r3, r2
 800e59c:	7efa      	ldrb	r2, [r7, #27]
 800e59e:	493f      	ldr	r1, [pc, #252]	; (800e69c <tcp_slowtmr+0x28c>)
 800e5a0:	5c8a      	ldrb	r2, [r1, r2]
 800e5a2:	4093      	lsls	r3, r2
 800e5a4:	b21a      	sxth	r2, r3
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	bf28      	it	cs
 800e5c2:	4613      	movcs	r3, r2
 800e5c4:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800e5c6:	8b3b      	ldrh	r3, [r7, #24]
 800e5c8:	085b      	lsrs	r3, r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d206      	bcs.n	800e5f2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5e8:	005b      	lsls	r3, r3, #1
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5fe:	f004 fa3f 	bl	8012a80 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	7d1b      	ldrb	r3, [r3, #20]
 800e606:	2b06      	cmp	r3, #6
 800e608:	d10f      	bne.n	800e62a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	7e9b      	ldrb	r3, [r3, #26]
 800e60e:	f003 0310 	and.w	r3, r3, #16
 800e612:	2b00      	cmp	r3, #0
 800e614:	d009      	beq.n	800e62a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e616:	4b18      	ldr	r3, [pc, #96]	; (800e678 <tcp_slowtmr+0x268>)
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	1ad3      	subs	r3, r2, r3
 800e620:	2b28      	cmp	r3, #40	; 0x28
 800e622:	d902      	bls.n	800e62a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e624:	7ffb      	ldrb	r3, [r7, #31]
 800e626:	3301      	adds	r3, #1
 800e628:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	7a1b      	ldrb	r3, [r3, #8]
 800e62e:	f003 0308 	and.w	r3, r3, #8
 800e632:	2b00      	cmp	r3, #0
 800e634:	d05d      	beq.n	800e6f2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e63a:	2b04      	cmp	r3, #4
 800e63c:	d003      	beq.n	800e646 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e642:	2b07      	cmp	r3, #7
 800e644:	d155      	bne.n	800e6f2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e646:	4b0c      	ldr	r3, [pc, #48]	; (800e678 <tcp_slowtmr+0x268>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e656:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e65a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e65e:	4910      	ldr	r1, [pc, #64]	; (800e6a0 <tcp_slowtmr+0x290>)
 800e660:	fba1 1303 	umull	r1, r3, r1, r3
 800e664:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e666:	429a      	cmp	r2, r3
 800e668:	d91c      	bls.n	800e6a4 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e66a:	7ffb      	ldrb	r3, [r7, #31]
 800e66c:	3301      	adds	r3, #1
 800e66e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e670:	7fbb      	ldrb	r3, [r7, #30]
 800e672:	3301      	adds	r3, #1
 800e674:	77bb      	strb	r3, [r7, #30]
 800e676:	e03c      	b.n	800e6f2 <tcp_slowtmr+0x2e2>
 800e678:	20007d30 	.word	0x20007d30
 800e67c:	200043e2 	.word	0x200043e2
 800e680:	20007d2c 	.word	0x20007d2c
 800e684:	08017b50 	.word	0x08017b50
 800e688:	08017d00 	.word	0x08017d00
 800e68c:	08017b8c 	.word	0x08017b8c
 800e690:	08017d2c 	.word	0x08017d2c
 800e694:	08017d58 	.word	0x08017d58
 800e698:	08018abc 	.word	0x08018abc
 800e69c:	08018aac 	.word	0x08018aac
 800e6a0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6a4:	4b97      	ldr	r3, [pc, #604]	; (800e904 <tcp_slowtmr+0x4f4>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	6a1b      	ldr	r3, [r3, #32]
 800e6ac:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	4b92      	ldr	r3, [pc, #584]	; (800e908 <tcp_slowtmr+0x4f8>)
 800e6be:	fb03 f300 	mul.w	r3, r3, r0
 800e6c2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e6c4:	4991      	ldr	r1, [pc, #580]	; (800e90c <tcp_slowtmr+0x4fc>)
 800e6c6:	fba1 1303 	umull	r1, r3, r1, r3
 800e6ca:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d910      	bls.n	800e6f2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800e6d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6d2:	f004 fab2 	bl	8012c3a <tcp_keepalive>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e6da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d107      	bne.n	800e6f2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d016      	beq.n	800e728 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e6fa:	4b82      	ldr	r3, [pc, #520]	; (800e904 <tcp_slowtmr+0x4f4>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	1ad2      	subs	r2, r2, r3
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e70a:	4619      	mov	r1, r3
 800e70c:	460b      	mov	r3, r1
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	440b      	add	r3, r1
 800e712:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e714:	429a      	cmp	r2, r3
 800e716:	d307      	bcc.n	800e728 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800e718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 fa04 	bl	800eb2a <tcp_segs_free>
      pcb->ooseq = NULL;
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	2200      	movs	r2, #0
 800e726:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	7d1b      	ldrb	r3, [r3, #20]
 800e72c:	2b03      	cmp	r3, #3
 800e72e:	d109      	bne.n	800e744 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e730:	4b74      	ldr	r3, [pc, #464]	; (800e904 <tcp_slowtmr+0x4f4>)
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	2b28      	cmp	r3, #40	; 0x28
 800e73c:	d902      	bls.n	800e744 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e73e:	7ffb      	ldrb	r3, [r7, #31]
 800e740:	3301      	adds	r3, #1
 800e742:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	7d1b      	ldrb	r3, [r3, #20]
 800e748:	2b09      	cmp	r3, #9
 800e74a:	d109      	bne.n	800e760 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e74c:	4b6d      	ldr	r3, [pc, #436]	; (800e904 <tcp_slowtmr+0x4f4>)
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	6a1b      	ldr	r3, [r3, #32]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	2bf0      	cmp	r3, #240	; 0xf0
 800e758:	d902      	bls.n	800e760 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800e75a:	7ffb      	ldrb	r3, [r7, #31]
 800e75c:	3301      	adds	r3, #1
 800e75e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e760:	7ffb      	ldrb	r3, [r7, #31]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d05d      	beq.n	800e822 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e76c:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e76e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e770:	f000 fc44 	bl	800effc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d010      	beq.n	800e79c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e77a:	4b65      	ldr	r3, [pc, #404]	; (800e910 <tcp_slowtmr+0x500>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e780:	429a      	cmp	r2, r3
 800e782:	d106      	bne.n	800e792 <tcp_slowtmr+0x382>
 800e784:	4b63      	ldr	r3, [pc, #396]	; (800e914 <tcp_slowtmr+0x504>)
 800e786:	f240 4289 	movw	r2, #1161	; 0x489
 800e78a:	4963      	ldr	r1, [pc, #396]	; (800e918 <tcp_slowtmr+0x508>)
 800e78c:	4863      	ldr	r0, [pc, #396]	; (800e91c <tcp_slowtmr+0x50c>)
 800e78e:	f006 faab 	bl	8014ce8 <iprintf>
        prev->next = pcb->next;
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	68da      	ldr	r2, [r3, #12]
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	60da      	str	r2, [r3, #12]
 800e79a:	e00f      	b.n	800e7bc <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e79c:	4b5c      	ldr	r3, [pc, #368]	; (800e910 <tcp_slowtmr+0x500>)
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d006      	beq.n	800e7b4 <tcp_slowtmr+0x3a4>
 800e7a6:	4b5b      	ldr	r3, [pc, #364]	; (800e914 <tcp_slowtmr+0x504>)
 800e7a8:	f240 428d 	movw	r2, #1165	; 0x48d
 800e7ac:	495c      	ldr	r1, [pc, #368]	; (800e920 <tcp_slowtmr+0x510>)
 800e7ae:	485b      	ldr	r0, [pc, #364]	; (800e91c <tcp_slowtmr+0x50c>)
 800e7b0:	f006 fa9a 	bl	8014ce8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	4a55      	ldr	r2, [pc, #340]	; (800e910 <tcp_slowtmr+0x500>)
 800e7ba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e7bc:	7fbb      	ldrb	r3, [r7, #30]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d010      	beq.n	800e7e4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e7ca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	1d1d      	adds	r5, r3, #4
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	8adb      	ldrh	r3, [r3, #22]
 800e7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d6:	8b12      	ldrh	r2, [r2, #24]
 800e7d8:	9201      	str	r2, [sp, #4]
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	462b      	mov	r3, r5
 800e7de:	4622      	mov	r2, r4
 800e7e0:	f004 f8d8 	bl	8012994 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	7d1b      	ldrb	r3, [r3, #20]
 800e7ee:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e7fa:	68b9      	ldr	r1, [r7, #8]
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	f7fd ffd9 	bl	800c7b4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800e802:	4b48      	ldr	r3, [pc, #288]	; (800e924 <tcp_slowtmr+0x514>)
 800e804:	2200      	movs	r2, #0
 800e806:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d004      	beq.n	800e818 <tcp_slowtmr+0x408>
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f06f 010c 	mvn.w	r1, #12
 800e814:	6938      	ldr	r0, [r7, #16]
 800e816:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e818:	4b42      	ldr	r3, [pc, #264]	; (800e924 <tcp_slowtmr+0x514>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d035      	beq.n	800e88c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800e820:	e606      	b.n	800e430 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	7edb      	ldrb	r3, [r3, #27]
 800e830:	3301      	adds	r3, #1
 800e832:	b2da      	uxtb	r2, r3
 800e834:	6a3b      	ldr	r3, [r7, #32]
 800e836:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	7eda      	ldrb	r2, [r3, #27]
 800e83c:	6a3b      	ldr	r3, [r7, #32]
 800e83e:	7f1b      	ldrb	r3, [r3, #28]
 800e840:	429a      	cmp	r2, r3
 800e842:	d323      	bcc.n	800e88c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	2200      	movs	r2, #0
 800e848:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e84a:	4b36      	ldr	r3, [pc, #216]	; (800e924 <tcp_slowtmr+0x514>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <tcp_slowtmr+0x460>
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e860:	6a3a      	ldr	r2, [r7, #32]
 800e862:	6912      	ldr	r2, [r2, #16]
 800e864:	6a39      	ldr	r1, [r7, #32]
 800e866:	4610      	mov	r0, r2
 800e868:	4798      	blx	r3
 800e86a:	4603      	mov	r3, r0
 800e86c:	777b      	strb	r3, [r7, #29]
 800e86e:	e001      	b.n	800e874 <tcp_slowtmr+0x464>
 800e870:	2300      	movs	r3, #0
 800e872:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800e874:	4b2b      	ldr	r3, [pc, #172]	; (800e924 <tcp_slowtmr+0x514>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d000      	beq.n	800e87e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800e87c:	e5d8      	b.n	800e430 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e87e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d102      	bne.n	800e88c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800e886:	6a38      	ldr	r0, [r7, #32]
 800e888:	f003 fdfc 	bl	8012484 <tcp_output>
  while (pcb != NULL) {
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f47f add4 	bne.w	800e43c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e894:	2300      	movs	r3, #0
 800e896:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800e898:	4b23      	ldr	r3, [pc, #140]	; (800e928 <tcp_slowtmr+0x518>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e89e:	e068      	b.n	800e972 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	7d1b      	ldrb	r3, [r3, #20]
 800e8a4:	2b0a      	cmp	r3, #10
 800e8a6:	d006      	beq.n	800e8b6 <tcp_slowtmr+0x4a6>
 800e8a8:	4b1a      	ldr	r3, [pc, #104]	; (800e914 <tcp_slowtmr+0x504>)
 800e8aa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e8ae:	491f      	ldr	r1, [pc, #124]	; (800e92c <tcp_slowtmr+0x51c>)
 800e8b0:	481a      	ldr	r0, [pc, #104]	; (800e91c <tcp_slowtmr+0x50c>)
 800e8b2:	f006 fa19 	bl	8014ce8 <iprintf>
    pcb_remove = 0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e8ba:	4b12      	ldr	r3, [pc, #72]	; (800e904 <tcp_slowtmr+0x4f4>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	2bf0      	cmp	r3, #240	; 0xf0
 800e8c6:	d902      	bls.n	800e8ce <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800e8c8:	7ffb      	ldrb	r3, [r7, #31]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e8ce:	7ffb      	ldrb	r3, [r7, #31]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d049      	beq.n	800e968 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8d6:	f000 fb91 	bl	800effc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d029      	beq.n	800e934 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e8e0:	4b11      	ldr	r3, [pc, #68]	; (800e928 <tcp_slowtmr+0x518>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d106      	bne.n	800e8f8 <tcp_slowtmr+0x4e8>
 800e8ea:	4b0a      	ldr	r3, [pc, #40]	; (800e914 <tcp_slowtmr+0x504>)
 800e8ec:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800e8f0:	490f      	ldr	r1, [pc, #60]	; (800e930 <tcp_slowtmr+0x520>)
 800e8f2:	480a      	ldr	r0, [pc, #40]	; (800e91c <tcp_slowtmr+0x50c>)
 800e8f4:	f006 f9f8 	bl	8014ce8 <iprintf>
        prev->next = pcb->next;
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	68da      	ldr	r2, [r3, #12]
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	60da      	str	r2, [r3, #12]
 800e900:	e028      	b.n	800e954 <tcp_slowtmr+0x544>
 800e902:	bf00      	nop
 800e904:	20007d30 	.word	0x20007d30
 800e908:	000124f8 	.word	0x000124f8
 800e90c:	10624dd3 	.word	0x10624dd3
 800e910:	20007d2c 	.word	0x20007d2c
 800e914:	08017b50 	.word	0x08017b50
 800e918:	08017d88 	.word	0x08017d88
 800e91c:	08017b8c 	.word	0x08017b8c
 800e920:	08017db4 	.word	0x08017db4
 800e924:	20007d28 	.word	0x20007d28
 800e928:	20007d3c 	.word	0x20007d3c
 800e92c:	08017de0 	.word	0x08017de0
 800e930:	08017e10 	.word	0x08017e10
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e934:	4b12      	ldr	r3, [pc, #72]	; (800e980 <tcp_slowtmr+0x570>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d006      	beq.n	800e94c <tcp_slowtmr+0x53c>
 800e93e:	4b11      	ldr	r3, [pc, #68]	; (800e984 <tcp_slowtmr+0x574>)
 800e940:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800e944:	4910      	ldr	r1, [pc, #64]	; (800e988 <tcp_slowtmr+0x578>)
 800e946:	4811      	ldr	r0, [pc, #68]	; (800e98c <tcp_slowtmr+0x57c>)
 800e948:	f006 f9ce 	bl	8014ce8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	4a0b      	ldr	r2, [pc, #44]	; (800e980 <tcp_slowtmr+0x570>)
 800e952:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	2001      	movs	r0, #1
 800e962:	f7fd ff27 	bl	800c7b4 <memp_free>
 800e966:	e004      	b.n	800e972 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d193      	bne.n	800e8a0 <tcp_slowtmr+0x490>
    }
  }
}
 800e978:	bf00      	nop
 800e97a:	3728      	adds	r7, #40	; 0x28
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bdb0      	pop	{r4, r5, r7, pc}
 800e980:	20007d3c 	.word	0x20007d3c
 800e984:	08017b50 	.word	0x08017b50
 800e988:	08017e38 	.word	0x08017e38
 800e98c:	08017b8c 	.word	0x08017b8c

0800e990 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e996:	4b2d      	ldr	r3, [pc, #180]	; (800ea4c <tcp_fasttmr+0xbc>)
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	3301      	adds	r3, #1
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	4b2b      	ldr	r3, [pc, #172]	; (800ea4c <tcp_fasttmr+0xbc>)
 800e9a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <tcp_fasttmr+0xc0>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9a8:	e048      	b.n	800ea3c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7f5a      	ldrb	r2, [r3, #29]
 800e9ae:	4b27      	ldr	r3, [pc, #156]	; (800ea4c <tcp_fasttmr+0xbc>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d03f      	beq.n	800ea36 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e9b6:	4b25      	ldr	r3, [pc, #148]	; (800ea4c <tcp_fasttmr+0xbc>)
 800e9b8:	781a      	ldrb	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7e9b      	ldrb	r3, [r3, #26]
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d010      	beq.n	800e9ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	7e9b      	ldrb	r3, [r3, #26]
 800e9ce:	f043 0302 	orr.w	r3, r3, #2
 800e9d2:	b2da      	uxtb	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f003 fd53 	bl	8012484 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	7e9b      	ldrb	r3, [r3, #26]
 800e9e2:	f023 0303 	bic.w	r3, r3, #3
 800e9e6:	b2da      	uxtb	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	7e9b      	ldrb	r3, [r3, #26]
 800e9f0:	f003 0308 	and.w	r3, r3, #8
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d009      	beq.n	800ea0c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7e9b      	ldrb	r3, [r3, #26]
 800e9fc:	f023 0308 	bic.w	r3, r3, #8
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff f956 	bl	800dcb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ea1a:	4b0e      	ldr	r3, [pc, #56]	; (800ea54 <tcp_fasttmr+0xc4>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f819 	bl	800ea58 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ea26:	4b0b      	ldr	r3, [pc, #44]	; (800ea54 <tcp_fasttmr+0xc4>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d000      	beq.n	800ea30 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ea2e:	e7b8      	b.n	800e9a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	607b      	str	r3, [r7, #4]
 800ea34:	e002      	b.n	800ea3c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1b3      	bne.n	800e9aa <tcp_fasttmr+0x1a>
    }
  }
}
 800ea42:	bf00      	nop
 800ea44:	3708      	adds	r7, #8
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200043e2 	.word	0x200043e2
 800ea50:	20007d2c 	.word	0x20007d2c
 800ea54:	20007d28 	.word	0x20007d28

0800ea58 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ea58:	b590      	push	{r4, r7, lr}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea64:	7b5b      	ldrb	r3, [r3, #13]
 800ea66:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea6c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00b      	beq.n	800ea96 <tcp_process_refused_data+0x3e>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6918      	ldr	r0, [r3, #16]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	47a0      	blx	r4
 800ea90:	4603      	mov	r3, r0
 800ea92:	73fb      	strb	r3, [r7, #15]
 800ea94:	e007      	b.n	800eaa6 <tcp_process_refused_data+0x4e>
 800ea96:	2300      	movs	r3, #0
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	6879      	ldr	r1, [r7, #4]
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f000 f88c 	bl	800ebba <tcp_recv_null>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eaa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d12a      	bne.n	800eb04 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800eaae:	7bbb      	ldrb	r3, [r7, #14]
 800eab0:	f003 0320 	and.w	r3, r3, #32
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d033      	beq.n	800eb20 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eabc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eac0:	d005      	beq.n	800eace <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eac6:	3301      	adds	r3, #1
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00b      	beq.n	800eaf0 <tcp_process_refused_data+0x98>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6918      	ldr	r0, [r3, #16]
 800eae2:	2300      	movs	r3, #0
 800eae4:	2200      	movs	r2, #0
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	47a0      	blx	r4
 800eaea:	4603      	mov	r3, r0
 800eaec:	73fb      	strb	r3, [r7, #15]
 800eaee:	e001      	b.n	800eaf4 <tcp_process_refused_data+0x9c>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eaf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf8:	f113 0f0d 	cmn.w	r3, #13
 800eafc:	d110      	bne.n	800eb20 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800eafe:	f06f 030c 	mvn.w	r3, #12
 800eb02:	e00e      	b.n	800eb22 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800eb04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb08:	f113 0f0d 	cmn.w	r3, #13
 800eb0c:	d102      	bne.n	800eb14 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eb0e:	f06f 030c 	mvn.w	r3, #12
 800eb12:	e006      	b.n	800eb22 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800eb1a:	f06f 0304 	mvn.w	r3, #4
 800eb1e:	e000      	b.n	800eb22 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd90      	pop	{r4, r7, pc}

0800eb2a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eb32:	e007      	b.n	800eb44 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f809 	bl	800eb52 <tcp_seg_free>
    seg = next;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1f4      	bne.n	800eb34 <tcp_segs_free+0xa>
  }
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b082      	sub	sp, #8
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00c      	beq.n	800eb7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fb83 	bl	800d278 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eb72:	6879      	ldr	r1, [r7, #4]
 800eb74:	2003      	movs	r0, #3
 800eb76:	f7fd fe1d 	bl	800c7b4 <memp_free>
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb8a:	2003      	movs	r0, #3
 800eb8c:	f7fd fdc0 	bl	800c710 <memp_malloc>
 800eb90:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <tcp_seg_copy+0x1a>
    return NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e00a      	b.n	800ebb2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb9c:	2210      	movs	r2, #16
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f006 f88e 	bl	8014cc2 <memcpy>
  pbuf_ref(cseg->p);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fe fc16 	bl	800d3dc <pbuf_ref>
  return cseg;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b084      	sub	sp, #16
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	60b9      	str	r1, [r7, #8]
 800ebc4:	607a      	str	r2, [r7, #4]
 800ebc6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d009      	beq.n	800ebe2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	891b      	ldrh	r3, [r3, #8]
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	68b8      	ldr	r0, [r7, #8]
 800ebd6:	f7ff fb7d 	bl	800e2d4 <tcp_recved>
    pbuf_free(p);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7fe fb4c 	bl	800d278 <pbuf_free>
 800ebe0:	e008      	b.n	800ebf4 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800ebe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d104      	bne.n	800ebf4 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800ebea:	68b8      	ldr	r0, [r7, #8]
 800ebec:	f7ff f8ca 	bl	800dd84 <tcp_close>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	e000      	b.n	800ebf6 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ec0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	db01      	blt.n	800ec16 <tcp_kill_prio+0x16>
 800ec12:	79fb      	ldrb	r3, [r7, #7]
 800ec14:	e000      	b.n	800ec18 <tcp_kill_prio+0x18>
 800ec16:	237f      	movs	r3, #127	; 0x7f
 800ec18:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec22:	4b16      	ldr	r3, [pc, #88]	; (800ec7c <tcp_kill_prio+0x7c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	e01a      	b.n	800ec60 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	7d5b      	ldrb	r3, [r3, #21]
 800ec2e:	7afa      	ldrb	r2, [r7, #11]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d312      	bcc.n	800ec5a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec34:	4b12      	ldr	r3, [pc, #72]	; (800ec80 <tcp_kill_prio+0x80>)
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	6a1b      	ldr	r3, [r3, #32]
 800ec3c:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d30a      	bcc.n	800ec5a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ec44:	4b0e      	ldr	r3, [pc, #56]	; (800ec80 <tcp_kill_prio+0x80>)
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	6a1b      	ldr	r3, [r3, #32]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	7d5b      	ldrb	r3, [r3, #21]
 800ec58:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e1      	bne.n	800ec2a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec6c:	6938      	ldr	r0, [r7, #16]
 800ec6e:	f7ff f99b 	bl	800dfa8 <tcp_abort>
  }
}
 800ec72:	bf00      	nop
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20007d2c 	.word	0x20007d2c
 800ec80:	20007d30 	.word	0x20007d30

0800ec84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b086      	sub	sp, #24
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec8e:	79fb      	ldrb	r3, [r7, #7]
 800ec90:	2b08      	cmp	r3, #8
 800ec92:	d009      	beq.n	800eca8 <tcp_kill_state+0x24>
 800ec94:	79fb      	ldrb	r3, [r7, #7]
 800ec96:	2b09      	cmp	r3, #9
 800ec98:	d006      	beq.n	800eca8 <tcp_kill_state+0x24>
 800ec9a:	4b1a      	ldr	r3, [pc, #104]	; (800ed04 <tcp_kill_state+0x80>)
 800ec9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800eca0:	4919      	ldr	r1, [pc, #100]	; (800ed08 <tcp_kill_state+0x84>)
 800eca2:	481a      	ldr	r0, [pc, #104]	; (800ed0c <tcp_kill_state+0x88>)
 800eca4:	f006 f820 	bl	8014ce8 <iprintf>

  inactivity = 0;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ecac:	2300      	movs	r3, #0
 800ecae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecb0:	4b17      	ldr	r3, [pc, #92]	; (800ed10 <tcp_kill_state+0x8c>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e017      	b.n	800ece8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	7d1b      	ldrb	r3, [r3, #20]
 800ecbc:	79fa      	ldrb	r2, [r7, #7]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d10f      	bne.n	800ece2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecc2:	4b14      	ldr	r3, [pc, #80]	; (800ed14 <tcp_kill_state+0x90>)
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	6a1b      	ldr	r3, [r3, #32]
 800ecca:	1ad2      	subs	r2, r2, r3
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d307      	bcc.n	800ece2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecd2:	4b10      	ldr	r3, [pc, #64]	; (800ed14 <tcp_kill_state+0x90>)
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	6a1b      	ldr	r3, [r3, #32]
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1e4      	bne.n	800ecb8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d003      	beq.n	800ecfc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	6938      	ldr	r0, [r7, #16]
 800ecf8:	f7ff f8a4 	bl	800de44 <tcp_abandon>
  }
}
 800ecfc:	bf00      	nop
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	08017b50 	.word	0x08017b50
 800ed08:	08017e60 	.word	0x08017e60
 800ed0c:	08017b8c 	.word	0x08017b8c
 800ed10:	20007d2c 	.word	0x20007d2c
 800ed14:	20007d30 	.word	0x20007d30

0800ed18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed26:	4b12      	ldr	r3, [pc, #72]	; (800ed70 <tcp_kill_timewait+0x58>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
 800ed2c:	e012      	b.n	800ed54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed2e:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <tcp_kill_timewait+0x5c>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	1ad2      	subs	r2, r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d307      	bcc.n	800ed4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed3e:	4b0d      	ldr	r3, [pc, #52]	; (800ed74 <tcp_kill_timewait+0x5c>)
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1e9      	bne.n	800ed2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed60:	68b8      	ldr	r0, [r7, #8]
 800ed62:	f7ff f921 	bl	800dfa8 <tcp_abort>
  }
}
 800ed66:	bf00      	nop
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	20007d3c 	.word	0x20007d3c
 800ed74:	20007d30 	.word	0x20007d30

0800ed78 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	4603      	mov	r3, r0
 800ed80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed82:	2001      	movs	r0, #1
 800ed84:	f7fd fcc4 	bl	800c710 <memp_malloc>
 800ed88:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d124      	bne.n	800edda <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ed90:	f7ff ffc2 	bl	800ed18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed94:	2001      	movs	r0, #1
 800ed96:	f7fd fcbb 	bl	800c710 <memp_malloc>
 800ed9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d11b      	bne.n	800edda <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eda2:	2009      	movs	r0, #9
 800eda4:	f7ff ff6e 	bl	800ec84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eda8:	2001      	movs	r0, #1
 800edaa:	f7fd fcb1 	bl	800c710 <memp_malloc>
 800edae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d111      	bne.n	800edda <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800edb6:	2008      	movs	r0, #8
 800edb8:	f7ff ff64 	bl	800ec84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edbc:	2001      	movs	r0, #1
 800edbe:	f7fd fca7 	bl	800c710 <memp_malloc>
 800edc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d107      	bne.n	800edda <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff ff17 	bl	800ec00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edd2:	2001      	movs	r0, #1
 800edd4:	f7fd fc9c 	bl	800c710 <memp_malloc>
 800edd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d03f      	beq.n	800ee60 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ede0:	2298      	movs	r2, #152	; 0x98
 800ede2:	2100      	movs	r1, #0
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f005 ff77 	bl	8014cd8 <memset>
    pcb->prio = prio;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	79fa      	ldrb	r2, [r7, #7]
 800edee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800edf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	22ff      	movs	r2, #255	; 0xff
 800ee0e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ee16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2206      	movs	r2, #6
 800ee1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2206      	movs	r2, #6
 800ee24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ee36:	4b0d      	ldr	r3, [pc, #52]	; (800ee6c <tcp_alloc+0xf4>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee3e:	4b0c      	ldr	r3, [pc, #48]	; (800ee70 <tcp_alloc+0xf8>)
 800ee40:	781a      	ldrb	r2, [r3, #0]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ee4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	4a08      	ldr	r2, [pc, #32]	; (800ee74 <tcp_alloc+0xfc>)
 800ee54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	4a07      	ldr	r2, [pc, #28]	; (800ee78 <tcp_alloc+0x100>)
 800ee5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee60:	68fb      	ldr	r3, [r7, #12]
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20007d30 	.word	0x20007d30
 800ee70:	200043e2 	.word	0x200043e2
 800ee74:	0800ebbb 	.word	0x0800ebbb
 800ee78:	006ddd00 	.word	0x006ddd00

0800ee7c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	4603      	mov	r3, r0
 800ee84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ee86:	2040      	movs	r0, #64	; 0x40
 800ee88:	f7ff ff76 	bl	800ed78 <tcp_alloc>
 800ee8c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	611a      	str	r2, [r3, #16]
  }
}
 800eeae:	bf00      	nop
 800eeb0:	370c      	adds	r7, #12
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr
	...

0800eebc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00e      	beq.n	800eeea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d106      	bne.n	800eee2 <tcp_recv+0x26>
 800eed4:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <tcp_recv+0x38>)
 800eed6:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800eeda:	4907      	ldr	r1, [pc, #28]	; (800eef8 <tcp_recv+0x3c>)
 800eedc:	4807      	ldr	r0, [pc, #28]	; (800eefc <tcp_recv+0x40>)
 800eede:	f005 ff03 	bl	8014ce8 <iprintf>
    pcb->recv = recv;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800eeea:	bf00      	nop
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	08017b50 	.word	0x08017b50
 800eef8:	08017e70 	.word	0x08017e70
 800eefc:	08017b8c 	.word	0x08017b8c

0800ef00 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00d      	beq.n	800ef2c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7d1b      	ldrb	r3, [r3, #20]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d106      	bne.n	800ef26 <tcp_sent+0x26>
 800ef18:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <tcp_sent+0x34>)
 800ef1a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800ef1e:	4906      	ldr	r1, [pc, #24]	; (800ef38 <tcp_sent+0x38>)
 800ef20:	4806      	ldr	r0, [pc, #24]	; (800ef3c <tcp_sent+0x3c>)
 800ef22:	f005 fee1 	bl	8014ce8 <iprintf>
    pcb->sent = sent;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08017b50 	.word	0x08017b50
 800ef38:	08017e98 	.word	0x08017e98
 800ef3c:	08017b8c 	.word	0x08017b8c

0800ef40 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00e      	beq.n	800ef6e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	7d1b      	ldrb	r3, [r3, #20]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d106      	bne.n	800ef66 <tcp_err+0x26>
 800ef58:	4b07      	ldr	r3, [pc, #28]	; (800ef78 <tcp_err+0x38>)
 800ef5a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800ef5e:	4907      	ldr	r1, [pc, #28]	; (800ef7c <tcp_err+0x3c>)
 800ef60:	4807      	ldr	r0, [pc, #28]	; (800ef80 <tcp_err+0x40>)
 800ef62:	f005 fec1 	bl	8014ce8 <iprintf>
    pcb->errf = err;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800ef6e:	bf00      	nop
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	08017b50 	.word	0x08017b50
 800ef7c:	08017ec0 	.word	0x08017ec0
 800ef80:	08017b8c 	.word	0x08017b8c

0800ef84 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d008      	beq.n	800efa6 <tcp_accept+0x22>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	7d1b      	ldrb	r3, [r3, #20]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d104      	bne.n	800efa6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	619a      	str	r2, [r3, #24]
  }
}
 800efa6:	bf00      	nop
 800efa8:	3714      	adds	r7, #20
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
	...

0800efb4 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	4613      	mov	r3, r2
 800efc0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	7d1b      	ldrb	r3, [r3, #20]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d106      	bne.n	800efd8 <tcp_poll+0x24>
 800efca:	4b09      	ldr	r3, [pc, #36]	; (800eff0 <tcp_poll+0x3c>)
 800efcc:	f240 7203 	movw	r2, #1795	; 0x703
 800efd0:	4908      	ldr	r1, [pc, #32]	; (800eff4 <tcp_poll+0x40>)
 800efd2:	4809      	ldr	r0, [pc, #36]	; (800eff8 <tcp_poll+0x44>)
 800efd4:	f005 fe88 	bl	8014ce8 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	79fa      	ldrb	r2, [r7, #7]
 800efe4:	771a      	strb	r2, [r3, #28]
}
 800efe6:	bf00      	nop
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	08017b50 	.word	0x08017b50
 800eff4:	08017ee8 	.word	0x08017ee8
 800eff8:	08017b8c 	.word	0x08017b8c

0800effc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d034      	beq.n	800f076 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f010:	2b0a      	cmp	r3, #10
 800f012:	d030      	beq.n	800f076 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d02c      	beq.n	800f076 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f020:	2b00      	cmp	r3, #0
 800f022:	d007      	beq.n	800f034 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe f925 	bl	800d278 <pbuf_free>
      pcb->refused_data = NULL;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff fd76 	bl	800eb2a <tcp_segs_free>
    pcb->ooseq = NULL;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f04a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff fd6a 	bl	800eb2a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff fd65 	bl	800eb2a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	669a      	str	r2, [r3, #104]	; 0x68
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f076:	bf00      	nop
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
	...

0800f080 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	429a      	cmp	r2, r3
 800f092:	d105      	bne.n	800f0a0 <tcp_pcb_remove+0x20>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68da      	ldr	r2, [r3, #12]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	601a      	str	r2, [r3, #0]
 800f09e:	e013      	b.n	800f0c8 <tcp_pcb_remove+0x48>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	e00c      	b.n	800f0c2 <tcp_pcb_remove+0x42>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	68da      	ldr	r2, [r3, #12]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d104      	bne.n	800f0bc <tcp_pcb_remove+0x3c>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	68da      	ldr	r2, [r3, #12]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	60da      	str	r2, [r3, #12]
 800f0ba:	e005      	b.n	800f0c8 <tcp_pcb_remove+0x48>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	60fb      	str	r3, [r7, #12]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ef      	bne.n	800f0a8 <tcp_pcb_remove+0x28>
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f0ce:	6838      	ldr	r0, [r7, #0]
 800f0d0:	f7ff ff94 	bl	800effc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
 800f0d8:	2b0a      	cmp	r3, #10
 800f0da:	d013      	beq.n	800f104 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d00f      	beq.n	800f104 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	7e9b      	ldrb	r3, [r3, #26]
 800f0e8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d009      	beq.n	800f104 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	7e9b      	ldrb	r3, [r3, #26]
 800f0f4:	f043 0302 	orr.w	r3, r3, #2
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f0fe:	6838      	ldr	r0, [r7, #0]
 800f100:	f003 f9c0 	bl	8012484 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	7d1b      	ldrb	r3, [r3, #20]
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d020      	beq.n	800f14e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <tcp_pcb_remove+0xa2>
 800f114:	4b13      	ldr	r3, [pc, #76]	; (800f164 <tcp_pcb_remove+0xe4>)
 800f116:	f240 7253 	movw	r2, #1875	; 0x753
 800f11a:	4913      	ldr	r1, [pc, #76]	; (800f168 <tcp_pcb_remove+0xe8>)
 800f11c:	4813      	ldr	r0, [pc, #76]	; (800f16c <tcp_pcb_remove+0xec>)
 800f11e:	f005 fde3 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f126:	2b00      	cmp	r3, #0
 800f128:	d006      	beq.n	800f138 <tcp_pcb_remove+0xb8>
 800f12a:	4b0e      	ldr	r3, [pc, #56]	; (800f164 <tcp_pcb_remove+0xe4>)
 800f12c:	f240 7254 	movw	r2, #1876	; 0x754
 800f130:	490f      	ldr	r1, [pc, #60]	; (800f170 <tcp_pcb_remove+0xf0>)
 800f132:	480e      	ldr	r0, [pc, #56]	; (800f16c <tcp_pcb_remove+0xec>)
 800f134:	f005 fdd8 	bl	8014ce8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d006      	beq.n	800f14e <tcp_pcb_remove+0xce>
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <tcp_pcb_remove+0xe4>)
 800f142:	f240 7256 	movw	r2, #1878	; 0x756
 800f146:	490b      	ldr	r1, [pc, #44]	; (800f174 <tcp_pcb_remove+0xf4>)
 800f148:	4808      	ldr	r0, [pc, #32]	; (800f16c <tcp_pcb_remove+0xec>)
 800f14a:	f005 fdcd 	bl	8014ce8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2200      	movs	r2, #0
 800f152:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2200      	movs	r2, #0
 800f158:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f15a:	bf00      	nop
 800f15c:	3710      	adds	r7, #16
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	08017b50 	.word	0x08017b50
 800f168:	08017f08 	.word	0x08017f08
 800f16c:	08017b8c 	.word	0x08017b8c
 800f170:	08017f20 	.word	0x08017f20
 800f174:	08017f3c 	.word	0x08017f3c

0800f178 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f180:	4b07      	ldr	r3, [pc, #28]	; (800f1a0 <tcp_next_iss+0x28>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	4b07      	ldr	r3, [pc, #28]	; (800f1a4 <tcp_next_iss+0x2c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4413      	add	r3, r2
 800f18a:	4a05      	ldr	r2, [pc, #20]	; (800f1a0 <tcp_next_iss+0x28>)
 800f18c:	6013      	str	r3, [r2, #0]
  return iss;
 800f18e:	4b04      	ldr	r3, [pc, #16]	; (800f1a0 <tcp_next_iss+0x28>)
 800f190:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f192:	4618      	mov	r0, r3
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	20000014 	.word	0x20000014
 800f1a4:	20007d30 	.word	0x20007d30

0800f1a8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	6039      	str	r1, [r7, #0]
 800f1b2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f1b4:	6838      	ldr	r0, [r7, #0]
 800f1b6:	f7fb fdcb 	bl	800ad50 <ip4_route>
 800f1ba:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f1c2:	88fb      	ldrh	r3, [r7, #6]
 800f1c4:	e010      	b.n	800f1e8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f1ca:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f1cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d008      	beq.n	800f1e6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f1d4:	897b      	ldrh	r3, [r7, #10]
 800f1d6:	3b28      	subs	r3, #40	; 0x28
 800f1d8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f1da:	893a      	ldrh	r2, [r7, #8]
 800f1dc:	88fb      	ldrh	r3, [r7, #6]
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	bf28      	it	cs
 800f1e2:	4613      	movcs	r3, r2
 800f1e4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f1e6:	88fb      	ldrh	r3, [r7, #6]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1fe:	e011      	b.n	800f224 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d108      	bne.n	800f21e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7fe fec8 	bl	800dfa8 <tcp_abort>
      pcb = next;
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	e002      	b.n	800f224 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1ea      	bne.n	800f200 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
	...

0800f234 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d02c      	beq.n	800f29e <tcp_netif_ip_addr_changed+0x6a>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d028      	beq.n	800f29e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f24c:	4b16      	ldr	r3, [pc, #88]	; (800f2a8 <tcp_netif_ip_addr_changed+0x74>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4619      	mov	r1, r3
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f7ff ffcc 	bl	800f1f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f258:	4b14      	ldr	r3, [pc, #80]	; (800f2ac <tcp_netif_ip_addr_changed+0x78>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7ff ffc6 	bl	800f1f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d019      	beq.n	800f29e <tcp_netif_ip_addr_changed+0x6a>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d015      	beq.n	800f29e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f272:	4b0f      	ldr	r3, [pc, #60]	; (800f2b0 <tcp_netif_ip_addr_changed+0x7c>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	e00e      	b.n	800f298 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d103      	bne.n	800f294 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1ed      	bne.n	800f27a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f29e:	bf00      	nop
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20007d2c 	.word	0x20007d2c
 800f2ac:	20007d38 	.word	0x20007d38
 800f2b0:	20007d34 	.word	0x20007d34

0800f2b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f2b4:	b590      	push	{r4, r7, lr}
 800f2b6:	b08b      	sub	sp, #44	; 0x2c
 800f2b8:	af02      	add	r7, sp, #8
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	4a82      	ldr	r2, [pc, #520]	; (800f4cc <tcp_input+0x218>)
 800f2c4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	895b      	ldrh	r3, [r3, #10]
 800f2ca:	2b13      	cmp	r3, #19
 800f2cc:	f240 8388 	bls.w	800f9e0 <tcp_input+0x72c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2d0:	4b7f      	ldr	r3, [pc, #508]	; (800f4d0 <tcp_input+0x21c>)
 800f2d2:	695a      	ldr	r2, [r3, #20]
 800f2d4:	4b7e      	ldr	r3, [pc, #504]	; (800f4d0 <tcp_input+0x21c>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4619      	mov	r1, r3
 800f2da:	4610      	mov	r0, r2
 800f2dc:	f7fb ffcc 	bl	800b278 <ip4_addr_isbroadcast_u32>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f040 837f 	bne.w	800f9e6 <tcp_input+0x732>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2e8:	4b79      	ldr	r3, [pc, #484]	; (800f4d0 <tcp_input+0x21c>)
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2f0:	2be0      	cmp	r3, #224	; 0xe0
 800f2f2:	f000 8378 	beq.w	800f9e6 <tcp_input+0x732>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f2f6:	4b75      	ldr	r3, [pc, #468]	; (800f4cc <tcp_input+0x218>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	899b      	ldrh	r3, [r3, #12]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7f8 fa74 	bl	80077ec <lwip_htons>
 800f304:	4603      	mov	r3, r0
 800f306:	0b1b      	lsrs	r3, r3, #12
 800f308:	b29b      	uxth	r3, r3
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f310:	7cbb      	ldrb	r3, [r7, #18]
 800f312:	2b13      	cmp	r3, #19
 800f314:	f240 8367 	bls.w	800f9e6 <tcp_input+0x732>
 800f318:	7cbb      	ldrb	r3, [r7, #18]
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	891b      	ldrh	r3, [r3, #8]
 800f320:	429a      	cmp	r2, r3
 800f322:	f200 8360 	bhi.w	800f9e6 <tcp_input+0x732>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f326:	7cbb      	ldrb	r3, [r7, #18]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b14      	subs	r3, #20
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	4b69      	ldr	r3, [pc, #420]	; (800f4d4 <tcp_input+0x220>)
 800f330:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f332:	4b69      	ldr	r3, [pc, #420]	; (800f4d8 <tcp_input+0x224>)
 800f334:	2200      	movs	r2, #0
 800f336:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	895a      	ldrh	r2, [r3, #10]
 800f33c:	7cbb      	ldrb	r3, [r7, #18]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	429a      	cmp	r2, r3
 800f342:	d30d      	bcc.n	800f360 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f344:	4b63      	ldr	r3, [pc, #396]	; (800f4d4 <tcp_input+0x220>)
 800f346:	881a      	ldrh	r2, [r3, #0]
 800f348:	4b64      	ldr	r3, [pc, #400]	; (800f4dc <tcp_input+0x228>)
 800f34a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f34c:	7cbb      	ldrb	r3, [r7, #18]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	425b      	negs	r3, r3
 800f352:	b29b      	uxth	r3, r3
 800f354:	b21b      	sxth	r3, r3
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7fd ff69 	bl	800d230 <pbuf_header>
 800f35e:	e055      	b.n	800f40c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d105      	bne.n	800f374 <tcp_input+0xc0>
 800f368:	4b5d      	ldr	r3, [pc, #372]	; (800f4e0 <tcp_input+0x22c>)
 800f36a:	22b2      	movs	r2, #178	; 0xb2
 800f36c:	495d      	ldr	r1, [pc, #372]	; (800f4e4 <tcp_input+0x230>)
 800f36e:	485e      	ldr	r0, [pc, #376]	; (800f4e8 <tcp_input+0x234>)
 800f370:	f005 fcba 	bl	8014ce8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f374:	f06f 0113 	mvn.w	r1, #19
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7fd ff59 	bl	800d230 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	895a      	ldrh	r2, [r3, #10]
 800f382:	4b56      	ldr	r3, [pc, #344]	; (800f4dc <tcp_input+0x228>)
 800f384:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f386:	4b53      	ldr	r3, [pc, #332]	; (800f4d4 <tcp_input+0x220>)
 800f388:	881a      	ldrh	r2, [r3, #0]
 800f38a:	4b54      	ldr	r3, [pc, #336]	; (800f4dc <tcp_input+0x228>)
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f392:	4b52      	ldr	r3, [pc, #328]	; (800f4dc <tcp_input+0x228>)
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	425b      	negs	r3, r3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	b21b      	sxth	r3, r3
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fd ff46 	bl	800d230 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	895b      	ldrh	r3, [r3, #10]
 800f3aa:	8a3a      	ldrh	r2, [r7, #16]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	f200 8319 	bhi.w	800f9e4 <tcp_input+0x730>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4a47      	ldr	r2, [pc, #284]	; (800f4d8 <tcp_input+0x224>)
 800f3ba:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	8a3b      	ldrh	r3, [r7, #16]
 800f3c2:	425b      	negs	r3, r3
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	b21b      	sxth	r3, r3
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fd ff30 	bl	800d230 <pbuf_header>
    p->tot_len -= opt2len;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	8a3b      	ldrh	r3, [r7, #16]
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	895b      	ldrh	r3, [r3, #10]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d005      	beq.n	800f3f2 <tcp_input+0x13e>
 800f3e6:	4b3e      	ldr	r3, [pc, #248]	; (800f4e0 <tcp_input+0x22c>)
 800f3e8:	22cf      	movs	r2, #207	; 0xcf
 800f3ea:	4940      	ldr	r1, [pc, #256]	; (800f4ec <tcp_input+0x238>)
 800f3ec:	483e      	ldr	r0, [pc, #248]	; (800f4e8 <tcp_input+0x234>)
 800f3ee:	f005 fc7b 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	891a      	ldrh	r2, [r3, #8]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	891b      	ldrh	r3, [r3, #8]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d005      	beq.n	800f40c <tcp_input+0x158>
 800f400:	4b37      	ldr	r3, [pc, #220]	; (800f4e0 <tcp_input+0x22c>)
 800f402:	22d0      	movs	r2, #208	; 0xd0
 800f404:	493a      	ldr	r1, [pc, #232]	; (800f4f0 <tcp_input+0x23c>)
 800f406:	4838      	ldr	r0, [pc, #224]	; (800f4e8 <tcp_input+0x234>)
 800f408:	f005 fc6e 	bl	8014ce8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f40c:	4b2f      	ldr	r3, [pc, #188]	; (800f4cc <tcp_input+0x218>)
 800f40e:	681c      	ldr	r4, [r3, #0]
 800f410:	4b2e      	ldr	r3, [pc, #184]	; (800f4cc <tcp_input+0x218>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	b29b      	uxth	r3, r3
 800f418:	4618      	mov	r0, r3
 800f41a:	f7f8 f9e7 	bl	80077ec <lwip_htons>
 800f41e:	4603      	mov	r3, r0
 800f420:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f422:	4b2a      	ldr	r3, [pc, #168]	; (800f4cc <tcp_input+0x218>)
 800f424:	681c      	ldr	r4, [r3, #0]
 800f426:	4b29      	ldr	r3, [pc, #164]	; (800f4cc <tcp_input+0x218>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	885b      	ldrh	r3, [r3, #2]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f8 f9dc 	bl	80077ec <lwip_htons>
 800f434:	4603      	mov	r3, r0
 800f436:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f438:	4b24      	ldr	r3, [pc, #144]	; (800f4cc <tcp_input+0x218>)
 800f43a:	681c      	ldr	r4, [r3, #0]
 800f43c:	4b23      	ldr	r3, [pc, #140]	; (800f4cc <tcp_input+0x218>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f7f8 f9e0 	bl	8007808 <lwip_htonl>
 800f448:	4603      	mov	r3, r0
 800f44a:	6063      	str	r3, [r4, #4]
 800f44c:	6863      	ldr	r3, [r4, #4]
 800f44e:	4a29      	ldr	r2, [pc, #164]	; (800f4f4 <tcp_input+0x240>)
 800f450:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f452:	4b1e      	ldr	r3, [pc, #120]	; (800f4cc <tcp_input+0x218>)
 800f454:	681c      	ldr	r4, [r3, #0]
 800f456:	4b1d      	ldr	r3, [pc, #116]	; (800f4cc <tcp_input+0x218>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f8 f9d3 	bl	8007808 <lwip_htonl>
 800f462:	4603      	mov	r3, r0
 800f464:	60a3      	str	r3, [r4, #8]
 800f466:	68a3      	ldr	r3, [r4, #8]
 800f468:	4a23      	ldr	r2, [pc, #140]	; (800f4f8 <tcp_input+0x244>)
 800f46a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f46c:	4b17      	ldr	r3, [pc, #92]	; (800f4cc <tcp_input+0x218>)
 800f46e:	681c      	ldr	r4, [r3, #0]
 800f470:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <tcp_input+0x218>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	89db      	ldrh	r3, [r3, #14]
 800f476:	b29b      	uxth	r3, r3
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f8 f9b7 	bl	80077ec <lwip_htons>
 800f47e:	4603      	mov	r3, r0
 800f480:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f482:	4b12      	ldr	r3, [pc, #72]	; (800f4cc <tcp_input+0x218>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	899b      	ldrh	r3, [r3, #12]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7f8 f9ae 	bl	80077ec <lwip_htons>
 800f490:	4603      	mov	r3, r0
 800f492:	b2db      	uxtb	r3, r3
 800f494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f498:	b2da      	uxtb	r2, r3
 800f49a:	4b18      	ldr	r3, [pc, #96]	; (800f4fc <tcp_input+0x248>)
 800f49c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	891a      	ldrh	r2, [r3, #8]
 800f4a2:	4b16      	ldr	r3, [pc, #88]	; (800f4fc <tcp_input+0x248>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	f003 0303 	and.w	r3, r3, #3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	bf14      	ite	ne
 800f4ae:	2301      	movne	r3, #1
 800f4b0:	2300      	moveq	r3, #0
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	4413      	add	r3, r2
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	4b11      	ldr	r3, [pc, #68]	; (800f500 <tcp_input+0x24c>)
 800f4bc:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4c2:	4b10      	ldr	r3, [pc, #64]	; (800f504 <tcp_input+0x250>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	61fb      	str	r3, [r7, #28]
 800f4c8:	e082      	b.n	800f5d0 <tcp_input+0x31c>
 800f4ca:	bf00      	nop
 800f4cc:	200043f4 	.word	0x200043f4
 800f4d0:	20004480 	.word	0x20004480
 800f4d4:	200043f8 	.word	0x200043f8
 800f4d8:	200043fc 	.word	0x200043fc
 800f4dc:	200043fa 	.word	0x200043fa
 800f4e0:	08017f54 	.word	0x08017f54
 800f4e4:	08017f88 	.word	0x08017f88
 800f4e8:	08017f98 	.word	0x08017f98
 800f4ec:	08017fc0 	.word	0x08017fc0
 800f4f0:	08017fcc 	.word	0x08017fcc
 800f4f4:	20004404 	.word	0x20004404
 800f4f8:	20004408 	.word	0x20004408
 800f4fc:	20004410 	.word	0x20004410
 800f500:	2000440e 	.word	0x2000440e
 800f504:	20007d2c 	.word	0x20007d2c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	7d1b      	ldrb	r3, [r3, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d105      	bne.n	800f51c <tcp_input+0x268>
 800f510:	4b8f      	ldr	r3, [pc, #572]	; (800f750 <tcp_input+0x49c>)
 800f512:	22e2      	movs	r2, #226	; 0xe2
 800f514:	498f      	ldr	r1, [pc, #572]	; (800f754 <tcp_input+0x4a0>)
 800f516:	4890      	ldr	r0, [pc, #576]	; (800f758 <tcp_input+0x4a4>)
 800f518:	f005 fbe6 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	7d1b      	ldrb	r3, [r3, #20]
 800f520:	2b0a      	cmp	r3, #10
 800f522:	d105      	bne.n	800f530 <tcp_input+0x27c>
 800f524:	4b8a      	ldr	r3, [pc, #552]	; (800f750 <tcp_input+0x49c>)
 800f526:	22e3      	movs	r2, #227	; 0xe3
 800f528:	498c      	ldr	r1, [pc, #560]	; (800f75c <tcp_input+0x4a8>)
 800f52a:	488b      	ldr	r0, [pc, #556]	; (800f758 <tcp_input+0x4a4>)
 800f52c:	f005 fbdc 	bl	8014ce8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	7d1b      	ldrb	r3, [r3, #20]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d105      	bne.n	800f544 <tcp_input+0x290>
 800f538:	4b85      	ldr	r3, [pc, #532]	; (800f750 <tcp_input+0x49c>)
 800f53a:	22e4      	movs	r2, #228	; 0xe4
 800f53c:	4988      	ldr	r1, [pc, #544]	; (800f760 <tcp_input+0x4ac>)
 800f53e:	4886      	ldr	r0, [pc, #536]	; (800f758 <tcp_input+0x4a4>)
 800f540:	f005 fbd2 	bl	8014ce8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	8b1a      	ldrh	r2, [r3, #24]
 800f548:	4b86      	ldr	r3, [pc, #536]	; (800f764 <tcp_input+0x4b0>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	429a      	cmp	r2, r3
 800f552:	d138      	bne.n	800f5c6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	8ada      	ldrh	r2, [r3, #22]
 800f558:	4b82      	ldr	r3, [pc, #520]	; (800f764 <tcp_input+0x4b0>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	885b      	ldrh	r3, [r3, #2]
 800f55e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f560:	429a      	cmp	r2, r3
 800f562:	d130      	bne.n	800f5c6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	4b7f      	ldr	r3, [pc, #508]	; (800f768 <tcp_input+0x4b4>)
 800f56a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d12a      	bne.n	800f5c6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	4b7c      	ldr	r3, [pc, #496]	; (800f768 <tcp_input+0x4b4>)
 800f576:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f578:	429a      	cmp	r2, r3
 800f57a:	d124      	bne.n	800f5c6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	429a      	cmp	r2, r3
 800f584:	d105      	bne.n	800f592 <tcp_input+0x2de>
 800f586:	4b72      	ldr	r3, [pc, #456]	; (800f750 <tcp_input+0x49c>)
 800f588:	22ec      	movs	r2, #236	; 0xec
 800f58a:	4978      	ldr	r1, [pc, #480]	; (800f76c <tcp_input+0x4b8>)
 800f58c:	4872      	ldr	r0, [pc, #456]	; (800f758 <tcp_input+0x4a4>)
 800f58e:	f005 fbab 	bl	8014ce8 <iprintf>
      if (prev != NULL) {
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00a      	beq.n	800f5ae <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	68da      	ldr	r2, [r3, #12]
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5a0:	4b73      	ldr	r3, [pc, #460]	; (800f770 <tcp_input+0x4bc>)
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5a8:	4a71      	ldr	r2, [pc, #452]	; (800f770 <tcp_input+0x4bc>)
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	68da      	ldr	r2, [r3, #12]
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d10f      	bne.n	800f5d8 <tcp_input+0x324>
 800f5b8:	4b65      	ldr	r3, [pc, #404]	; (800f750 <tcp_input+0x49c>)
 800f5ba:	22f4      	movs	r2, #244	; 0xf4
 800f5bc:	496d      	ldr	r1, [pc, #436]	; (800f774 <tcp_input+0x4c0>)
 800f5be:	4866      	ldr	r0, [pc, #408]	; (800f758 <tcp_input+0x4a4>)
 800f5c0:	f005 fb92 	bl	8014ce8 <iprintf>
      break;
 800f5c4:	e008      	b.n	800f5d8 <tcp_input+0x324>
    }
    prev = pcb;
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	61fb      	str	r3, [r7, #28]
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d198      	bne.n	800f508 <tcp_input+0x254>
 800f5d6:	e000      	b.n	800f5da <tcp_input+0x326>
      break;
 800f5d8:	bf00      	nop
  }

  if (pcb == NULL) {
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d173      	bne.n	800f6c8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e0:	4b65      	ldr	r3, [pc, #404]	; (800f778 <tcp_input+0x4c4>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	61fb      	str	r3, [r7, #28]
 800f5e6:	e02f      	b.n	800f648 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	7d1b      	ldrb	r3, [r3, #20]
 800f5ec:	2b0a      	cmp	r3, #10
 800f5ee:	d005      	beq.n	800f5fc <tcp_input+0x348>
 800f5f0:	4b57      	ldr	r3, [pc, #348]	; (800f750 <tcp_input+0x49c>)
 800f5f2:	22fe      	movs	r2, #254	; 0xfe
 800f5f4:	4961      	ldr	r1, [pc, #388]	; (800f77c <tcp_input+0x4c8>)
 800f5f6:	4858      	ldr	r0, [pc, #352]	; (800f758 <tcp_input+0x4a4>)
 800f5f8:	f005 fb76 	bl	8014ce8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	8b1a      	ldrh	r2, [r3, #24]
 800f600:	4b58      	ldr	r3, [pc, #352]	; (800f764 <tcp_input+0x4b0>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	b29b      	uxth	r3, r3
 800f608:	429a      	cmp	r2, r3
 800f60a:	d11a      	bne.n	800f642 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	8ada      	ldrh	r2, [r3, #22]
 800f610:	4b54      	ldr	r3, [pc, #336]	; (800f764 <tcp_input+0x4b0>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	885b      	ldrh	r3, [r3, #2]
 800f616:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f618:	429a      	cmp	r2, r3
 800f61a:	d112      	bne.n	800f642 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	4b51      	ldr	r3, [pc, #324]	; (800f768 <tcp_input+0x4b4>)
 800f622:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f624:	429a      	cmp	r2, r3
 800f626:	d10c      	bne.n	800f642 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	4b4e      	ldr	r3, [pc, #312]	; (800f768 <tcp_input+0x4b4>)
 800f62e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f630:	429a      	cmp	r2, r3
 800f632:	d106      	bne.n	800f642 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f634:	69f8      	ldr	r0, [r7, #28]
 800f636:	f000 fb11 	bl	800fc5c <tcp_timewait_input>
        pbuf_free(p);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7fd fe1c 	bl	800d278 <pbuf_free>
        return;
 800f640:	e1d6      	b.n	800f9f0 <tcp_input+0x73c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	61fb      	str	r3, [r7, #28]
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1cc      	bne.n	800f5e8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f64e:	2300      	movs	r3, #0
 800f650:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f652:	4b4b      	ldr	r3, [pc, #300]	; (800f780 <tcp_input+0x4cc>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	617b      	str	r3, [r7, #20]
 800f658:	e019      	b.n	800f68e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	8ada      	ldrh	r2, [r3, #22]
 800f65e:	4b41      	ldr	r3, [pc, #260]	; (800f764 <tcp_input+0x4b0>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	885b      	ldrh	r3, [r3, #2]
 800f664:	b29b      	uxth	r3, r3
 800f666:	429a      	cmp	r2, r3
 800f668:	d10c      	bne.n	800f684 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	4b3e      	ldr	r3, [pc, #248]	; (800f768 <tcp_input+0x4b4>)
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	429a      	cmp	r2, r3
 800f674:	d00f      	beq.n	800f696 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00d      	beq.n	800f698 <tcp_input+0x3e4>
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d009      	beq.n	800f698 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	617b      	str	r3, [r7, #20]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1e2      	bne.n	800f65a <tcp_input+0x3a6>
 800f694:	e000      	b.n	800f698 <tcp_input+0x3e4>
            break;
 800f696:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d014      	beq.n	800f6c8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	68da      	ldr	r2, [r3, #12]
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f6ac:	4b34      	ldr	r3, [pc, #208]	; (800f780 <tcp_input+0x4cc>)
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f6b4:	4a32      	ldr	r2, [pc, #200]	; (800f780 <tcp_input+0x4cc>)
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f6ba:	6978      	ldr	r0, [r7, #20]
 800f6bc:	f000 f9ec 	bl	800fa98 <tcp_listen_input>
      pbuf_free(p);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7fd fdd9 	bl	800d278 <pbuf_free>
      return;
 800f6c6:	e193      	b.n	800f9f0 <tcp_input+0x73c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 8162 	beq.w	800f994 <tcp_input+0x6e0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f6d0:	4b2c      	ldr	r3, [pc, #176]	; (800f784 <tcp_input+0x4d0>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	891a      	ldrh	r2, [r3, #8]
 800f6da:	4b2a      	ldr	r3, [pc, #168]	; (800f784 <tcp_input+0x4d0>)
 800f6dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f6de:	4a29      	ldr	r2, [pc, #164]	; (800f784 <tcp_input+0x4d0>)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f6e4:	4b1f      	ldr	r3, [pc, #124]	; (800f764 <tcp_input+0x4b0>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a26      	ldr	r2, [pc, #152]	; (800f784 <tcp_input+0x4d0>)
 800f6ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f6ec:	4b26      	ldr	r3, [pc, #152]	; (800f788 <tcp_input+0x4d4>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f6f2:	4b26      	ldr	r3, [pc, #152]	; (800f78c <tcp_input+0x4d8>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f6f8:	4b25      	ldr	r3, [pc, #148]	; (800f790 <tcp_input+0x4dc>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f6fe:	4b25      	ldr	r3, [pc, #148]	; (800f794 <tcp_input+0x4e0>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	f003 0308 	and.w	r3, r3, #8
 800f706:	2b00      	cmp	r3, #0
 800f708:	d006      	beq.n	800f718 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7b5b      	ldrb	r3, [r3, #13]
 800f70e:	f043 0301 	orr.w	r3, r3, #1
 800f712:	b2da      	uxtb	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d03d      	beq.n	800f79c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f720:	69f8      	ldr	r0, [r7, #28]
 800f722:	f7ff f999 	bl	800ea58 <tcp_process_refused_data>
 800f726:	4603      	mov	r3, r0
 800f728:	f113 0f0d 	cmn.w	r3, #13
 800f72c:	d007      	beq.n	800f73e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f732:	2b00      	cmp	r3, #0
 800f734:	d032      	beq.n	800f79c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f736:	4b18      	ldr	r3, [pc, #96]	; (800f798 <tcp_input+0x4e4>)
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d02e      	beq.n	800f79c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f742:	2b00      	cmp	r3, #0
 800f744:	f040 8108 	bne.w	800f958 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f748:	69f8      	ldr	r0, [r7, #28]
 800f74a:	f002 fe3f 	bl	80123cc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f74e:	e103      	b.n	800f958 <tcp_input+0x6a4>
 800f750:	08017f54 	.word	0x08017f54
 800f754:	08017fec 	.word	0x08017fec
 800f758:	08017f98 	.word	0x08017f98
 800f75c:	08018014 	.word	0x08018014
 800f760:	08018040 	.word	0x08018040
 800f764:	200043f4 	.word	0x200043f4
 800f768:	20004480 	.word	0x20004480
 800f76c:	08018068 	.word	0x08018068
 800f770:	20007d2c 	.word	0x20007d2c
 800f774:	08018094 	.word	0x08018094
 800f778:	20007d3c 	.word	0x20007d3c
 800f77c:	080180c0 	.word	0x080180c0
 800f780:	20007d34 	.word	0x20007d34
 800f784:	200043e4 	.word	0x200043e4
 800f788:	20004414 	.word	0x20004414
 800f78c:	20004411 	.word	0x20004411
 800f790:	2000440c 	.word	0x2000440c
 800f794:	20004410 	.word	0x20004410
 800f798:	2000440e 	.word	0x2000440e
      }
    }
    tcp_input_pcb = pcb;
 800f79c:	4a96      	ldr	r2, [pc, #600]	; (800f9f8 <tcp_input+0x744>)
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f7a2:	69f8      	ldr	r0, [r7, #28]
 800f7a4:	f000 fac2 	bl	800fd2c <tcp_process>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7b0:	f113 0f0d 	cmn.w	r3, #13
 800f7b4:	f000 80db 	beq.w	800f96e <tcp_input+0x6ba>
      if (recv_flags & TF_RESET) {
 800f7b8:	4b90      	ldr	r3, [pc, #576]	; (800f9fc <tcp_input+0x748>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	f003 0308 	and.w	r3, r3, #8
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d016      	beq.n	800f7f2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d008      	beq.n	800f7e0 <tcp_input+0x52c>
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d4:	69fa      	ldr	r2, [r7, #28]
 800f7d6:	6912      	ldr	r2, [r2, #16]
 800f7d8:	f06f 010d 	mvn.w	r1, #13
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f7e0:	69f9      	ldr	r1, [r7, #28]
 800f7e2:	4887      	ldr	r0, [pc, #540]	; (800fa00 <tcp_input+0x74c>)
 800f7e4:	f7ff fc4c 	bl	800f080 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800f7e8:	69f9      	ldr	r1, [r7, #28]
 800f7ea:	2001      	movs	r0, #1
 800f7ec:	f7fc ffe2 	bl	800c7b4 <memp_free>
 800f7f0:	e0bd      	b.n	800f96e <tcp_input+0x6ba>
      } else {
        err = ERR_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f7f6:	4b83      	ldr	r3, [pc, #524]	; (800fa04 <tcp_input+0x750>)
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d01b      	beq.n	800f836 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f7fe:	4b81      	ldr	r3, [pc, #516]	; (800fa04 <tcp_input+0x750>)
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d009      	beq.n	800f820 <tcp_input+0x56c>
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f810:	69fa      	ldr	r2, [r7, #28]
 800f812:	6910      	ldr	r0, [r2, #16]
 800f814:	89fa      	ldrh	r2, [r7, #14]
 800f816:	69f9      	ldr	r1, [r7, #28]
 800f818:	4798      	blx	r3
 800f81a:	4603      	mov	r3, r0
 800f81c:	74fb      	strb	r3, [r7, #19]
 800f81e:	e001      	b.n	800f824 <tcp_input+0x570>
 800f820:	2300      	movs	r3, #0
 800f822:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f828:	f113 0f0d 	cmn.w	r3, #13
 800f82c:	f000 8096 	beq.w	800f95c <tcp_input+0x6a8>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f830:	4b74      	ldr	r3, [pc, #464]	; (800fa04 <tcp_input+0x750>)
 800f832:	2200      	movs	r2, #0
 800f834:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f836:	69f8      	ldr	r0, [r7, #28]
 800f838:	f000 f8fc 	bl	800fa34 <tcp_input_delayed_close>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f040 808e 	bne.w	800f960 <tcp_input+0x6ac>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f844:	4b70      	ldr	r3, [pc, #448]	; (800fa08 <tcp_input+0x754>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d041      	beq.n	800f8d0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f850:	2b00      	cmp	r3, #0
 800f852:	d006      	beq.n	800f862 <tcp_input+0x5ae>
 800f854:	4b6d      	ldr	r3, [pc, #436]	; (800fa0c <tcp_input+0x758>)
 800f856:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800f85a:	496d      	ldr	r1, [pc, #436]	; (800fa10 <tcp_input+0x75c>)
 800f85c:	486d      	ldr	r0, [pc, #436]	; (800fa14 <tcp_input+0x760>)
 800f85e:	f005 fa43 	bl	8014ce8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	7e9b      	ldrb	r3, [r3, #26]
 800f866:	f003 0310 	and.w	r3, r3, #16
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d008      	beq.n	800f880 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f86e:	4b66      	ldr	r3, [pc, #408]	; (800fa08 <tcp_input+0x754>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	4618      	mov	r0, r3
 800f874:	f7fd fd00 	bl	800d278 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f878:	69f8      	ldr	r0, [r7, #28]
 800f87a:	f7fe fb95 	bl	800dfa8 <tcp_abort>
            goto aborted;
 800f87e:	e076      	b.n	800f96e <tcp_input+0x6ba>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00c      	beq.n	800f8a4 <tcp_input+0x5f0>
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	6918      	ldr	r0, [r3, #16]
 800f894:	4b5c      	ldr	r3, [pc, #368]	; (800fa08 <tcp_input+0x754>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	69f9      	ldr	r1, [r7, #28]
 800f89c:	47a0      	blx	r4
 800f89e:	4603      	mov	r3, r0
 800f8a0:	74fb      	strb	r3, [r7, #19]
 800f8a2:	e008      	b.n	800f8b6 <tcp_input+0x602>
 800f8a4:	4b58      	ldr	r3, [pc, #352]	; (800fa08 <tcp_input+0x754>)
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	69f9      	ldr	r1, [r7, #28]
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f7ff f984 	bl	800ebba <tcp_recv_null>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f8b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8ba:	f113 0f0d 	cmn.w	r3, #13
 800f8be:	d051      	beq.n	800f964 <tcp_input+0x6b0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d003      	beq.n	800f8d0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f8c8:	4b4f      	ldr	r3, [pc, #316]	; (800fa08 <tcp_input+0x754>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f8d0:	4b4a      	ldr	r3, [pc, #296]	; (800f9fc <tcp_input+0x748>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f003 0320 	and.w	r3, r3, #32
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d030      	beq.n	800f93e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d009      	beq.n	800f8f8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8e8:	69fa      	ldr	r2, [r7, #28]
 800f8ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800f8ec:	7b52      	ldrb	r2, [r2, #13]
 800f8ee:	f042 0220 	orr.w	r2, r2, #32
 800f8f2:	b2d2      	uxtb	r2, r2
 800f8f4:	735a      	strb	r2, [r3, #13]
 800f8f6:	e022      	b.n	800f93e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f900:	d005      	beq.n	800f90e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f906:	3301      	adds	r3, #1
 800f908:	b29a      	uxth	r2, r3
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00b      	beq.n	800f930 <tcp_input+0x67c>
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	6918      	ldr	r0, [r3, #16]
 800f922:	2300      	movs	r3, #0
 800f924:	2200      	movs	r2, #0
 800f926:	69f9      	ldr	r1, [r7, #28]
 800f928:	47a0      	blx	r4
 800f92a:	4603      	mov	r3, r0
 800f92c:	74fb      	strb	r3, [r7, #19]
 800f92e:	e001      	b.n	800f934 <tcp_input+0x680>
 800f930:	2300      	movs	r3, #0
 800f932:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f938:	f113 0f0d 	cmn.w	r3, #13
 800f93c:	d014      	beq.n	800f968 <tcp_input+0x6b4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f93e:	4b2e      	ldr	r3, [pc, #184]	; (800f9f8 <tcp_input+0x744>)
 800f940:	2200      	movs	r2, #0
 800f942:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f944:	69f8      	ldr	r0, [r7, #28]
 800f946:	f000 f875 	bl	800fa34 <tcp_input_delayed_close>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10d      	bne.n	800f96c <tcp_input+0x6b8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f950:	69f8      	ldr	r0, [r7, #28]
 800f952:	f002 fd97 	bl	8012484 <tcp_output>
 800f956:	e00a      	b.n	800f96e <tcp_input+0x6ba>
        goto aborted;
 800f958:	bf00      	nop
 800f95a:	e008      	b.n	800f96e <tcp_input+0x6ba>
              goto aborted;
 800f95c:	bf00      	nop
 800f95e:	e006      	b.n	800f96e <tcp_input+0x6ba>
          goto aborted;
 800f960:	bf00      	nop
 800f962:	e004      	b.n	800f96e <tcp_input+0x6ba>
            goto aborted;
 800f964:	bf00      	nop
 800f966:	e002      	b.n	800f96e <tcp_input+0x6ba>
              goto aborted;
 800f968:	bf00      	nop
 800f96a:	e000      	b.n	800f96e <tcp_input+0x6ba>
          goto aborted;
 800f96c:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800f96e:	4b22      	ldr	r3, [pc, #136]	; (800f9f8 <tcp_input+0x744>)
 800f970:	2200      	movs	r2, #0
 800f972:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f974:	4b24      	ldr	r3, [pc, #144]	; (800fa08 <tcp_input+0x754>)
 800f976:	2200      	movs	r2, #0
 800f978:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800f97a:	4b27      	ldr	r3, [pc, #156]	; (800fa18 <tcp_input+0x764>)
 800f97c:	685b      	ldr	r3, [r3, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d035      	beq.n	800f9ee <tcp_input+0x73a>
    {
      pbuf_free(inseg.p);
 800f982:	4b25      	ldr	r3, [pc, #148]	; (800fa18 <tcp_input+0x764>)
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	4618      	mov	r0, r3
 800f988:	f7fd fc76 	bl	800d278 <pbuf_free>
      inseg.p = NULL;
 800f98c:	4b22      	ldr	r3, [pc, #136]	; (800fa18 <tcp_input+0x764>)
 800f98e:	2200      	movs	r2, #0
 800f990:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f992:	e02c      	b.n	800f9ee <tcp_input+0x73a>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f994:	4b21      	ldr	r3, [pc, #132]	; (800fa1c <tcp_input+0x768>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	899b      	ldrh	r3, [r3, #12]
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7f7 ff25 	bl	80077ec <lwip_htons>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	f003 0304 	and.w	r3, r3, #4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d115      	bne.n	800f9d8 <tcp_input+0x724>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9ac:	4b1c      	ldr	r3, [pc, #112]	; (800fa20 <tcp_input+0x76c>)
 800f9ae:	6818      	ldr	r0, [r3, #0]
 800f9b0:	4b1c      	ldr	r3, [pc, #112]	; (800fa24 <tcp_input+0x770>)
 800f9b2:	881b      	ldrh	r3, [r3, #0]
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4b1c      	ldr	r3, [pc, #112]	; (800fa28 <tcp_input+0x774>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9bc:	4b17      	ldr	r3, [pc, #92]	; (800fa1c <tcp_input+0x768>)
 800f9be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c0:	885b      	ldrh	r3, [r3, #2]
 800f9c2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9c4:	4a15      	ldr	r2, [pc, #84]	; (800fa1c <tcp_input+0x768>)
 800f9c6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c8:	8812      	ldrh	r2, [r2, #0]
 800f9ca:	b292      	uxth	r2, r2
 800f9cc:	9201      	str	r2, [sp, #4]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4b16      	ldr	r3, [pc, #88]	; (800fa2c <tcp_input+0x778>)
 800f9d2:	4a17      	ldr	r2, [pc, #92]	; (800fa30 <tcp_input+0x77c>)
 800f9d4:	f002 ffde 	bl	8012994 <tcp_rst>
    pbuf_free(p);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7fd fc4d 	bl	800d278 <pbuf_free>
  return;
 800f9de:	e006      	b.n	800f9ee <tcp_input+0x73a>
    goto dropped;
 800f9e0:	bf00      	nop
 800f9e2:	e000      	b.n	800f9e6 <tcp_input+0x732>
      goto dropped;
 800f9e4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7fd fc46 	bl	800d278 <pbuf_free>
 800f9ec:	e000      	b.n	800f9f0 <tcp_input+0x73c>
  return;
 800f9ee:	bf00      	nop
}
 800f9f0:	3724      	adds	r7, #36	; 0x24
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd90      	pop	{r4, r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	20007d40 	.word	0x20007d40
 800f9fc:	20004411 	.word	0x20004411
 800fa00:	20007d2c 	.word	0x20007d2c
 800fa04:	2000440c 	.word	0x2000440c
 800fa08:	20004414 	.word	0x20004414
 800fa0c:	08017f54 	.word	0x08017f54
 800fa10:	080180f0 	.word	0x080180f0
 800fa14:	08017f98 	.word	0x08017f98
 800fa18:	200043e4 	.word	0x200043e4
 800fa1c:	200043f4 	.word	0x200043f4
 800fa20:	20004408 	.word	0x20004408
 800fa24:	2000440e 	.word	0x2000440e
 800fa28:	20004404 	.word	0x20004404
 800fa2c:	20004490 	.word	0x20004490
 800fa30:	20004494 	.word	0x20004494

0800fa34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800fa3c:	4b14      	ldr	r3, [pc, #80]	; (800fa90 <tcp_input_delayed_close+0x5c>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f003 0310 	and.w	r3, r3, #16
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d01d      	beq.n	800fa84 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7e9b      	ldrb	r3, [r3, #26]
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10d      	bne.n	800fa70 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d008      	beq.n	800fa70 <tcp_input_delayed_close+0x3c>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	6912      	ldr	r2, [r2, #16]
 800fa68:	f06f 010e 	mvn.w	r1, #14
 800fa6c:	4610      	mov	r0, r2
 800fa6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa70:	6879      	ldr	r1, [r7, #4]
 800fa72:	4808      	ldr	r0, [pc, #32]	; (800fa94 <tcp_input_delayed_close+0x60>)
 800fa74:	f7ff fb04 	bl	800f080 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	f7fc fe9a 	bl	800c7b4 <memp_free>
    return 1;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	20004411 	.word	0x20004411
 800fa94:	20007d2c 	.word	0x20007d2c

0800fa98 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800faa0:	4b64      	ldr	r3, [pc, #400]	; (800fc34 <tcp_listen_input+0x19c>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f040 80bc 	bne.w	800fc26 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800faae:	4b61      	ldr	r3, [pc, #388]	; (800fc34 <tcp_listen_input+0x19c>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	f003 0310 	and.w	r3, r3, #16
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d016      	beq.n	800fae8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800faba:	4b5f      	ldr	r3, [pc, #380]	; (800fc38 <tcp_listen_input+0x1a0>)
 800fabc:	6818      	ldr	r0, [r3, #0]
 800fabe:	4b5f      	ldr	r3, [pc, #380]	; (800fc3c <tcp_listen_input+0x1a4>)
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	461a      	mov	r2, r3
 800fac4:	4b5e      	ldr	r3, [pc, #376]	; (800fc40 <tcp_listen_input+0x1a8>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faca:	4b5e      	ldr	r3, [pc, #376]	; (800fc44 <tcp_listen_input+0x1ac>)
 800facc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800face:	885b      	ldrh	r3, [r3, #2]
 800fad0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fad2:	4a5c      	ldr	r2, [pc, #368]	; (800fc44 <tcp_listen_input+0x1ac>)
 800fad4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fad6:	8812      	ldrh	r2, [r2, #0]
 800fad8:	b292      	uxth	r2, r2
 800fada:	9201      	str	r2, [sp, #4]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	4b5a      	ldr	r3, [pc, #360]	; (800fc48 <tcp_listen_input+0x1b0>)
 800fae0:	4a5a      	ldr	r2, [pc, #360]	; (800fc4c <tcp_listen_input+0x1b4>)
 800fae2:	f002 ff57 	bl	8012994 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fae6:	e0a0      	b.n	800fc2a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800fae8:	4b52      	ldr	r3, [pc, #328]	; (800fc34 <tcp_listen_input+0x19c>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f003 0302 	and.w	r3, r3, #2
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 809a 	beq.w	800fc2a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7d5b      	ldrb	r3, [r3, #21]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f7ff f93c 	bl	800ed78 <tcp_alloc>
 800fb00:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d111      	bne.n	800fb2c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00a      	beq.n	800fb26 <tcp_listen_input+0x8e>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	6910      	ldr	r0, [r2, #16]
 800fb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4798      	blx	r3
 800fb20:	4603      	mov	r3, r0
 800fb22:	74fb      	strb	r3, [r7, #19]
      return;
 800fb24:	e082      	b.n	800fc2c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fb26:	23f0      	movs	r3, #240	; 0xf0
 800fb28:	74fb      	strb	r3, [r7, #19]
      return;
 800fb2a:	e07f      	b.n	800fc2c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fb2c:	4b48      	ldr	r3, [pc, #288]	; (800fc50 <tcp_listen_input+0x1b8>)
 800fb2e:	695a      	ldr	r2, [r3, #20]
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fb34:	4b46      	ldr	r3, [pc, #280]	; (800fc50 <tcp_listen_input+0x1b8>)
 800fb36:	691a      	ldr	r2, [r3, #16]
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	8ada      	ldrh	r2, [r3, #22]
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fb44:	4b3f      	ldr	r3, [pc, #252]	; (800fc44 <tcp_listen_input+0x1ac>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	2203      	movs	r2, #3
 800fb54:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fb56:	4b3a      	ldr	r3, [pc, #232]	; (800fc40 <tcp_listen_input+0x1a8>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	1c5a      	adds	r2, r3, #1
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fb68:	6978      	ldr	r0, [r7, #20]
 800fb6a:	f7ff fb05 	bl	800f178 <tcp_next_iss>
 800fb6e:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fb88:	4b2d      	ldr	r3, [pc, #180]	; (800fc40 <tcp_listen_input+0x1a8>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	1e5a      	subs	r2, r3, #1
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	691a      	ldr	r2, [r3, #16]
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7a1b      	ldrb	r3, [r3, #8]
 800fba4:	f003 030c 	and.w	r3, r3, #12
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fbae:	4b29      	ldr	r3, [pc, #164]	; (800fc54 <tcp_listen_input+0x1bc>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	60da      	str	r2, [r3, #12]
 800fbb6:	4a27      	ldr	r2, [pc, #156]	; (800fc54 <tcp_listen_input+0x1bc>)
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	f003 f93a 	bl	8012e34 <tcp_timer_needed>
 800fbc0:	4b25      	ldr	r3, [pc, #148]	; (800fc58 <tcp_listen_input+0x1c0>)
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fbc6:	6978      	ldr	r0, [r7, #20]
 800fbc8:	f001 fd16 	bl	80115f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fbcc:	4b1d      	ldr	r3, [pc, #116]	; (800fc44 <tcp_listen_input+0x1ac>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	89db      	ldrh	r3, [r3, #14]
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	3304      	adds	r3, #4
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4610      	mov	r0, r2
 800fbf2:	f7ff fad9 	bl	800f1a8 <tcp_eff_send_mss_impl>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fbfe:	2112      	movs	r1, #18
 800fc00:	6978      	ldr	r0, [r7, #20]
 800fc02:	f002 fae5 	bl	80121d0 <tcp_enqueue_flags>
 800fc06:	4603      	mov	r3, r0
 800fc08:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800fc0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d004      	beq.n	800fc1c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800fc12:	2100      	movs	r1, #0
 800fc14:	6978      	ldr	r0, [r7, #20]
 800fc16:	f7fe f915 	bl	800de44 <tcp_abandon>
      return;
 800fc1a:	e007      	b.n	800fc2c <tcp_listen_input+0x194>
    tcp_output(npcb);
 800fc1c:	6978      	ldr	r0, [r7, #20]
 800fc1e:	f002 fc31 	bl	8012484 <tcp_output>
  return;
 800fc22:	bf00      	nop
 800fc24:	e001      	b.n	800fc2a <tcp_listen_input+0x192>
    return;
 800fc26:	bf00      	nop
 800fc28:	e000      	b.n	800fc2c <tcp_listen_input+0x194>
  return;
 800fc2a:	bf00      	nop
}
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20004410 	.word	0x20004410
 800fc38:	20004408 	.word	0x20004408
 800fc3c:	2000440e 	.word	0x2000440e
 800fc40:	20004404 	.word	0x20004404
 800fc44:	200043f4 	.word	0x200043f4
 800fc48:	20004490 	.word	0x20004490
 800fc4c:	20004494 	.word	0x20004494
 800fc50:	20004480 	.word	0x20004480
 800fc54:	20007d2c 	.word	0x20007d2c
 800fc58:	20007d28 	.word	0x20007d28

0800fc5c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af02      	add	r7, sp, #8
 800fc62:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fc64:	4b29      	ldr	r3, [pc, #164]	; (800fd0c <tcp_timewait_input+0xb0>)
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	f003 0304 	and.w	r3, r3, #4
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d147      	bne.n	800fd00 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fc70:	4b26      	ldr	r3, [pc, #152]	; (800fd0c <tcp_timewait_input+0xb0>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	f003 0302 	and.w	r3, r3, #2
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d027      	beq.n	800fccc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fc7c:	4b24      	ldr	r3, [pc, #144]	; (800fd10 <tcp_timewait_input+0xb4>)
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	db2a      	blt.n	800fce0 <tcp_timewait_input+0x84>
 800fc8a:	4b21      	ldr	r3, [pc, #132]	; (800fd10 <tcp_timewait_input+0xb4>)
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc96:	440b      	add	r3, r1
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	dc20      	bgt.n	800fce0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc9e:	4b1d      	ldr	r3, [pc, #116]	; (800fd14 <tcp_timewait_input+0xb8>)
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	4b1d      	ldr	r3, [pc, #116]	; (800fd18 <tcp_timewait_input+0xbc>)
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b19      	ldr	r3, [pc, #100]	; (800fd10 <tcp_timewait_input+0xb4>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcae:	4b1b      	ldr	r3, [pc, #108]	; (800fd1c <tcp_timewait_input+0xc0>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb2:	885b      	ldrh	r3, [r3, #2]
 800fcb4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb6:	4a19      	ldr	r2, [pc, #100]	; (800fd1c <tcp_timewait_input+0xc0>)
 800fcb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcba:	8812      	ldrh	r2, [r2, #0]
 800fcbc:	b292      	uxth	r2, r2
 800fcbe:	9201      	str	r2, [sp, #4]
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4b17      	ldr	r3, [pc, #92]	; (800fd20 <tcp_timewait_input+0xc4>)
 800fcc4:	4a17      	ldr	r2, [pc, #92]	; (800fd24 <tcp_timewait_input+0xc8>)
 800fcc6:	f002 fe65 	bl	8012994 <tcp_rst>
      return;
 800fcca:	e01c      	b.n	800fd06 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fccc:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <tcp_timewait_input+0xb0>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	f003 0301 	and.w	r3, r3, #1
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d003      	beq.n	800fce0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fcd8:	4b13      	ldr	r3, [pc, #76]	; (800fd28 <tcp_timewait_input+0xcc>)
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <tcp_timewait_input+0xbc>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00d      	beq.n	800fd04 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7e9b      	ldrb	r3, [r3, #26]
 800fcec:	f043 0302 	orr.w	r3, r3, #2
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f002 fbc4 	bl	8012484 <tcp_output>
  }
  return;
 800fcfc:	bf00      	nop
 800fcfe:	e001      	b.n	800fd04 <tcp_timewait_input+0xa8>
    return;
 800fd00:	bf00      	nop
 800fd02:	e000      	b.n	800fd06 <tcp_timewait_input+0xaa>
  return;
 800fd04:	bf00      	nop
}
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	20004410 	.word	0x20004410
 800fd10:	20004404 	.word	0x20004404
 800fd14:	20004408 	.word	0x20004408
 800fd18:	2000440e 	.word	0x2000440e
 800fd1c:	200043f4 	.word	0x200043f4
 800fd20:	20004490 	.word	0x20004490
 800fd24:	20004494 	.word	0x20004494
 800fd28:	20007d30 	.word	0x20007d30

0800fd2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08a      	sub	sp, #40	; 0x28
 800fd30:	af02      	add	r7, sp, #8
 800fd32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fd34:	2300      	movs	r3, #0
 800fd36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fd3c:	4ba4      	ldr	r3, [pc, #656]	; (800ffd0 <tcp_process+0x2a4>)
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	f003 0304 	and.w	r3, r3, #4
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d04e      	beq.n	800fde6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	7d1b      	ldrb	r3, [r3, #20]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d108      	bne.n	800fd62 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fd54:	4b9f      	ldr	r3, [pc, #636]	; (800ffd4 <tcp_process+0x2a8>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d123      	bne.n	800fda4 <tcp_process+0x78>
        acceptable = 1;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	76fb      	strb	r3, [r7, #27]
 800fd60:	e020      	b.n	800fda4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd66:	4b9c      	ldr	r3, [pc, #624]	; (800ffd8 <tcp_process+0x2ac>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d102      	bne.n	800fd74 <tcp_process+0x48>
        acceptable = 1;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	76fb      	strb	r3, [r7, #27]
 800fd72:	e017      	b.n	800fda4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd74:	4b98      	ldr	r3, [pc, #608]	; (800ffd8 <tcp_process+0x2ac>)
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	db10      	blt.n	800fda4 <tcp_process+0x78>
 800fd82:	4b95      	ldr	r3, [pc, #596]	; (800ffd8 <tcp_process+0x2ac>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd8e:	440b      	add	r3, r1
 800fd90:	1ad3      	subs	r3, r2, r3
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	dc06      	bgt.n	800fda4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	7e9b      	ldrb	r3, [r3, #26]
 800fd9a:	f043 0302 	orr.w	r3, r3, #2
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fda4:	7efb      	ldrb	r3, [r7, #27]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d01b      	beq.n	800fde2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	7d1b      	ldrb	r3, [r3, #20]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d106      	bne.n	800fdc0 <tcp_process+0x94>
 800fdb2:	4b8a      	ldr	r3, [pc, #552]	; (800ffdc <tcp_process+0x2b0>)
 800fdb4:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fdb8:	4989      	ldr	r1, [pc, #548]	; (800ffe0 <tcp_process+0x2b4>)
 800fdba:	488a      	ldr	r0, [pc, #552]	; (800ffe4 <tcp_process+0x2b8>)
 800fdbc:	f004 ff94 	bl	8014ce8 <iprintf>
      recv_flags |= TF_RESET;
 800fdc0:	4b89      	ldr	r3, [pc, #548]	; (800ffe8 <tcp_process+0x2bc>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	f043 0308 	orr.w	r3, r3, #8
 800fdc8:	b2da      	uxtb	r2, r3
 800fdca:	4b87      	ldr	r3, [pc, #540]	; (800ffe8 <tcp_process+0x2bc>)
 800fdcc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	7e9b      	ldrb	r3, [r3, #26]
 800fdd2:	f023 0301 	bic.w	r3, r3, #1
 800fdd6:	b2da      	uxtb	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800fddc:	f06f 030d 	mvn.w	r3, #13
 800fde0:	e34d      	b.n	801047e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	e34b      	b.n	801047e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fde6:	4b7a      	ldr	r3, [pc, #488]	; (800ffd0 <tcp_process+0x2a4>)
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	f003 0302 	and.w	r3, r3, #2
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d010      	beq.n	800fe14 <tcp_process+0xe8>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	7d1b      	ldrb	r3, [r3, #20]
 800fdf6:	2b02      	cmp	r3, #2
 800fdf8:	d00c      	beq.n	800fe14 <tcp_process+0xe8>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	7d1b      	ldrb	r3, [r3, #20]
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d008      	beq.n	800fe14 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	7e9b      	ldrb	r3, [r3, #26]
 800fe06:	f043 0302 	orr.w	r3, r3, #2
 800fe0a:	b2da      	uxtb	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	e334      	b.n	801047e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	7e9b      	ldrb	r3, [r3, #26]
 800fe18:	f003 0310 	and.w	r3, r3, #16
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d103      	bne.n	800fe28 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fe20:	4b72      	ldr	r3, [pc, #456]	; (800ffec <tcp_process+0x2c0>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f001 fbe1 	bl	80115f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7d1b      	ldrb	r3, [r3, #20]
 800fe3a:	3b02      	subs	r3, #2
 800fe3c:	2b07      	cmp	r3, #7
 800fe3e:	f200 830e 	bhi.w	801045e <tcp_process+0x732>
 800fe42:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <tcp_process+0x11c>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fe69 	.word	0x0800fe69
 800fe4c:	08010061 	.word	0x08010061
 800fe50:	080101b9 	.word	0x080101b9
 800fe54:	080101e3 	.word	0x080101e3
 800fe58:	0801030d 	.word	0x0801030d
 800fe5c:	080101b9 	.word	0x080101b9
 800fe60:	08010399 	.word	0x08010399
 800fe64:	08010429 	.word	0x08010429
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fe68:	4b59      	ldr	r3, [pc, #356]	; (800ffd0 <tcp_process+0x2a4>)
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 0310 	and.w	r3, r3, #16
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f000 80cb 	beq.w	801000c <tcp_process+0x2e0>
 800fe76:	4b56      	ldr	r3, [pc, #344]	; (800ffd0 <tcp_process+0x2a4>)
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	f003 0302 	and.w	r3, r3, #2
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 80c4 	beq.w	801000c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe88:	1c5a      	adds	r2, r3, #1
 800fe8a:	4b52      	ldr	r3, [pc, #328]	; (800ffd4 <tcp_process+0x2a8>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	f040 80bc 	bne.w	801000c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800fe94:	4b50      	ldr	r3, [pc, #320]	; (800ffd8 <tcp_process+0x2ac>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	1c5a      	adds	r2, r3, #1
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800fea6:	4b4b      	ldr	r3, [pc, #300]	; (800ffd4 <tcp_process+0x2a8>)
 800fea8:	681a      	ldr	r2, [r3, #0]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800feae:	4b50      	ldr	r3, [pc, #320]	; (800fff0 <tcp_process+0x2c4>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	89db      	ldrh	r3, [r3, #14]
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fec8:	4b43      	ldr	r3, [pc, #268]	; (800ffd8 <tcp_process+0x2ac>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	1e5a      	subs	r2, r3, #1
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2204      	movs	r2, #4
 800fed6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	3304      	adds	r3, #4
 800fee0:	4619      	mov	r1, r3
 800fee2:	4610      	mov	r0, r2
 800fee4:	f7ff f960 	bl	800f1a8 <tcp_eff_send_mss_impl>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fef4:	005b      	lsls	r3, r3, #1
 800fef6:	f241 121c 	movw	r2, #4380	; 0x111c
 800fefa:	429a      	cmp	r2, r3
 800fefc:	bf38      	it	cc
 800fefe:	461a      	movcc	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4293      	cmp	r3, r2
 800ff08:	bf28      	it	cs
 800ff0a:	4613      	movcs	r3, r2
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_process+0x200>
 800ff1e:	4b2f      	ldr	r3, [pc, #188]	; (800ffdc <tcp_process+0x2b0>)
 800ff20:	f240 321a 	movw	r2, #794	; 0x31a
 800ff24:	4933      	ldr	r1, [pc, #204]	; (800fff4 <tcp_process+0x2c8>)
 800ff26:	482f      	ldr	r0, [pc, #188]	; (800ffe4 <tcp_process+0x2b8>)
 800ff28:	f004 fede 	bl	8014ce8 <iprintf>
      --pcb->snd_queuelen;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff32:	3b01      	subs	r3, #1
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff40:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d111      	bne.n	800ff6c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff4c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d106      	bne.n	800ff62 <tcp_process+0x236>
 800ff54:	4b21      	ldr	r3, [pc, #132]	; (800ffdc <tcp_process+0x2b0>)
 800ff56:	f240 3222 	movw	r2, #802	; 0x322
 800ff5a:	4927      	ldr	r1, [pc, #156]	; (800fff8 <tcp_process+0x2cc>)
 800ff5c:	4821      	ldr	r0, [pc, #132]	; (800ffe4 <tcp_process+0x2b8>)
 800ff5e:	f004 fec3 	bl	8014ce8 <iprintf>
        pcb->unsent = rseg->next;
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	669a      	str	r2, [r3, #104]	; 0x68
 800ff6a:	e003      	b.n	800ff74 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ff74:	69f8      	ldr	r0, [r7, #28]
 800ff76:	f7fe fdec 	bl	800eb52 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d104      	bne.n	800ff8c <tcp_process+0x260>
        pcb->rtime = -1;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff88:	861a      	strh	r2, [r3, #48]	; 0x30
 800ff8a:	e006      	b.n	800ff9a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00a      	beq.n	800ffba <tcp_process+0x28e>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffaa:	687a      	ldr	r2, [r7, #4]
 800ffac:	6910      	ldr	r0, [r2, #16]
 800ffae:	2200      	movs	r2, #0
 800ffb0:	6879      	ldr	r1, [r7, #4]
 800ffb2:	4798      	blx	r3
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	76bb      	strb	r3, [r7, #26]
 800ffb8:	e001      	b.n	800ffbe <tcp_process+0x292>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ffbe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ffc2:	f113 0f0d 	cmn.w	r3, #13
 800ffc6:	d119      	bne.n	800fffc <tcp_process+0x2d0>
        return ERR_ABRT;
 800ffc8:	f06f 030c 	mvn.w	r3, #12
 800ffcc:	e257      	b.n	801047e <tcp_process+0x752>
 800ffce:	bf00      	nop
 800ffd0:	20004410 	.word	0x20004410
 800ffd4:	20004408 	.word	0x20004408
 800ffd8:	20004404 	.word	0x20004404
 800ffdc:	08017f54 	.word	0x08017f54
 800ffe0:	0801810c 	.word	0x0801810c
 800ffe4:	08017f98 	.word	0x08017f98
 800ffe8:	20004411 	.word	0x20004411
 800ffec:	20007d30 	.word	0x20007d30
 800fff0:	200043f4 	.word	0x200043f4
 800fff4:	0801812c 	.word	0x0801812c
 800fff8:	08018144 	.word	0x08018144
      }
      tcp_ack_now(pcb);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	7e9b      	ldrb	r3, [r3, #26]
 8010000:	f043 0302 	orr.w	r3, r3, #2
 8010004:	b2da      	uxtb	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801000a:	e22a      	b.n	8010462 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801000c:	4b9f      	ldr	r3, [pc, #636]	; (801028c <tcp_process+0x560>)
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	f003 0310 	and.w	r3, r3, #16
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 8224 	beq.w	8010462 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801001a:	4b9d      	ldr	r3, [pc, #628]	; (8010290 <tcp_process+0x564>)
 801001c:	6818      	ldr	r0, [r3, #0]
 801001e:	4b9d      	ldr	r3, [pc, #628]	; (8010294 <tcp_process+0x568>)
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	4b9c      	ldr	r3, [pc, #624]	; (8010298 <tcp_process+0x56c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801002a:	4b9c      	ldr	r3, [pc, #624]	; (801029c <tcp_process+0x570>)
 801002c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801002e:	885b      	ldrh	r3, [r3, #2]
 8010030:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010032:	4a9a      	ldr	r2, [pc, #616]	; (801029c <tcp_process+0x570>)
 8010034:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010036:	8812      	ldrh	r2, [r2, #0]
 8010038:	b292      	uxth	r2, r2
 801003a:	9201      	str	r2, [sp, #4]
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	4b98      	ldr	r3, [pc, #608]	; (80102a0 <tcp_process+0x574>)
 8010040:	4a98      	ldr	r2, [pc, #608]	; (80102a4 <tcp_process+0x578>)
 8010042:	f002 fca7 	bl	8012994 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801004c:	2b05      	cmp	r3, #5
 801004e:	f200 8208 	bhi.w	8010462 <tcp_process+0x736>
        pcb->rtime = 0;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f002 fd11 	bl	8012a80 <tcp_rexmit_rto>
    break;
 801005e:	e200      	b.n	8010462 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8010060:	4b8a      	ldr	r3, [pc, #552]	; (801028c <tcp_process+0x560>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 0310 	and.w	r3, r3, #16
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 8091 	beq.w	8010190 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801006e:	4b88      	ldr	r3, [pc, #544]	; (8010290 <tcp_process+0x564>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	3b01      	subs	r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	db71      	blt.n	8010162 <tcp_process+0x436>
 801007e:	4b84      	ldr	r3, [pc, #528]	; (8010290 <tcp_process+0x564>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	dc6a      	bgt.n	8010162 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2204      	movs	r2, #4
 8010090:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00b      	beq.n	80100b2 <tcp_process+0x386>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <tcp_process+0x386>
 80100a4:	4b80      	ldr	r3, [pc, #512]	; (80102a8 <tcp_process+0x57c>)
 80100a6:	f240 3251 	movw	r2, #849	; 0x351
 80100aa:	4980      	ldr	r1, [pc, #512]	; (80102ac <tcp_process+0x580>)
 80100ac:	4880      	ldr	r0, [pc, #512]	; (80102b0 <tcp_process+0x584>)
 80100ae:	f004 fe1b 	bl	8014ce8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80100ba:	23fa      	movs	r3, #250	; 0xfa
 80100bc:	76bb      	strb	r3, [r7, #26]
 80100be:	e011      	b.n	80100e4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100c4:	699b      	ldr	r3, [r3, #24]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00a      	beq.n	80100e0 <tcp_process+0x3b4>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	6910      	ldr	r0, [r2, #16]
 80100d4:	2200      	movs	r2, #0
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	4798      	blx	r3
 80100da:	4603      	mov	r3, r0
 80100dc:	76bb      	strb	r3, [r7, #26]
 80100de:	e001      	b.n	80100e4 <tcp_process+0x3b8>
 80100e0:	23f0      	movs	r3, #240	; 0xf0
 80100e2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80100e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00a      	beq.n	8010102 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80100ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80100f0:	f113 0f0d 	cmn.w	r3, #13
 80100f4:	d002      	beq.n	80100fc <tcp_process+0x3d0>
            tcp_abort(pcb);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7fd ff56 	bl	800dfa8 <tcp_abort>
          }
          return ERR_ABRT;
 80100fc:	f06f 030c 	mvn.w	r3, #12
 8010100:	e1bd      	b.n	801047e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fa42 	bl	801058c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8010108:	4b6a      	ldr	r3, [pc, #424]	; (80102b4 <tcp_process+0x588>)
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d005      	beq.n	801011c <tcp_process+0x3f0>
          recv_acked--;
 8010110:	4b68      	ldr	r3, [pc, #416]	; (80102b4 <tcp_process+0x588>)
 8010112:	881b      	ldrh	r3, [r3, #0]
 8010114:	3b01      	subs	r3, #1
 8010116:	b29a      	uxth	r2, r3
 8010118:	4b66      	ldr	r3, [pc, #408]	; (80102b4 <tcp_process+0x588>)
 801011a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010120:	005b      	lsls	r3, r3, #1
 8010122:	f241 121c 	movw	r2, #4380	; 0x111c
 8010126:	429a      	cmp	r2, r3
 8010128:	bf38      	it	cc
 801012a:	461a      	movcc	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	4293      	cmp	r3, r2
 8010134:	bf28      	it	cs
 8010136:	4613      	movcs	r3, r2
 8010138:	b29a      	uxth	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8010140:	4b5d      	ldr	r3, [pc, #372]	; (80102b8 <tcp_process+0x58c>)
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	f003 0320 	and.w	r3, r3, #32
 8010148:	2b00      	cmp	r3, #0
 801014a:	d034      	beq.n	80101b6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	7e9b      	ldrb	r3, [r3, #26]
 8010150:	f043 0302 	orr.w	r3, r3, #2
 8010154:	b2da      	uxtb	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2207      	movs	r2, #7
 801015e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8010160:	e029      	b.n	80101b6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010162:	4b4b      	ldr	r3, [pc, #300]	; (8010290 <tcp_process+0x564>)
 8010164:	6818      	ldr	r0, [r3, #0]
 8010166:	4b4b      	ldr	r3, [pc, #300]	; (8010294 <tcp_process+0x568>)
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	4b4a      	ldr	r3, [pc, #296]	; (8010298 <tcp_process+0x56c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010172:	4b4a      	ldr	r3, [pc, #296]	; (801029c <tcp_process+0x570>)
 8010174:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010176:	885b      	ldrh	r3, [r3, #2]
 8010178:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801017a:	4a48      	ldr	r2, [pc, #288]	; (801029c <tcp_process+0x570>)
 801017c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801017e:	8812      	ldrh	r2, [r2, #0]
 8010180:	b292      	uxth	r2, r2
 8010182:	9201      	str	r2, [sp, #4]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	4b46      	ldr	r3, [pc, #280]	; (80102a0 <tcp_process+0x574>)
 8010188:	4a46      	ldr	r2, [pc, #280]	; (80102a4 <tcp_process+0x578>)
 801018a:	f002 fc03 	bl	8012994 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801018e:	e16a      	b.n	8010466 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010190:	4b3e      	ldr	r3, [pc, #248]	; (801028c <tcp_process+0x560>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f003 0302 	and.w	r3, r3, #2
 8010198:	2b00      	cmp	r3, #0
 801019a:	f000 8164 	beq.w	8010466 <tcp_process+0x73a>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	1e5a      	subs	r2, r3, #1
 80101a4:	4b3c      	ldr	r3, [pc, #240]	; (8010298 <tcp_process+0x56c>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	f040 815c 	bne.w	8010466 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f002 fc9c 	bl	8012aec <tcp_rexmit>
    break;
 80101b4:	e157      	b.n	8010466 <tcp_process+0x73a>
 80101b6:	e156      	b.n	8010466 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f9e7 	bl	801058c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80101be:	4b3e      	ldr	r3, [pc, #248]	; (80102b8 <tcp_process+0x58c>)
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	f003 0320 	and.w	r3, r3, #32
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 814f 	beq.w	801046a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7e9b      	ldrb	r3, [r3, #26]
 80101d0:	f043 0302 	orr.w	r3, r3, #2
 80101d4:	b2da      	uxtb	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2207      	movs	r2, #7
 80101de:	751a      	strb	r2, [r3, #20]
    }
    break;
 80101e0:	e143      	b.n	801046a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f9d2 	bl	801058c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80101e8:	4b33      	ldr	r3, [pc, #204]	; (80102b8 <tcp_process+0x58c>)
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 0320 	and.w	r3, r3, #32
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d074      	beq.n	80102de <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80101f4:	4b25      	ldr	r3, [pc, #148]	; (801028c <tcp_process+0x560>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	f003 0310 	and.w	r3, r3, #16
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d063      	beq.n	80102c8 <tcp_process+0x59c>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010204:	4b22      	ldr	r3, [pc, #136]	; (8010290 <tcp_process+0x564>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	429a      	cmp	r2, r3
 801020a:	d15d      	bne.n	80102c8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010210:	2b00      	cmp	r3, #0
 8010212:	d159      	bne.n	80102c8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	7e9b      	ldrb	r3, [r3, #26]
 8010218:	f043 0302 	orr.w	r3, r3, #2
 801021c:	b2da      	uxtb	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f7fe feea 	bl	800effc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010228:	4b24      	ldr	r3, [pc, #144]	; (80102bc <tcp_process+0x590>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	429a      	cmp	r2, r3
 8010230:	d105      	bne.n	801023e <tcp_process+0x512>
 8010232:	4b22      	ldr	r3, [pc, #136]	; (80102bc <tcp_process+0x590>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	4a20      	ldr	r2, [pc, #128]	; (80102bc <tcp_process+0x590>)
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	e013      	b.n	8010266 <tcp_process+0x53a>
 801023e:	4b1f      	ldr	r3, [pc, #124]	; (80102bc <tcp_process+0x590>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	617b      	str	r3, [r7, #20]
 8010244:	e00c      	b.n	8010260 <tcp_process+0x534>
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	68da      	ldr	r2, [r3, #12]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	429a      	cmp	r2, r3
 801024e:	d104      	bne.n	801025a <tcp_process+0x52e>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	68da      	ldr	r2, [r3, #12]
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	60da      	str	r2, [r3, #12]
 8010258:	e005      	b.n	8010266 <tcp_process+0x53a>
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	617b      	str	r3, [r7, #20]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1ef      	bne.n	8010246 <tcp_process+0x51a>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2200      	movs	r2, #0
 801026a:	60da      	str	r2, [r3, #12]
 801026c:	4b14      	ldr	r3, [pc, #80]	; (80102c0 <tcp_process+0x594>)
 801026e:	2201      	movs	r2, #1
 8010270:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	220a      	movs	r2, #10
 8010276:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010278:	4b12      	ldr	r3, [pc, #72]	; (80102c4 <tcp_process+0x598>)
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	60da      	str	r2, [r3, #12]
 8010280:	4a10      	ldr	r2, [pc, #64]	; (80102c4 <tcp_process+0x598>)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6013      	str	r3, [r2, #0]
 8010286:	f002 fdd5 	bl	8012e34 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801028a:	e0f0      	b.n	801046e <tcp_process+0x742>
 801028c:	20004410 	.word	0x20004410
 8010290:	20004408 	.word	0x20004408
 8010294:	2000440e 	.word	0x2000440e
 8010298:	20004404 	.word	0x20004404
 801029c:	200043f4 	.word	0x200043f4
 80102a0:	20004490 	.word	0x20004490
 80102a4:	20004494 	.word	0x20004494
 80102a8:	08017f54 	.word	0x08017f54
 80102ac:	08018158 	.word	0x08018158
 80102b0:	08017f98 	.word	0x08017f98
 80102b4:	2000440c 	.word	0x2000440c
 80102b8:	20004411 	.word	0x20004411
 80102bc:	20007d2c 	.word	0x20007d2c
 80102c0:	20007d28 	.word	0x20007d28
 80102c4:	20007d3c 	.word	0x20007d3c
        tcp_ack_now(pcb);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	7e9b      	ldrb	r3, [r3, #26]
 80102cc:	f043 0302 	orr.w	r3, r3, #2
 80102d0:	b2da      	uxtb	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2208      	movs	r2, #8
 80102da:	751a      	strb	r2, [r3, #20]
    break;
 80102dc:	e0c7      	b.n	801046e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102de:	4b6a      	ldr	r3, [pc, #424]	; (8010488 <tcp_process+0x75c>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	f003 0310 	and.w	r3, r3, #16
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f000 80c1 	beq.w	801046e <tcp_process+0x742>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102f0:	4b66      	ldr	r3, [pc, #408]	; (801048c <tcp_process+0x760>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	f040 80ba 	bne.w	801046e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f040 80b5 	bne.w	801046e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2206      	movs	r2, #6
 8010308:	751a      	strb	r2, [r3, #20]
    break;
 801030a:	e0b0      	b.n	801046e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 f93d 	bl	801058c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8010312:	4b5f      	ldr	r3, [pc, #380]	; (8010490 <tcp_process+0x764>)
 8010314:	781b      	ldrb	r3, [r3, #0]
 8010316:	f003 0320 	and.w	r3, r3, #32
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 80a9 	beq.w	8010472 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	7e9b      	ldrb	r3, [r3, #26]
 8010324:	f043 0302 	orr.w	r3, r3, #2
 8010328:	b2da      	uxtb	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fe fe64 	bl	800effc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010334:	4b57      	ldr	r3, [pc, #348]	; (8010494 <tcp_process+0x768>)
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	429a      	cmp	r2, r3
 801033c:	d105      	bne.n	801034a <tcp_process+0x61e>
 801033e:	4b55      	ldr	r3, [pc, #340]	; (8010494 <tcp_process+0x768>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	4a53      	ldr	r2, [pc, #332]	; (8010494 <tcp_process+0x768>)
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	e013      	b.n	8010372 <tcp_process+0x646>
 801034a:	4b52      	ldr	r3, [pc, #328]	; (8010494 <tcp_process+0x768>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	613b      	str	r3, [r7, #16]
 8010350:	e00c      	b.n	801036c <tcp_process+0x640>
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	68da      	ldr	r2, [r3, #12]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	429a      	cmp	r2, r3
 801035a:	d104      	bne.n	8010366 <tcp_process+0x63a>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	68da      	ldr	r2, [r3, #12]
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	60da      	str	r2, [r3, #12]
 8010364:	e005      	b.n	8010372 <tcp_process+0x646>
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	613b      	str	r3, [r7, #16]
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1ef      	bne.n	8010352 <tcp_process+0x626>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	60da      	str	r2, [r3, #12]
 8010378:	4b47      	ldr	r3, [pc, #284]	; (8010498 <tcp_process+0x76c>)
 801037a:	2201      	movs	r2, #1
 801037c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	220a      	movs	r2, #10
 8010382:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010384:	4b45      	ldr	r3, [pc, #276]	; (801049c <tcp_process+0x770>)
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	60da      	str	r2, [r3, #12]
 801038c:	4a43      	ldr	r2, [pc, #268]	; (801049c <tcp_process+0x770>)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6013      	str	r3, [r2, #0]
 8010392:	f002 fd4f 	bl	8012e34 <tcp_timer_needed>
    }
    break;
 8010396:	e06c      	b.n	8010472 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f000 f8f7 	bl	801058c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801039e:	4b3a      	ldr	r3, [pc, #232]	; (8010488 <tcp_process+0x75c>)
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	f003 0310 	and.w	r3, r3, #16
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d065      	beq.n	8010476 <tcp_process+0x74a>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103ae:	4b37      	ldr	r3, [pc, #220]	; (801048c <tcp_process+0x760>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d15f      	bne.n	8010476 <tcp_process+0x74a>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d15b      	bne.n	8010476 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f7fe fe1c 	bl	800effc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80103c4:	4b33      	ldr	r3, [pc, #204]	; (8010494 <tcp_process+0x768>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d105      	bne.n	80103da <tcp_process+0x6ae>
 80103ce:	4b31      	ldr	r3, [pc, #196]	; (8010494 <tcp_process+0x768>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	4a2f      	ldr	r2, [pc, #188]	; (8010494 <tcp_process+0x768>)
 80103d6:	6013      	str	r3, [r2, #0]
 80103d8:	e013      	b.n	8010402 <tcp_process+0x6d6>
 80103da:	4b2e      	ldr	r3, [pc, #184]	; (8010494 <tcp_process+0x768>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	60fb      	str	r3, [r7, #12]
 80103e0:	e00c      	b.n	80103fc <tcp_process+0x6d0>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	68da      	ldr	r2, [r3, #12]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d104      	bne.n	80103f6 <tcp_process+0x6ca>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	68da      	ldr	r2, [r3, #12]
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	60da      	str	r2, [r3, #12]
 80103f4:	e005      	b.n	8010402 <tcp_process+0x6d6>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1ef      	bne.n	80103e2 <tcp_process+0x6b6>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	60da      	str	r2, [r3, #12]
 8010408:	4b23      	ldr	r3, [pc, #140]	; (8010498 <tcp_process+0x76c>)
 801040a:	2201      	movs	r2, #1
 801040c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	220a      	movs	r2, #10
 8010412:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010414:	4b21      	ldr	r3, [pc, #132]	; (801049c <tcp_process+0x770>)
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	60da      	str	r2, [r3, #12]
 801041c:	4a1f      	ldr	r2, [pc, #124]	; (801049c <tcp_process+0x770>)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6013      	str	r3, [r2, #0]
 8010422:	f002 fd07 	bl	8012e34 <tcp_timer_needed>
    }
    break;
 8010426:	e026      	b.n	8010476 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f000 f8af 	bl	801058c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801042e:	4b16      	ldr	r3, [pc, #88]	; (8010488 <tcp_process+0x75c>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 0310 	and.w	r3, r3, #16
 8010436:	2b00      	cmp	r3, #0
 8010438:	d01f      	beq.n	801047a <tcp_process+0x74e>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801043e:	4b13      	ldr	r3, [pc, #76]	; (801048c <tcp_process+0x760>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d119      	bne.n	801047a <tcp_process+0x74e>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801044a:	2b00      	cmp	r3, #0
 801044c:	d115      	bne.n	801047a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801044e:	4b10      	ldr	r3, [pc, #64]	; (8010490 <tcp_process+0x764>)
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	f043 0310 	orr.w	r3, r3, #16
 8010456:	b2da      	uxtb	r2, r3
 8010458:	4b0d      	ldr	r3, [pc, #52]	; (8010490 <tcp_process+0x764>)
 801045a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801045c:	e00d      	b.n	801047a <tcp_process+0x74e>
  default:
    break;
 801045e:	bf00      	nop
 8010460:	e00c      	b.n	801047c <tcp_process+0x750>
    break;
 8010462:	bf00      	nop
 8010464:	e00a      	b.n	801047c <tcp_process+0x750>
    break;
 8010466:	bf00      	nop
 8010468:	e008      	b.n	801047c <tcp_process+0x750>
    break;
 801046a:	bf00      	nop
 801046c:	e006      	b.n	801047c <tcp_process+0x750>
    break;
 801046e:	bf00      	nop
 8010470:	e004      	b.n	801047c <tcp_process+0x750>
    break;
 8010472:	bf00      	nop
 8010474:	e002      	b.n	801047c <tcp_process+0x750>
    break;
 8010476:	bf00      	nop
 8010478:	e000      	b.n	801047c <tcp_process+0x750>
    break;
 801047a:	bf00      	nop
  }
  return ERR_OK;
 801047c:	2300      	movs	r3, #0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3720      	adds	r7, #32
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	20004410 	.word	0x20004410
 801048c:	20004408 	.word	0x20004408
 8010490:	20004411 	.word	0x20004411
 8010494:	20007d2c 	.word	0x20007d2c
 8010498:	20007d28 	.word	0x20007d28
 801049c:	20007d3c 	.word	0x20007d3c

080104a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80104a0:	b5b0      	push	{r4, r5, r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	899b      	ldrh	r3, [r3, #12]
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f7 f99a 	bl	80077ec <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d026      	beq.n	8010510 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80104c2:	6838      	ldr	r0, [r7, #0]
 80104c4:	f7fe fb31 	bl	800eb2a <tcp_segs_free>
    next = NULL;
 80104c8:	2300      	movs	r3, #0
 80104ca:	603b      	str	r3, [r7, #0]
 80104cc:	e054      	b.n	8010578 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	899b      	ldrh	r3, [r3, #12]
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f7 f988 	bl	80077ec <lwip_htons>
 80104dc:	4603      	mov	r3, r0
 80104de:	f003 0301 	and.w	r3, r3, #1
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00c      	beq.n	8010500 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68dc      	ldr	r4, [r3, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	899b      	ldrh	r3, [r3, #12]
 80104f0:	b29d      	uxth	r5, r3
 80104f2:	2001      	movs	r0, #1
 80104f4:	f7f7 f97a 	bl	80077ec <lwip_htons>
 80104f8:	4603      	mov	r3, r0
 80104fa:	432b      	orrs	r3, r5
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f7fe fb21 	bl	800eb52 <tcp_seg_free>
    while (next &&
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00e      	beq.n	8010534 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	891b      	ldrh	r3, [r3, #8]
 801051a:	461a      	mov	r2, r3
 801051c:	4b1a      	ldr	r3, [pc, #104]	; (8010588 <tcp_oos_insert_segment+0xe8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	441a      	add	r2, r3
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	68db      	ldr	r3, [r3, #12]
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	6839      	ldr	r1, [r7, #0]
 801052a:	8909      	ldrh	r1, [r1, #8]
 801052c:	440b      	add	r3, r1
 801052e:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010530:	2b00      	cmp	r3, #0
 8010532:	dacc      	bge.n	80104ce <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d01e      	beq.n	8010578 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	891b      	ldrh	r3, [r3, #8]
 801053e:	461a      	mov	r2, r3
 8010540:	4b11      	ldr	r3, [pc, #68]	; (8010588 <tcp_oos_insert_segment+0xe8>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	441a      	add	r2, r3
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	685b      	ldr	r3, [r3, #4]
 801054c:	1ad3      	subs	r3, r2, r3
    if (next &&
 801054e:	2b00      	cmp	r3, #0
 8010550:	dd12      	ble.n	8010578 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	b29a      	uxth	r2, r3
 801055a:	4b0b      	ldr	r3, [pc, #44]	; (8010588 <tcp_oos_insert_segment+0xe8>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	b29b      	uxth	r3, r3
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	b29a      	uxth	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	891b      	ldrh	r3, [r3, #8]
 8010570:	4619      	mov	r1, r3
 8010572:	4610      	mov	r0, r2
 8010574:	f7fc fd0c 	bl	800cf90 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	601a      	str	r2, [r3, #0]
}
 801057e:	bf00      	nop
 8010580:	3710      	adds	r7, #16
 8010582:	46bd      	mov	sp, r7
 8010584:	bdb0      	pop	{r4, r5, r7, pc}
 8010586:	bf00      	nop
 8010588:	20004404 	.word	0x20004404

0801058c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801058e:	b08d      	sub	sp, #52	; 0x34
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010594:	2300      	movs	r3, #0
 8010596:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	7d1b      	ldrb	r3, [r3, #20]
 801059c:	2b03      	cmp	r3, #3
 801059e:	d806      	bhi.n	80105ae <tcp_receive+0x22>
 80105a0:	4b9a      	ldr	r3, [pc, #616]	; (801080c <tcp_receive+0x280>)
 80105a2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80105a6:	499a      	ldr	r1, [pc, #616]	; (8010810 <tcp_receive+0x284>)
 80105a8:	489a      	ldr	r0, [pc, #616]	; (8010814 <tcp_receive+0x288>)
 80105aa:	f004 fb9d 	bl	8014ce8 <iprintf>

  if (flags & TCP_ACK) {
 80105ae:	4b9a      	ldr	r3, [pc, #616]	; (8010818 <tcp_receive+0x28c>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0310 	and.w	r3, r3, #16
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 82c5 	beq.w	8010b46 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105c2:	461a      	mov	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105c8:	4413      	add	r3, r2
 80105ca:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105d0:	4b92      	ldr	r3, [pc, #584]	; (801081c <tcp_receive+0x290>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	db1b      	blt.n	8010612 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105de:	4b8f      	ldr	r3, [pc, #572]	; (801081c <tcp_receive+0x290>)
 80105e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d106      	bne.n	80105f4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105ea:	4b8d      	ldr	r3, [pc, #564]	; (8010820 <tcp_receive+0x294>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	db0e      	blt.n	8010612 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105f8:	4b89      	ldr	r3, [pc, #548]	; (8010820 <tcp_receive+0x294>)
 80105fa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d141      	bne.n	8010684 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010600:	4b88      	ldr	r3, [pc, #544]	; (8010824 <tcp_receive+0x298>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	89db      	ldrh	r3, [r3, #14]
 8010606:	b29a      	uxth	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801060e:	429a      	cmp	r2, r3
 8010610:	d938      	bls.n	8010684 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010612:	4b84      	ldr	r3, [pc, #528]	; (8010824 <tcp_receive+0x298>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	89db      	ldrh	r3, [r3, #14]
 8010618:	b29a      	uxth	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801062c:	429a      	cmp	r2, r3
 801062e:	d205      	bcs.n	801063c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801063c:	4b77      	ldr	r3, [pc, #476]	; (801081c <tcp_receive+0x290>)
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8010644:	4b76      	ldr	r3, [pc, #472]	; (8010820 <tcp_receive+0x294>)
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10d      	bne.n	8010672 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801065c:	2b00      	cmp	r3, #0
 801065e:	d111      	bne.n	8010684 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2201      	movs	r2, #1
 801066c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010670:	e008      	b.n	8010684 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2200      	movs	r2, #0
 8010680:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010684:	4b66      	ldr	r3, [pc, #408]	; (8010820 <tcp_receive+0x294>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801068c:	1ad3      	subs	r3, r2, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	dc58      	bgt.n	8010744 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 8010692:	4b65      	ldr	r3, [pc, #404]	; (8010828 <tcp_receive+0x29c>)
 8010694:	881b      	ldrh	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d14b      	bne.n	8010732 <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80106a4:	441a      	add	r2, r3
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d142      	bne.n	8010732 <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	db3d      	blt.n	8010732 <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106ba:	4b59      	ldr	r3, [pc, #356]	; (8010820 <tcp_receive+0x294>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d137      	bne.n	8010732 <tcp_receive+0x1a6>
              found_dupack = 1;
 80106c2:	2301      	movs	r3, #1
 80106c4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106cc:	3301      	adds	r3, #1
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d907      	bls.n	80106ea <tcp_receive+0x15e>
                ++pcb->dupacks;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106e0:	3301      	adds	r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	d916      	bls.n	8010722 <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106fe:	4413      	add	r3, r2
 8010700:	b29a      	uxth	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010708:	429a      	cmp	r2, r3
 801070a:	d912      	bls.n	8010732 <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010716:	4413      	add	r3, r2
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010720:	e007      	b.n	8010732 <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010728:	2b03      	cmp	r3, #3
 801072a:	d102      	bne.n	8010732 <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f002 fa2d 	bl	8012b8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	2b00      	cmp	r3, #0
 8010736:	f040 8169 	bne.w	8010a0c <tcp_receive+0x480>
        pcb->dupacks = 0;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010742:	e163      	b.n	8010a0c <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010744:	4b36      	ldr	r3, [pc, #216]	; (8010820 <tcp_receive+0x294>)
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	3b01      	subs	r3, #1
 8010750:	2b00      	cmp	r3, #0
 8010752:	f2c0 8107 	blt.w	8010964 <tcp_receive+0x3d8>
 8010756:	4b32      	ldr	r3, [pc, #200]	; (8010820 <tcp_receive+0x294>)
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	2b00      	cmp	r3, #0
 8010762:	f300 80ff 	bgt.w	8010964 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	7e9b      	ldrb	r3, [r3, #26]
 801076a:	f003 0304 	and.w	r3, r3, #4
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00c      	beq.n	801078c <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	7e9b      	ldrb	r3, [r3, #26]
 8010776:	f023 0304 	bic.w	r3, r3, #4
 801077a:	b2da      	uxtb	r2, r3
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801079a:	10db      	asrs	r3, r3, #3
 801079c:	b21b      	sxth	r3, r3
 801079e:	b29a      	uxth	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	4413      	add	r3, r2
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	b21a      	sxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80107bc:	4b18      	ldr	r3, [pc, #96]	; (8010820 <tcp_receive+0x294>)
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	7d1b      	ldrb	r3, [r3, #20]
 80107c8:	2b03      	cmp	r3, #3
 80107ca:	f240 8094 	bls.w	80108f6 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80107da:	429a      	cmp	r2, r3
 80107dc:	d226      	bcs.n	801082c <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107e8:	4413      	add	r3, r2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d97f      	bls.n	80108f6 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010800:	4413      	add	r3, r2
 8010802:	b29a      	uxth	r2, r3
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801080a:	e074      	b.n	80108f6 <tcp_receive+0x36a>
 801080c:	08017f54 	.word	0x08017f54
 8010810:	08018178 	.word	0x08018178
 8010814:	08017f98 	.word	0x08017f98
 8010818:	20004410 	.word	0x20004410
 801081c:	20004404 	.word	0x20004404
 8010820:	20004408 	.word	0x20004408
 8010824:	200043f4 	.word	0x200043f4
 8010828:	2000440e 	.word	0x2000440e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010836:	4619      	mov	r1, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801083c:	fb03 f301 	mul.w	r3, r3, r1
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010846:	fb93 f3f1 	sdiv	r3, r3, r1
 801084a:	b29b      	uxth	r3, r3
 801084c:	4413      	add	r3, r2
 801084e:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010856:	8a7a      	ldrh	r2, [r7, #18]
 8010858:	429a      	cmp	r2, r3
 801085a:	d94c      	bls.n	80108f6 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	8a7a      	ldrh	r2, [r7, #18]
 8010860:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010864:	e047      	b.n	80108f6 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	f7fc fd93 	bl	800d3ac <pbuf_clen>
 8010886:	4603      	mov	r3, r0
 8010888:	429c      	cmp	r4, r3
 801088a:	d206      	bcs.n	801089a <tcp_receive+0x30e>
 801088c:	4b70      	ldr	r3, [pc, #448]	; (8010a50 <tcp_receive+0x4c4>)
 801088e:	f240 429e 	movw	r2, #1182	; 0x49e
 8010892:	4970      	ldr	r1, [pc, #448]	; (8010a54 <tcp_receive+0x4c8>)
 8010894:	4870      	ldr	r0, [pc, #448]	; (8010a58 <tcp_receive+0x4cc>)
 8010896:	f004 fa27 	bl	8014ce8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fc fd84 	bl	800d3ac <pbuf_clen>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108ae:	1a9b      	subs	r3, r3, r2
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	891a      	ldrh	r2, [r3, #8]
 80108bc:	4b67      	ldr	r3, [pc, #412]	; (8010a5c <tcp_receive+0x4d0>)
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	4413      	add	r3, r2
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	4b65      	ldr	r3, [pc, #404]	; (8010a5c <tcp_receive+0x4d0>)
 80108c6:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80108c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108ca:	f7fe f942 	bl	800eb52 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00e      	beq.n	80108f6 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10a      	bne.n	80108f6 <tcp_receive+0x36a>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d106      	bne.n	80108f6 <tcp_receive+0x36a>
 80108e8:	4b59      	ldr	r3, [pc, #356]	; (8010a50 <tcp_receive+0x4c4>)
 80108ea:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80108ee:	495c      	ldr	r1, [pc, #368]	; (8010a60 <tcp_receive+0x4d4>)
 80108f0:	4859      	ldr	r0, [pc, #356]	; (8010a58 <tcp_receive+0x4cc>)
 80108f2:	f004 f9f9 	bl	8014ce8 <iprintf>
      while (pcb->unacked != NULL &&
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d022      	beq.n	8010944 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f7f6 ff7e 	bl	8007808 <lwip_htonl>
 801090c:	4604      	mov	r4, r0
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010912:	891b      	ldrh	r3, [r3, #8]
 8010914:	461d      	mov	r5, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	899b      	ldrh	r3, [r3, #12]
 801091e:	b29b      	uxth	r3, r3
 8010920:	4618      	mov	r0, r3
 8010922:	f7f6 ff63 	bl	80077ec <lwip_htons>
 8010926:	4603      	mov	r3, r0
 8010928:	f003 0303 	and.w	r3, r3, #3
 801092c:	2b00      	cmp	r3, #0
 801092e:	d001      	beq.n	8010934 <tcp_receive+0x3a8>
 8010930:	2301      	movs	r3, #1
 8010932:	e000      	b.n	8010936 <tcp_receive+0x3aa>
 8010934:	2300      	movs	r3, #0
 8010936:	442b      	add	r3, r5
 8010938:	18e2      	adds	r2, r4, r3
 801093a:	4b4a      	ldr	r3, [pc, #296]	; (8010a64 <tcp_receive+0x4d8>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010940:	2b00      	cmp	r3, #0
 8010942:	dd90      	ble.n	8010866 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d104      	bne.n	8010956 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010952:	861a      	strh	r2, [r3, #48]	; 0x30
 8010954:	e002      	b.n	801095c <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	76da      	strb	r2, [r3, #27]
 8010962:	e002      	b.n	801096a <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f001 fd31 	bl	80123cc <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801096a:	e04f      	b.n	8010a0c <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010980:	2b00      	cmp	r3, #0
 8010982:	d103      	bne.n	801098c <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f7fc fd08 	bl	800d3ac <pbuf_clen>
 801099c:	4603      	mov	r3, r0
 801099e:	429c      	cmp	r4, r3
 80109a0:	d206      	bcs.n	80109b0 <tcp_receive+0x424>
 80109a2:	4b2b      	ldr	r3, [pc, #172]	; (8010a50 <tcp_receive+0x4c4>)
 80109a4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80109a8:	492a      	ldr	r1, [pc, #168]	; (8010a54 <tcp_receive+0x4c8>)
 80109aa:	482b      	ldr	r0, [pc, #172]	; (8010a58 <tcp_receive+0x4cc>)
 80109ac:	f004 f99c 	bl	8014ce8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80109b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fc fcf9 	bl	800d3ac <pbuf_clen>
 80109ba:	4603      	mov	r3, r0
 80109bc:	461a      	mov	r2, r3
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80109ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d0:	891a      	ldrh	r2, [r3, #8]
 80109d2:	4b22      	ldr	r3, [pc, #136]	; (8010a5c <tcp_receive+0x4d0>)
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	4413      	add	r3, r2
 80109d8:	b29a      	uxth	r2, r3
 80109da:	4b20      	ldr	r3, [pc, #128]	; (8010a5c <tcp_receive+0x4d0>)
 80109dc:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80109de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109e0:	f7fe f8b7 	bl	800eb52 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00e      	beq.n	8010a0c <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d10a      	bne.n	8010a0c <tcp_receive+0x480>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <tcp_receive+0x480>
 80109fe:	4b14      	ldr	r3, [pc, #80]	; (8010a50 <tcp_receive+0x4c4>)
 8010a00:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010a04:	4916      	ldr	r1, [pc, #88]	; (8010a60 <tcp_receive+0x4d4>)
 8010a06:	4814      	ldr	r0, [pc, #80]	; (8010a58 <tcp_receive+0x4cc>)
 8010a08:	f004 f96e 	bl	8014ce8 <iprintf>
    while (pcb->unsent != NULL &&
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d037      	beq.n	8010a84 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010a14:	4b13      	ldr	r3, [pc, #76]	; (8010a64 <tcp_receive+0x4d8>)
 8010a16:	681c      	ldr	r4, [r3, #0]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f6 fef1 	bl	8007808 <lwip_htonl>
 8010a26:	4605      	mov	r5, r0
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a2c:	891b      	ldrh	r3, [r3, #8]
 8010a2e:	461e      	mov	r6, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	899b      	ldrh	r3, [r3, #12]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7f6 fed6 	bl	80077ec <lwip_htons>
 8010a40:	4603      	mov	r3, r0
 8010a42:	f003 0303 	and.w	r3, r3, #3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d00e      	beq.n	8010a68 <tcp_receive+0x4dc>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e00d      	b.n	8010a6a <tcp_receive+0x4de>
 8010a4e:	bf00      	nop
 8010a50:	08017f54 	.word	0x08017f54
 8010a54:	08018194 	.word	0x08018194
 8010a58:	08017f98 	.word	0x08017f98
 8010a5c:	2000440c 	.word	0x2000440c
 8010a60:	080181bc 	.word	0x080181bc
 8010a64:	20004408 	.word	0x20004408
 8010a68:	2300      	movs	r3, #0
 8010a6a:	4433      	add	r3, r6
 8010a6c:	442b      	add	r3, r5
 8010a6e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	db07      	blt.n	8010a84 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010a74:	4b8d      	ldr	r3, [pc, #564]	; (8010cac <tcp_receive+0x720>)
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f77f af74 	ble.w	801096c <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a8a:	4b89      	ldr	r3, [pc, #548]	; (8010cb0 <tcp_receive+0x724>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	4413      	add	r3, r2
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d052      	beq.n	8010b46 <tcp_receive+0x5ba>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aa4:	4b81      	ldr	r3, [pc, #516]	; (8010cac <tcp_receive+0x720>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	da4b      	bge.n	8010b46 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010aae:	4b81      	ldr	r3, [pc, #516]	; (8010cb4 <tcp_receive+0x728>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010ac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ac8:	10db      	asrs	r3, r3, #3
 8010aca:	b21b      	sxth	r3, r3
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ade:	4413      	add	r3, r2
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	b21a      	sxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010ae8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	da03      	bge.n	8010af8 <tcp_receive+0x56c>
        m = -m;
 8010af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010af2:	425b      	negs	r3, r3
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010af8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b00:	109b      	asrs	r3, r3, #2
 8010b02:	b21b      	sxth	r3, r3
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b16:	4413      	add	r3, r2
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	b21a      	sxth	r2, r3
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b26:	10db      	asrs	r3, r3, #3
 8010b28:	b21b      	sxth	r3, r3
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	4413      	add	r3, r2
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	b21a      	sxth	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010b46:	4b5c      	ldr	r3, [pc, #368]	; (8010cb8 <tcp_receive+0x72c>)
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f000 84ee 	beq.w	801152c <tcp_receive+0xfa0>
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7d1b      	ldrb	r3, [r3, #20]
 8010b54:	2b06      	cmp	r3, #6
 8010b56:	f200 84e9 	bhi.w	801152c <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b5e:	4b57      	ldr	r3, [pc, #348]	; (8010cbc <tcp_receive+0x730>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	1ad3      	subs	r3, r2, r3
 8010b64:	3b01      	subs	r3, #1
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f2c0 80b8 	blt.w	8010cdc <tcp_receive+0x750>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b70:	4b51      	ldr	r3, [pc, #324]	; (8010cb8 <tcp_receive+0x72c>)
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	4619      	mov	r1, r3
 8010b76:	4b51      	ldr	r3, [pc, #324]	; (8010cbc <tcp_receive+0x730>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	440b      	add	r3, r1
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	3301      	adds	r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f300 80ab 	bgt.w	8010cdc <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010b86:	4b4e      	ldr	r3, [pc, #312]	; (8010cc0 <tcp_receive+0x734>)
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b90:	4b4a      	ldr	r3, [pc, #296]	; (8010cbc <tcp_receive+0x730>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010b98:	4b49      	ldr	r3, [pc, #292]	; (8010cc0 <tcp_receive+0x734>)
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d106      	bne.n	8010bae <tcp_receive+0x622>
 8010ba0:	4b48      	ldr	r3, [pc, #288]	; (8010cc4 <tcp_receive+0x738>)
 8010ba2:	f240 523c 	movw	r2, #1340	; 0x53c
 8010ba6:	4948      	ldr	r1, [pc, #288]	; (8010cc8 <tcp_receive+0x73c>)
 8010ba8:	4848      	ldr	r0, [pc, #288]	; (8010ccc <tcp_receive+0x740>)
 8010baa:	f004 f89d 	bl	8014ce8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	dd06      	ble.n	8010bc6 <tcp_receive+0x63a>
 8010bb8:	4b42      	ldr	r3, [pc, #264]	; (8010cc4 <tcp_receive+0x738>)
 8010bba:	f240 523d 	movw	r2, #1341	; 0x53d
 8010bbe:	4944      	ldr	r1, [pc, #272]	; (8010cd0 <tcp_receive+0x744>)
 8010bc0:	4842      	ldr	r0, [pc, #264]	; (8010ccc <tcp_receive+0x740>)
 8010bc2:	f004 f891 	bl	8014ce8 <iprintf>
      if (inseg.p->len < off) {
 8010bc6:	4b3e      	ldr	r3, [pc, #248]	; (8010cc0 <tcp_receive+0x734>)
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	895b      	ldrh	r3, [r3, #10]
 8010bcc:	461a      	mov	r2, r3
 8010bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	da3e      	bge.n	8010c52 <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010bd4:	4b3a      	ldr	r3, [pc, #232]	; (8010cc0 <tcp_receive+0x734>)
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	891b      	ldrh	r3, [r3, #8]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	429a      	cmp	r2, r3
 8010be0:	da06      	bge.n	8010bf0 <tcp_receive+0x664>
 8010be2:	4b38      	ldr	r3, [pc, #224]	; (8010cc4 <tcp_receive+0x738>)
 8010be4:	f240 523f 	movw	r2, #1343	; 0x53f
 8010be8:	493a      	ldr	r1, [pc, #232]	; (8010cd4 <tcp_receive+0x748>)
 8010bea:	4838      	ldr	r0, [pc, #224]	; (8010ccc <tcp_receive+0x740>)
 8010bec:	f004 f87c 	bl	8014ce8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010bf0:	4b33      	ldr	r3, [pc, #204]	; (8010cc0 <tcp_receive+0x734>)
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	891a      	ldrh	r2, [r3, #8]
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010bfe:	e00e      	b.n	8010c1e <tcp_receive+0x692>
          off -= p->len;
 8010c00:	69bb      	ldr	r3, [r7, #24]
 8010c02:	895b      	ldrh	r3, [r3, #10]
 8010c04:	461a      	mov	r2, r3
 8010c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c08:	1a9b      	subs	r3, r3, r2
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	8a3a      	ldrh	r2, [r7, #16]
 8010c10:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010c12:	69bb      	ldr	r3, [r7, #24]
 8010c14:	2200      	movs	r2, #0
 8010c16:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	895b      	ldrh	r3, [r3, #10]
 8010c22:	461a      	mov	r2, r3
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	429a      	cmp	r2, r3
 8010c28:	dbea      	blt.n	8010c00 <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	425b      	negs	r3, r3
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	b21b      	sxth	r3, r3
 8010c34:	4619      	mov	r1, r3
 8010c36:	69b8      	ldr	r0, [r7, #24]
 8010c38:	f7fc fafa 	bl	800d230 <pbuf_header>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d01c      	beq.n	8010c7c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010c42:	4b20      	ldr	r3, [pc, #128]	; (8010cc4 <tcp_receive+0x738>)
 8010c44:	f240 524c 	movw	r2, #1356	; 0x54c
 8010c48:	4923      	ldr	r1, [pc, #140]	; (8010cd8 <tcp_receive+0x74c>)
 8010c4a:	4820      	ldr	r0, [pc, #128]	; (8010ccc <tcp_receive+0x740>)
 8010c4c:	f004 f84c 	bl	8014ce8 <iprintf>
 8010c50:	e014      	b.n	8010c7c <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010c52:	4b1b      	ldr	r3, [pc, #108]	; (8010cc0 <tcp_receive+0x734>)
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c58:	b292      	uxth	r2, r2
 8010c5a:	4252      	negs	r2, r2
 8010c5c:	b292      	uxth	r2, r2
 8010c5e:	b212      	sxth	r2, r2
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fc fae4 	bl	800d230 <pbuf_header>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d006      	beq.n	8010c7c <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010c6e:	4b15      	ldr	r3, [pc, #84]	; (8010cc4 <tcp_receive+0x738>)
 8010c70:	f240 5251 	movw	r2, #1361	; 0x551
 8010c74:	4918      	ldr	r1, [pc, #96]	; (8010cd8 <tcp_receive+0x74c>)
 8010c76:	4815      	ldr	r0, [pc, #84]	; (8010ccc <tcp_receive+0x740>)
 8010c78:	f004 f836 	bl	8014ce8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010c7c:	4b10      	ldr	r3, [pc, #64]	; (8010cc0 <tcp_receive+0x734>)
 8010c7e:	891a      	ldrh	r2, [r3, #8]
 8010c80:	4b0e      	ldr	r3, [pc, #56]	; (8010cbc <tcp_receive+0x730>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	b299      	uxth	r1, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	1acb      	subs	r3, r1, r3
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <tcp_receive+0x734>)
 8010c96:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010c98:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <tcp_receive+0x734>)
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010ca0:	4906      	ldr	r1, [pc, #24]	; (8010cbc <tcp_receive+0x730>)
 8010ca2:	600a      	str	r2, [r1, #0]
 8010ca4:	4a05      	ldr	r2, [pc, #20]	; (8010cbc <tcp_receive+0x730>)
 8010ca6:	6812      	ldr	r2, [r2, #0]
 8010ca8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010caa:	e025      	b.n	8010cf8 <tcp_receive+0x76c>
 8010cac:	20004408 	.word	0x20004408
 8010cb0:	2000440c 	.word	0x2000440c
 8010cb4:	20007d30 	.word	0x20007d30
 8010cb8:	2000440e 	.word	0x2000440e
 8010cbc:	20004404 	.word	0x20004404
 8010cc0:	200043e4 	.word	0x200043e4
 8010cc4:	08017f54 	.word	0x08017f54
 8010cc8:	080181dc 	.word	0x080181dc
 8010ccc:	08017f98 	.word	0x08017f98
 8010cd0:	080181ec 	.word	0x080181ec
 8010cd4:	080181fc 	.word	0x080181fc
 8010cd8:	0801820c 	.word	0x0801820c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010cdc:	4b86      	ldr	r3, [pc, #536]	; (8010ef8 <tcp_receive+0x96c>)
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	da06      	bge.n	8010cf8 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	7e9b      	ldrb	r3, [r3, #26]
 8010cee:	f043 0302 	orr.w	r3, r3, #2
 8010cf2:	b2da      	uxtb	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010cf8:	4b7f      	ldr	r3, [pc, #508]	; (8010ef8 <tcp_receive+0x96c>)
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f2c0 840d 	blt.w	8011522 <tcp_receive+0xf96>
 8010d08:	4b7b      	ldr	r3, [pc, #492]	; (8010ef8 <tcp_receive+0x96c>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	6879      	ldr	r1, [r7, #4]
 8010d12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d14:	440b      	add	r3, r1
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	3301      	adds	r3, #1
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f300 8401 	bgt.w	8011522 <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d24:	4b74      	ldr	r3, [pc, #464]	; (8010ef8 <tcp_receive+0x96c>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	f040 8285 	bne.w	8011238 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010d2e:	4b73      	ldr	r3, [pc, #460]	; (8010efc <tcp_receive+0x970>)
 8010d30:	891c      	ldrh	r4, [r3, #8]
 8010d32:	4b72      	ldr	r3, [pc, #456]	; (8010efc <tcp_receive+0x970>)
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	899b      	ldrh	r3, [r3, #12]
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7f6 fd56 	bl	80077ec <lwip_htons>
 8010d40:	4603      	mov	r3, r0
 8010d42:	f003 0303 	and.w	r3, r3, #3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <tcp_receive+0x7c2>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e000      	b.n	8010d50 <tcp_receive+0x7c4>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	4423      	add	r3, r4
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	4b6a      	ldr	r3, [pc, #424]	; (8010f00 <tcp_receive+0x974>)
 8010d56:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d5c:	4b68      	ldr	r3, [pc, #416]	; (8010f00 <tcp_receive+0x974>)
 8010d5e:	881b      	ldrh	r3, [r3, #0]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d26d      	bcs.n	8010e40 <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d64:	4b65      	ldr	r3, [pc, #404]	; (8010efc <tcp_receive+0x970>)
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	899b      	ldrh	r3, [r3, #12]
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7f6 fd3d 	bl	80077ec <lwip_htons>
 8010d72:	4603      	mov	r3, r0
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d01a      	beq.n	8010db2 <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010d7c:	4b5f      	ldr	r3, [pc, #380]	; (8010efc <tcp_receive+0x970>)
 8010d7e:	68dc      	ldr	r4, [r3, #12]
 8010d80:	4b5e      	ldr	r3, [pc, #376]	; (8010efc <tcp_receive+0x970>)
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010d8c:	b29d      	uxth	r5, r3
 8010d8e:	4b5b      	ldr	r3, [pc, #364]	; (8010efc <tcp_receive+0x970>)
 8010d90:	68db      	ldr	r3, [r3, #12]
 8010d92:	899b      	ldrh	r3, [r3, #12]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7f6 fd28 	bl	80077ec <lwip_htons>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7f6 fd21 	bl	80077ec <lwip_htons>
 8010daa:	4603      	mov	r3, r0
 8010dac:	432b      	orrs	r3, r5
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010db6:	4b51      	ldr	r3, [pc, #324]	; (8010efc <tcp_receive+0x970>)
 8010db8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010dba:	4b50      	ldr	r3, [pc, #320]	; (8010efc <tcp_receive+0x970>)
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	899b      	ldrh	r3, [r3, #12]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7f6 fd12 	bl	80077ec <lwip_htons>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	f003 0302 	and.w	r3, r3, #2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d005      	beq.n	8010dde <tcp_receive+0x852>
            inseg.len -= 1;
 8010dd2:	4b4a      	ldr	r3, [pc, #296]	; (8010efc <tcp_receive+0x970>)
 8010dd4:	891b      	ldrh	r3, [r3, #8]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	4b48      	ldr	r3, [pc, #288]	; (8010efc <tcp_receive+0x970>)
 8010ddc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010dde:	4b47      	ldr	r3, [pc, #284]	; (8010efc <tcp_receive+0x970>)
 8010de0:	685a      	ldr	r2, [r3, #4]
 8010de2:	4b46      	ldr	r3, [pc, #280]	; (8010efc <tcp_receive+0x970>)
 8010de4:	891b      	ldrh	r3, [r3, #8]
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7fc f8d1 	bl	800cf90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010dee:	4b43      	ldr	r3, [pc, #268]	; (8010efc <tcp_receive+0x970>)
 8010df0:	891c      	ldrh	r4, [r3, #8]
 8010df2:	4b42      	ldr	r3, [pc, #264]	; (8010efc <tcp_receive+0x970>)
 8010df4:	68db      	ldr	r3, [r3, #12]
 8010df6:	899b      	ldrh	r3, [r3, #12]
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7f6 fcf6 	bl	80077ec <lwip_htons>
 8010e00:	4603      	mov	r3, r0
 8010e02:	f003 0303 	and.w	r3, r3, #3
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <tcp_receive+0x882>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e000      	b.n	8010e10 <tcp_receive+0x884>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	4423      	add	r3, r4
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	4b3a      	ldr	r3, [pc, #232]	; (8010f00 <tcp_receive+0x974>)
 8010e16:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010e18:	4b39      	ldr	r3, [pc, #228]	; (8010f00 <tcp_receive+0x974>)
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	4b36      	ldr	r3, [pc, #216]	; (8010ef8 <tcp_receive+0x96c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	441a      	add	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e2c:	440b      	add	r3, r1
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d006      	beq.n	8010e40 <tcp_receive+0x8b4>
 8010e32:	4b34      	ldr	r3, [pc, #208]	; (8010f04 <tcp_receive+0x978>)
 8010e34:	f240 527f 	movw	r2, #1407	; 0x57f
 8010e38:	4933      	ldr	r1, [pc, #204]	; (8010f08 <tcp_receive+0x97c>)
 8010e3a:	4834      	ldr	r0, [pc, #208]	; (8010f0c <tcp_receive+0x980>)
 8010e3c:	f003 ff54 	bl	8014ce8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f000 80e0 	beq.w	801100a <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e4a:	4b2c      	ldr	r3, [pc, #176]	; (8010efc <tcp_receive+0x970>)
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	899b      	ldrh	r3, [r3, #12]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f6 fcca 	bl	80077ec <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	f003 0301 	and.w	r3, r3, #1
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d010      	beq.n	8010e84 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010e62:	e00a      	b.n	8010e7a <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f7fd fe6c 	bl	800eb52 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1f0      	bne.n	8010e64 <tcp_receive+0x8d8>
 8010e82:	e0c2      	b.n	801100a <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e88:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010e8a:	e04e      	b.n	8010f2a <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	899b      	ldrh	r3, [r3, #12]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f6 fca9 	bl	80077ec <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	f003 0301 	and.w	r3, r3, #1
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d03a      	beq.n	8010f1a <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010ea4:	4b15      	ldr	r3, [pc, #84]	; (8010efc <tcp_receive+0x970>)
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7f6 fc9d 	bl	80077ec <lwip_htons>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d12e      	bne.n	8010f1a <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010ebc:	4b0f      	ldr	r3, [pc, #60]	; (8010efc <tcp_receive+0x970>)
 8010ebe:	68dc      	ldr	r4, [r3, #12]
 8010ec0:	4b0e      	ldr	r3, [pc, #56]	; (8010efc <tcp_receive+0x970>)
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	899b      	ldrh	r3, [r3, #12]
 8010ec6:	b29d      	uxth	r5, r3
 8010ec8:	2001      	movs	r0, #1
 8010eca:	f7f6 fc8f 	bl	80077ec <lwip_htons>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	432b      	orrs	r3, r5
 8010ed2:	b29b      	uxth	r3, r3
 8010ed4:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010ed6:	4b09      	ldr	r3, [pc, #36]	; (8010efc <tcp_receive+0x970>)
 8010ed8:	891c      	ldrh	r4, [r3, #8]
 8010eda:	4b08      	ldr	r3, [pc, #32]	; (8010efc <tcp_receive+0x970>)
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	899b      	ldrh	r3, [r3, #12]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7f6 fc82 	bl	80077ec <lwip_htons>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	f003 0303 	and.w	r3, r3, #3
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00e      	beq.n	8010f10 <tcp_receive+0x984>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e00d      	b.n	8010f12 <tcp_receive+0x986>
 8010ef6:	bf00      	nop
 8010ef8:	20004404 	.word	0x20004404
 8010efc:	200043e4 	.word	0x200043e4
 8010f00:	2000440e 	.word	0x2000440e
 8010f04:	08017f54 	.word	0x08017f54
 8010f08:	08018220 	.word	0x08018220
 8010f0c:	08017f98 	.word	0x08017f98
 8010f10:	2300      	movs	r3, #0
 8010f12:	4423      	add	r3, r4
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	4b95      	ldr	r3, [pc, #596]	; (801116c <tcp_receive+0xbe0>)
 8010f18:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f26:	f7fd fe14 	bl	800eb52 <tcp_seg_free>
            while (next &&
 8010f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00e      	beq.n	8010f4e <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010f30:	4b8e      	ldr	r3, [pc, #568]	; (801116c <tcp_receive+0xbe0>)
 8010f32:	881b      	ldrh	r3, [r3, #0]
 8010f34:	461a      	mov	r2, r3
 8010f36:	4b8e      	ldr	r3, [pc, #568]	; (8011170 <tcp_receive+0xbe4>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	441a      	add	r2, r3
 8010f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f44:	8909      	ldrh	r1, [r1, #8]
 8010f46:	440b      	add	r3, r1
 8010f48:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	da9e      	bge.n	8010e8c <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d057      	beq.n	8011004 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 8010f54:	4b85      	ldr	r3, [pc, #532]	; (801116c <tcp_receive+0xbe0>)
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	4b85      	ldr	r3, [pc, #532]	; (8011170 <tcp_receive+0xbe4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	441a      	add	r2, r3
 8010f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f62:	68db      	ldr	r3, [r3, #12]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dd4b      	ble.n	8011004 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	4b7e      	ldr	r3, [pc, #504]	; (8011170 <tcp_receive+0xbe4>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	4b7d      	ldr	r3, [pc, #500]	; (8011174 <tcp_receive+0xbe8>)
 8010f80:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f82:	4b7c      	ldr	r3, [pc, #496]	; (8011174 <tcp_receive+0xbe8>)
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	899b      	ldrh	r3, [r3, #12]
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7f6 fc2e 	bl	80077ec <lwip_htons>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f003 0302 	and.w	r3, r3, #2
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d005      	beq.n	8010fa6 <tcp_receive+0xa1a>
                inseg.len -= 1;
 8010f9a:	4b76      	ldr	r3, [pc, #472]	; (8011174 <tcp_receive+0xbe8>)
 8010f9c:	891b      	ldrh	r3, [r3, #8]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	4b74      	ldr	r3, [pc, #464]	; (8011174 <tcp_receive+0xbe8>)
 8010fa4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010fa6:	4b73      	ldr	r3, [pc, #460]	; (8011174 <tcp_receive+0xbe8>)
 8010fa8:	685a      	ldr	r2, [r3, #4]
 8010faa:	4b72      	ldr	r3, [pc, #456]	; (8011174 <tcp_receive+0xbe8>)
 8010fac:	891b      	ldrh	r3, [r3, #8]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7fb ffed 	bl	800cf90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010fb6:	4b6f      	ldr	r3, [pc, #444]	; (8011174 <tcp_receive+0xbe8>)
 8010fb8:	891c      	ldrh	r4, [r3, #8]
 8010fba:	4b6e      	ldr	r3, [pc, #440]	; (8011174 <tcp_receive+0xbe8>)
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	899b      	ldrh	r3, [r3, #12]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7f6 fc12 	bl	80077ec <lwip_htons>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	f003 0303 	and.w	r3, r3, #3
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <tcp_receive+0xa4a>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e000      	b.n	8010fd8 <tcp_receive+0xa4c>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	4423      	add	r3, r4
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	4b63      	ldr	r3, [pc, #396]	; (801116c <tcp_receive+0xbe0>)
 8010fde:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010fe0:	4b62      	ldr	r3, [pc, #392]	; (801116c <tcp_receive+0xbe0>)
 8010fe2:	881b      	ldrh	r3, [r3, #0]
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4b62      	ldr	r3, [pc, #392]	; (8011170 <tcp_receive+0xbe4>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	441a      	add	r2, r3
 8010fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d006      	beq.n	8011004 <tcp_receive+0xa78>
 8010ff6:	4b60      	ldr	r3, [pc, #384]	; (8011178 <tcp_receive+0xbec>)
 8010ff8:	f240 52af 	movw	r2, #1455	; 0x5af
 8010ffc:	495f      	ldr	r1, [pc, #380]	; (801117c <tcp_receive+0xbf0>)
 8010ffe:	4860      	ldr	r0, [pc, #384]	; (8011180 <tcp_receive+0xbf4>)
 8011000:	f003 fe72 	bl	8014ce8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011008:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801100a:	4b58      	ldr	r3, [pc, #352]	; (801116c <tcp_receive+0xbe0>)
 801100c:	881b      	ldrh	r3, [r3, #0]
 801100e:	461a      	mov	r2, r3
 8011010:	4b57      	ldr	r3, [pc, #348]	; (8011170 <tcp_receive+0xbe4>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	441a      	add	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801101e:	4b53      	ldr	r3, [pc, #332]	; (801116c <tcp_receive+0xbe0>)
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	429a      	cmp	r2, r3
 8011024:	d206      	bcs.n	8011034 <tcp_receive+0xaa8>
 8011026:	4b54      	ldr	r3, [pc, #336]	; (8011178 <tcp_receive+0xbec>)
 8011028:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801102c:	4955      	ldr	r1, [pc, #340]	; (8011184 <tcp_receive+0xbf8>)
 801102e:	4854      	ldr	r0, [pc, #336]	; (8011180 <tcp_receive+0xbf4>)
 8011030:	f003 fe5a 	bl	8014ce8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011038:	4b4c      	ldr	r3, [pc, #304]	; (801116c <tcp_receive+0xbe0>)
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	1ad3      	subs	r3, r2, r3
 801103e:	b29a      	uxth	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7fd f8f5 	bl	800e234 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801104a:	4b4a      	ldr	r3, [pc, #296]	; (8011174 <tcp_receive+0xbe8>)
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	891b      	ldrh	r3, [r3, #8]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d006      	beq.n	8011062 <tcp_receive+0xad6>
          recv_data = inseg.p;
 8011054:	4b47      	ldr	r3, [pc, #284]	; (8011174 <tcp_receive+0xbe8>)
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	4a4b      	ldr	r2, [pc, #300]	; (8011188 <tcp_receive+0xbfc>)
 801105a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801105c:	4b45      	ldr	r3, [pc, #276]	; (8011174 <tcp_receive+0xbe8>)
 801105e:	2200      	movs	r2, #0
 8011060:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011062:	4b44      	ldr	r3, [pc, #272]	; (8011174 <tcp_receive+0xbe8>)
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	899b      	ldrh	r3, [r3, #12]
 8011068:	b29b      	uxth	r3, r3
 801106a:	4618      	mov	r0, r3
 801106c:	f7f6 fbbe 	bl	80077ec <lwip_htons>
 8011070:	4603      	mov	r3, r0
 8011072:	f003 0301 	and.w	r3, r3, #1
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 80b4 	beq.w	80111e4 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801107c:	4b43      	ldr	r3, [pc, #268]	; (801118c <tcp_receive+0xc00>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	f043 0320 	orr.w	r3, r3, #32
 8011084:	b2da      	uxtb	r2, r3
 8011086:	4b41      	ldr	r3, [pc, #260]	; (801118c <tcp_receive+0xc00>)
 8011088:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801108a:	e0ab      	b.n	80111e4 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011090:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	4a35      	ldr	r2, [pc, #212]	; (8011170 <tcp_receive+0xbe4>)
 801109c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	891b      	ldrh	r3, [r3, #8]
 80110a2:	461c      	mov	r4, r3
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	899b      	ldrh	r3, [r3, #12]
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7f6 fb9d 	bl	80077ec <lwip_htons>
 80110b2:	4603      	mov	r3, r0
 80110b4:	f003 0303 	and.w	r3, r3, #3
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <tcp_receive+0xb34>
 80110bc:	2301      	movs	r3, #1
 80110be:	e000      	b.n	80110c2 <tcp_receive+0xb36>
 80110c0:	2300      	movs	r3, #0
 80110c2:	4423      	add	r3, r4
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80110c8:	441a      	add	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110d2:	461c      	mov	r4, r3
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	891b      	ldrh	r3, [r3, #8]
 80110d8:	461d      	mov	r5, r3
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	899b      	ldrh	r3, [r3, #12]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7f6 fb82 	bl	80077ec <lwip_htons>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d001      	beq.n	80110f6 <tcp_receive+0xb6a>
 80110f2:	2301      	movs	r3, #1
 80110f4:	e000      	b.n	80110f8 <tcp_receive+0xb6c>
 80110f6:	2300      	movs	r3, #0
 80110f8:	442b      	add	r3, r5
 80110fa:	429c      	cmp	r4, r3
 80110fc:	d206      	bcs.n	801110c <tcp_receive+0xb80>
 80110fe:	4b1e      	ldr	r3, [pc, #120]	; (8011178 <tcp_receive+0xbec>)
 8011100:	f240 52de 	movw	r2, #1502	; 0x5de
 8011104:	4922      	ldr	r1, [pc, #136]	; (8011190 <tcp_receive+0xc04>)
 8011106:	481e      	ldr	r0, [pc, #120]	; (8011180 <tcp_receive+0xbf4>)
 8011108:	f003 fdee 	bl	8014ce8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	891b      	ldrh	r3, [r3, #8]
 8011110:	461c      	mov	r4, r3
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	899b      	ldrh	r3, [r3, #12]
 8011118:	b29b      	uxth	r3, r3
 801111a:	4618      	mov	r0, r3
 801111c:	f7f6 fb66 	bl	80077ec <lwip_htons>
 8011120:	4603      	mov	r3, r0
 8011122:	f003 0303 	and.w	r3, r3, #3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <tcp_receive+0xba2>
 801112a:	2301      	movs	r3, #1
 801112c:	e000      	b.n	8011130 <tcp_receive+0xba4>
 801112e:	2300      	movs	r3, #0
 8011130:	18e1      	adds	r1, r4, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011136:	b28b      	uxth	r3, r1
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	b29a      	uxth	r2, r3
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7fd f877 	bl	800e234 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	891b      	ldrh	r3, [r3, #8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d028      	beq.n	80111a2 <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011150:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <tcp_receive+0xbfc>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d01d      	beq.n	8011194 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 8011158:	4b0b      	ldr	r3, [pc, #44]	; (8011188 <tcp_receive+0xbfc>)
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	4619      	mov	r1, r3
 8011162:	4610      	mov	r0, r2
 8011164:	f7fc f962 	bl	800d42c <pbuf_cat>
 8011168:	e018      	b.n	801119c <tcp_receive+0xc10>
 801116a:	bf00      	nop
 801116c:	2000440e 	.word	0x2000440e
 8011170:	20004404 	.word	0x20004404
 8011174:	200043e4 	.word	0x200043e4
 8011178:	08017f54 	.word	0x08017f54
 801117c:	08018258 	.word	0x08018258
 8011180:	08017f98 	.word	0x08017f98
 8011184:	08018294 	.word	0x08018294
 8011188:	20004414 	.word	0x20004414
 801118c:	20004411 	.word	0x20004411
 8011190:	080182b4 	.word	0x080182b4
            } else {
              recv_data = cseg->p;
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	4a71      	ldr	r2, [pc, #452]	; (8011360 <tcp_receive+0xdd4>)
 801119a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	2200      	movs	r2, #0
 80111a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	899b      	ldrh	r3, [r3, #12]
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f6 fb1e 	bl	80077ec <lwip_htons>
 80111b0:	4603      	mov	r3, r0
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00d      	beq.n	80111d6 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80111ba:	4b6a      	ldr	r3, [pc, #424]	; (8011364 <tcp_receive+0xdd8>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	f043 0320 	orr.w	r3, r3, #32
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b67      	ldr	r3, [pc, #412]	; (8011364 <tcp_receive+0xdd8>)
 80111c6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	7d1b      	ldrb	r3, [r3, #20]
 80111cc:	2b04      	cmp	r3, #4
 80111ce:	d102      	bne.n	80111d6 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2207      	movs	r2, #7
 80111d4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80111de:	68b8      	ldr	r0, [r7, #8]
 80111e0:	f7fd fcb7 	bl	800eb52 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d008      	beq.n	80111fe <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80111f8:	429a      	cmp	r2, r3
 80111fa:	f43f af47 	beq.w	801108c <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	7e9b      	ldrb	r3, [r3, #26]
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	d00e      	beq.n	8011228 <tcp_receive+0xc9c>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7e9b      	ldrb	r3, [r3, #26]
 801120e:	f023 0301 	bic.w	r3, r3, #1
 8011212:	b2da      	uxtb	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	769a      	strb	r2, [r3, #26]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	7e9b      	ldrb	r3, [r3, #26]
 801121c:	f043 0302 	orr.w	r3, r3, #2
 8011220:	b2da      	uxtb	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011226:	e180      	b.n	801152a <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7e9b      	ldrb	r3, [r3, #26]
 801122c:	f043 0301 	orr.w	r3, r3, #1
 8011230:	b2da      	uxtb	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011236:	e178      	b.n	801152a <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f001 f8c7 	bl	80123cc <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011246:	4848      	ldr	r0, [pc, #288]	; (8011368 <tcp_receive+0xddc>)
 8011248:	f7fd fc9b 	bl	800eb82 <tcp_seg_copy>
 801124c:	4602      	mov	r2, r0
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8011252:	e16a      	b.n	801152a <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8011254:	2300      	movs	r3, #0
 8011256:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801125c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801125e:	e14f      	b.n	8011500 <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	4b41      	ldr	r3, [pc, #260]	; (801136c <tcp_receive+0xde0>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	429a      	cmp	r2, r3
 801126c:	d11d      	bne.n	80112aa <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801126e:	4b3e      	ldr	r3, [pc, #248]	; (8011368 <tcp_receive+0xddc>)
 8011270:	891a      	ldrh	r2, [r3, #8]
 8011272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011274:	891b      	ldrh	r3, [r3, #8]
 8011276:	429a      	cmp	r2, r3
 8011278:	f240 8147 	bls.w	801150a <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801127c:	483a      	ldr	r0, [pc, #232]	; (8011368 <tcp_receive+0xddc>)
 801127e:	f7fd fc80 	bl	800eb82 <tcp_seg_copy>
 8011282:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	f000 8141 	beq.w	801150e <tcp_receive+0xf82>
                  if (prev != NULL) {
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	2b00      	cmp	r3, #0
 8011290:	d003      	beq.n	801129a <tcp_receive+0xd0e>
                    prev->next = cseg;
 8011292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	601a      	str	r2, [r3, #0]
 8011298:	e002      	b.n	80112a0 <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80112a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112a2:	68b8      	ldr	r0, [r7, #8]
 80112a4:	f7ff f8fc 	bl	80104a0 <tcp_oos_insert_segment>
                }
                break;
 80112a8:	e131      	b.n	801150e <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d117      	bne.n	80112e0 <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80112b0:	4b2e      	ldr	r3, [pc, #184]	; (801136c <tcp_receive+0xde0>)
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	da57      	bge.n	8011370 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80112c0:	4829      	ldr	r0, [pc, #164]	; (8011368 <tcp_receive+0xddc>)
 80112c2:	f7fd fc5e 	bl	800eb82 <tcp_seg_copy>
 80112c6:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 8121 	beq.w	8011512 <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80112d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112d8:	68b8      	ldr	r0, [r7, #8]
 80112da:	f7ff f8e1 	bl	80104a0 <tcp_oos_insert_segment>
                  }
                  break;
 80112de:	e118      	b.n	8011512 <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80112e0:	4b22      	ldr	r3, [pc, #136]	; (801136c <tcp_receive+0xde0>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	3b01      	subs	r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	db3e      	blt.n	8011370 <tcp_receive+0xde4>
 80112f2:	4b1e      	ldr	r3, [pc, #120]	; (801136c <tcp_receive+0xde0>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	3301      	adds	r3, #1
 8011300:	2b00      	cmp	r3, #0
 8011302:	dc35      	bgt.n	8011370 <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8011304:	4818      	ldr	r0, [pc, #96]	; (8011368 <tcp_receive+0xddc>)
 8011306:	f7fd fc3c 	bl	800eb82 <tcp_seg_copy>
 801130a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2b00      	cmp	r3, #0
 8011310:	f000 8101 	beq.w	8011516 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801131c:	8912      	ldrh	r2, [r2, #8]
 801131e:	441a      	add	r2, r3
 8011320:	4b12      	ldr	r3, [pc, #72]	; (801136c <tcp_receive+0xde0>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	1ad3      	subs	r3, r2, r3
 8011326:	2b00      	cmp	r3, #0
 8011328:	dd12      	ble.n	8011350 <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801132a:	4b10      	ldr	r3, [pc, #64]	; (801136c <tcp_receive+0xde0>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	b29a      	uxth	r2, r3
 8011330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	b29b      	uxth	r3, r3
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	b29a      	uxth	r2, r3
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	891b      	ldrh	r3, [r3, #8]
 8011348:	4619      	mov	r1, r3
 801134a:	4610      	mov	r0, r2
 801134c:	f7fb fe20 	bl	800cf90 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	68ba      	ldr	r2, [r7, #8]
 8011354:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011358:	68b8      	ldr	r0, [r7, #8]
 801135a:	f7ff f8a1 	bl	80104a0 <tcp_oos_insert_segment>
                  }
                  break;
 801135e:	e0da      	b.n	8011516 <tcp_receive+0xf8a>
 8011360:	20004414 	.word	0x20004414
 8011364:	20004411 	.word	0x20004411
 8011368:	200043e4 	.word	0x200043e4
 801136c:	20004404 	.word	0x20004404
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	f040 80be 	bne.w	80114f6 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801137a:	4b7b      	ldr	r3, [pc, #492]	; (8011568 <tcp_receive+0xfdc>)
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011386:	2b00      	cmp	r3, #0
 8011388:	f340 80b5 	ble.w	80114f6 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	899b      	ldrh	r3, [r3, #12]
 8011392:	b29b      	uxth	r3, r3
 8011394:	4618      	mov	r0, r3
 8011396:	f7f6 fa29 	bl	80077ec <lwip_htons>
 801139a:	4603      	mov	r3, r0
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f040 80ba 	bne.w	801151a <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80113a6:	4871      	ldr	r0, [pc, #452]	; (801156c <tcp_receive+0xfe0>)
 80113a8:	f7fd fbeb 	bl	800eb82 <tcp_seg_copy>
 80113ac:	4602      	mov	r2, r0
 80113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80113b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	f000 80b1 	beq.w	801151e <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113c4:	8912      	ldrh	r2, [r2, #8]
 80113c6:	441a      	add	r2, r3
 80113c8:	4b67      	ldr	r3, [pc, #412]	; (8011568 <tcp_receive+0xfdc>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	1ad3      	subs	r3, r2, r3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	dd12      	ble.n	80113f8 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80113d2:	4b65      	ldr	r3, [pc, #404]	; (8011568 <tcp_receive+0xfdc>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80113e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ea:	685a      	ldr	r2, [r3, #4]
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fb fdcc 	bl	800cf90 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80113f8:	4b5d      	ldr	r3, [pc, #372]	; (8011570 <tcp_receive+0xfe4>)
 80113fa:	881b      	ldrh	r3, [r3, #0]
 80113fc:	461a      	mov	r2, r3
 80113fe:	4b5a      	ldr	r3, [pc, #360]	; (8011568 <tcp_receive+0xfdc>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	441a      	add	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801140c:	440b      	add	r3, r1
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	2b00      	cmp	r3, #0
 8011412:	f340 8084 	ble.w	801151e <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	899b      	ldrh	r3, [r3, #12]
 801141e:	b29b      	uxth	r3, r3
 8011420:	4618      	mov	r0, r3
 8011422:	f7f6 f9e3 	bl	80077ec <lwip_htons>
 8011426:	4603      	mov	r3, r0
 8011428:	f003 0301 	and.w	r3, r3, #1
 801142c:	2b00      	cmp	r3, #0
 801142e:	d01d      	beq.n	801146c <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	68dc      	ldr	r4, [r3, #12]
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	899b      	ldrh	r3, [r3, #12]
 801143e:	b29b      	uxth	r3, r3
 8011440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011444:	b29d      	uxth	r5, r3
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	899b      	ldrh	r3, [r3, #12]
 801144e:	b29b      	uxth	r3, r3
 8011450:	4618      	mov	r0, r3
 8011452:	f7f6 f9cb 	bl	80077ec <lwip_htons>
 8011456:	4603      	mov	r3, r0
 8011458:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801145c:	b29b      	uxth	r3, r3
 801145e:	4618      	mov	r0, r3
 8011460:	f7f6 f9c4 	bl	80077ec <lwip_htons>
 8011464:	4603      	mov	r3, r0
 8011466:	432b      	orrs	r3, r5
 8011468:	b29b      	uxth	r3, r3
 801146a:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011474:	b291      	uxth	r1, r2
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801147a:	440a      	add	r2, r1
 801147c:	b291      	uxth	r1, r2
 801147e:	4a3a      	ldr	r2, [pc, #232]	; (8011568 <tcp_receive+0xfdc>)
 8011480:	6812      	ldr	r2, [r2, #0]
 8011482:	b292      	uxth	r2, r2
 8011484:	1a8a      	subs	r2, r1, r2
 8011486:	b292      	uxth	r2, r2
 8011488:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	685a      	ldr	r2, [r3, #4]
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	891b      	ldrh	r3, [r3, #8]
 8011496:	4619      	mov	r1, r3
 8011498:	4610      	mov	r0, r2
 801149a:	f7fb fd79 	bl	800cf90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	891c      	ldrh	r4, [r3, #8]
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	899b      	ldrh	r3, [r3, #12]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f6 f99c 	bl	80077ec <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f003 0303 	and.w	r3, r3, #3
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d001      	beq.n	80114c2 <tcp_receive+0xf36>
 80114be:	2301      	movs	r3, #1
 80114c0:	e000      	b.n	80114c4 <tcp_receive+0xf38>
 80114c2:	2300      	movs	r3, #0
 80114c4:	4423      	add	r3, r4
 80114c6:	b29a      	uxth	r2, r3
 80114c8:	4b29      	ldr	r3, [pc, #164]	; (8011570 <tcp_receive+0xfe4>)
 80114ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80114cc:	4b28      	ldr	r3, [pc, #160]	; (8011570 <tcp_receive+0xfe4>)
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	461a      	mov	r2, r3
 80114d2:	4b25      	ldr	r3, [pc, #148]	; (8011568 <tcp_receive+0xfdc>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	441a      	add	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114dc:	6879      	ldr	r1, [r7, #4]
 80114de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114e0:	440b      	add	r3, r1
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d01b      	beq.n	801151e <tcp_receive+0xf92>
 80114e6:	4b23      	ldr	r3, [pc, #140]	; (8011574 <tcp_receive+0xfe8>)
 80114e8:	f240 627b 	movw	r2, #1659	; 0x67b
 80114ec:	4922      	ldr	r1, [pc, #136]	; (8011578 <tcp_receive+0xfec>)
 80114ee:	4823      	ldr	r0, [pc, #140]	; (801157c <tcp_receive+0xff0>)
 80114f0:	f003 fbfa 	bl	8014ce8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80114f4:	e013      	b.n	801151e <tcp_receive+0xf92>
              }
            }
            prev = next;
 80114f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f8:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80114fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011502:	2b00      	cmp	r3, #0
 8011504:	f47f aeac 	bne.w	8011260 <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8011508:	e00f      	b.n	801152a <tcp_receive+0xf9e>
                break;
 801150a:	bf00      	nop
 801150c:	e00d      	b.n	801152a <tcp_receive+0xf9e>
                break;
 801150e:	bf00      	nop
 8011510:	e00b      	b.n	801152a <tcp_receive+0xf9e>
                  break;
 8011512:	bf00      	nop
 8011514:	e009      	b.n	801152a <tcp_receive+0xf9e>
                  break;
 8011516:	bf00      	nop
 8011518:	e007      	b.n	801152a <tcp_receive+0xf9e>
                  break;
 801151a:	bf00      	nop
 801151c:	e005      	b.n	801152a <tcp_receive+0xf9e>
                break;
 801151e:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8011520:	e003      	b.n	801152a <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 ff52 	bl	80123cc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011528:	e01a      	b.n	8011560 <tcp_receive+0xfd4>
 801152a:	e019      	b.n	8011560 <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801152c:	4b0e      	ldr	r3, [pc, #56]	; (8011568 <tcp_receive+0xfdc>)
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	db0a      	blt.n	8011550 <tcp_receive+0xfc4>
 801153a:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <tcp_receive+0xfdc>)
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011542:	6879      	ldr	r1, [r7, #4]
 8011544:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011546:	440b      	add	r3, r1
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	3301      	adds	r3, #1
 801154c:	2b00      	cmp	r3, #0
 801154e:	dd07      	ble.n	8011560 <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	7e9b      	ldrb	r3, [r3, #26]
 8011554:	f043 0302 	orr.w	r3, r3, #2
 8011558:	b2da      	uxtb	r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801155e:	e7ff      	b.n	8011560 <tcp_receive+0xfd4>
 8011560:	bf00      	nop
 8011562:	3734      	adds	r7, #52	; 0x34
 8011564:	46bd      	mov	sp, r7
 8011566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011568:	20004404 	.word	0x20004404
 801156c:	200043e4 	.word	0x200043e4
 8011570:	2000440e 	.word	0x2000440e
 8011574:	08017f54 	.word	0x08017f54
 8011578:	08018220 	.word	0x08018220
 801157c:	08017f98 	.word	0x08017f98

08011580 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011586:	4b18      	ldr	r3, [pc, #96]	; (80115e8 <tcp_getoptbyte+0x68>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d005      	beq.n	801159a <tcp_getoptbyte+0x1a>
 801158e:	4b17      	ldr	r3, [pc, #92]	; (80115ec <tcp_getoptbyte+0x6c>)
 8011590:	881a      	ldrh	r2, [r3, #0]
 8011592:	4b17      	ldr	r3, [pc, #92]	; (80115f0 <tcp_getoptbyte+0x70>)
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	429a      	cmp	r2, r3
 8011598:	d20e      	bcs.n	80115b8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801159a:	4b16      	ldr	r3, [pc, #88]	; (80115f4 <tcp_getoptbyte+0x74>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	3314      	adds	r3, #20
 80115a0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80115a2:	4b12      	ldr	r3, [pc, #72]	; (80115ec <tcp_getoptbyte+0x6c>)
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	1c5a      	adds	r2, r3, #1
 80115a8:	b291      	uxth	r1, r2
 80115aa:	4a10      	ldr	r2, [pc, #64]	; (80115ec <tcp_getoptbyte+0x6c>)
 80115ac:	8011      	strh	r1, [r2, #0]
 80115ae:	461a      	mov	r2, r3
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	4413      	add	r3, r2
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	e010      	b.n	80115da <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80115b8:	4b0c      	ldr	r3, [pc, #48]	; (80115ec <tcp_getoptbyte+0x6c>)
 80115ba:	881b      	ldrh	r3, [r3, #0]
 80115bc:	1c5a      	adds	r2, r3, #1
 80115be:	b291      	uxth	r1, r2
 80115c0:	4a0a      	ldr	r2, [pc, #40]	; (80115ec <tcp_getoptbyte+0x6c>)
 80115c2:	8011      	strh	r1, [r2, #0]
 80115c4:	b2da      	uxtb	r2, r3
 80115c6:	4b0a      	ldr	r3, [pc, #40]	; (80115f0 <tcp_getoptbyte+0x70>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	b2db      	uxtb	r3, r3
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80115d0:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <tcp_getoptbyte+0x68>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	79fb      	ldrb	r3, [r7, #7]
 80115d6:	4413      	add	r3, r2
 80115d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80115da:	4618      	mov	r0, r3
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	200043fc 	.word	0x200043fc
 80115ec:	20004400 	.word	0x20004400
 80115f0:	200043fa 	.word	0x200043fa
 80115f4:	200043f4 	.word	0x200043f4

080115f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011600:	4b2d      	ldr	r3, [pc, #180]	; (80116b8 <tcp_parseopt+0xc0>)
 8011602:	881b      	ldrh	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d053      	beq.n	80116b0 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011608:	4b2c      	ldr	r3, [pc, #176]	; (80116bc <tcp_parseopt+0xc4>)
 801160a:	2200      	movs	r2, #0
 801160c:	801a      	strh	r2, [r3, #0]
 801160e:	e043      	b.n	8011698 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8011610:	f7ff ffb6 	bl	8011580 <tcp_getoptbyte>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d03c      	beq.n	8011698 <tcp_parseopt+0xa0>
 801161e:	2b02      	cmp	r3, #2
 8011620:	d002      	beq.n	8011628 <tcp_parseopt+0x30>
 8011622:	2b00      	cmp	r3, #0
 8011624:	d03f      	beq.n	80116a6 <tcp_parseopt+0xae>
 8011626:	e026      	b.n	8011676 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011628:	f7ff ffaa 	bl	8011580 <tcp_getoptbyte>
 801162c:	4603      	mov	r3, r0
 801162e:	2b04      	cmp	r3, #4
 8011630:	d13b      	bne.n	80116aa <tcp_parseopt+0xb2>
 8011632:	4b22      	ldr	r3, [pc, #136]	; (80116bc <tcp_parseopt+0xc4>)
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	3302      	adds	r3, #2
 8011638:	4a1f      	ldr	r2, [pc, #124]	; (80116b8 <tcp_parseopt+0xc0>)
 801163a:	8812      	ldrh	r2, [r2, #0]
 801163c:	4293      	cmp	r3, r2
 801163e:	dc34      	bgt.n	80116aa <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8011640:	f7ff ff9e 	bl	8011580 <tcp_getoptbyte>
 8011644:	4603      	mov	r3, r0
 8011646:	b29b      	uxth	r3, r3
 8011648:	021b      	lsls	r3, r3, #8
 801164a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801164c:	f7ff ff98 	bl	8011580 <tcp_getoptbyte>
 8011650:	4603      	mov	r3, r0
 8011652:	b29a      	uxth	r2, r3
 8011654:	89bb      	ldrh	r3, [r7, #12]
 8011656:	4313      	orrs	r3, r2
 8011658:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801165a:	89bb      	ldrh	r3, [r7, #12]
 801165c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011660:	d804      	bhi.n	801166c <tcp_parseopt+0x74>
 8011662:	89bb      	ldrh	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d001      	beq.n	801166c <tcp_parseopt+0x74>
 8011668:	89ba      	ldrh	r2, [r7, #12]
 801166a:	e001      	b.n	8011670 <tcp_parseopt+0x78>
 801166c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8011674:	e010      	b.n	8011698 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8011676:	f7ff ff83 	bl	8011580 <tcp_getoptbyte>
 801167a:	4603      	mov	r3, r0
 801167c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801167e:	7afb      	ldrb	r3, [r7, #11]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d914      	bls.n	80116ae <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8011684:	7afb      	ldrb	r3, [r7, #11]
 8011686:	b29a      	uxth	r2, r3
 8011688:	4b0c      	ldr	r3, [pc, #48]	; (80116bc <tcp_parseopt+0xc4>)
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	4413      	add	r3, r2
 801168e:	b29b      	uxth	r3, r3
 8011690:	3b02      	subs	r3, #2
 8011692:	b29a      	uxth	r2, r3
 8011694:	4b09      	ldr	r3, [pc, #36]	; (80116bc <tcp_parseopt+0xc4>)
 8011696:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011698:	4b08      	ldr	r3, [pc, #32]	; (80116bc <tcp_parseopt+0xc4>)
 801169a:	881a      	ldrh	r2, [r3, #0]
 801169c:	4b06      	ldr	r3, [pc, #24]	; (80116b8 <tcp_parseopt+0xc0>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d3b5      	bcc.n	8011610 <tcp_parseopt+0x18>
 80116a4:	e004      	b.n	80116b0 <tcp_parseopt+0xb8>
        return;
 80116a6:	bf00      	nop
 80116a8:	e002      	b.n	80116b0 <tcp_parseopt+0xb8>
          return;
 80116aa:	bf00      	nop
 80116ac:	e000      	b.n	80116b0 <tcp_parseopt+0xb8>
          return;
 80116ae:	bf00      	nop
      }
    }
  }
}
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	200043f8 	.word	0x200043f8
 80116bc:	20004400 	.word	0x20004400

080116c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80116c0:	b480      	push	{r7}
 80116c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80116c4:	4b05      	ldr	r3, [pc, #20]	; (80116dc <tcp_trigger_input_pcb_close+0x1c>)
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	f043 0310 	orr.w	r3, r3, #16
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	4b03      	ldr	r3, [pc, #12]	; (80116dc <tcp_trigger_input_pcb_close+0x1c>)
 80116d0:	701a      	strb	r2, [r3, #0]
}
 80116d2:	bf00      	nop
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	20004411 	.word	0x20004411

080116e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b086      	sub	sp, #24
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	607b      	str	r3, [r7, #4]
 80116ea:	460b      	mov	r3, r1
 80116ec:	817b      	strh	r3, [r7, #10]
 80116ee:	4613      	mov	r3, r2
 80116f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80116f2:	897a      	ldrh	r2, [r7, #10]
 80116f4:	893b      	ldrh	r3, [r7, #8]
 80116f6:	4413      	add	r3, r2
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	3314      	adds	r3, #20
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	2200      	movs	r2, #0
 8011700:	4619      	mov	r1, r3
 8011702:	2001      	movs	r0, #1
 8011704:	f7fb fa46 	bl	800cb94 <pbuf_alloc>
 8011708:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d057      	beq.n	80117c0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	895b      	ldrh	r3, [r3, #10]
 8011714:	461a      	mov	r2, r3
 8011716:	897b      	ldrh	r3, [r7, #10]
 8011718:	3314      	adds	r3, #20
 801171a:	429a      	cmp	r2, r3
 801171c:	da05      	bge.n	801172a <tcp_output_alloc_header+0x4a>
 801171e:	4b2b      	ldr	r3, [pc, #172]	; (80117cc <tcp_output_alloc_header+0xec>)
 8011720:	2273      	movs	r2, #115	; 0x73
 8011722:	492b      	ldr	r1, [pc, #172]	; (80117d0 <tcp_output_alloc_header+0xf0>)
 8011724:	482b      	ldr	r0, [pc, #172]	; (80117d4 <tcp_output_alloc_header+0xf4>)
 8011726:	f003 fadf 	bl	8014ce8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	8adb      	ldrh	r3, [r3, #22]
 8011734:	4618      	mov	r0, r3
 8011736:	f7f6 f859 	bl	80077ec <lwip_htons>
 801173a:	4603      	mov	r3, r0
 801173c:	461a      	mov	r2, r3
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	8b1b      	ldrh	r3, [r3, #24]
 8011746:	4618      	mov	r0, r3
 8011748:	f7f6 f850 	bl	80077ec <lwip_htons>
 801174c:	4603      	mov	r3, r0
 801174e:	461a      	mov	r2, r3
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801175e:	4618      	mov	r0, r3
 8011760:	f7f6 f852 	bl	8007808 <lwip_htonl>
 8011764:	4602      	mov	r2, r0
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801176a:	897b      	ldrh	r3, [r7, #10]
 801176c:	089b      	lsrs	r3, r3, #2
 801176e:	b29b      	uxth	r3, r3
 8011770:	3305      	adds	r3, #5
 8011772:	b29b      	uxth	r3, r3
 8011774:	031b      	lsls	r3, r3, #12
 8011776:	b29b      	uxth	r3, r3
 8011778:	f043 0310 	orr.w	r3, r3, #16
 801177c:	b29b      	uxth	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f7f6 f834 	bl	80077ec <lwip_htons>
 8011784:	4603      	mov	r3, r0
 8011786:	461a      	mov	r2, r3
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011790:	4618      	mov	r0, r3
 8011792:	f7f6 f82b 	bl	80077ec <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	2200      	movs	r2, #0
 80117a2:	741a      	strb	r2, [r3, #16]
 80117a4:	2200      	movs	r2, #0
 80117a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	2200      	movs	r2, #0
 80117ac:	749a      	strb	r2, [r3, #18]
 80117ae:	2200      	movs	r2, #0
 80117b0:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80117ba:	441a      	add	r2, r3
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80117c0:	697b      	ldr	r3, [r7, #20]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3718      	adds	r7, #24
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	080182dc 	.word	0x080182dc
 80117d0:	08018310 	.word	0x08018310
 80117d4:	08018340 	.word	0x08018340

080117d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80117d8:	b5b0      	push	{r4, r5, r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d02c      	beq.n	8011842 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e002      	b.n	80117f6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1f8      	bne.n	80117f0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	899b      	ldrh	r3, [r3, #12]
 8011804:	b29b      	uxth	r3, r3
 8011806:	4618      	mov	r0, r3
 8011808:	f7f5 fff0 	bl	80077ec <lwip_htons>
 801180c:	4603      	mov	r3, r0
 801180e:	f003 0307 	and.w	r3, r3, #7
 8011812:	2b00      	cmp	r3, #0
 8011814:	d115      	bne.n	8011842 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	68dc      	ldr	r4, [r3, #12]
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	899b      	ldrh	r3, [r3, #12]
 8011820:	b29d      	uxth	r5, r3
 8011822:	2001      	movs	r0, #1
 8011824:	f7f5 ffe2 	bl	80077ec <lwip_htons>
 8011828:	4603      	mov	r3, r0
 801182a:	432b      	orrs	r3, r5
 801182c:	b29b      	uxth	r3, r3
 801182e:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	7e9b      	ldrb	r3, [r3, #26]
 8011834:	f043 0320 	orr.w	r3, r3, #32
 8011838:	b2da      	uxtb	r2, r3
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801183e:	2300      	movs	r3, #0
 8011840:	e004      	b.n	801184c <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011842:	2101      	movs	r1, #1
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 fcc3 	bl	80121d0 <tcp_enqueue_flags>
 801184a:	4603      	mov	r3, r0
}
 801184c:	4618      	mov	r0, r3
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bdb0      	pop	{r4, r5, r7, pc}

08011854 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	603b      	str	r3, [r7, #0]
 8011860:	4613      	mov	r3, r2
 8011862:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011868:	f003 0301 	and.w	r3, r3, #1
 801186c:	2b00      	cmp	r3, #0
 801186e:	d001      	beq.n	8011874 <tcp_create_segment+0x20>
 8011870:	2304      	movs	r3, #4
 8011872:	e000      	b.n	8011876 <tcp_create_segment+0x22>
 8011874:	2300      	movs	r3, #0
 8011876:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011878:	2003      	movs	r0, #3
 801187a:	f7fa ff49 	bl	800c710 <memp_malloc>
 801187e:	6138      	str	r0, [r7, #16]
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d104      	bne.n	8011890 <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011886:	68b8      	ldr	r0, [r7, #8]
 8011888:	f7fb fcf6 	bl	800d278 <pbuf_free>
    return NULL;
 801188c:	2300      	movs	r3, #0
 801188e:	e061      	b.n	8011954 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011896:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	68ba      	ldr	r2, [r7, #8]
 80118a2:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	891a      	ldrh	r2, [r3, #8]
 80118a8:	7dfb      	ldrb	r3, [r7, #23]
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d205      	bcs.n	80118bc <tcp_create_segment+0x68>
 80118b0:	4b2a      	ldr	r3, [pc, #168]	; (801195c <tcp_create_segment+0x108>)
 80118b2:	22ba      	movs	r2, #186	; 0xba
 80118b4:	492a      	ldr	r1, [pc, #168]	; (8011960 <tcp_create_segment+0x10c>)
 80118b6:	482b      	ldr	r0, [pc, #172]	; (8011964 <tcp_create_segment+0x110>)
 80118b8:	f003 fa16 	bl	8014ce8 <iprintf>
  seg->len = p->tot_len - optlen;
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	891a      	ldrh	r2, [r3, #8]
 80118c0:	7dfb      	ldrb	r3, [r7, #23]
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80118cc:	2114      	movs	r1, #20
 80118ce:	68b8      	ldr	r0, [r7, #8]
 80118d0:	f7fb fcae 	bl	800d230 <pbuf_header>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d004      	beq.n	80118e4 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80118da:	6938      	ldr	r0, [r7, #16]
 80118dc:	f7fd f939 	bl	800eb52 <tcp_seg_free>
    return NULL;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e037      	b.n	8011954 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	685a      	ldr	r2, [r3, #4]
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	68dc      	ldr	r4, [r3, #12]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	8adb      	ldrh	r3, [r3, #22]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7f5 ff78 	bl	80077ec <lwip_htons>
 80118fc:	4603      	mov	r3, r0
 80118fe:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	68dc      	ldr	r4, [r3, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	8b1b      	ldrh	r3, [r3, #24]
 8011908:	4618      	mov	r0, r3
 801190a:	f7f5 ff6f 	bl	80077ec <lwip_htons>
 801190e:	4603      	mov	r3, r0
 8011910:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	68dc      	ldr	r4, [r3, #12]
 8011916:	6838      	ldr	r0, [r7, #0]
 8011918:	f7f5 ff76 	bl	8007808 <lwip_htonl>
 801191c:	4603      	mov	r3, r0
 801191e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	68dc      	ldr	r4, [r3, #12]
 8011924:	7dfb      	ldrb	r3, [r7, #23]
 8011926:	089b      	lsrs	r3, r3, #2
 8011928:	b2db      	uxtb	r3, r3
 801192a:	b29b      	uxth	r3, r3
 801192c:	3305      	adds	r3, #5
 801192e:	b29b      	uxth	r3, r3
 8011930:	031b      	lsls	r3, r3, #12
 8011932:	b29a      	uxth	r2, r3
 8011934:	79fb      	ldrb	r3, [r7, #7]
 8011936:	b29b      	uxth	r3, r3
 8011938:	4313      	orrs	r3, r2
 801193a:	b29b      	uxth	r3, r3
 801193c:	4618      	mov	r0, r3
 801193e:	f7f5 ff55 	bl	80077ec <lwip_htons>
 8011942:	4603      	mov	r3, r0
 8011944:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	2200      	movs	r2, #0
 801194c:	749a      	strb	r2, [r3, #18]
 801194e:	2200      	movs	r2, #0
 8011950:	74da      	strb	r2, [r3, #19]
  return seg;
 8011952:	693b      	ldr	r3, [r7, #16]
}
 8011954:	4618      	mov	r0, r3
 8011956:	371c      	adds	r7, #28
 8011958:	46bd      	mov	sp, r7
 801195a:	bd90      	pop	{r4, r7, pc}
 801195c:	080182dc 	.word	0x080182dc
 8011960:	08018368 	.word	0x08018368
 8011964:	08018340 	.word	0x08018340

08011968 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b086      	sub	sp, #24
 801196c:	af00      	add	r7, sp, #0
 801196e:	607b      	str	r3, [r7, #4]
 8011970:	4603      	mov	r3, r0
 8011972:	73fb      	strb	r3, [r7, #15]
 8011974:	460b      	mov	r3, r1
 8011976:	81bb      	strh	r3, [r7, #12]
 8011978:	4613      	mov	r3, r2
 801197a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801197c:	89bb      	ldrh	r3, [r7, #12]
 801197e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011980:	89ba      	ldrh	r2, [r7, #12]
 8011982:	897b      	ldrh	r3, [r7, #10]
 8011984:	429a      	cmp	r2, r3
 8011986:	d221      	bcs.n	80119cc <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011988:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801198c:	f003 0302 	and.w	r3, r3, #2
 8011990:	2b00      	cmp	r3, #0
 8011992:	d111      	bne.n	80119b8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8011994:	6a3b      	ldr	r3, [r7, #32]
 8011996:	7e9b      	ldrb	r3, [r3, #26]
 8011998:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801199c:	2b00      	cmp	r3, #0
 801199e:	d115      	bne.n	80119cc <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80119a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d007      	beq.n	80119b8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80119a8:	6a3b      	ldr	r3, [r7, #32]
 80119aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d103      	bne.n	80119b8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80119b0:	6a3b      	ldr	r3, [r7, #32]
 80119b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d009      	beq.n	80119cc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80119b8:	89bb      	ldrh	r3, [r7, #12]
 80119ba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80119be:	f023 0203 	bic.w	r2, r3, #3
 80119c2:	897b      	ldrh	r3, [r7, #10]
 80119c4:	4293      	cmp	r3, r2
 80119c6:	bf28      	it	cs
 80119c8:	4613      	movcs	r3, r2
 80119ca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80119cc:	8af9      	ldrh	r1, [r7, #22]
 80119ce:	7bfb      	ldrb	r3, [r7, #15]
 80119d0:	2200      	movs	r2, #0
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fb f8de 	bl	800cb94 <pbuf_alloc>
 80119d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d101      	bne.n	80119e4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80119e0:	2300      	movs	r3, #0
 80119e2:	e019      	b.n	8011a18 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d006      	beq.n	80119fa <tcp_pbuf_prealloc+0x92>
 80119ec:	4b0c      	ldr	r3, [pc, #48]	; (8011a20 <tcp_pbuf_prealloc+0xb8>)
 80119ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 80119f2:	490c      	ldr	r1, [pc, #48]	; (8011a24 <tcp_pbuf_prealloc+0xbc>)
 80119f4:	480c      	ldr	r0, [pc, #48]	; (8011a28 <tcp_pbuf_prealloc+0xc0>)
 80119f6:	f003 f977 	bl	8014ce8 <iprintf>
  *oversize = p->len - length;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	895a      	ldrh	r2, [r3, #10]
 80119fe:	89bb      	ldrh	r3, [r7, #12]
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	89ba      	ldrh	r2, [r7, #12]
 8011a0c:	811a      	strh	r2, [r3, #8]
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	891a      	ldrh	r2, [r3, #8]
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	815a      	strh	r2, [r3, #10]
  return p;
 8011a16:	693b      	ldr	r3, [r7, #16]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	080182dc 	.word	0x080182dc
 8011a24:	08018380 	.word	0x08018380
 8011a28:	08018340 	.word	0x08018340

08011a2c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	460b      	mov	r3, r1
 8011a36:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7d1b      	ldrb	r3, [r3, #20]
 8011a3c:	2b04      	cmp	r3, #4
 8011a3e:	d00e      	beq.n	8011a5e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011a44:	2b07      	cmp	r3, #7
 8011a46:	d00a      	beq.n	8011a5e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	d006      	beq.n	8011a5e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011a54:	2b03      	cmp	r3, #3
 8011a56:	d002      	beq.n	8011a5e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011a58:	f06f 030a 	mvn.w	r3, #10
 8011a5c:	e04f      	b.n	8011afe <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8011a5e:	887b      	ldrh	r3, [r7, #2]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d101      	bne.n	8011a68 <tcp_write_checks+0x3c>
    return ERR_OK;
 8011a64:	2300      	movs	r3, #0
 8011a66:	e04a      	b.n	8011afe <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a6e:	887a      	ldrh	r2, [r7, #2]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d909      	bls.n	8011a88 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	7e9b      	ldrb	r3, [r3, #26]
 8011a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011a7c:	b2da      	uxtb	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a86:	e03a      	b.n	8011afe <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a8e:	2b08      	cmp	r3, #8
 8011a90:	d806      	bhi.n	8011aa0 <tcp_write_checks+0x74>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a98:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d909      	bls.n	8011ab4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	7e9b      	ldrb	r3, [r3, #26]
 8011aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011aa8:	b2da      	uxtb	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ab2:	e024      	b.n	8011afe <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00f      	beq.n	8011ade <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d11a      	bne.n	8011afc <tcp_write_checks+0xd0>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d116      	bne.n	8011afc <tcp_write_checks+0xd0>
 8011ace:	4b0e      	ldr	r3, [pc, #56]	; (8011b08 <tcp_write_checks+0xdc>)
 8011ad0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011ad4:	490d      	ldr	r1, [pc, #52]	; (8011b0c <tcp_write_checks+0xe0>)
 8011ad6:	480e      	ldr	r0, [pc, #56]	; (8011b10 <tcp_write_checks+0xe4>)
 8011ad8:	f003 f906 	bl	8014ce8 <iprintf>
 8011adc:	e00e      	b.n	8011afc <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d103      	bne.n	8011aee <tcp_write_checks+0xc2>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d006      	beq.n	8011afc <tcp_write_checks+0xd0>
 8011aee:	4b06      	ldr	r3, [pc, #24]	; (8011b08 <tcp_write_checks+0xdc>)
 8011af0:	f240 1259 	movw	r2, #345	; 0x159
 8011af4:	4907      	ldr	r1, [pc, #28]	; (8011b14 <tcp_write_checks+0xe8>)
 8011af6:	4806      	ldr	r0, [pc, #24]	; (8011b10 <tcp_write_checks+0xe4>)
 8011af8:	f003 f8f6 	bl	8014ce8 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	080182dc 	.word	0x080182dc
 8011b0c:	08018394 	.word	0x08018394
 8011b10:	08018340 	.word	0x08018340
 8011b14:	080183d0 	.word	0x080183d0

08011b18 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011b18:	b5b0      	push	{r4, r5, r7, lr}
 8011b1a:	b09a      	sub	sp, #104	; 0x68
 8011b1c:	af04      	add	r7, sp, #16
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	4611      	mov	r1, r2
 8011b24:	461a      	mov	r2, r3
 8011b26:	460b      	mov	r3, r1
 8011b28:	80fb      	strh	r3, [r7, #6]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011b32:	2300      	movs	r3, #0
 8011b34:	653b      	str	r3, [r7, #80]	; 0x50
 8011b36:	2300      	movs	r3, #0
 8011b38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b3e:	2300      	movs	r3, #0
 8011b40:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011b42:	2300      	movs	r3, #0
 8011b44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b66:	085b      	lsrs	r3, r3, #1
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b6e:	4293      	cmp	r3, r2
 8011b70:	bf28      	it	cs
 8011b72:	4613      	movcs	r3, r2
 8011b74:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <tcp_write+0x6a>
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b80:	e000      	b.n	8011b84 <tcp_write+0x6c>
 8011b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b84:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d109      	bne.n	8011ba0 <tcp_write+0x88>
 8011b8c:	4b94      	ldr	r3, [pc, #592]	; (8011de0 <tcp_write+0x2c8>)
 8011b8e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8011b92:	4994      	ldr	r1, [pc, #592]	; (8011de4 <tcp_write+0x2cc>)
 8011b94:	4894      	ldr	r0, [pc, #592]	; (8011de8 <tcp_write+0x2d0>)
 8011b96:	f003 f8a7 	bl	8014ce8 <iprintf>
 8011b9a:	f06f 030f 	mvn.w	r3, #15
 8011b9e:	e30d      	b.n	80121bc <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011ba0:	88fb      	ldrh	r3, [r7, #6]
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7ff ff41 	bl	8011a2c <tcp_write_checks>
 8011baa:	4603      	mov	r3, r0
 8011bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011bb0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d002      	beq.n	8011bbe <tcp_write+0xa6>
    return err;
 8011bb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011bbc:	e2fe      	b.n	80121bc <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bc4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 80f8 	beq.w	8011dc2 <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8011bd8:	e002      	b.n	8011be0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8011bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1f8      	bne.n	8011bda <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8011be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bea:	7a9b      	ldrb	r3, [r3, #10]
 8011bec:	f003 0301 	and.w	r3, r3, #1
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d001      	beq.n	8011bf8 <tcp_write+0xe0>
 8011bf4:	2304      	movs	r3, #4
 8011bf6:	e000      	b.n	8011bfa <tcp_write+0xe2>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011bfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c00:	891b      	ldrh	r3, [r3, #8]
 8011c02:	4619      	mov	r1, r3
 8011c04:	8c3b      	ldrh	r3, [r7, #32]
 8011c06:	440b      	add	r3, r1
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	da06      	bge.n	8011c1a <tcp_write+0x102>
 8011c0c:	4b74      	ldr	r3, [pc, #464]	; (8011de0 <tcp_write+0x2c8>)
 8011c0e:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011c12:	4976      	ldr	r1, [pc, #472]	; (8011dec <tcp_write+0x2d4>)
 8011c14:	4874      	ldr	r0, [pc, #464]	; (8011de8 <tcp_write+0x2d0>)
 8011c16:	f003 f867 	bl	8014ce8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c1c:	891a      	ldrh	r2, [r3, #8]
 8011c1e:	8c3b      	ldrh	r3, [r7, #32]
 8011c20:	4413      	add	r3, r2
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011c30:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011c32:	8a7b      	ldrh	r3, [r7, #18]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d027      	beq.n	8011c88 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011c38:	8a7b      	ldrh	r3, [r7, #18]
 8011c3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d206      	bcs.n	8011c4e <tcp_write+0x136>
 8011c40:	4b67      	ldr	r3, [pc, #412]	; (8011de0 <tcp_write+0x2c8>)
 8011c42:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011c46:	496a      	ldr	r1, [pc, #424]	; (8011df0 <tcp_write+0x2d8>)
 8011c48:	4867      	ldr	r0, [pc, #412]	; (8011de8 <tcp_write+0x2d0>)
 8011c4a:	f003 f84d 	bl	8014ce8 <iprintf>
      seg = last_unsent;
 8011c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c50:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011c52:	8a7b      	ldrh	r3, [r7, #18]
 8011c54:	88fa      	ldrh	r2, [r7, #6]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d901      	bls.n	8011c5e <tcp_write+0x146>
 8011c5a:	8a7b      	ldrh	r3, [r7, #18]
 8011c5c:	e000      	b.n	8011c60 <tcp_write+0x148>
 8011c5e:	88fb      	ldrh	r3, [r7, #6]
 8011c60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c62:	4293      	cmp	r3, r2
 8011c64:	bfa8      	it	ge
 8011c66:	4613      	movge	r3, r2
 8011c68:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011c6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c70:	4413      	add	r3, r2
 8011c72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011c76:	8a7a      	ldrh	r2, [r7, #18]
 8011c78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011c80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011c82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d00b      	beq.n	8011ca6 <tcp_write+0x18e>
 8011c8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c92:	88fb      	ldrh	r3, [r7, #6]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d006      	beq.n	8011ca6 <tcp_write+0x18e>
 8011c98:	4b51      	ldr	r3, [pc, #324]	; (8011de0 <tcp_write+0x2c8>)
 8011c9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011c9e:	4955      	ldr	r1, [pc, #340]	; (8011df4 <tcp_write+0x2dc>)
 8011ca0:	4851      	ldr	r0, [pc, #324]	; (8011de8 <tcp_write+0x2d0>)
 8011ca2:	f003 f821 	bl	8014ce8 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011ca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011caa:	88fb      	ldrh	r3, [r7, #6]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	f080 8169 	bcs.w	8011f84 <tcp_write+0x46c>
 8011cb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f000 8165 	beq.w	8011f84 <tcp_write+0x46c>
 8011cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cbc:	891b      	ldrh	r3, [r3, #8]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f000 8160 	beq.w	8011f84 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011cc4:	88fa      	ldrh	r2, [r7, #6]
 8011cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cca:	1ad2      	subs	r2, r2, r3
 8011ccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	bfa8      	it	ge
 8011cd2:	4613      	movge	r3, r2
 8011cd4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cd8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011cda:	797b      	ldrb	r3, [r7, #5]
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d027      	beq.n	8011d34 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011ce4:	f107 0012 	add.w	r0, r7, #18
 8011ce8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011cea:	8bf9      	ldrh	r1, [r7, #30]
 8011cec:	2301      	movs	r3, #1
 8011cee:	9302      	str	r3, [sp, #8]
 8011cf0:	797b      	ldrb	r3, [r7, #5]
 8011cf2:	9301      	str	r3, [sp, #4]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2004      	movs	r0, #4
 8011cfc:	f7ff fe34 	bl	8011968 <tcp_pbuf_prealloc>
 8011d00:	6578      	str	r0, [r7, #84]	; 0x54
 8011d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f000 8227 	beq.w	8012158 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d0c:	6858      	ldr	r0, [r3, #4]
 8011d0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	4413      	add	r3, r2
 8011d16:	8bfa      	ldrh	r2, [r7, #30]
 8011d18:	4619      	mov	r1, r3
 8011d1a:	f002 ffd2 	bl	8014cc2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011d1e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011d20:	f7fb fb44 	bl	800d3ac <pbuf_clen>
 8011d24:	4603      	mov	r3, r0
 8011d26:	461a      	mov	r2, r3
 8011d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d2c:	4413      	add	r3, r2
 8011d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011d32:	e03f      	b.n	8011db4 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	637b      	str	r3, [r7, #52]	; 0x34
 8011d3a:	e002      	b.n	8011d42 <tcp_write+0x22a>
 8011d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	637b      	str	r3, [r7, #52]	; 0x34
 8011d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d1f8      	bne.n	8011d3c <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d4c:	7b1b      	ldrb	r3, [r3, #12]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d115      	bne.n	8011d7e <tcp_write+0x266>
 8011d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d58:	8952      	ldrh	r2, [r2, #10]
 8011d5a:	441a      	add	r2, r3
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d10d      	bne.n	8011d7e <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011d62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d006      	beq.n	8011d78 <tcp_write+0x260>
 8011d6a:	4b1d      	ldr	r3, [pc, #116]	; (8011de0 <tcp_write+0x2c8>)
 8011d6c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011d70:	4921      	ldr	r1, [pc, #132]	; (8011df8 <tcp_write+0x2e0>)
 8011d72:	481d      	ldr	r0, [pc, #116]	; (8011de8 <tcp_write+0x2d0>)
 8011d74:	f002 ffb8 	bl	8014ce8 <iprintf>
          extendlen = seglen;
 8011d78:	8bfb      	ldrh	r3, [r7, #30]
 8011d7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011d7c:	e01a      	b.n	8011db4 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011d7e:	8bfb      	ldrh	r3, [r7, #30]
 8011d80:	2201      	movs	r2, #1
 8011d82:	4619      	mov	r1, r3
 8011d84:	2004      	movs	r0, #4
 8011d86:	f7fa ff05 	bl	800cb94 <pbuf_alloc>
 8011d8a:	6578      	str	r0, [r7, #84]	; 0x54
 8011d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 81e4 	beq.w	801215c <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011d94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d98:	68ba      	ldr	r2, [r7, #8]
 8011d9a:	441a      	add	r2, r3
 8011d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d9e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011da0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011da2:	f7fb fb03 	bl	800d3ac <pbuf_clen>
 8011da6:	4603      	mov	r3, r0
 8011da8:	461a      	mov	r2, r3
 8011daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dae:	4413      	add	r3, r2
 8011db0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011db4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011db8:	8bfb      	ldrh	r3, [r7, #30]
 8011dba:	4413      	add	r3, r2
 8011dbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011dc0:	e0e0      	b.n	8011f84 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f000 80db 	beq.w	8011f84 <tcp_write+0x46c>
 8011dce:	4b04      	ldr	r3, [pc, #16]	; (8011de0 <tcp_write+0x2c8>)
 8011dd0:	f240 2225 	movw	r2, #549	; 0x225
 8011dd4:	4909      	ldr	r1, [pc, #36]	; (8011dfc <tcp_write+0x2e4>)
 8011dd6:	4804      	ldr	r0, [pc, #16]	; (8011de8 <tcp_write+0x2d0>)
 8011dd8:	f002 ff86 	bl	8014ce8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011ddc:	e0d2      	b.n	8011f84 <tcp_write+0x46c>
 8011dde:	bf00      	nop
 8011de0:	080182dc 	.word	0x080182dc
 8011de4:	08018404 	.word	0x08018404
 8011de8:	08018340 	.word	0x08018340
 8011dec:	08018438 	.word	0x08018438
 8011df0:	08018450 	.word	0x08018450
 8011df4:	08018470 	.word	0x08018470
 8011df8:	08018490 	.word	0x08018490
 8011dfc:	080184bc 	.word	0x080184bc
    struct pbuf *p;
    u16_t left = len - pos;
 8011e00:	88fa      	ldrh	r2, [r7, #6]
 8011e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e06:	1ad3      	subs	r3, r2, r3
 8011e08:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011e16:	8b7a      	ldrh	r2, [r7, #26]
 8011e18:	8bbb      	ldrh	r3, [r7, #28]
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	bf28      	it	cs
 8011e1e:	4613      	movcs	r3, r2
 8011e20:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011e22:	797b      	ldrb	r3, [r7, #5]
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d036      	beq.n	8011e9a <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	8b3b      	ldrh	r3, [r7, #24]
 8011e34:	4413      	add	r3, r2
 8011e36:	b299      	uxth	r1, r3
 8011e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	bf0c      	ite	eq
 8011e3e:	2301      	moveq	r3, #1
 8011e40:	2300      	movne	r3, #0
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	f107 0012 	add.w	r0, r7, #18
 8011e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e4a:	9302      	str	r3, [sp, #8]
 8011e4c:	797b      	ldrb	r3, [r7, #5]
 8011e4e:	9301      	str	r3, [sp, #4]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	4603      	mov	r3, r0
 8011e56:	2000      	movs	r0, #0
 8011e58:	f7ff fd86 	bl	8011968 <tcp_pbuf_prealloc>
 8011e5c:	6338      	str	r0, [r7, #48]	; 0x30
 8011e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f000 817d 	beq.w	8012160 <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	895b      	ldrh	r3, [r3, #10]
 8011e6a:	8b3a      	ldrh	r2, [r7, #24]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d906      	bls.n	8011e7e <tcp_write+0x366>
 8011e70:	4b8f      	ldr	r3, [pc, #572]	; (80120b0 <tcp_write+0x598>)
 8011e72:	f240 2241 	movw	r2, #577	; 0x241
 8011e76:	498f      	ldr	r1, [pc, #572]	; (80120b4 <tcp_write+0x59c>)
 8011e78:	488f      	ldr	r0, [pc, #572]	; (80120b8 <tcp_write+0x5a0>)
 8011e7a:	f002 ff35 	bl	8014ce8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	685a      	ldr	r2, [r3, #4]
 8011e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e86:	18d0      	adds	r0, r2, r3
 8011e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	4413      	add	r3, r2
 8011e90:	8b3a      	ldrh	r2, [r7, #24]
 8011e92:	4619      	mov	r1, r3
 8011e94:	f002 ff15 	bl	8014cc2 <memcpy>
 8011e98:	e02e      	b.n	8011ef8 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011e9a:	8a7b      	ldrh	r3, [r7, #18]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d006      	beq.n	8011eae <tcp_write+0x396>
 8011ea0:	4b83      	ldr	r3, [pc, #524]	; (80120b0 <tcp_write+0x598>)
 8011ea2:	f240 224b 	movw	r2, #587	; 0x24b
 8011ea6:	4985      	ldr	r1, [pc, #532]	; (80120bc <tcp_write+0x5a4>)
 8011ea8:	4883      	ldr	r0, [pc, #524]	; (80120b8 <tcp_write+0x5a0>)
 8011eaa:	f002 ff1d 	bl	8014ce8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011eae:	8b3b      	ldrh	r3, [r7, #24]
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f7fa fe6d 	bl	800cb94 <pbuf_alloc>
 8011eba:	6178      	str	r0, [r7, #20]
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f000 8150 	beq.w	8012164 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	441a      	add	r2, r3
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	4619      	mov	r1, r3
 8011eda:	2000      	movs	r0, #0
 8011edc:	f7fa fe5a 	bl	800cb94 <pbuf_alloc>
 8011ee0:	6338      	str	r0, [r7, #48]	; 0x30
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d103      	bne.n	8011ef0 <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011ee8:	6978      	ldr	r0, [r7, #20]
 8011eea:	f7fb f9c5 	bl	800d278 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011eee:	e13c      	b.n	801216a <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011ef0:	6979      	ldr	r1, [r7, #20]
 8011ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ef4:	f7fb fa9a 	bl	800d42c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011efa:	f7fb fa57 	bl	800d3ac <pbuf_clen>
 8011efe:	4603      	mov	r3, r0
 8011f00:	461a      	mov	r2, r3
 8011f02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f06:	4413      	add	r3, r2
 8011f08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011f0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f10:	2b09      	cmp	r3, #9
 8011f12:	d805      	bhi.n	8011f20 <tcp_write+0x408>
 8011f14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f18:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	d903      	bls.n	8011f28 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f22:	f7fb f9a9 	bl	800d278 <pbuf_free>
      goto memerr;
 8011f26:	e120      	b.n	801216a <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f30:	441a      	add	r2, r3
 8011f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	4613      	mov	r3, r2
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f7ff fc88 	bl	8011854 <tcp_create_segment>
 8011f44:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 810d 	beq.w	8012168 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d102      	bne.n	8011f5a <tcp_write+0x442>
      queue = seg;
 8011f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f56:	647b      	str	r3, [r7, #68]	; 0x44
 8011f58:	e00c      	b.n	8011f74 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d106      	bne.n	8011f6e <tcp_write+0x456>
 8011f60:	4b53      	ldr	r3, [pc, #332]	; (80120b0 <tcp_write+0x598>)
 8011f62:	f240 2285 	movw	r2, #645	; 0x285
 8011f66:	4956      	ldr	r1, [pc, #344]	; (80120c0 <tcp_write+0x5a8>)
 8011f68:	4853      	ldr	r0, [pc, #332]	; (80120b8 <tcp_write+0x5a0>)
 8011f6a:	f002 febd 	bl	8014ce8 <iprintf>
      prev_seg->next = seg;
 8011f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f72:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f76:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011f78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f7c:	8b3b      	ldrh	r3, [r7, #24]
 8011f7e:	4413      	add	r3, r2
 8011f80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011f84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011f88:	88fb      	ldrh	r3, [r7, #6]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	f4ff af38 	bcc.w	8011e00 <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011f90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d02c      	beq.n	8011ff0 <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f9c:	e01e      	b.n	8011fdc <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 8011f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa0:	891a      	ldrh	r2, [r3, #8]
 8011fa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fa4:	4413      	add	r3, r2
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d110      	bne.n	8011fd6 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fba:	8952      	ldrh	r2, [r2, #10]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011fc0:	68b9      	ldr	r1, [r7, #8]
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f002 fe7d 	bl	8014cc2 <memcpy>
        p->len += oversize_used;
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	895a      	ldrh	r2, [r3, #10]
 8011fcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fce:	4413      	add	r3, r2
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1dd      	bne.n	8011f9e <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 8011fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fe4:	891a      	ldrh	r2, [r3, #8]
 8011fe6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011fe8:	4413      	add	r3, r2
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fee:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011ff0:	8a7a      	ldrh	r2, [r7, #18]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d018      	beq.n	8012030 <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012000:	2b00      	cmp	r3, #0
 8012002:	d106      	bne.n	8012012 <tcp_write+0x4fa>
 8012004:	4b2a      	ldr	r3, [pc, #168]	; (80120b0 <tcp_write+0x598>)
 8012006:	f240 22bb 	movw	r2, #699	; 0x2bb
 801200a:	492e      	ldr	r1, [pc, #184]	; (80120c4 <tcp_write+0x5ac>)
 801200c:	482a      	ldr	r0, [pc, #168]	; (80120b8 <tcp_write+0x5a0>)
 801200e:	f002 fe6b 	bl	8014ce8 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012014:	685b      	ldr	r3, [r3, #4]
 8012016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012018:	4618      	mov	r0, r3
 801201a:	f7fb fa07 	bl	800d42c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801201e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012020:	891a      	ldrh	r2, [r3, #8]
 8012022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012024:	891b      	ldrh	r3, [r3, #8]
 8012026:	4413      	add	r3, r2
 8012028:	b29a      	uxth	r2, r3
 801202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801202c:	811a      	strh	r2, [r3, #8]
 801202e:	e037      	b.n	80120a0 <tcp_write+0x588>
  } else if (extendlen > 0) {
 8012030:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012032:	2b00      	cmp	r3, #0
 8012034:	d034      	beq.n	80120a0 <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012038:	2b00      	cmp	r3, #0
 801203a:	d003      	beq.n	8012044 <tcp_write+0x52c>
 801203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d106      	bne.n	8012052 <tcp_write+0x53a>
 8012044:	4b1a      	ldr	r3, [pc, #104]	; (80120b0 <tcp_write+0x598>)
 8012046:	f240 22c1 	movw	r2, #705	; 0x2c1
 801204a:	491f      	ldr	r1, [pc, #124]	; (80120c8 <tcp_write+0x5b0>)
 801204c:	481a      	ldr	r0, [pc, #104]	; (80120b8 <tcp_write+0x5a0>)
 801204e:	f002 fe4b 	bl	8014ce8 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	62bb      	str	r3, [r7, #40]	; 0x28
 8012058:	e009      	b.n	801206e <tcp_write+0x556>
      p->tot_len += extendlen;
 801205a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801205c:	891a      	ldrh	r2, [r3, #8]
 801205e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012060:	4413      	add	r3, r2
 8012062:	b29a      	uxth	r2, r3
 8012064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012066:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	62bb      	str	r3, [r7, #40]	; 0x28
 801206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1f1      	bne.n	801205a <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 8012076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012078:	891a      	ldrh	r2, [r3, #8]
 801207a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801207c:	4413      	add	r3, r2
 801207e:	b29a      	uxth	r2, r3
 8012080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012082:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	895a      	ldrh	r2, [r3, #10]
 8012088:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801208a:	4413      	add	r3, r2
 801208c:	b29a      	uxth	r2, r3
 801208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012090:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012094:	891a      	ldrh	r2, [r3, #8]
 8012096:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012098:	4413      	add	r3, r2
 801209a:	b29a      	uxth	r2, r3
 801209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801209e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80120a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d112      	bne.n	80120cc <tcp_write+0x5b4>
    pcb->unsent = queue;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120aa:	669a      	str	r2, [r3, #104]	; 0x68
 80120ac:	e011      	b.n	80120d2 <tcp_write+0x5ba>
 80120ae:	bf00      	nop
 80120b0:	080182dc 	.word	0x080182dc
 80120b4:	080184ec 	.word	0x080184ec
 80120b8:	08018340 	.word	0x08018340
 80120bc:	0801852c 	.word	0x0801852c
 80120c0:	0801853c 	.word	0x0801853c
 80120c4:	08018550 	.word	0x08018550
 80120c8:	08018588 	.word	0x08018588
  } else {
    last_unsent->next = queue;
 80120cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120d6:	88fb      	ldrh	r3, [r7, #6]
 80120d8:	441a      	add	r2, r3
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120e4:	88fb      	ldrh	r3, [r7, #6]
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80120f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00e      	beq.n	8012122 <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012108:	2b00      	cmp	r3, #0
 801210a:	d10a      	bne.n	8012122 <tcp_write+0x60a>
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012110:	2b00      	cmp	r3, #0
 8012112:	d106      	bne.n	8012122 <tcp_write+0x60a>
 8012114:	4b2b      	ldr	r3, [pc, #172]	; (80121c4 <tcp_write+0x6ac>)
 8012116:	f240 22ed 	movw	r2, #749	; 0x2ed
 801211a:	492b      	ldr	r1, [pc, #172]	; (80121c8 <tcp_write+0x6b0>)
 801211c:	482b      	ldr	r0, [pc, #172]	; (80121cc <tcp_write+0x6b4>)
 801211e:	f002 fde3 	bl	8014ce8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8012122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012124:	2b00      	cmp	r3, #0
 8012126:	d015      	beq.n	8012154 <tcp_write+0x63c>
 8012128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d011      	beq.n	8012154 <tcp_write+0x63c>
 8012130:	797b      	ldrb	r3, [r7, #5]
 8012132:	f003 0302 	and.w	r3, r3, #2
 8012136:	2b00      	cmp	r3, #0
 8012138:	d10c      	bne.n	8012154 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801213a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801213c:	68dc      	ldr	r4, [r3, #12]
 801213e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012140:	68db      	ldr	r3, [r3, #12]
 8012142:	899b      	ldrh	r3, [r3, #12]
 8012144:	b29d      	uxth	r5, r3
 8012146:	2008      	movs	r0, #8
 8012148:	f7f5 fb50 	bl	80077ec <lwip_htons>
 801214c:	4603      	mov	r3, r0
 801214e:	432b      	orrs	r3, r5
 8012150:	b29b      	uxth	r3, r3
 8012152:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	e031      	b.n	80121bc <tcp_write+0x6a4>
          goto memerr;
 8012158:	bf00      	nop
 801215a:	e006      	b.n	801216a <tcp_write+0x652>
            goto memerr;
 801215c:	bf00      	nop
 801215e:	e004      	b.n	801216a <tcp_write+0x652>
        goto memerr;
 8012160:	bf00      	nop
 8012162:	e002      	b.n	801216a <tcp_write+0x652>
        goto memerr;
 8012164:	bf00      	nop
 8012166:	e000      	b.n	801216a <tcp_write+0x652>
      goto memerr;
 8012168:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	7e9b      	ldrb	r3, [r3, #26]
 801216e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012172:	b2da      	uxtb	r2, r3
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801217a:	2b00      	cmp	r3, #0
 801217c:	d002      	beq.n	8012184 <tcp_write+0x66c>
    pbuf_free(concat_p);
 801217e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012180:	f7fb f87a 	bl	800d278 <pbuf_free>
  }
  if (queue != NULL) {
 8012184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012186:	2b00      	cmp	r3, #0
 8012188:	d002      	beq.n	8012190 <tcp_write+0x678>
    tcp_segs_free(queue);
 801218a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801218c:	f7fc fccd 	bl	800eb2a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00e      	beq.n	80121b8 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10a      	bne.n	80121b8 <tcp_write+0x6a0>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d106      	bne.n	80121b8 <tcp_write+0x6a0>
 80121aa:	4b06      	ldr	r3, [pc, #24]	; (80121c4 <tcp_write+0x6ac>)
 80121ac:	f240 3202 	movw	r2, #770	; 0x302
 80121b0:	4905      	ldr	r1, [pc, #20]	; (80121c8 <tcp_write+0x6b0>)
 80121b2:	4806      	ldr	r0, [pc, #24]	; (80121cc <tcp_write+0x6b4>)
 80121b4:	f002 fd98 	bl	8014ce8 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80121b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3758      	adds	r7, #88	; 0x58
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bdb0      	pop	{r4, r5, r7, pc}
 80121c4:	080182dc 	.word	0x080182dc
 80121c8:	080185c0 	.word	0x080185c0
 80121cc:	08018340 	.word	0x08018340

080121d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b08a      	sub	sp, #40	; 0x28
 80121d4:	af02      	add	r7, sp, #8
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	460b      	mov	r3, r1
 80121da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80121dc:	2300      	movs	r3, #0
 80121de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80121e0:	2300      	movs	r3, #0
 80121e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	f003 0303 	and.w	r3, r3, #3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <tcp_enqueue_flags+0x2c>
 80121ee:	4b70      	ldr	r3, [pc, #448]	; (80123b0 <tcp_enqueue_flags+0x1e0>)
 80121f0:	f240 321b 	movw	r2, #795	; 0x31b
 80121f4:	496f      	ldr	r1, [pc, #444]	; (80123b4 <tcp_enqueue_flags+0x1e4>)
 80121f6:	4870      	ldr	r0, [pc, #448]	; (80123b8 <tcp_enqueue_flags+0x1e8>)
 80121f8:	f002 fd76 	bl	8014ce8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012202:	2b08      	cmp	r3, #8
 8012204:	d806      	bhi.n	8012214 <tcp_enqueue_flags+0x44>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801220c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012210:	4293      	cmp	r3, r2
 8012212:	d90e      	bls.n	8012232 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8012214:	78fb      	ldrb	r3, [r7, #3]
 8012216:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801221a:	2b00      	cmp	r3, #0
 801221c:	d109      	bne.n	8012232 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	7e9b      	ldrb	r3, [r3, #26]
 8012222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012226:	b2da      	uxtb	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801222c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012230:	e0ba      	b.n	80123a8 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 8012232:	78fb      	ldrb	r3, [r7, #3]
 8012234:	f003 0302 	and.w	r3, r3, #2
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 801223c:	2301      	movs	r3, #1
 801223e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <tcp_enqueue_flags+0x7e>
 801224a:	2304      	movs	r3, #4
 801224c:	e000      	b.n	8012250 <tcp_enqueue_flags+0x80>
 801224e:	2300      	movs	r3, #0
 8012250:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012252:	7dfb      	ldrb	r3, [r7, #23]
 8012254:	b29b      	uxth	r3, r3
 8012256:	2200      	movs	r2, #0
 8012258:	4619      	mov	r1, r3
 801225a:	2000      	movs	r0, #0
 801225c:	f7fa fc9a 	bl	800cb94 <pbuf_alloc>
 8012260:	6138      	str	r0, [r7, #16]
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d109      	bne.n	801227c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	7e9b      	ldrb	r3, [r3, #26]
 801226c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012270:	b2da      	uxtb	r2, r3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801227a:	e095      	b.n	80123a8 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	895a      	ldrh	r2, [r3, #10]
 8012280:	7dfb      	ldrb	r3, [r7, #23]
 8012282:	b29b      	uxth	r3, r3
 8012284:	429a      	cmp	r2, r3
 8012286:	d206      	bcs.n	8012296 <tcp_enqueue_flags+0xc6>
 8012288:	4b49      	ldr	r3, [pc, #292]	; (80123b0 <tcp_enqueue_flags+0x1e0>)
 801228a:	f240 3241 	movw	r2, #833	; 0x341
 801228e:	494b      	ldr	r1, [pc, #300]	; (80123bc <tcp_enqueue_flags+0x1ec>)
 8012290:	4849      	ldr	r0, [pc, #292]	; (80123b8 <tcp_enqueue_flags+0x1e8>)
 8012292:	f002 fd29 	bl	8014ce8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801229a:	78fa      	ldrb	r2, [r7, #3]
 801229c:	7ffb      	ldrb	r3, [r7, #31]
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	460b      	mov	r3, r1
 80122a2:	6939      	ldr	r1, [r7, #16]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f7ff fad5 	bl	8011854 <tcp_create_segment>
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d109      	bne.n	80122c6 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	7e9b      	ldrb	r3, [r3, #26]
 80122b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122ba:	b2da      	uxtb	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80122c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122c4:	e070      	b.n	80123a8 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	f003 0303 	and.w	r3, r3, #3
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <tcp_enqueue_flags+0x110>
 80122d2:	4b37      	ldr	r3, [pc, #220]	; (80123b0 <tcp_enqueue_flags+0x1e0>)
 80122d4:	f240 3249 	movw	r2, #841	; 0x349
 80122d8:	4939      	ldr	r1, [pc, #228]	; (80123c0 <tcp_enqueue_flags+0x1f0>)
 80122da:	4837      	ldr	r0, [pc, #220]	; (80123b8 <tcp_enqueue_flags+0x1e8>)
 80122dc:	f002 fd04 	bl	8014ce8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d006      	beq.n	80122f6 <tcp_enqueue_flags+0x126>
 80122e8:	4b31      	ldr	r3, [pc, #196]	; (80123b0 <tcp_enqueue_flags+0x1e0>)
 80122ea:	f240 324a 	movw	r2, #842	; 0x34a
 80122ee:	4935      	ldr	r1, [pc, #212]	; (80123c4 <tcp_enqueue_flags+0x1f4>)
 80122f0:	4831      	ldr	r0, [pc, #196]	; (80123b8 <tcp_enqueue_flags+0x1e8>)
 80122f2:	f002 fcf9 	bl	8014ce8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d103      	bne.n	8012306 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	669a      	str	r2, [r3, #104]	; 0x68
 8012304:	e00d      	b.n	8012322 <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801230a:	61bb      	str	r3, [r7, #24]
 801230c:	e002      	b.n	8012314 <tcp_enqueue_flags+0x144>
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	61bb      	str	r3, [r7, #24]
 8012314:	69bb      	ldr	r3, [r7, #24]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d1f8      	bne.n	801230e <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	f003 0302 	and.w	r3, r3, #2
 8012330:	2b00      	cmp	r3, #0
 8012332:	d104      	bne.n	801233e <tcp_enqueue_flags+0x16e>
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	f003 0301 	and.w	r3, r3, #1
 801233a:	2b00      	cmp	r3, #0
 801233c:	d004      	beq.n	8012348 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012342:	1c5a      	adds	r2, r3, #1
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012348:	78fb      	ldrb	r3, [r7, #3]
 801234a:	f003 0301 	and.w	r3, r3, #1
 801234e:	2b00      	cmp	r3, #0
 8012350:	d006      	beq.n	8012360 <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	7e9b      	ldrb	r3, [r3, #26]
 8012356:	f043 0320 	orr.w	r3, r3, #32
 801235a:	b2da      	uxtb	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	4618      	mov	r0, r3
 8012366:	f7fb f821 	bl	800d3ac <pbuf_clen>
 801236a:	4603      	mov	r3, r0
 801236c:	461a      	mov	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012374:	4413      	add	r3, r2
 8012376:	b29a      	uxth	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012384:	2b00      	cmp	r3, #0
 8012386:	d00e      	beq.n	80123a6 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10a      	bne.n	80123a6 <tcp_enqueue_flags+0x1d6>
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012394:	2b00      	cmp	r3, #0
 8012396:	d106      	bne.n	80123a6 <tcp_enqueue_flags+0x1d6>
 8012398:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <tcp_enqueue_flags+0x1e0>)
 801239a:	f240 326d 	movw	r2, #877	; 0x36d
 801239e:	490a      	ldr	r1, [pc, #40]	; (80123c8 <tcp_enqueue_flags+0x1f8>)
 80123a0:	4805      	ldr	r0, [pc, #20]	; (80123b8 <tcp_enqueue_flags+0x1e8>)
 80123a2:	f002 fca1 	bl	8014ce8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80123a6:	2300      	movs	r3, #0
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3720      	adds	r7, #32
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	080182dc 	.word	0x080182dc
 80123b4:	080185e0 	.word	0x080185e0
 80123b8:	08018340 	.word	0x08018340
 80123bc:	08018638 	.word	0x08018638
 80123c0:	08018674 	.word	0x08018674
 80123c4:	0801868c 	.word	0x0801868c
 80123c8:	080186b8 	.word	0x080186b8

080123cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80123cc:	b590      	push	{r4, r7, lr}
 80123ce:	b08b      	sub	sp, #44	; 0x2c
 80123d0:	af04      	add	r7, sp, #16
 80123d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80123d4:	2300      	movs	r3, #0
 80123d6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80123d8:	7dbb      	ldrb	r3, [r7, #22]
 80123da:	b29c      	uxth	r4, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7f5 fa11 	bl	8007808 <lwip_htonl>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2200      	movs	r2, #0
 80123ea:	4621      	mov	r1, r4
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff f977 	bl	80116e0 <tcp_output_alloc_header>
 80123f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d109      	bne.n	801240e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	7e9b      	ldrb	r3, [r3, #26]
 80123fe:	f043 0303 	orr.w	r3, r3, #3
 8012402:	b2da      	uxtb	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012408:	f06f 0301 	mvn.w	r3, #1
 801240c:	e036      	b.n	801247c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	3304      	adds	r3, #4
 8012412:	4618      	mov	r0, r3
 8012414:	f7f8 fc9c 	bl	800ad50 <ip4_route>
 8012418:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8012420:	23fc      	movs	r3, #252	; 0xfc
 8012422:	75fb      	strb	r3, [r7, #23]
 8012424:	e012      	b.n	801244c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8012426:	6879      	ldr	r1, [r7, #4]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	1d18      	adds	r0, r3, #4
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	7a9c      	ldrb	r4, [r3, #10]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	7a5b      	ldrb	r3, [r3, #9]
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	9202      	str	r2, [sp, #8]
 8012438:	2206      	movs	r2, #6
 801243a:	9201      	str	r2, [sp, #4]
 801243c:	9300      	str	r3, [sp, #0]
 801243e:	4623      	mov	r3, r4
 8012440:	4602      	mov	r2, r0
 8012442:	6938      	ldr	r0, [r7, #16]
 8012444:	f7f8 fe46 	bl	800b0d4 <ip4_output_if>
 8012448:	4603      	mov	r3, r0
 801244a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801244c:	6938      	ldr	r0, [r7, #16]
 801244e:	f7fa ff13 	bl	800d278 <pbuf_free>

  if (err != ERR_OK) {
 8012452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d007      	beq.n	801246a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	7e9b      	ldrb	r3, [r3, #26]
 801245e:	f043 0303 	orr.w	r3, r3, #3
 8012462:	b2da      	uxtb	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	769a      	strb	r2, [r3, #26]
 8012468:	e006      	b.n	8012478 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	7e9b      	ldrb	r3, [r3, #26]
 801246e:	f023 0303 	bic.w	r3, r3, #3
 8012472:	b2da      	uxtb	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8012478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801247c:	4618      	mov	r0, r3
 801247e:	371c      	adds	r7, #28
 8012480:	46bd      	mov	sp, r7
 8012482:	bd90      	pop	{r4, r7, pc}

08012484 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012484:	b5b0      	push	{r4, r5, r7, lr}
 8012486:	b08a      	sub	sp, #40	; 0x28
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7d1b      	ldrb	r3, [r3, #20]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d106      	bne.n	80124a2 <tcp_output+0x1e>
 8012494:	4b9b      	ldr	r3, [pc, #620]	; (8012704 <tcp_output+0x280>)
 8012496:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801249a:	499b      	ldr	r1, [pc, #620]	; (8012708 <tcp_output+0x284>)
 801249c:	489b      	ldr	r0, [pc, #620]	; (801270c <tcp_output+0x288>)
 801249e:	f002 fc23 	bl	8014ce8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80124a2:	4b9b      	ldr	r3, [pc, #620]	; (8012710 <tcp_output+0x28c>)
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d101      	bne.n	80124b0 <tcp_output+0x2c>
    return ERR_OK;
 80124ac:	2300      	movs	r3, #0
 80124ae:	e1cd      	b.n	801284c <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124bc:	429a      	cmp	r2, r3
 80124be:	d203      	bcs.n	80124c8 <tcp_output+0x44>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124c6:	e002      	b.n	80124ce <tcp_output+0x4a>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124ce:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80124d4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	7e9b      	ldrb	r3, [r3, #26]
 80124da:	f003 0302 	and.w	r3, r3, #2
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d017      	beq.n	8012512 <tcp_output+0x8e>
 80124e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00f      	beq.n	8012508 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f5 f98a 	bl	8007808 <lwip_htonl>
 80124f4:	4602      	mov	r2, r0
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124fe:	8912      	ldrh	r2, [r2, #8]
 8012500:	441a      	add	r2, r3
     (seg == NULL ||
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	429a      	cmp	r2, r3
 8012506:	d904      	bls.n	8012512 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f7ff ff5f 	bl	80123cc <tcp_send_empty_ack>
 801250e:	4603      	mov	r3, r0
 8012510:	e19c      	b.n	801284c <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012516:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d007      	beq.n	801252e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 801251e:	e002      	b.n	8012526 <tcp_output+0xa2>
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	623b      	str	r3, [r7, #32]
 8012526:	6a3b      	ldr	r3, [r7, #32]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1f8      	bne.n	8012520 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3304      	adds	r3, #4
 8012532:	4618      	mov	r0, r3
 8012534:	f7f8 fc0c 	bl	800ad50 <ip4_route>
 8012538:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d102      	bne.n	8012546 <tcp_output+0xc2>
    return ERR_RTE;
 8012540:	f06f 0303 	mvn.w	r3, #3
 8012544:	e182      	b.n	801284c <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d003      	beq.n	8012554 <tcp_output+0xd0>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d111      	bne.n	8012578 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d002      	beq.n	8012560 <tcp_output+0xdc>
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	3304      	adds	r3, #4
 801255e:	e000      	b.n	8012562 <tcp_output+0xde>
 8012560:	2300      	movs	r3, #0
 8012562:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d102      	bne.n	8012570 <tcp_output+0xec>
      return ERR_RTE;
 801256a:	f06f 0303 	mvn.w	r3, #3
 801256e:	e16d      	b.n	801284c <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8012578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257a:	2b00      	cmp	r3, #0
 801257c:	f000 813e 	beq.w	80127fc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f7f5 f93e 	bl	8007808 <lwip_htonl>
 801258c:	4602      	mov	r2, r0
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012596:	8912      	ldrh	r2, [r2, #8]
 8012598:	441a      	add	r2, r3
  if (seg != NULL &&
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	429a      	cmp	r2, r3
 801259e:	f240 812d 	bls.w	80127fc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f000 8129 	beq.w	80127fc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125b0:	461a      	mov	r2, r3
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	f040 8121 	bne.w	80127fc <tcp_output+0x378>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f040 811c 	bne.w	80127fc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	f040 812b 	bne.w	8012826 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2201      	movs	r2, #1
 80125dc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80125e0:	e121      	b.n	8012826 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80125e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	899b      	ldrh	r3, [r3, #12]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7f5 f8fe 	bl	80077ec <lwip_htons>
 80125f0:	4603      	mov	r3, r0
 80125f2:	f003 0304 	and.w	r3, r3, #4
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d006      	beq.n	8012608 <tcp_output+0x184>
 80125fa:	4b42      	ldr	r3, [pc, #264]	; (8012704 <tcp_output+0x280>)
 80125fc:	f240 4246 	movw	r2, #1094	; 0x446
 8012600:	4944      	ldr	r1, [pc, #272]	; (8012714 <tcp_output+0x290>)
 8012602:	4842      	ldr	r0, [pc, #264]	; (801270c <tcp_output+0x288>)
 8012604:	f002 fb70 	bl	8014ce8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801260c:	2b00      	cmp	r3, #0
 801260e:	d01f      	beq.n	8012650 <tcp_output+0x1cc>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7e9b      	ldrb	r3, [r3, #26]
 8012614:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012618:	2b00      	cmp	r3, #0
 801261a:	d119      	bne.n	8012650 <tcp_output+0x1cc>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00b      	beq.n	801263c <tcp_output+0x1b8>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d110      	bne.n	8012650 <tcp_output+0x1cc>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012632:	891a      	ldrh	r2, [r3, #8]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012638:	429a      	cmp	r2, r3
 801263a:	d209      	bcs.n	8012650 <tcp_output+0x1cc>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012642:	2b00      	cmp	r3, #0
 8012644:	d004      	beq.n	8012650 <tcp_output+0x1cc>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801264c:	2b08      	cmp	r3, #8
 801264e:	d901      	bls.n	8012654 <tcp_output+0x1d0>
 8012650:	2301      	movs	r3, #1
 8012652:	e000      	b.n	8012656 <tcp_output+0x1d2>
 8012654:	2300      	movs	r3, #0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	7e9b      	ldrb	r3, [r3, #26]
 801265e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012662:	2b00      	cmp	r3, #0
 8012664:	f000 80e1 	beq.w	801282a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	7d1b      	ldrb	r3, [r3, #20]
 801266c:	2b02      	cmp	r3, #2
 801266e:	d00c      	beq.n	801268a <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	68dc      	ldr	r4, [r3, #12]
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	899b      	ldrh	r3, [r3, #12]
 801267a:	b29d      	uxth	r5, r3
 801267c:	2010      	movs	r0, #16
 801267e:	f7f5 f8b5 	bl	80077ec <lwip_htons>
 8012682:	4603      	mov	r3, r0
 8012684:	432b      	orrs	r3, r5
 8012686:	b29b      	uxth	r3, r3
 8012688:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	6879      	ldr	r1, [r7, #4]
 801268e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012690:	f000 f8e0 	bl	8012854 <tcp_output_segment>
 8012694:	4603      	mov	r3, r0
 8012696:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d009      	beq.n	80126b4 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	7e9b      	ldrb	r3, [r3, #26]
 80126a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	769a      	strb	r2, [r3, #26]
      return err;
 80126ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126b2:	e0cb      	b.n	801284c <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 80126b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	7d1b      	ldrb	r3, [r3, #20]
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d006      	beq.n	80126d2 <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	7e9b      	ldrb	r3, [r3, #26]
 80126c8:	f023 0303 	bic.w	r3, r3, #3
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80126d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d4:	68db      	ldr	r3, [r3, #12]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7f5 f895 	bl	8007808 <lwip_htonl>
 80126de:	4604      	mov	r4, r0
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	891b      	ldrh	r3, [r3, #8]
 80126e4:	461d      	mov	r5, r3
 80126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e8:	68db      	ldr	r3, [r3, #12]
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7f5 f87c 	bl	80077ec <lwip_htons>
 80126f4:	4603      	mov	r3, r0
 80126f6:	f003 0303 	and.w	r3, r3, #3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00c      	beq.n	8012718 <tcp_output+0x294>
 80126fe:	2301      	movs	r3, #1
 8012700:	e00b      	b.n	801271a <tcp_output+0x296>
 8012702:	bf00      	nop
 8012704:	080182dc 	.word	0x080182dc
 8012708:	080186e0 	.word	0x080186e0
 801270c:	08018340 	.word	0x08018340
 8012710:	20007d40 	.word	0x20007d40
 8012714:	08018708 	.word	0x08018708
 8012718:	2300      	movs	r3, #0
 801271a:	442b      	add	r3, r5
 801271c:	4423      	add	r3, r4
 801271e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	2b00      	cmp	r3, #0
 801272a:	da02      	bge.n	8012732 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	68ba      	ldr	r2, [r7, #8]
 8012730:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012734:	891b      	ldrh	r3, [r3, #8]
 8012736:	461c      	mov	r4, r3
 8012738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	899b      	ldrh	r3, [r3, #12]
 801273e:	b29b      	uxth	r3, r3
 8012740:	4618      	mov	r0, r3
 8012742:	f7f5 f853 	bl	80077ec <lwip_htons>
 8012746:	4603      	mov	r3, r0
 8012748:	f003 0303 	and.w	r3, r3, #3
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <tcp_output+0x2d0>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <tcp_output+0x2d2>
 8012754:	2300      	movs	r3, #0
 8012756:	4423      	add	r3, r4
 8012758:	2b00      	cmp	r3, #0
 801275a:	d049      	beq.n	80127f0 <tcp_output+0x36c>
      seg->next = NULL;
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	2200      	movs	r2, #0
 8012760:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d105      	bne.n	8012776 <tcp_output+0x2f2>
        pcb->unacked = seg;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801276e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8012770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012772:	623b      	str	r3, [r7, #32]
 8012774:	e03f      	b.n	80127f6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	4618      	mov	r0, r3
 801277e:	f7f5 f843 	bl	8007808 <lwip_htonl>
 8012782:	4604      	mov	r4, r0
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f7f5 f83c 	bl	8007808 <lwip_htonl>
 8012790:	4603      	mov	r3, r0
 8012792:	1ae3      	subs	r3, r4, r3
 8012794:	2b00      	cmp	r3, #0
 8012796:	da24      	bge.n	80127e2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	336c      	adds	r3, #108	; 0x6c
 801279c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801279e:	e002      	b.n	80127a6 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80127a6:	69fb      	ldr	r3, [r7, #28]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d011      	beq.n	80127d2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7f5 f826 	bl	8007808 <lwip_htonl>
 80127bc:	4604      	mov	r4, r0
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f5 f81f 	bl	8007808 <lwip_htonl>
 80127ca:	4603      	mov	r3, r0
 80127cc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	dbe6      	blt.n	80127a0 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	e009      	b.n	80127f6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80127e2:	6a3b      	ldr	r3, [r7, #32]
 80127e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127e6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80127e8:	6a3b      	ldr	r3, [r7, #32]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	623b      	str	r3, [r7, #32]
 80127ee:	e002      	b.n	80127f6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80127f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127f2:	f7fc f9ae 	bl	800eb52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d014      	beq.n	801282c <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	f7f4 fffd 	bl	8007808 <lwip_htonl>
 801280e:	4602      	mov	r2, r0
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012814:	1ad3      	subs	r3, r2, r3
 8012816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012818:	8912      	ldrh	r2, [r2, #8]
 801281a:	441a      	add	r2, r3
  while (seg != NULL &&
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	429a      	cmp	r2, r3
 8012820:	f67f aedf 	bls.w	80125e2 <tcp_output+0x15e>
 8012824:	e002      	b.n	801282c <tcp_output+0x3a8>
    goto output_done;
 8012826:	bf00      	nop
 8012828:	e000      	b.n	801282c <tcp_output+0x3a8>
      break;
 801282a:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012830:	2b00      	cmp	r3, #0
 8012832:	d103      	bne.n	801283c <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	7e9b      	ldrb	r3, [r3, #26]
 8012840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012844:	b2da      	uxtb	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3728      	adds	r7, #40	; 0x28
 8012850:	46bd      	mov	sp, r7
 8012852:	bdb0      	pop	{r4, r5, r7, pc}

08012854 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012854:	b5b0      	push	{r4, r5, r7, lr}
 8012856:	b08c      	sub	sp, #48	; 0x30
 8012858:	af04      	add	r7, sp, #16
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	89db      	ldrh	r3, [r3, #14]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d001      	beq.n	801286e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	e08b      	b.n	8012986 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	68dc      	ldr	r4, [r3, #12]
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012876:	4618      	mov	r0, r3
 8012878:	f7f4 ffc6 	bl	8007808 <lwip_htonl>
 801287c:	4603      	mov	r3, r0
 801287e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	68dc      	ldr	r4, [r3, #12]
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012888:	4618      	mov	r0, r3
 801288a:	f7f4 ffaf 	bl	80077ec <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801289a:	441a      	add	r2, r3
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	3314      	adds	r3, #20
 80128a6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	7a9b      	ldrb	r3, [r3, #10]
 80128ac:	f003 0301 	and.w	r3, r3, #1
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d014      	beq.n	80128de <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	3304      	adds	r3, #4
 80128b8:	4619      	mov	r1, r3
 80128ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 80128be:	f7fc fc73 	bl	800f1a8 <tcp_eff_send_mss_impl>
 80128c2:	4603      	mov	r3, r0
 80128c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80128c6:	8b7b      	ldrh	r3, [r7, #26]
 80128c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7f4 ff9b 	bl	8007808 <lwip_htonl>
 80128d2:	4602      	mov	r2, r0
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	3304      	adds	r3, #4
 80128dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	da02      	bge.n	80128ee <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	2200      	movs	r2, #0
 80128ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d10c      	bne.n	8012910 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80128f6:	4b26      	ldr	r3, [pc, #152]	; (8012990 <tcp_output_segment+0x13c>)
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	4618      	mov	r0, r3
 8012906:	f7f4 ff7f 	bl	8007808 <lwip_htonl>
 801290a:	4602      	mov	r2, r0
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	461a      	mov	r2, r3
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	68fa      	ldr	r2, [r7, #12]
 8012926:	6852      	ldr	r2, [r2, #4]
 8012928:	8951      	ldrh	r1, [r2, #10]
 801292a:	8b3a      	ldrh	r2, [r7, #24]
 801292c:	1a8a      	subs	r2, r1, r2
 801292e:	b292      	uxth	r2, r2
 8012930:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	68fa      	ldr	r2, [r7, #12]
 8012938:	6852      	ldr	r2, [r2, #4]
 801293a:	8911      	ldrh	r1, [r2, #8]
 801293c:	8b3a      	ldrh	r2, [r7, #24]
 801293e:	1a8a      	subs	r2, r1, r2
 8012940:	b292      	uxth	r2, r2
 8012942:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	68d2      	ldr	r2, [r2, #12]
 801294c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	2200      	movs	r2, #0
 8012954:	741a      	strb	r2, [r3, #16]
 8012956:	2200      	movs	r2, #0
 8012958:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	6858      	ldr	r0, [r3, #4]
 801295e:	68b9      	ldr	r1, [r7, #8]
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	1d1c      	adds	r4, r3, #4
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	7a9d      	ldrb	r5, [r3, #10]
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	7a5b      	ldrb	r3, [r3, #9]
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	9202      	str	r2, [sp, #8]
 8012970:	2206      	movs	r2, #6
 8012972:	9201      	str	r2, [sp, #4]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	462b      	mov	r3, r5
 8012978:	4622      	mov	r2, r4
 801297a:	f7f8 fbab 	bl	800b0d4 <ip4_output_if>
 801297e:	4603      	mov	r3, r0
 8012980:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8012982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3720      	adds	r7, #32
 801298a:	46bd      	mov	sp, r7
 801298c:	bdb0      	pop	{r4, r5, r7, pc}
 801298e:	bf00      	nop
 8012990:	20007d30 	.word	0x20007d30

08012994 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08c      	sub	sp, #48	; 0x30
 8012998:	af04      	add	r7, sp, #16
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80129a2:	2200      	movs	r2, #0
 80129a4:	2114      	movs	r1, #20
 80129a6:	2001      	movs	r0, #1
 80129a8:	f7fa f8f4 	bl	800cb94 <pbuf_alloc>
 80129ac:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d05b      	beq.n	8012a6c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	895b      	ldrh	r3, [r3, #10]
 80129b8:	2b13      	cmp	r3, #19
 80129ba:	d806      	bhi.n	80129ca <tcp_rst+0x36>
 80129bc:	4b2d      	ldr	r3, [pc, #180]	; (8012a74 <tcp_rst+0xe0>)
 80129be:	f240 524d 	movw	r2, #1357	; 0x54d
 80129c2:	492d      	ldr	r1, [pc, #180]	; (8012a78 <tcp_rst+0xe4>)
 80129c4:	482d      	ldr	r0, [pc, #180]	; (8012a7c <tcp_rst+0xe8>)
 80129c6:	f002 f98f 	bl	8014ce8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80129d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7f4 ff0a 	bl	80077ec <lwip_htons>
 80129d8:	4603      	mov	r3, r0
 80129da:	461a      	mov	r2, r3
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80129e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7f4 ff02 	bl	80077ec <lwip_htons>
 80129e8:	4603      	mov	r3, r0
 80129ea:	461a      	mov	r2, r3
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7f4 ff09 	bl	8007808 <lwip_htonl>
 80129f6:	4602      	mov	r2, r0
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80129fc:	68b8      	ldr	r0, [r7, #8]
 80129fe:	f7f4 ff03 	bl	8007808 <lwip_htonl>
 8012a02:	4602      	mov	r2, r0
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012a08:	f245 0014 	movw	r0, #20500	; 0x5014
 8012a0c:	f7f4 feee 	bl	80077ec <lwip_htons>
 8012a10:	4603      	mov	r3, r0
 8012a12:	461a      	mov	r2, r3
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f042 0208 	orr.w	r2, r2, #8
 8012a20:	739a      	strb	r2, [r3, #14]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012a28:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	741a      	strb	r2, [r3, #16]
 8012a30:	2200      	movs	r2, #0
 8012a32:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	2200      	movs	r2, #0
 8012a38:	749a      	strb	r2, [r3, #18]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012a3e:	6838      	ldr	r0, [r7, #0]
 8012a40:	f7f8 f986 	bl	800ad50 <ip4_route>
 8012a44:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00b      	beq.n	8012a64 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	9302      	str	r3, [sp, #8]
 8012a50:	2306      	movs	r3, #6
 8012a52:	9301      	str	r3, [sp, #4]
 8012a54:	2300      	movs	r3, #0
 8012a56:	9300      	str	r3, [sp, #0]
 8012a58:	23ff      	movs	r3, #255	; 0xff
 8012a5a:	683a      	ldr	r2, [r7, #0]
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	69f8      	ldr	r0, [r7, #28]
 8012a60:	f7f8 fb38 	bl	800b0d4 <ip4_output_if>
  }
  pbuf_free(p);
 8012a64:	69f8      	ldr	r0, [r7, #28]
 8012a66:	f7fa fc07 	bl	800d278 <pbuf_free>
 8012a6a:	e000      	b.n	8012a6e <tcp_rst+0xda>
    return;
 8012a6c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012a6e:	3720      	adds	r7, #32
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	080182dc 	.word	0x080182dc
 8012a78:	08018310 	.word	0x08018310
 8012a7c:	08018340 	.word	0x08018340

08012a80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d029      	beq.n	8012ae4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a94:	60fb      	str	r3, [r7, #12]
 8012a96:	e002      	b.n	8012a9e <tcp_rexmit_rto+0x1e>
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	60fb      	str	r3, [r7, #12]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d1f8      	bne.n	8012a98 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ac2:	2bff      	cmp	r3, #255	; 0xff
 8012ac4:	d007      	beq.n	8012ad6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012acc:	3301      	adds	r3, #1
 8012ace:	b2da      	uxtb	r2, r3
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff fcd1 	bl	8012484 <tcp_output>
 8012ae2:	e000      	b.n	8012ae6 <tcp_rexmit_rto+0x66>
    return;
 8012ae4:	bf00      	nop
}
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012aec:	b590      	push	{r4, r7, lr}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d043      	beq.n	8012b84 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b00:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	3368      	adds	r3, #104	; 0x68
 8012b0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b10:	e002      	b.n	8012b18 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d011      	beq.n	8012b44 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7f4 fe6d 	bl	8007808 <lwip_htonl>
 8012b2e:	4604      	mov	r4, r0
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7f4 fe66 	bl	8007808 <lwip_htonl>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	dbe6      	blt.n	8012b12 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d103      	bne.n	8012b62 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b68:	2bff      	cmp	r3, #255	; 0xff
 8012b6a:	d007      	beq.n	8012b7c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b72:	3301      	adds	r3, #1
 8012b74:	b2da      	uxtb	r2, r3
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	635a      	str	r2, [r3, #52]	; 0x34
 8012b82:	e000      	b.n	8012b86 <tcp_rexmit+0x9a>
    return;
 8012b84:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012b86:	3714      	adds	r7, #20
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd90      	pop	{r4, r7, pc}

08012b8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d04a      	beq.n	8012c32 <tcp_rexmit_fast+0xa6>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	7e9b      	ldrb	r3, [r3, #26]
 8012ba0:	f003 0304 	and.w	r3, r3, #4
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d144      	bne.n	8012c32 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f7ff ff9f 	bl	8012aec <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d207      	bcs.n	8012bce <tcp_rexmit_fast+0x42>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bc4:	0fda      	lsrs	r2, r3, #31
 8012bc6:	4413      	add	r3, r2
 8012bc8:	105b      	asrs	r3, r3, #1
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	e006      	b.n	8012bdc <tcp_rexmit_fast+0x50>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012bd4:	0fda      	lsrs	r2, r3, #31
 8012bd6:	4413      	add	r3, r2
 8012bd8:	105b      	asrs	r3, r3, #1
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012be8:	461a      	mov	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d206      	bcs.n	8012c02 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	0049      	lsls	r1, r1, #1
 8012c10:	440b      	add	r3, r1
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	4413      	add	r3, r2
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	7e9b      	ldrb	r3, [r3, #26]
 8012c22:	f043 0304 	orr.w	r3, r3, #4
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012c32:	bf00      	nop
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b08a      	sub	sp, #40	; 0x28
 8012c3e:	af04      	add	r7, sp, #16
 8012c40:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c46:	3b01      	subs	r3, #1
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7f4 fddd 	bl	8007808 <lwip_htonl>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2200      	movs	r2, #0
 8012c52:	2100      	movs	r1, #0
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f7fe fd43 	bl	80116e0 <tcp_output_alloc_header>
 8012c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d102      	bne.n	8012c68 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c66:	e021      	b.n	8012cac <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7f8 f86f 	bl	800ad50 <ip4_route>
 8012c72:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d102      	bne.n	8012c80 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012c7a:	23fc      	movs	r3, #252	; 0xfc
 8012c7c:	75fb      	strb	r3, [r7, #23]
 8012c7e:	e010      	b.n	8012ca2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012c80:	6879      	ldr	r1, [r7, #4]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	1d1a      	adds	r2, r3, #4
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	7a98      	ldrb	r0, [r3, #10]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	9302      	str	r3, [sp, #8]
 8012c8e:	2306      	movs	r3, #6
 8012c90:	9301      	str	r3, [sp, #4]
 8012c92:	2300      	movs	r3, #0
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	4603      	mov	r3, r0
 8012c98:	6938      	ldr	r0, [r7, #16]
 8012c9a:	f7f8 fa1b 	bl	800b0d4 <ip4_output_if>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012ca2:	6938      	ldr	r0, [r7, #16]
 8012ca4:	f7fa fae8 	bl	800d278 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3718      	adds	r7, #24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012cb4:	b590      	push	{r4, r7, lr}
 8012cb6:	b08f      	sub	sp, #60	; 0x3c
 8012cb8:	af04      	add	r7, sp, #16
 8012cba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012cc2:	6a3b      	ldr	r3, [r7, #32]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ccc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012cce:	6a3b      	ldr	r3, [r7, #32]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d101      	bne.n	8012cd8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	e085      	b.n	8012de4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	899b      	ldrh	r3, [r3, #12]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f4 fd83 	bl	80077ec <lwip_htons>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	f003 0301 	and.w	r3, r3, #1
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d005      	beq.n	8012cfc <tcp_zero_window_probe+0x48>
 8012cf0:	6a3b      	ldr	r3, [r7, #32]
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d101      	bne.n	8012cfc <tcp_zero_window_probe+0x48>
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e000      	b.n	8012cfe <tcp_zero_window_probe+0x4a>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012d00:	7ffb      	ldrb	r3, [r7, #31]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	bf0c      	ite	eq
 8012d06:	2301      	moveq	r3, #1
 8012d08:	2300      	movne	r3, #0
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	68db      	ldr	r3, [r3, #12]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	8bba      	ldrh	r2, [r7, #28]
 8012d16:	2100      	movs	r1, #0
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7fe fce1 	bl	80116e0 <tcp_output_alloc_header>
 8012d1e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d102      	bne.n	8012d2c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d2a:	e05b      	b.n	8012de4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012d32:	7ffb      	ldrb	r3, [r7, #31]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00e      	beq.n	8012d56 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	899b      	ldrh	r3, [r3, #12]
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012d42:	b29c      	uxth	r4, r3
 8012d44:	2011      	movs	r0, #17
 8012d46:	f7f4 fd51 	bl	80077ec <lwip_htons>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	4323      	orrs	r3, r4
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	819a      	strh	r2, [r3, #12]
 8012d54:	e010      	b.n	8012d78 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012d56:	69bb      	ldr	r3, [r7, #24]
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	3314      	adds	r3, #20
 8012d5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012d5e:	6a3b      	ldr	r3, [r7, #32]
 8012d60:	6858      	ldr	r0, [r3, #4]
 8012d62:	6a3b      	ldr	r3, [r7, #32]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	891a      	ldrh	r2, [r3, #8]
 8012d68:	6a3b      	ldr	r3, [r7, #32]
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	1ad3      	subs	r3, r2, r3
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	2201      	movs	r2, #1
 8012d72:	6939      	ldr	r1, [r7, #16]
 8012d74:	f7fa fc8c 	bl	800d690 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012d78:	6a3b      	ldr	r3, [r7, #32]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7f4 fd42 	bl	8007808 <lwip_htonl>
 8012d84:	4603      	mov	r3, r0
 8012d86:	3301      	adds	r3, #1
 8012d88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	1ad3      	subs	r3, r2, r3
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	da02      	bge.n	8012d9c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3304      	adds	r3, #4
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7f7 ffd5 	bl	800ad50 <ip4_route>
 8012da6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d103      	bne.n	8012db6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012dae:	23fc      	movs	r3, #252	; 0xfc
 8012db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012db4:	e011      	b.n	8012dda <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012db6:	6879      	ldr	r1, [r7, #4]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	1d1a      	adds	r2, r3, #4
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	7a98      	ldrb	r0, [r3, #10]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	9302      	str	r3, [sp, #8]
 8012dc4:	2306      	movs	r3, #6
 8012dc6:	9301      	str	r3, [sp, #4]
 8012dc8:	2300      	movs	r3, #0
 8012dca:	9300      	str	r3, [sp, #0]
 8012dcc:	4603      	mov	r3, r0
 8012dce:	69b8      	ldr	r0, [r7, #24]
 8012dd0:	f7f8 f980 	bl	800b0d4 <ip4_output_if>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012dda:	69b8      	ldr	r0, [r7, #24]
 8012ddc:	f7fa fa4c 	bl	800d278 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	372c      	adds	r7, #44	; 0x2c
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd90      	pop	{r4, r7, pc}

08012dec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012df4:	f7fa fe10 	bl	800da18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012df8:	4b0a      	ldr	r3, [pc, #40]	; (8012e24 <tcpip_tcp_timer+0x38>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d103      	bne.n	8012e08 <tcpip_tcp_timer+0x1c>
 8012e00:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <tcpip_tcp_timer+0x3c>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d005      	beq.n	8012e14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012e08:	2200      	movs	r2, #0
 8012e0a:	4908      	ldr	r1, [pc, #32]	; (8012e2c <tcpip_tcp_timer+0x40>)
 8012e0c:	20fa      	movs	r0, #250	; 0xfa
 8012e0e:	f000 f86f 	bl	8012ef0 <sys_timeout>
 8012e12:	e002      	b.n	8012e1a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012e14:	4b06      	ldr	r3, [pc, #24]	; (8012e30 <tcpip_tcp_timer+0x44>)
 8012e16:	2200      	movs	r2, #0
 8012e18:	601a      	str	r2, [r3, #0]
  }
}
 8012e1a:	bf00      	nop
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	20007d2c 	.word	0x20007d2c
 8012e28:	20007d3c 	.word	0x20007d3c
 8012e2c:	08012ded 	.word	0x08012ded
 8012e30:	20004420 	.word	0x20004420

08012e34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012e38:	4b0a      	ldr	r3, [pc, #40]	; (8012e64 <tcp_timer_needed+0x30>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d10f      	bne.n	8012e60 <tcp_timer_needed+0x2c>
 8012e40:	4b09      	ldr	r3, [pc, #36]	; (8012e68 <tcp_timer_needed+0x34>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d103      	bne.n	8012e50 <tcp_timer_needed+0x1c>
 8012e48:	4b08      	ldr	r3, [pc, #32]	; (8012e6c <tcp_timer_needed+0x38>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d007      	beq.n	8012e60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012e50:	4b04      	ldr	r3, [pc, #16]	; (8012e64 <tcp_timer_needed+0x30>)
 8012e52:	2201      	movs	r2, #1
 8012e54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012e56:	2200      	movs	r2, #0
 8012e58:	4905      	ldr	r1, [pc, #20]	; (8012e70 <tcp_timer_needed+0x3c>)
 8012e5a:	20fa      	movs	r0, #250	; 0xfa
 8012e5c:	f000 f848 	bl	8012ef0 <sys_timeout>
  }
}
 8012e60:	bf00      	nop
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	20004420 	.word	0x20004420
 8012e68:	20007d2c 	.word	0x20007d2c
 8012e6c:	20007d3c 	.word	0x20007d3c
 8012e70:	08012ded 	.word	0x08012ded

08012e74 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	4903      	ldr	r1, [pc, #12]	; (8012e9c <cyclic_timer+0x28>)
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 f82e 	bl	8012ef0 <sys_timeout>
}
 8012e94:	bf00      	nop
 8012e96:	3710      	adds	r7, #16
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	08012e75 	.word	0x08012e75

08012ea0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	607b      	str	r3, [r7, #4]
 8012eaa:	e00e      	b.n	8012eca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012eac:	4a0d      	ldr	r2, [pc, #52]	; (8012ee4 <sys_timeouts_init+0x44>)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	00db      	lsls	r3, r3, #3
 8012eb8:	4a0a      	ldr	r2, [pc, #40]	; (8012ee4 <sys_timeouts_init+0x44>)
 8012eba:	4413      	add	r3, r2
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	490a      	ldr	r1, [pc, #40]	; (8012ee8 <sys_timeouts_init+0x48>)
 8012ec0:	f000 f816 	bl	8012ef0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	607b      	str	r3, [r7, #4]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b05      	cmp	r3, #5
 8012ece:	d9ed      	bls.n	8012eac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012ed0:	f001 fad0 	bl	8014474 <sys_now>
 8012ed4:	4602      	mov	r2, r0
 8012ed6:	4b05      	ldr	r3, [pc, #20]	; (8012eec <sys_timeouts_init+0x4c>)
 8012ed8:	601a      	str	r2, [r3, #0]
}
 8012eda:	bf00      	nop
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	08018ad4 	.word	0x08018ad4
 8012ee8:	08012e75 	.word	0x08012e75
 8012eec:	2000441c 	.word	0x2000441c

08012ef0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b088      	sub	sp, #32
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012efc:	200a      	movs	r0, #10
 8012efe:	f7f9 fc07 	bl	800c710 <memp_malloc>
 8012f02:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d10a      	bne.n	8012f20 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f040 8084 	bne.w	801301a <sys_timeout+0x12a>
 8012f12:	4b44      	ldr	r3, [pc, #272]	; (8013024 <sys_timeout+0x134>)
 8012f14:	22d4      	movs	r2, #212	; 0xd4
 8012f16:	4944      	ldr	r1, [pc, #272]	; (8013028 <sys_timeout+0x138>)
 8012f18:	4844      	ldr	r0, [pc, #272]	; (801302c <sys_timeout+0x13c>)
 8012f1a:	f001 fee5 	bl	8014ce8 <iprintf>
    return;
 8012f1e:	e07c      	b.n	801301a <sys_timeout+0x12a>
  }

  now = sys_now();
 8012f20:	f001 faa8 	bl	8014474 <sys_now>
 8012f24:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012f26:	4b42      	ldr	r3, [pc, #264]	; (8013030 <sys_timeout+0x140>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d105      	bne.n	8012f3a <sys_timeout+0x4a>
    diff = 0;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012f32:	4a40      	ldr	r2, [pc, #256]	; (8013034 <sys_timeout+0x144>)
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	e004      	b.n	8012f44 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012f3a:	4b3e      	ldr	r3, [pc, #248]	; (8013034 <sys_timeout+0x144>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	693a      	ldr	r2, [r7, #16]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	2200      	movs	r2, #0
 8012f48:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	68ba      	ldr	r2, [r7, #8]
 8012f4e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012f56:	68fa      	ldr	r2, [r7, #12]
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	441a      	add	r2, r3
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012f60:	4b33      	ldr	r3, [pc, #204]	; (8013030 <sys_timeout+0x140>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d103      	bne.n	8012f70 <sys_timeout+0x80>
    next_timeout = timeout;
 8012f68:	4a31      	ldr	r2, [pc, #196]	; (8013030 <sys_timeout+0x140>)
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	6013      	str	r3, [r2, #0]
    return;
 8012f6e:	e055      	b.n	801301c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012f70:	4b2f      	ldr	r3, [pc, #188]	; (8013030 <sys_timeout+0x140>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d90f      	bls.n	8012f9c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012f7c:	4b2c      	ldr	r3, [pc, #176]	; (8013030 <sys_timeout+0x140>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4a2b      	ldr	r2, [pc, #172]	; (8013030 <sys_timeout+0x140>)
 8012f82:	6812      	ldr	r2, [r2, #0]
 8012f84:	6851      	ldr	r1, [r2, #4]
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	1a8a      	subs	r2, r1, r2
 8012f8a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012f8c:	4b28      	ldr	r3, [pc, #160]	; (8013030 <sys_timeout+0x140>)
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012f94:	4a26      	ldr	r2, [pc, #152]	; (8013030 <sys_timeout+0x140>)
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	6013      	str	r3, [r2, #0]
 8012f9a:	e03f      	b.n	801301c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012f9c:	4b24      	ldr	r3, [pc, #144]	; (8013030 <sys_timeout+0x140>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	61fb      	str	r3, [r7, #28]
 8012fa2:	e036      	b.n	8013012 <sys_timeout+0x122>
      timeout->time -= t->time;
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	685a      	ldr	r2, [r3, #4]
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	1ad2      	subs	r2, r2, r3
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d006      	beq.n	8012fc8 <sys_timeout+0xd8>
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d921      	bls.n	801300c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d009      	beq.n	8012fe4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	69fa      	ldr	r2, [r7, #28]
 8012fd6:	6812      	ldr	r2, [r2, #0]
 8012fd8:	6851      	ldr	r1, [r2, #4]
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	6852      	ldr	r2, [r2, #4]
 8012fde:	1a8a      	subs	r2, r1, r2
 8012fe0:	605a      	str	r2, [r3, #4]
 8012fe2:	e00b      	b.n	8012ffc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	685a      	ldr	r2, [r3, #4]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d906      	bls.n	8012ffc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012fee:	4b10      	ldr	r3, [pc, #64]	; (8013030 <sys_timeout+0x140>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	685a      	ldr	r2, [r3, #4]
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	441a      	add	r2, r3
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	697a      	ldr	r2, [r7, #20]
 8013008:	601a      	str	r2, [r3, #0]
        break;
 801300a:	e007      	b.n	801301c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	61fb      	str	r3, [r7, #28]
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d1c5      	bne.n	8012fa4 <sys_timeout+0xb4>
 8013018:	e000      	b.n	801301c <sys_timeout+0x12c>
    return;
 801301a:	bf00      	nop
      }
    }
  }
}
 801301c:	3720      	adds	r7, #32
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	08018720 	.word	0x08018720
 8013028:	08018754 	.word	0x08018754
 801302c:	08018794 	.word	0x08018794
 8013030:	20004418 	.word	0x20004418
 8013034:	2000441c 	.word	0x2000441c

08013038 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801303e:	4b24      	ldr	r3, [pc, #144]	; (80130d0 <sys_check_timeouts+0x98>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d03f      	beq.n	80130c6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8013046:	f001 fa15 	bl	8014474 <sys_now>
 801304a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801304c:	4b21      	ldr	r3, [pc, #132]	; (80130d4 <sys_check_timeouts+0x9c>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	1ad3      	subs	r3, r2, r3
 8013054:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8013056:	2300      	movs	r3, #0
 8013058:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801305a:	4b1d      	ldr	r3, [pc, #116]	; (80130d0 <sys_check_timeouts+0x98>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d02c      	beq.n	80130c0 <sys_check_timeouts+0x88>
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	685a      	ldr	r2, [r3, #4]
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	429a      	cmp	r2, r3
 801306e:	d827      	bhi.n	80130c0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8013070:	2301      	movs	r3, #1
 8013072:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	4b16      	ldr	r3, [pc, #88]	; (80130d4 <sys_check_timeouts+0x9c>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4413      	add	r3, r2
 801307e:	4a15      	ldr	r2, [pc, #84]	; (80130d4 <sys_check_timeouts+0x9c>)
 8013080:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a0f      	ldr	r2, [pc, #60]	; (80130d0 <sys_check_timeouts+0x98>)
 8013092:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	689b      	ldr	r3, [r3, #8]
 8013098:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80130a0:	68b9      	ldr	r1, [r7, #8]
 80130a2:	200a      	movs	r0, #10
 80130a4:	f7f9 fb86 	bl	800c7b4 <memp_free>
        if (handler != NULL) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d008      	beq.n	80130c0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80130ae:	480a      	ldr	r0, [pc, #40]	; (80130d8 <sys_check_timeouts+0xa0>)
 80130b0:	f000 fe8c 	bl	8013dcc <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6838      	ldr	r0, [r7, #0]
 80130b8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80130ba:	4807      	ldr	r0, [pc, #28]	; (80130d8 <sys_check_timeouts+0xa0>)
 80130bc:	f000 fe95 	bl	8013dea <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80130c0:	7cfb      	ldrb	r3, [r7, #19]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d1c7      	bne.n	8013056 <sys_check_timeouts+0x1e>
  }
}
 80130c6:	bf00      	nop
 80130c8:	3718      	adds	r7, #24
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	20004418 	.word	0x20004418
 80130d4:	2000441c 	.word	0x2000441c
 80130d8:	2000447c 	.word	0x2000447c

080130dc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80130e2:	4b0f      	ldr	r3, [pc, #60]	; (8013120 <sys_timeouts_sleeptime+0x44>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d102      	bne.n	80130f0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80130ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130ee:	e013      	b.n	8013118 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80130f0:	f001 f9c0 	bl	8014474 <sys_now>
 80130f4:	4602      	mov	r2, r0
 80130f6:	4b0b      	ldr	r3, [pc, #44]	; (8013124 <sys_timeouts_sleeptime+0x48>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	1ad3      	subs	r3, r2, r3
 80130fc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80130fe:	4b08      	ldr	r3, [pc, #32]	; (8013120 <sys_timeouts_sleeptime+0x44>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	685a      	ldr	r2, [r3, #4]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	429a      	cmp	r2, r3
 8013108:	d201      	bcs.n	801310e <sys_timeouts_sleeptime+0x32>
    return 0;
 801310a:	2300      	movs	r3, #0
 801310c:	e004      	b.n	8013118 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801310e:	4b04      	ldr	r3, [pc, #16]	; (8013120 <sys_timeouts_sleeptime+0x44>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	685a      	ldr	r2, [r3, #4]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	1ad3      	subs	r3, r2, r3
  }
}
 8013118:	4618      	mov	r0, r3
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	20004418 	.word	0x20004418
 8013124:	2000441c 	.word	0x2000441c

08013128 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8013132:	4b0f      	ldr	r3, [pc, #60]	; (8013170 <sys_timeouts_mbox_fetch+0x48>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d105      	bne.n	8013146 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801313a:	2200      	movs	r2, #0
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 fd13 	bl	8013b6a <sys_arch_mbox_fetch>
    return;
 8013144:	e011      	b.n	801316a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8013146:	f7ff ffc9 	bl	80130dc <sys_timeouts_sleeptime>
 801314a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d008      	beq.n	8013164 <sys_timeouts_mbox_fetch+0x3c>
 8013152:	68fa      	ldr	r2, [r7, #12]
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 fd07 	bl	8013b6a <sys_arch_mbox_fetch>
 801315c:	4603      	mov	r3, r0
 801315e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013162:	d102      	bne.n	801316a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013164:	f7ff ff68 	bl	8013038 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013168:	e7e3      	b.n	8013132 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	20004418 	.word	0x20004418

08013174 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013174:	b480      	push	{r7}
 8013176:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8013178:	bf00      	nop
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr
	...

08013184 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801318e:	4b17      	ldr	r3, [pc, #92]	; (80131ec <udp_new_port+0x68>)
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	1c5a      	adds	r2, r3, #1
 8013194:	b291      	uxth	r1, r2
 8013196:	4a15      	ldr	r2, [pc, #84]	; (80131ec <udp_new_port+0x68>)
 8013198:	8011      	strh	r1, [r2, #0]
 801319a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801319e:	4293      	cmp	r3, r2
 80131a0:	d103      	bne.n	80131aa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80131a2:	4b12      	ldr	r3, [pc, #72]	; (80131ec <udp_new_port+0x68>)
 80131a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80131a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80131aa:	4b11      	ldr	r3, [pc, #68]	; (80131f0 <udp_new_port+0x6c>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	603b      	str	r3, [r7, #0]
 80131b0:	e011      	b.n	80131d6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	8a5a      	ldrh	r2, [r3, #18]
 80131b6:	4b0d      	ldr	r3, [pc, #52]	; (80131ec <udp_new_port+0x68>)
 80131b8:	881b      	ldrh	r3, [r3, #0]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d108      	bne.n	80131d0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80131be:	88fb      	ldrh	r3, [r7, #6]
 80131c0:	3301      	adds	r3, #1
 80131c2:	80fb      	strh	r3, [r7, #6]
 80131c4:	88fb      	ldrh	r3, [r7, #6]
 80131c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80131ca:	d3e0      	bcc.n	801318e <udp_new_port+0xa>
        return 0;
 80131cc:	2300      	movs	r3, #0
 80131ce:	e007      	b.n	80131e0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	603b      	str	r3, [r7, #0]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d1ea      	bne.n	80131b2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80131dc:	4b03      	ldr	r3, [pc, #12]	; (80131ec <udp_new_port+0x68>)
 80131de:	881b      	ldrh	r3, [r3, #0]
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr
 80131ec:	20000018 	.word	0x20000018
 80131f0:	20007d44 	.word	0x20007d44

080131f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	4613      	mov	r3, r2
 8013200:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013202:	79fb      	ldrb	r3, [r7, #7]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d018      	beq.n	801323a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d013      	beq.n	8013236 <udp_input_local_match+0x42>
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00f      	beq.n	8013236 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013216:	4b14      	ldr	r3, [pc, #80]	; (8013268 <udp_input_local_match+0x74>)
 8013218:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801321a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801321e:	d00a      	beq.n	8013236 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	4b10      	ldr	r3, [pc, #64]	; (8013268 <udp_input_local_match+0x74>)
 8013226:	695b      	ldr	r3, [r3, #20]
 8013228:	405a      	eors	r2, r3
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	3308      	adds	r3, #8
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013232:	2b00      	cmp	r3, #0
 8013234:	d110      	bne.n	8013258 <udp_input_local_match+0x64>
          return 1;
 8013236:	2301      	movs	r3, #1
 8013238:	e00f      	b.n	801325a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d009      	beq.n	8013254 <udp_input_local_match+0x60>
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d005      	beq.n	8013254 <udp_input_local_match+0x60>
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	4b06      	ldr	r3, [pc, #24]	; (8013268 <udp_input_local_match+0x74>)
 801324e:	695b      	ldr	r3, [r3, #20]
 8013250:	429a      	cmp	r2, r3
 8013252:	d101      	bne.n	8013258 <udp_input_local_match+0x64>
      return 1;
 8013254:	2301      	movs	r3, #1
 8013256:	e000      	b.n	801325a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	20004480 	.word	0x20004480

0801326c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801326c:	b590      	push	{r4, r7, lr}
 801326e:	b08d      	sub	sp, #52	; 0x34
 8013270:	af02      	add	r7, sp, #8
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013276:	2300      	movs	r3, #0
 8013278:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	895b      	ldrh	r3, [r3, #10]
 801327e:	2b07      	cmp	r3, #7
 8013280:	d803      	bhi.n	801328a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7f9 fff8 	bl	800d278 <pbuf_free>
    goto end;
 8013288:	e0c6      	b.n	8013418 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013290:	4b63      	ldr	r3, [pc, #396]	; (8013420 <udp_input+0x1b4>)
 8013292:	695a      	ldr	r2, [r3, #20]
 8013294:	4b62      	ldr	r3, [pc, #392]	; (8013420 <udp_input+0x1b4>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	4619      	mov	r1, r3
 801329a:	4610      	mov	r0, r2
 801329c:	f7f7 ffec 	bl	800b278 <ip4_addr_isbroadcast_u32>
 80132a0:	4603      	mov	r3, r0
 80132a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	881b      	ldrh	r3, [r3, #0]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f4 fa9e 	bl	80077ec <lwip_htons>
 80132b0:	4603      	mov	r3, r0
 80132b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	885b      	ldrh	r3, [r3, #2]
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f4 fa96 	bl	80077ec <lwip_htons>
 80132c0:	4603      	mov	r3, r0
 80132c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80132c4:	2300      	movs	r3, #0
 80132c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80132c8:	2300      	movs	r3, #0
 80132ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80132cc:	2300      	movs	r3, #0
 80132ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132d0:	4b54      	ldr	r3, [pc, #336]	; (8013424 <udp_input+0x1b8>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	627b      	str	r3, [r7, #36]	; 0x24
 80132d6:	e03b      	b.n	8013350 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80132d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132da:	8a5b      	ldrh	r3, [r3, #18]
 80132dc:	89fa      	ldrh	r2, [r7, #14]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d131      	bne.n	8013346 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80132e2:	7cfb      	ldrb	r3, [r7, #19]
 80132e4:	461a      	mov	r2, r3
 80132e6:	6839      	ldr	r1, [r7, #0]
 80132e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132ea:	f7ff ff83 	bl	80131f4 <udp_input_local_match>
 80132ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d028      	beq.n	8013346 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80132f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f6:	7c1b      	ldrb	r3, [r3, #16]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d104      	bne.n	801330a <udp_input+0x9e>
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8013306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013308:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330c:	8a9b      	ldrh	r3, [r3, #20]
 801330e:	8a3a      	ldrh	r2, [r7, #16]
 8013310:	429a      	cmp	r2, r3
 8013312:	d118      	bne.n	8013346 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013316:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013318:	2b00      	cmp	r3, #0
 801331a:	d005      	beq.n	8013328 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331e:	685a      	ldr	r2, [r3, #4]
 8013320:	4b3f      	ldr	r3, [pc, #252]	; (8013420 <udp_input+0x1b4>)
 8013322:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013324:	429a      	cmp	r2, r3
 8013326:	d10e      	bne.n	8013346 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013328:	6a3b      	ldr	r3, [r7, #32]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d014      	beq.n	8013358 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013330:	68da      	ldr	r2, [r3, #12]
 8013332:	6a3b      	ldr	r3, [r7, #32]
 8013334:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013336:	4b3b      	ldr	r3, [pc, #236]	; (8013424 <udp_input+0x1b8>)
 8013338:	681a      	ldr	r2, [r3, #0]
 801333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801333e:	4a39      	ldr	r2, [pc, #228]	; (8013424 <udp_input+0x1b8>)
 8013340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013342:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013344:	e008      	b.n	8013358 <udp_input+0xec>
      }
    }

    prev = pcb;
 8013346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013348:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	627b      	str	r3, [r7, #36]	; 0x24
 8013350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013352:	2b00      	cmp	r3, #0
 8013354:	d1c0      	bne.n	80132d8 <udp_input+0x6c>
 8013356:	e000      	b.n	801335a <udp_input+0xee>
        break;
 8013358:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335c:	2b00      	cmp	r3, #0
 801335e:	d101      	bne.n	8013364 <udp_input+0xf8>
    pcb = uncon_pcb;
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013366:	2b00      	cmp	r3, #0
 8013368:	d002      	beq.n	8013370 <udp_input+0x104>
    for_us = 1;
 801336a:	2301      	movs	r3, #1
 801336c:	76fb      	strb	r3, [r7, #27]
 801336e:	e00a      	b.n	8013386 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	3304      	adds	r3, #4
 8013374:	681a      	ldr	r2, [r3, #0]
 8013376:	4b2a      	ldr	r3, [pc, #168]	; (8013420 <udp_input+0x1b4>)
 8013378:	695b      	ldr	r3, [r3, #20]
 801337a:	429a      	cmp	r2, r3
 801337c:	bf0c      	ite	eq
 801337e:	2301      	moveq	r3, #1
 8013380:	2300      	movne	r3, #0
 8013382:	b2db      	uxtb	r3, r3
 8013384:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013386:	7efb      	ldrb	r3, [r7, #27]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d042      	beq.n	8013412 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801338c:	f06f 0107 	mvn.w	r1, #7
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f7f9 ff4d 	bl	800d230 <pbuf_header>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00a      	beq.n	80133b2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801339c:	4b22      	ldr	r3, [pc, #136]	; (8013428 <udp_input+0x1bc>)
 801339e:	f240 1255 	movw	r2, #341	; 0x155
 80133a2:	4922      	ldr	r1, [pc, #136]	; (801342c <udp_input+0x1c0>)
 80133a4:	4822      	ldr	r0, [pc, #136]	; (8013430 <udp_input+0x1c4>)
 80133a6:	f001 fc9f 	bl	8014ce8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7f9 ff64 	bl	800d278 <pbuf_free>
      goto end;
 80133b0:	e032      	b.n	8013418 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80133b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d012      	beq.n	80133de <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80133b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ba:	699b      	ldr	r3, [r3, #24]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00a      	beq.n	80133d6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	699c      	ldr	r4, [r3, #24]
 80133c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c6:	69d8      	ldr	r0, [r3, #28]
 80133c8:	8a3b      	ldrh	r3, [r7, #16]
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	4b19      	ldr	r3, [pc, #100]	; (8013434 <udp_input+0x1c8>)
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80133d4:	e021      	b.n	801341a <udp_input+0x1ae>
        pbuf_free(p);
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f7f9 ff4e 	bl	800d278 <pbuf_free>
        goto end;
 80133dc:	e01c      	b.n	8013418 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80133de:	7cfb      	ldrb	r3, [r7, #19]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d112      	bne.n	801340a <udp_input+0x19e>
 80133e4:	4b0e      	ldr	r3, [pc, #56]	; (8013420 <udp_input+0x1b4>)
 80133e6:	695b      	ldr	r3, [r3, #20]
 80133e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80133ec:	2be0      	cmp	r3, #224	; 0xe0
 80133ee:	d00c      	beq.n	801340a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80133f0:	4b0b      	ldr	r3, [pc, #44]	; (8013420 <udp_input+0x1b4>)
 80133f2:	899b      	ldrh	r3, [r3, #12]
 80133f4:	3308      	adds	r3, #8
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	b21b      	sxth	r3, r3
 80133fa:	4619      	mov	r1, r3
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	f7f9 ff29 	bl	800d254 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013402:	2103      	movs	r1, #3
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7f7 fc1b 	bl	800ac40 <icmp_dest_unreach>
      pbuf_free(p);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f7f9 ff34 	bl	800d278 <pbuf_free>
  return;
 8013410:	e003      	b.n	801341a <udp_input+0x1ae>
    pbuf_free(p);
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f7f9 ff30 	bl	800d278 <pbuf_free>
  return;
 8013418:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801341a:	372c      	adds	r7, #44	; 0x2c
 801341c:	46bd      	mov	sp, r7
 801341e:	bd90      	pop	{r4, r7, pc}
 8013420:	20004480 	.word	0x20004480
 8013424:	20007d44 	.word	0x20007d44
 8013428:	080187bc 	.word	0x080187bc
 801342c:	080187ec 	.word	0x080187ec
 8013430:	08018800 	.word	0x08018800
 8013434:	20004490 	.word	0x20004490

08013438 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b088      	sub	sp, #32
 801343c:	af02      	add	r7, sp, #8
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	607a      	str	r2, [r7, #4]
 8013444:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d002      	beq.n	8013456 <udp_sendto+0x1e>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <udp_sendto+0x24>
    return ERR_VAL;
 8013456:	f06f 0305 	mvn.w	r3, #5
 801345a:	e013      	b.n	8013484 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801345c:	6978      	ldr	r0, [r7, #20]
 801345e:	f7f7 fc77 	bl	800ad50 <ip4_route>
 8013462:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d102      	bne.n	8013470 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801346a:	f06f 0303 	mvn.w	r3, #3
 801346e:	e009      	b.n	8013484 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013470:	887a      	ldrh	r2, [r7, #2]
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	9300      	str	r3, [sp, #0]
 8013476:	4613      	mov	r3, r2
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	68b9      	ldr	r1, [r7, #8]
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f000 f805 	bl	801348c <udp_sendto_if>
 8013482:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013484:	4618      	mov	r0, r3
 8013486:	3718      	adds	r7, #24
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b088      	sub	sp, #32
 8013490:	af02      	add	r7, sp, #8
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	607a      	str	r2, [r7, #4]
 8013498:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d002      	beq.n	80134a6 <udp_sendto_if+0x1a>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <udp_sendto_if+0x20>
    return ERR_VAL;
 80134a6:	f06f 0305 	mvn.w	r3, #5
 80134aa:	e028      	b.n	80134fe <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d009      	beq.n	80134c6 <udp_sendto_if+0x3a>
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d005      	beq.n	80134c6 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134c2:	2be0      	cmp	r3, #224	; 0xe0
 80134c4:	d103      	bne.n	80134ce <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	3304      	adds	r3, #4
 80134ca:	617b      	str	r3, [r7, #20]
 80134cc:	e00b      	b.n	80134e6 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	3304      	adds	r3, #4
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d002      	beq.n	80134e2 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 80134dc:	f06f 0303 	mvn.w	r3, #3
 80134e0:	e00d      	b.n	80134fe <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80134e6:	887a      	ldrh	r2, [r7, #2]
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	6a3b      	ldr	r3, [r7, #32]
 80134ee:	9300      	str	r3, [sp, #0]
 80134f0:	4613      	mov	r3, r2
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	68b9      	ldr	r1, [r7, #8]
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f000 f806 	bl	8013508 <udp_sendto_if_src>
 80134fc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3718      	adds	r7, #24
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
	...

08013508 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b08c      	sub	sp, #48	; 0x30
 801350c:	af04      	add	r7, sp, #16
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
 8013514:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d002      	beq.n	8013522 <udp_sendto_if_src+0x1a>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d102      	bne.n	8013528 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8013522:	f06f 0305 	mvn.w	r3, #5
 8013526:	e07e      	b.n	8013626 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	8a5b      	ldrh	r3, [r3, #18]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d10f      	bne.n	8013550 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013530:	68f9      	ldr	r1, [r7, #12]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	8a5b      	ldrh	r3, [r3, #18]
 8013536:	461a      	mov	r2, r3
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f000 f87f 	bl	801363c <udp_bind>
 801353e:	4603      	mov	r3, r0
 8013540:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013542:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d002      	beq.n	8013550 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801354a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801354e:	e06a      	b.n	8013626 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8013550:	2108      	movs	r1, #8
 8013552:	68b8      	ldr	r0, [r7, #8]
 8013554:	f7f9 fe6c 	bl	800d230 <pbuf_header>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d014      	beq.n	8013588 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801355e:	2200      	movs	r2, #0
 8013560:	2108      	movs	r1, #8
 8013562:	2001      	movs	r0, #1
 8013564:	f7f9 fb16 	bl	800cb94 <pbuf_alloc>
 8013568:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d102      	bne.n	8013576 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013574:	e057      	b.n	8013626 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	891b      	ldrh	r3, [r3, #8]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d006      	beq.n	801358c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801357e:	68b9      	ldr	r1, [r7, #8]
 8013580:	69f8      	ldr	r0, [r7, #28]
 8013582:	f7f9 ffa9 	bl	800d4d8 <pbuf_chain>
 8013586:	e001      	b.n	801358c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	895b      	ldrh	r3, [r3, #10]
 8013590:	2b07      	cmp	r3, #7
 8013592:	d806      	bhi.n	80135a2 <udp_sendto_if_src+0x9a>
 8013594:	4b26      	ldr	r3, [pc, #152]	; (8013630 <udp_sendto_if_src+0x128>)
 8013596:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801359a:	4926      	ldr	r1, [pc, #152]	; (8013634 <udp_sendto_if_src+0x12c>)
 801359c:	4826      	ldr	r0, [pc, #152]	; (8013638 <udp_sendto_if_src+0x130>)
 801359e:	f001 fba3 	bl	8014ce8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	8a5b      	ldrh	r3, [r3, #18]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7f4 f91d 	bl	80077ec <lwip_htons>
 80135b2:	4603      	mov	r3, r0
 80135b4:	461a      	mov	r2, r3
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80135ba:	887b      	ldrh	r3, [r7, #2]
 80135bc:	4618      	mov	r0, r3
 80135be:	f7f4 f915 	bl	80077ec <lwip_htons>
 80135c2:	4603      	mov	r3, r0
 80135c4:	461a      	mov	r2, r3
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	2200      	movs	r2, #0
 80135ce:	719a      	strb	r2, [r3, #6]
 80135d0:	2200      	movs	r2, #0
 80135d2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	891b      	ldrh	r3, [r3, #8]
 80135d8:	4618      	mov	r0, r3
 80135da:	f7f4 f907 	bl	80077ec <lwip_htons>
 80135de:	4603      	mov	r3, r0
 80135e0:	461a      	mov	r2, r3
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80135e6:	2311      	movs	r3, #17
 80135e8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	7a9b      	ldrb	r3, [r3, #10]
 80135ee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	7a5b      	ldrb	r3, [r3, #9]
 80135f4:	7cb9      	ldrb	r1, [r7, #18]
 80135f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135f8:	9202      	str	r2, [sp, #8]
 80135fa:	7cfa      	ldrb	r2, [r7, #19]
 80135fc:	9201      	str	r2, [sp, #4]
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	460b      	mov	r3, r1
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013606:	69f8      	ldr	r0, [r7, #28]
 8013608:	f7f7 fd8e 	bl	800b128 <ip4_output_if_src>
 801360c:	4603      	mov	r3, r0
 801360e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013610:	69fa      	ldr	r2, [r7, #28]
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	429a      	cmp	r2, r3
 8013616:	d004      	beq.n	8013622 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8013618:	69f8      	ldr	r0, [r7, #28]
 801361a:	f7f9 fe2d 	bl	800d278 <pbuf_free>
    q = NULL;
 801361e:	2300      	movs	r3, #0
 8013620:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013622:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013626:	4618      	mov	r0, r3
 8013628:	3720      	adds	r7, #32
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	080187bc 	.word	0x080187bc
 8013634:	08018828 	.word	0x08018828
 8013638:	08018800 	.word	0x08018800

0801363c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	4613      	mov	r3, r2
 8013648:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d101      	bne.n	8013654 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013650:	4b30      	ldr	r3, [pc, #192]	; (8013714 <udp_bind+0xd8>)
 8013652:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d002      	beq.n	8013660 <udp_bind+0x24>
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d102      	bne.n	8013666 <udp_bind+0x2a>
    return ERR_VAL;
 8013660:	f06f 0305 	mvn.w	r3, #5
 8013664:	e052      	b.n	801370c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801366a:	4b2b      	ldr	r3, [pc, #172]	; (8013718 <udp_bind+0xdc>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	617b      	str	r3, [r7, #20]
 8013670:	e009      	b.n	8013686 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013672:	68fa      	ldr	r2, [r7, #12]
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	429a      	cmp	r2, r3
 8013678:	d102      	bne.n	8013680 <udp_bind+0x44>
      rebind = 1;
 801367a:	2301      	movs	r3, #1
 801367c:	74fb      	strb	r3, [r7, #19]
      break;
 801367e:	e005      	b.n	801368c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	617b      	str	r3, [r7, #20]
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d1f2      	bne.n	8013672 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801368c:	88fb      	ldrh	r3, [r7, #6]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d109      	bne.n	80136a6 <udp_bind+0x6a>
    port = udp_new_port();
 8013692:	f7ff fd77 	bl	8013184 <udp_new_port>
 8013696:	4603      	mov	r3, r0
 8013698:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801369a:	88fb      	ldrh	r3, [r7, #6]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d11e      	bne.n	80136de <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80136a0:	f06f 0307 	mvn.w	r3, #7
 80136a4:	e032      	b.n	801370c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136a6:	4b1c      	ldr	r3, [pc, #112]	; (8013718 <udp_bind+0xdc>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	617b      	str	r3, [r7, #20]
 80136ac:	e014      	b.n	80136d8 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d00d      	beq.n	80136d2 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	8a5b      	ldrh	r3, [r3, #18]
 80136ba:	88fa      	ldrh	r2, [r7, #6]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d108      	bne.n	80136d2 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d102      	bne.n	80136d2 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80136cc:	f06f 0307 	mvn.w	r3, #7
 80136d0:	e01c      	b.n	801370c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	617b      	str	r3, [r7, #20]
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d1e7      	bne.n	80136ae <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <udp_bind+0xae>
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	e000      	b.n	80136ec <udp_bind+0xb0>
 80136ea:	2300      	movs	r3, #0
 80136ec:	68fa      	ldr	r2, [r7, #12]
 80136ee:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	88fa      	ldrh	r2, [r7, #6]
 80136f4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80136f6:	7cfb      	ldrb	r3, [r7, #19]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d106      	bne.n	801370a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80136fc:	4b06      	ldr	r3, [pc, #24]	; (8013718 <udp_bind+0xdc>)
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013704:	4a04      	ldr	r2, [pc, #16]	; (8013718 <udp_bind+0xdc>)
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801370a:	2300      	movs	r3, #0
}
 801370c:	4618      	mov	r0, r3
 801370e:	3718      	adds	r7, #24
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	080189c4 	.word	0x080189c4
 8013718:	20007d44 	.word	0x20007d44

0801371c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	4613      	mov	r3, r2
 8013728:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d002      	beq.n	8013736 <udp_connect+0x1a>
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d102      	bne.n	801373c <udp_connect+0x20>
    return ERR_VAL;
 8013736:	f06f 0305 	mvn.w	r3, #5
 801373a:	e03e      	b.n	80137ba <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	8a5b      	ldrh	r3, [r3, #18]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d10f      	bne.n	8013764 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013744:	68f9      	ldr	r1, [r7, #12]
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	8a5b      	ldrh	r3, [r3, #18]
 801374a:	461a      	mov	r2, r3
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f7ff ff75 	bl	801363c <udp_bind>
 8013752:	4603      	mov	r3, r0
 8013754:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d002      	beq.n	8013764 <udp_connect+0x48>
      return err;
 801375e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013762:	e02a      	b.n	80137ba <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d002      	beq.n	8013770 <udp_connect+0x54>
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	e000      	b.n	8013772 <udp_connect+0x56>
 8013770:	2300      	movs	r3, #0
 8013772:	68fa      	ldr	r2, [r7, #12]
 8013774:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	88fa      	ldrh	r2, [r7, #6]
 801377a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	7c1b      	ldrb	r3, [r3, #16]
 8013780:	f043 0304 	orr.w	r3, r3, #4
 8013784:	b2da      	uxtb	r2, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801378a:	4b0e      	ldr	r3, [pc, #56]	; (80137c4 <udp_connect+0xa8>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	617b      	str	r3, [r7, #20]
 8013790:	e008      	b.n	80137a4 <udp_connect+0x88>
    if (pcb == ipcb) {
 8013792:	68fa      	ldr	r2, [r7, #12]
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	429a      	cmp	r2, r3
 8013798:	d101      	bne.n	801379e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801379a:	2300      	movs	r3, #0
 801379c:	e00d      	b.n	80137ba <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	68db      	ldr	r3, [r3, #12]
 80137a2:	617b      	str	r3, [r7, #20]
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d1f3      	bne.n	8013792 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80137aa:	4b06      	ldr	r3, [pc, #24]	; (80137c4 <udp_connect+0xa8>)
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80137b2:	4a04      	ldr	r2, [pc, #16]	; (80137c4 <udp_connect+0xa8>)
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3718      	adds	r7, #24
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	bf00      	nop
 80137c4:	20007d44 	.word	0x20007d44

080137c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	68ba      	ldr	r2, [r7, #8]
 80137d8:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	61da      	str	r2, [r3, #28]
}
 80137e0:	bf00      	nop
 80137e2:	3714      	adds	r7, #20
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr

080137ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80137f4:	4b15      	ldr	r3, [pc, #84]	; (801384c <udp_remove+0x60>)
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	429a      	cmp	r2, r3
 80137fc:	d105      	bne.n	801380a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80137fe:	4b13      	ldr	r3, [pc, #76]	; (801384c <udp_remove+0x60>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	4a11      	ldr	r2, [pc, #68]	; (801384c <udp_remove+0x60>)
 8013806:	6013      	str	r3, [r2, #0]
 8013808:	e017      	b.n	801383a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801380a:	4b10      	ldr	r3, [pc, #64]	; (801384c <udp_remove+0x60>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	60fb      	str	r3, [r7, #12]
 8013810:	e010      	b.n	8013834 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	68db      	ldr	r3, [r3, #12]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d009      	beq.n	801382e <udp_remove+0x42>
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	68da      	ldr	r2, [r3, #12]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	429a      	cmp	r2, r3
 8013822:	d104      	bne.n	801382e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	68da      	ldr	r2, [r3, #12]
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	60da      	str	r2, [r3, #12]
        break;
 801382c:	e005      	b.n	801383a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d1eb      	bne.n	8013812 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801383a:	6879      	ldr	r1, [r7, #4]
 801383c:	2000      	movs	r0, #0
 801383e:	f7f8 ffb9 	bl	800c7b4 <memp_free>
}
 8013842:	bf00      	nop
 8013844:	3710      	adds	r7, #16
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	20007d44 	.word	0x20007d44

08013850 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b082      	sub	sp, #8
 8013854:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013856:	2000      	movs	r0, #0
 8013858:	f7f8 ff5a 	bl	800c710 <memp_malloc>
 801385c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d007      	beq.n	8013874 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013864:	2220      	movs	r2, #32
 8013866:	2100      	movs	r1, #0
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f001 fa35 	bl	8014cd8 <memset>
    pcb->ttl = UDP_TTL;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	22ff      	movs	r2, #255	; 0xff
 8013872:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013874:	687b      	ldr	r3, [r7, #4]
}
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801387e:	b580      	push	{r7, lr}
 8013880:	b084      	sub	sp, #16
 8013882:	af00      	add	r7, sp, #0
 8013884:	4603      	mov	r3, r0
 8013886:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8013888:	f7ff ffe2 	bl	8013850 <udp_new>
 801388c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801388e:	68fb      	ldr	r3, [r7, #12]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8013898:	b480      	push	{r7}
 801389a:	b085      	sub	sp, #20
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d01e      	beq.n	80138e6 <udp_netif_ip_addr_changed+0x4e>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d01a      	beq.n	80138e6 <udp_netif_ip_addr_changed+0x4e>
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d017      	beq.n	80138e6 <udp_netif_ip_addr_changed+0x4e>
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d013      	beq.n	80138e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80138be:	4b0d      	ldr	r3, [pc, #52]	; (80138f4 <udp_netif_ip_addr_changed+0x5c>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	e00c      	b.n	80138e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d103      	bne.n	80138da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d1ef      	bne.n	80138c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80138e6:	bf00      	nop
 80138e8:	3714      	adds	r7, #20
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr
 80138f2:	bf00      	nop
 80138f4:	20007d44 	.word	0x20007d44

080138f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b086      	sub	sp, #24
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013902:	230e      	movs	r3, #14
 8013904:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	895b      	ldrh	r3, [r3, #10]
 801390a:	2b0e      	cmp	r3, #14
 801390c:	d977      	bls.n	80139fe <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	7b1a      	ldrb	r2, [r3, #12]
 8013918:	7b5b      	ldrb	r3, [r3, #13]
 801391a:	021b      	lsls	r3, r3, #8
 801391c:	4313      	orrs	r3, r2
 801391e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	f003 0301 	and.w	r3, r3, #1
 8013928:	2b00      	cmp	r3, #0
 801392a:	d023      	beq.n	8013974 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801392c:	693b      	ldr	r3, [r7, #16]
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d10f      	bne.n	8013954 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	785b      	ldrb	r3, [r3, #1]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d11b      	bne.n	8013974 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013940:	2b5e      	cmp	r3, #94	; 0x5e
 8013942:	d117      	bne.n	8013974 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	7b5b      	ldrb	r3, [r3, #13]
 8013948:	f043 0310 	orr.w	r3, r3, #16
 801394c:	b2da      	uxtb	r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	735a      	strb	r2, [r3, #13]
 8013952:	e00f      	b.n	8013974 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	2206      	movs	r2, #6
 8013958:	492f      	ldr	r1, [pc, #188]	; (8013a18 <ethernet_input+0x120>)
 801395a:	4618      	mov	r0, r3
 801395c:	f001 f9a2 	bl	8014ca4 <memcmp>
 8013960:	4603      	mov	r3, r0
 8013962:	2b00      	cmp	r3, #0
 8013964:	d106      	bne.n	8013974 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	7b5b      	ldrb	r3, [r3, #13]
 801396a:	f043 0308 	orr.w	r3, r3, #8
 801396e:	b2da      	uxtb	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013974:	89fb      	ldrh	r3, [r7, #14]
 8013976:	2b08      	cmp	r3, #8
 8013978:	d003      	beq.n	8013982 <ethernet_input+0x8a>
 801397a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801397e:	d01e      	beq.n	80139be <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013980:	e042      	b.n	8013a08 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013988:	f003 0308 	and.w	r3, r3, #8
 801398c:	2b00      	cmp	r3, #0
 801398e:	d038      	beq.n	8013a02 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	895b      	ldrh	r3, [r3, #10]
 8013994:	461a      	mov	r2, r3
 8013996:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801399a:	429a      	cmp	r2, r3
 801399c:	db34      	blt.n	8013a08 <ethernet_input+0x110>
 801399e:	8afb      	ldrh	r3, [r7, #22]
 80139a0:	425b      	negs	r3, r3
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	b21b      	sxth	r3, r3
 80139a6:	4619      	mov	r1, r3
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f7f9 fc41 	bl	800d230 <pbuf_header>
 80139ae:	4603      	mov	r3, r0
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d129      	bne.n	8013a08 <ethernet_input+0x110>
        ip4_input(p, netif);
 80139b4:	6839      	ldr	r1, [r7, #0]
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7f7 fa32 	bl	800ae20 <ip4_input>
      break;
 80139bc:	e01d      	b.n	80139fa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80139c4:	f003 0308 	and.w	r3, r3, #8
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d01c      	beq.n	8013a06 <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	895b      	ldrh	r3, [r3, #10]
 80139d0:	461a      	mov	r2, r3
 80139d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	db16      	blt.n	8013a08 <ethernet_input+0x110>
 80139da:	8afb      	ldrh	r3, [r7, #22]
 80139dc:	425b      	negs	r3, r3
 80139de:	b29b      	uxth	r3, r3
 80139e0:	b21b      	sxth	r3, r3
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7f9 fc23 	bl	800d230 <pbuf_header>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d10b      	bne.n	8013a08 <ethernet_input+0x110>
        etharp_input(p, netif);
 80139f0:	6839      	ldr	r1, [r7, #0]
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7f6 fbfe 	bl	800a1f4 <etharp_input>
      break;
 80139f8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80139fa:	2300      	movs	r3, #0
 80139fc:	e008      	b.n	8013a10 <ethernet_input+0x118>
    goto free_and_return;
 80139fe:	bf00      	nop
 8013a00:	e002      	b.n	8013a08 <ethernet_input+0x110>
        goto free_and_return;
 8013a02:	bf00      	nop
 8013a04:	e000      	b.n	8013a08 <ethernet_input+0x110>
        goto free_and_return;
 8013a06:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f7f9 fc35 	bl	800d278 <pbuf_free>
  return ERR_OK;
 8013a0e:	2300      	movs	r3, #0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3718      	adds	r7, #24
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	08018b04 	.word	0x08018b04

08013a1c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b086      	sub	sp, #24
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	607a      	str	r2, [r7, #4]
 8013a28:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013a2a:	8c3b      	ldrh	r3, [r7, #32]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7f3 fedd 	bl	80077ec <lwip_htons>
 8013a32:	4603      	mov	r3, r0
 8013a34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013a36:	210e      	movs	r1, #14
 8013a38:	68b8      	ldr	r0, [r7, #8]
 8013a3a:	f7f9 fbf9 	bl	800d230 <pbuf_header>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d125      	bne.n	8013a90 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	8afa      	ldrh	r2, [r7, #22]
 8013a4e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	2206      	movs	r2, #6
 8013a54:	6839      	ldr	r1, [r7, #0]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f001 f933 	bl	8014cc2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	3306      	adds	r3, #6
 8013a60:	2206      	movs	r2, #6
 8013a62:	6879      	ldr	r1, [r7, #4]
 8013a64:	4618      	mov	r0, r3
 8013a66:	f001 f92c 	bl	8014cc2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a70:	2b06      	cmp	r3, #6
 8013a72:	d006      	beq.n	8013a82 <ethernet_output+0x66>
 8013a74:	4b0a      	ldr	r3, [pc, #40]	; (8013aa0 <ethernet_output+0x84>)
 8013a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013a7a:	490a      	ldr	r1, [pc, #40]	; (8013aa4 <ethernet_output+0x88>)
 8013a7c:	480a      	ldr	r0, [pc, #40]	; (8013aa8 <ethernet_output+0x8c>)
 8013a7e:	f001 f933 	bl	8014ce8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	699b      	ldr	r3, [r3, #24]
 8013a86:	68b9      	ldr	r1, [r7, #8]
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	4798      	blx	r3
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	e002      	b.n	8013a96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013a90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013a92:	f06f 0301 	mvn.w	r3, #1
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	08018858 	.word	0x08018858
 8013aa4:	08018890 	.word	0x08018890
 8013aa8:	080188c4 	.word	0x080188c4

08013aac <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b084      	sub	sp, #16
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	60bb      	str	r3, [r7, #8]
 8013aba:	2304      	movs	r3, #4
 8013abc:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013abe:	f107 0308 	add.w	r3, r7, #8
 8013ac2:	2100      	movs	r1, #0
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ef fa02 	bl	8002ece <osMessageCreate>
 8013aca:	4602      	mov	r2, r0
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d102      	bne.n	8013ade <sys_mbox_new+0x32>
  return ERR_MEM;
 8013ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013adc:	e000      	b.n	8013ae0 <sys_mbox_new+0x34>
 
 return ERR_OK;
 8013ade:	2300      	movs	r3, #0
}
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3710      	adds	r7, #16
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7ef fabc 	bl	8003072 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7ef facd 	bl	800309e <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8013b16:	bf00      	nop
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	6839      	ldr	r1, [r7, #0]
 8013b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7ef f9e6 	bl	8002ef4 <osMessagePut>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1f4      	bne.n	8013b18 <sys_mbox_post+0xc>
}
 8013b2e:	bf00      	nop
 8013b30:	3708      	adds	r7, #8
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013b36:	b580      	push	{r7, lr}
 8013b38:	b084      	sub	sp, #16
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	6078      	str	r0, [r7, #4]
 8013b3e:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	6839      	ldr	r1, [r7, #0]
 8013b46:	2200      	movs	r2, #0
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7ef f9d3 	bl	8002ef4 <osMessagePut>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d102      	bne.n	8013b5a <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	73fb      	strb	r3, [r7, #15]
 8013b58:	e001      	b.n	8013b5e <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8013b5a:	23ff      	movs	r3, #255	; 0xff
 8013b5c:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8013b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3710      	adds	r7, #16
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b08c      	sub	sp, #48	; 0x30
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	61f8      	str	r0, [r7, #28]
 8013b72:	61b9      	str	r1, [r7, #24]
 8013b74:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8013b76:	f7ef f816 	bl	8002ba6 <osKernelSysTick>
 8013b7a:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d017      	beq.n	8013bb2 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	6819      	ldr	r1, [r3, #0]
 8013b86:	f107 0320 	add.w	r3, r7, #32
 8013b8a:	697a      	ldr	r2, [r7, #20]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ef f9f1 	bl	8002f74 <osMessageGet>
    
    if(event.status == osEventMessage)
 8013b92:	6a3b      	ldr	r3, [r7, #32]
 8013b94:	2b10      	cmp	r3, #16
 8013b96:	d109      	bne.n	8013bac <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013ba0:	f7ef f801 	bl	8002ba6 <osKernelSysTick>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba8:	1ad3      	subs	r3, r2, r3
 8013baa:	e019      	b.n	8013be0 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb0:	e016      	b.n	8013be0 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	6819      	ldr	r1, [r3, #0]
 8013bb6:	463b      	mov	r3, r7
 8013bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7ef f9d9 	bl	8002f74 <osMessageGet>
 8013bc2:	f107 0320 	add.w	r3, r7, #32
 8013bc6:	463a      	mov	r2, r7
 8013bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8013bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013bd6:	f7ee ffe6 	bl	8002ba6 <osKernelSysTick>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bde:	1ad3      	subs	r3, r2, r3
  }
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3730      	adds	r7, #48	; 0x30
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b086      	sub	sp, #24
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6819      	ldr	r1, [r3, #0]
 8013bf6:	f107 030c 	add.w	r3, r7, #12
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ef f9b9 	bl	8002f74 <osMessageGet>
  
  if(event.status == osEventMessage)
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2b10      	cmp	r3, #16
 8013c06:	d105      	bne.n	8013c14 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8013c10:	2300      	movs	r3, #0
 8013c12:	e001      	b.n	8013c18 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8013c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3718      	adds	r7, #24
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d101      	bne.n	8013c34 <sys_mbox_valid+0x14>
    return 0;
 8013c30:	2300      	movs	r3, #0
 8013c32:	e000      	b.n	8013c36 <sys_mbox_valid+0x16>
  else
    return 1;
 8013c34:	2301      	movs	r3, #1
}                                             
 8013c36:	4618      	mov	r0, r3
 8013c38:	370c      	adds	r7, #12
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr

08013c42 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 8013c42:	b480      	push	{r7}
 8013c44:	b083      	sub	sp, #12
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	601a      	str	r2, [r3, #0]
}                                             
 8013c50:	bf00      	nop
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	460b      	mov	r3, r1
 8013c66:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8013c68:	2300      	movs	r3, #0
 8013c6a:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8013c6c:	f107 030c 	add.w	r3, r7, #12
 8013c70:	2101      	movs	r1, #1
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ef f874 	bl	8002d60 <osSemaphoreCreate>
 8013c78:	4602      	mov	r2, r0
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d102      	bne.n	8013c8c <sys_sem_new+0x30>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 8013c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c8a:	e009      	b.n	8013ca0 <sys_sem_new+0x44>
  }
	
  if(count == 0)	// Means it can't be taken
 8013c8c:	78fb      	ldrb	r3, [r7, #3]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d105      	bne.n	8013c9e <sys_sem_new+0x42>
  {
    osSemaphoreWait(*sem,0);
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2100      	movs	r1, #0
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ef f87f 	bl	8002d9c <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8013c9e:	2300      	movs	r3, #0
}
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 8013cb2:	f7ee ff78 	bl	8002ba6 <osKernelSysTick>
 8013cb6:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d011      	beq.n	8013ce2 <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	6839      	ldr	r1, [r7, #0]
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7ef f869 	bl	8002d9c <osSemaphoreWait>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d105      	bne.n	8013cdc <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8013cd0:	f7ee ff69 	bl	8002ba6 <osKernelSysTick>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	e012      	b.n	8013d02 <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ce0:	e00f      	b.n	8013d02 <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8013ce2:	bf00      	nop
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ef f855 	bl	8002d9c <osSemaphoreWait>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d1f5      	bne.n	8013ce4 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8013cf8:	f7ee ff55 	bl	8002ba6 <osKernelSysTick>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	1ad3      	subs	r3, r2, r3
  }
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b082      	sub	sp, #8
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7ef f890 	bl	8002e3c <osSemaphoreRelease>
}
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7ef f8b9 	bl	8002ea8 <osSemaphoreDelete>
}
 8013d36:	bf00      	nop
 8013d38:	3708      	adds	r7, #8
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 8013d3e:	b480      	push	{r7}
 8013d40:	b083      	sub	sp, #12
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d101      	bne.n	8013d52 <sys_sem_valid+0x14>
    return 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e000      	b.n	8013d54 <sys_sem_valid+0x16>
  else
    return 1;                                       
 8013d52:	2301      	movs	r3, #1
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	370c      	adds	r7, #12
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5e:	4770      	bx	lr

08013d60 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	601a      	str	r2, [r3, #0]
} 
 8013d6e:	bf00      	nop
 8013d70:	370c      	adds	r7, #12
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr
	...

08013d7c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013d80:	4803      	ldr	r0, [pc, #12]	; (8013d90 <sys_init+0x14>)
 8013d82:	f7ee ff5b 	bl	8002c3c <osMutexCreate>
 8013d86:	4602      	mov	r2, r0
 8013d88:	4b02      	ldr	r3, [pc, #8]	; (8013d94 <sys_init+0x18>)
 8013d8a:	601a      	str	r2, [r3, #0]
}
 8013d8c:	bf00      	nop
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	08018b14 	.word	0x08018b14
 8013d94:	20007d4c 	.word	0x20007d4c

08013d98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8013da0:	2300      	movs	r3, #0
 8013da2:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013da4:	f107 030c 	add.w	r3, r7, #12
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ee ff47 	bl	8002c3c <osMutexCreate>
 8013dae:	4602      	mov	r2, r0
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d102      	bne.n	8013dc2 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8013dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dc0:	e000      	b.n	8013dc4 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b082      	sub	sp, #8
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7ee ff39 	bl	8002c54 <osMutexWait>
}
 8013de2:	bf00      	nop
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}

08013dea <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013dea:	b580      	push	{r7, lr}
 8013dec:	b082      	sub	sp, #8
 8013dee:	af00      	add	r7, sp, #0
 8013df0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f7ee ff7c 	bl	8002cf4 <osMutexRelease>
}
 8013dfc:	bf00      	nop
 8013dfe:	3708      	adds	r7, #8
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}

08013e04 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b08a      	sub	sp, #40	; 0x28
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	607a      	str	r2, [r7, #4]
 8013e10:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	617b      	str	r3, [r7, #20]
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	61bb      	str	r3, [r7, #24]
 8013e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e1c:	b21b      	sxth	r3, r3
 8013e1e:	83bb      	strh	r3, [r7, #28]
 8013e20:	2300      	movs	r3, #0
 8013e22:	623b      	str	r3, [r7, #32]
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013e28:	f107 0314 	add.w	r3, r7, #20
 8013e2c:	6879      	ldr	r1, [r7, #4]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ee fec9 	bl	8002bc6 <osThreadCreate>
 8013e34:	4603      	mov	r3, r0
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3728      	adds	r7, #40	; 0x28
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
	...

08013e40 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013e44:	4b04      	ldr	r3, [pc, #16]	; (8013e58 <sys_arch_protect+0x18>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7ee ff01 	bl	8002c54 <osMutexWait>
  return (sys_prot_t)1;
 8013e52:	2301      	movs	r3, #1
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	bd80      	pop	{r7, pc}
 8013e58:	20007d4c 	.word	0x20007d4c

08013e5c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013e64:	4b04      	ldr	r3, [pc, #16]	; (8013e78 <sys_arch_unprotect+0x1c>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ee ff43 	bl	8002cf4 <osMutexRelease>
}
 8013e6e:	bf00      	nop
 8013e70:	3708      	adds	r7, #8
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	20007d4c 	.word	0x20007d4c

08013e7c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b08a      	sub	sp, #40	; 0x28
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4a34      	ldr	r2, [pc, #208]	; (8013f5c <HAL_ETH_MspInit+0xe0>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d162      	bne.n	8013f54 <HAL_ETH_MspInit+0xd8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8013e8e:	2300      	movs	r3, #0
 8013e90:	613b      	str	r3, [r7, #16]
 8013e92:	4a33      	ldr	r2, [pc, #204]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013e94:	4b32      	ldr	r3, [pc, #200]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8013e9e:	4b30      	ldr	r3, [pc, #192]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013ea6:	613b      	str	r3, [r7, #16]
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	2300      	movs	r3, #0
 8013eac:	60fb      	str	r3, [r7, #12]
 8013eae:	4a2c      	ldr	r2, [pc, #176]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013eb0:	4b2b      	ldr	r3, [pc, #172]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8013eba:	4b29      	ldr	r3, [pc, #164]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013ec2:	60fb      	str	r3, [r7, #12]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	60bb      	str	r3, [r7, #8]
 8013eca:	4a25      	ldr	r2, [pc, #148]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013ecc:	4b24      	ldr	r3, [pc, #144]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8013ed6:	4b22      	ldr	r3, [pc, #136]	; (8013f60 <HAL_ETH_MspInit+0xe4>)
 8013ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013ede:	60bb      	str	r3, [r7, #8]
 8013ee0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8013ee2:	2332      	movs	r3, #50	; 0x32
 8013ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ee6:	2302      	movs	r3, #2
 8013ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013eea:	2301      	movs	r3, #1
 8013eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013eee:	2303      	movs	r3, #3
 8013ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013ef2:	230b      	movs	r3, #11
 8013ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ef6:	f107 0314 	add.w	r3, r7, #20
 8013efa:	4619      	mov	r1, r3
 8013efc:	4819      	ldr	r0, [pc, #100]	; (8013f64 <HAL_ETH_MspInit+0xe8>)
 8013efe:	f7ed fd13 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8013f02:	2386      	movs	r3, #134	; 0x86
 8013f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f06:	2302      	movs	r3, #2
 8013f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f0e:	2303      	movs	r3, #3
 8013f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013f12:	230b      	movs	r3, #11
 8013f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f16:	f107 0314 	add.w	r3, r7, #20
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	4812      	ldr	r0, [pc, #72]	; (8013f68 <HAL_ETH_MspInit+0xec>)
 8013f1e:	f7ed fd03 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8013f22:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8013f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f28:	2302      	movs	r3, #2
 8013f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f30:	2303      	movs	r3, #3
 8013f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013f34:	230b      	movs	r3, #11
 8013f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013f38:	f107 0314 	add.w	r3, r7, #20
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	480b      	ldr	r0, [pc, #44]	; (8013f6c <HAL_ETH_MspInit+0xf0>)
 8013f40:	f7ed fcf2 	bl	8001928 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8013f44:	2200      	movs	r2, #0
 8013f46:	2105      	movs	r1, #5
 8013f48:	203d      	movs	r0, #61	; 0x3d
 8013f4a:	f7ec fc8a 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8013f4e:	203d      	movs	r0, #61	; 0x3d
 8013f50:	f7ec fca3 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8013f54:	bf00      	nop
 8013f56:	3728      	adds	r7, #40	; 0x28
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	40028000 	.word	0x40028000
 8013f60:	40023800 	.word	0x40023800
 8013f64:	40020800 	.word	0x40020800
 8013f68:	40020000 	.word	0x40020000
 8013f6c:	40021800 	.word	0x40021800

08013f70 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8013f78:	4b04      	ldr	r3, [pc, #16]	; (8013f8c <HAL_ETH_RxCpltCallback+0x1c>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7ee ff5d 	bl	8002e3c <osSemaphoreRelease>
}
 8013f82:	bf00      	nop
 8013f84:	3708      	adds	r7, #8
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20004424 	.word	0x20004424

08013f90 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8013f90:	b5b0      	push	{r4, r5, r7, lr}
 8013f92:	b08c      	sub	sp, #48	; 0x30
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8013f9c:	4b5a      	ldr	r3, [pc, #360]	; (8014108 <low_level_init+0x178>)
 8013f9e:	4a5b      	ldr	r2, [pc, #364]	; (801410c <low_level_init+0x17c>)
 8013fa0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013fa2:	4b59      	ldr	r3, [pc, #356]	; (8014108 <low_level_init+0x178>)
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8013fa8:	4b57      	ldr	r3, [pc, #348]	; (8014108 <low_level_init+0x178>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x44;
 8013fae:	2344      	movs	r3, #68	; 0x44
 8013fb0:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x84;
 8013fb4:	2384      	movs	r3, #132	; 0x84
 8013fb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0x23;
 8013fba:	2323      	movs	r3, #35	; 0x23
 8013fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x84;
 8013fc0:	2384      	movs	r3, #132	; 0x84
 8013fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x44;
 8013fc6:	2344      	movs	r3, #68	; 0x44
 8013fc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x77;
 8013fcc:	2377      	movs	r3, #119	; 0x77
 8013fce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8013fd2:	4a4d      	ldr	r2, [pc, #308]	; (8014108 <low_level_init+0x178>)
 8013fd4:	f107 0320 	add.w	r3, r7, #32
 8013fd8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8013fda:	4b4b      	ldr	r3, [pc, #300]	; (8014108 <low_level_init+0x178>)
 8013fdc:	2201      	movs	r2, #1
 8013fde:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8013fe0:	4b49      	ldr	r3, [pc, #292]	; (8014108 <low_level_init+0x178>)
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013fe6:	4b48      	ldr	r3, [pc, #288]	; (8014108 <low_level_init+0x178>)
 8013fe8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013fec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013fee:	4846      	ldr	r0, [pc, #280]	; (8014108 <low_level_init+0x178>)
 8013ff0:	f7ec fc8a 	bl	8000908 <HAL_ETH_Init>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 8013ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d108      	bne.n	8014014 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014008:	f043 0304 	orr.w	r3, r3, #4
 801400c:	b2da      	uxtb	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014014:	2304      	movs	r3, #4
 8014016:	4a3e      	ldr	r2, [pc, #248]	; (8014110 <low_level_init+0x180>)
 8014018:	493e      	ldr	r1, [pc, #248]	; (8014114 <low_level_init+0x184>)
 801401a:	483b      	ldr	r0, [pc, #236]	; (8014108 <low_level_init+0x178>)
 801401c:	f7ec fe12 	bl	8000c44 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8014020:	2304      	movs	r3, #4
 8014022:	4a3d      	ldr	r2, [pc, #244]	; (8014118 <low_level_init+0x188>)
 8014024:	493d      	ldr	r1, [pc, #244]	; (801411c <low_level_init+0x18c>)
 8014026:	4838      	ldr	r0, [pc, #224]	; (8014108 <low_level_init+0x178>)
 8014028:	f7ec fe75 	bl	8000d16 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2206      	movs	r2, #6
 8014030:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014034:	4b34      	ldr	r3, [pc, #208]	; (8014108 <low_level_init+0x178>)
 8014036:	695b      	ldr	r3, [r3, #20]
 8014038:	781a      	ldrb	r2, [r3, #0]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014040:	4b31      	ldr	r3, [pc, #196]	; (8014108 <low_level_init+0x178>)
 8014042:	695b      	ldr	r3, [r3, #20]
 8014044:	785a      	ldrb	r2, [r3, #1]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801404c:	4b2e      	ldr	r3, [pc, #184]	; (8014108 <low_level_init+0x178>)
 801404e:	695b      	ldr	r3, [r3, #20]
 8014050:	789a      	ldrb	r2, [r3, #2]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8014058:	4b2b      	ldr	r3, [pc, #172]	; (8014108 <low_level_init+0x178>)
 801405a:	695b      	ldr	r3, [r3, #20]
 801405c:	78da      	ldrb	r2, [r3, #3]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014064:	4b28      	ldr	r3, [pc, #160]	; (8014108 <low_level_init+0x178>)
 8014066:	695b      	ldr	r3, [r3, #20]
 8014068:	791a      	ldrb	r2, [r3, #4]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8014070:	4b25      	ldr	r3, [pc, #148]	; (8014108 <low_level_init+0x178>)
 8014072:	695b      	ldr	r3, [r3, #20]
 8014074:	795a      	ldrb	r2, [r3, #5]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8014082:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801408a:	f043 030a 	orr.w	r3, r3, #10
 801408e:	b2da      	uxtb	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8014096:	2300      	movs	r3, #0
 8014098:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801409a:	f107 031c 	add.w	r3, r7, #28
 801409e:	2101      	movs	r1, #1
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7ee fe5d 	bl	8002d60 <osSemaphoreCreate>
 80140a6:	4602      	mov	r2, r0
 80140a8:	4b1d      	ldr	r3, [pc, #116]	; (8014120 <low_level_init+0x190>)
 80140aa:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80140ac:	4b1d      	ldr	r3, [pc, #116]	; (8014124 <low_level_init+0x194>)
 80140ae:	f107 0408 	add.w	r4, r7, #8
 80140b2:	461d      	mov	r5, r3
 80140b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140b8:	682b      	ldr	r3, [r5, #0]
 80140ba:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 80140bc:	f107 0308 	add.w	r3, r7, #8
 80140c0:	6879      	ldr	r1, [r7, #4]
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7ee fd7f 	bl	8002bc6 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80140c8:	480f      	ldr	r0, [pc, #60]	; (8014108 <low_level_init+0x178>)
 80140ca:	f7ed f94c 	bl	8001366 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80140ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80140d2:	461a      	mov	r2, r3
 80140d4:	210b      	movs	r1, #11
 80140d6:	480c      	ldr	r0, [pc, #48]	; (8014108 <low_level_init+0x178>)
 80140d8:	f7ed f877 	bl	80011ca <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80140dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140de:	f043 030b 	orr.w	r3, r3, #11
 80140e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80140e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e6:	461a      	mov	r2, r3
 80140e8:	210b      	movs	r1, #11
 80140ea:	4807      	ldr	r0, [pc, #28]	; (8014108 <low_level_init+0x178>)
 80140ec:	f7ed f8d5 	bl	800129a <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80140f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80140f4:	461a      	mov	r2, r3
 80140f6:	210b      	movs	r1, #11
 80140f8:	4803      	ldr	r0, [pc, #12]	; (8014108 <low_level_init+0x178>)
 80140fa:	f7ed f866 	bl	80011ca <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80140fe:	bf00      	nop
 8014100:	3730      	adds	r7, #48	; 0x30
 8014102:	46bd      	mov	sp, r7
 8014104:	bdb0      	pop	{r4, r5, r7, pc}
 8014106:	bf00      	nop
 8014108:	20009620 	.word	0x20009620
 801410c:	40028000 	.word	0x40028000
 8014110:	20009668 	.word	0x20009668
 8014114:	20007d50 	.word	0x20007d50
 8014118:	20007dd0 	.word	0x20007dd0
 801411c:	200095a0 	.word	0x200095a0
 8014120:	20004424 	.word	0x20004424
 8014124:	080188f4 	.word	0x080188f4

08014128 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08a      	sub	sp, #40	; 0x28
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8014132:	4b4b      	ldr	r3, [pc, #300]	; (8014260 <low_level_output+0x138>)
 8014134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 801413a:	2300      	movs	r3, #0
 801413c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 801413e:	2300      	movs	r3, #0
 8014140:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8014146:	2300      	movs	r3, #0
 8014148:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 801414a:	4b45      	ldr	r3, [pc, #276]	; (8014260 <low_level_output+0x138>)
 801414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8014150:	2300      	movs	r3, #0
 8014152:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	623b      	str	r3, [r7, #32]
 8014158:	e05a      	b.n	8014210 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801415a:	69bb      	ldr	r3, [r7, #24]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	da03      	bge.n	801416a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8014162:	23f8      	movs	r3, #248	; 0xf8
 8014164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8014168:	e05c      	b.n	8014224 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801416a:	6a3b      	ldr	r3, [r7, #32]
 801416c:	895b      	ldrh	r3, [r3, #10]
 801416e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8014170:	2300      	movs	r3, #0
 8014172:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8014174:	e02f      	b.n	80141d6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8014176:	69fa      	ldr	r2, [r7, #28]
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	18d0      	adds	r0, r2, r3
 801417c:	6a3b      	ldr	r3, [r7, #32]
 801417e:	685a      	ldr	r2, [r3, #4]
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	18d1      	adds	r1, r2, r3
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801418a:	3304      	adds	r3, #4
 801418c:	461a      	mov	r2, r3
 801418e:	f000 fd98 	bl	8014cc2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	da03      	bge.n	80141a8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80141a0:	23f8      	movs	r3, #248	; 0xf8
 80141a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80141a6:	e03d      	b.n	8014224 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80141ae:	693a      	ldr	r2, [r7, #16]
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	4413      	add	r3, r2
 80141b4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80141b8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80141ba:	68ba      	ldr	r2, [r7, #8]
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80141c4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80141c6:	697a      	ldr	r2, [r7, #20]
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80141d0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80141d2:	2300      	movs	r3, #0
 80141d4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141d6:	68fa      	ldr	r2, [r7, #12]
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	4413      	add	r3, r2
 80141dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d8c8      	bhi.n	8014176 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80141e4:	69fa      	ldr	r2, [r7, #28]
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	18d0      	adds	r0, r2, r3
 80141ea:	6a3b      	ldr	r3, [r7, #32]
 80141ec:	685a      	ldr	r2, [r3, #4]
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	4413      	add	r3, r2
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	4619      	mov	r1, r3
 80141f6:	f000 fd64 	bl	8014cc2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80141fa:	693a      	ldr	r2, [r7, #16]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	4413      	add	r3, r2
 8014200:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8014202:	697a      	ldr	r2, [r7, #20]
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	4413      	add	r3, r2
 8014208:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801420a:	6a3b      	ldr	r3, [r7, #32]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	623b      	str	r3, [r7, #32]
 8014210:	6a3b      	ldr	r3, [r7, #32]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1a1      	bne.n	801415a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8014216:	6979      	ldr	r1, [r7, #20]
 8014218:	4811      	ldr	r0, [pc, #68]	; (8014260 <low_level_output+0x138>)
 801421a:	f7ec fde9 	bl	8000df0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801421e:	2300      	movs	r3, #0
 8014220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8014224:	4b0e      	ldr	r3, [pc, #56]	; (8014260 <low_level_output+0x138>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801422c:	3314      	adds	r3, #20
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f003 0320 	and.w	r3, r3, #32
 8014234:	2b00      	cmp	r3, #0
 8014236:	d00d      	beq.n	8014254 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8014238:	4b09      	ldr	r3, [pc, #36]	; (8014260 <low_level_output+0x138>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014240:	3314      	adds	r3, #20
 8014242:	2220      	movs	r2, #32
 8014244:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8014246:	4b06      	ldr	r3, [pc, #24]	; (8014260 <low_level_output+0x138>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801424e:	3304      	adds	r3, #4
 8014250:	2200      	movs	r2, #0
 8014252:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8014254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014258:	4618      	mov	r0, r3
 801425a:	3728      	adds	r7, #40	; 0x28
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}
 8014260:	20009620 	.word	0x20009620

08014264 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b08c      	sub	sp, #48	; 0x30
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801426c:	2300      	movs	r3, #0
 801426e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8014270:	2300      	movs	r3, #0
 8014272:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8014274:	2300      	movs	r3, #0
 8014276:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8014278:	2300      	movs	r3, #0
 801427a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 801427c:	2300      	movs	r3, #0
 801427e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8014280:	2300      	movs	r3, #0
 8014282:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8014284:	2300      	movs	r3, #0
 8014286:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8014288:	484e      	ldr	r0, [pc, #312]	; (80143c4 <low_level_input+0x160>)
 801428a:	f7ec fe9b 	bl	8000fc4 <HAL_ETH_GetReceivedFrame_IT>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <low_level_input+0x34>
    return NULL;
 8014294:	2300      	movs	r3, #0
 8014296:	e091      	b.n	80143bc <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8014298:	4b4a      	ldr	r3, [pc, #296]	; (80143c4 <low_level_input+0x160>)
 801429a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801429c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801429e:	4b49      	ldr	r3, [pc, #292]	; (80143c4 <low_level_input+0x160>)
 80142a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142a2:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80142a4:	89fb      	ldrh	r3, [r7, #14]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d006      	beq.n	80142b8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80142aa:	89fb      	ldrh	r3, [r7, #14]
 80142ac:	2203      	movs	r2, #3
 80142ae:	4619      	mov	r1, r3
 80142b0:	2004      	movs	r0, #4
 80142b2:	f7f8 fc6f 	bl	800cb94 <pbuf_alloc>
 80142b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80142b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d04b      	beq.n	8014356 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80142be:	4b41      	ldr	r3, [pc, #260]	; (80143c4 <low_level_input+0x160>)
 80142c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80142c4:	2300      	movs	r3, #0
 80142c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80142cc:	e040      	b.n	8014350 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80142ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d0:	895b      	ldrh	r3, [r3, #10]
 80142d2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80142d4:	2300      	movs	r3, #0
 80142d6:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80142d8:	e021      	b.n	801431e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80142da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142dc:	685a      	ldr	r2, [r3, #4]
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	18d0      	adds	r0, r2, r3
 80142e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	18d1      	adds	r1, r2, r3
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80142ee:	3304      	adds	r3, #4
 80142f0:	461a      	mov	r2, r3
 80142f2:	f000 fce6 	bl	8014cc2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80142f6:	6a3b      	ldr	r3, [r7, #32]
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	689b      	ldr	r3, [r3, #8]
 8014300:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8014302:	69fa      	ldr	r2, [r7, #28]
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	4413      	add	r3, r2
 8014308:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801430c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801430e:	69ba      	ldr	r2, [r7, #24]
 8014310:	69fb      	ldr	r3, [r7, #28]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8014318:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801431a:	2300      	movs	r3, #0
 801431c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801431e:	697a      	ldr	r2, [r7, #20]
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	4413      	add	r3, r2
 8014324:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8014328:	4293      	cmp	r3, r2
 801432a:	d8d6      	bhi.n	80142da <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432e:	685a      	ldr	r2, [r3, #4]
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	18d0      	adds	r0, r2, r3
 8014334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014336:	69fb      	ldr	r3, [r7, #28]
 8014338:	4413      	add	r3, r2
 801433a:	697a      	ldr	r2, [r7, #20]
 801433c:	4619      	mov	r1, r3
 801433e:	f000 fcc0 	bl	8014cc2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8014342:	69fa      	ldr	r2, [r7, #28]
 8014344:	697b      	ldr	r3, [r7, #20]
 8014346:	4413      	add	r3, r2
 8014348:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 801434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1bb      	bne.n	80142ce <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8014356:	4b1b      	ldr	r3, [pc, #108]	; (80143c4 <low_level_input+0x160>)
 8014358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801435a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801435c:	2300      	movs	r3, #0
 801435e:	613b      	str	r3, [r7, #16]
 8014360:	e00b      	b.n	801437a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8014362:	6a3b      	ldr	r3, [r7, #32]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801436a:	6a3b      	ldr	r3, [r7, #32]
 801436c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801436e:	6a3b      	ldr	r3, [r7, #32]
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	3301      	adds	r3, #1
 8014378:	613b      	str	r3, [r7, #16]
 801437a:	4b12      	ldr	r3, [pc, #72]	; (80143c4 <low_level_input+0x160>)
 801437c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	429a      	cmp	r2, r3
 8014382:	d8ee      	bhi.n	8014362 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8014384:	4b0f      	ldr	r3, [pc, #60]	; (80143c4 <low_level_input+0x160>)
 8014386:	2200      	movs	r2, #0
 8014388:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801438a:	4b0e      	ldr	r3, [pc, #56]	; (80143c4 <low_level_input+0x160>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014392:	3314      	adds	r3, #20
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00d      	beq.n	80143ba <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801439e:	4b09      	ldr	r3, [pc, #36]	; (80143c4 <low_level_input+0x160>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80143a6:	3314      	adds	r3, #20
 80143a8:	2280      	movs	r2, #128	; 0x80
 80143aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80143ac:	4b05      	ldr	r3, [pc, #20]	; (80143c4 <low_level_input+0x160>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80143b4:	3308      	adds	r3, #8
 80143b6:	2200      	movs	r2, #0
 80143b8:	601a      	str	r2, [r3, #0]
  }
  return p;
 80143ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3730      	adds	r7, #48	; 0x30
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}
 80143c4:	20009620 	.word	0x20009620

080143c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80143d4:	4b0f      	ldr	r3, [pc, #60]	; (8014414 <ethernetif_input+0x4c>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80143dc:	4618      	mov	r0, r3
 80143de:	f7ee fcdd 	bl	8002d9c <osSemaphoreWait>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1f5      	bne.n	80143d4 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ff ff3b 	bl	8014264 <low_level_input>
 80143ee:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00a      	beq.n	801440c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	68f9      	ldr	r1, [r7, #12]
 80143fc:	68b8      	ldr	r0, [r7, #8]
 80143fe:	4798      	blx	r3
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d002      	beq.n	801440c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8014406:	68b8      	ldr	r0, [r7, #8]
 8014408:	f7f8 ff36 	bl	800d278 <pbuf_free>
          }
        }
      } while(p!=NULL);
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d1ea      	bne.n	80143e8 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8014412:	e7df      	b.n	80143d4 <ethernetif_input+0xc>
 8014414:	20004424 	.word	0x20004424

08014418 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <ethernetif_init+0x1c>
 8014426:	4b0e      	ldr	r3, [pc, #56]	; (8014460 <ethernetif_init+0x48>)
 8014428:	f240 223e 	movw	r2, #574	; 0x23e
 801442c:	490d      	ldr	r1, [pc, #52]	; (8014464 <ethernetif_init+0x4c>)
 801442e:	480e      	ldr	r0, [pc, #56]	; (8014468 <ethernetif_init+0x50>)
 8014430:	f000 fc5a 	bl	8014ce8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2273      	movs	r2, #115	; 0x73
 8014438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2274      	movs	r2, #116	; 0x74
 8014440:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	4a09      	ldr	r2, [pc, #36]	; (801446c <ethernetif_init+0x54>)
 8014448:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	4a08      	ldr	r2, [pc, #32]	; (8014470 <ethernetif_init+0x58>)
 801444e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7ff fd9d 	bl	8013f90 <low_level_init>

  return ERR_OK;
 8014456:	2300      	movs	r3, #0
}
 8014458:	4618      	mov	r0, r3
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}
 8014460:	08018908 	.word	0x08018908
 8014464:	0801891c 	.word	0x0801891c
 8014468:	0801892c 	.word	0x0801892c
 801446c:	0800a445 	.word	0x0800a445
 8014470:	08014129 	.word	0x08014129

08014474 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8014478:	f7ec f8f0 	bl	800065c <HAL_GetTick>
 801447c:	4603      	mov	r3, r0
}
 801447e:	4618      	mov	r0, r3
 8014480:	bd80      	pop	{r7, pc}
	...

08014484 <__io_putchar>:
/*****************Printf implementation***********/
//With this funcitons we can use printf instead of
//the HAL stm32 implementation

int __io_putchar(int ch)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	b2db      	uxtb	r3, r3
 8014490:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &c[0], 1, 10);
 8014492:	f107 010c 	add.w	r1, r7, #12
 8014496:	230a      	movs	r3, #10
 8014498:	2201      	movs	r2, #1
 801449a:	4804      	ldr	r0, [pc, #16]	; (80144ac <__io_putchar+0x28>)
 801449c:	f7ee f853 	bl	8002546 <HAL_UART_Transmit>
 return ch;
 80144a0:	687b      	ldr	r3, [r7, #4]
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	2000ae38 	.word	0x2000ae38

080144b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80144b6:	2100      	movs	r1, #0
 80144b8:	2000      	movs	r0, #0
 80144ba:	f7f3 f94d 	bl	8007758 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80144be:	4b16      	ldr	r3, [pc, #88]	; (8014518 <MX_LWIP_Init+0x68>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80144c4:	4b15      	ldr	r3, [pc, #84]	; (801451c <MX_LWIP_Init+0x6c>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80144ca:	4b15      	ldr	r3, [pc, #84]	; (8014520 <MX_LWIP_Init+0x70>)
 80144cc:	2200      	movs	r2, #0
 80144ce:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80144d0:	4b14      	ldr	r3, [pc, #80]	; (8014524 <MX_LWIP_Init+0x74>)
 80144d2:	9302      	str	r3, [sp, #8]
 80144d4:	4b14      	ldr	r3, [pc, #80]	; (8014528 <MX_LWIP_Init+0x78>)
 80144d6:	9301      	str	r3, [sp, #4]
 80144d8:	2300      	movs	r3, #0
 80144da:	9300      	str	r3, [sp, #0]
 80144dc:	4b10      	ldr	r3, [pc, #64]	; (8014520 <MX_LWIP_Init+0x70>)
 80144de:	4a0f      	ldr	r2, [pc, #60]	; (801451c <MX_LWIP_Init+0x6c>)
 80144e0:	490d      	ldr	r1, [pc, #52]	; (8014518 <MX_LWIP_Init+0x68>)
 80144e2:	4812      	ldr	r0, [pc, #72]	; (801452c <MX_LWIP_Init+0x7c>)
 80144e4:	f7f8 f998 	bl	800c818 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80144e8:	4810      	ldr	r0, [pc, #64]	; (801452c <MX_LWIP_Init+0x7c>)
 80144ea:	f7f8 fa7d 	bl	800c9e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80144ee:	4b0f      	ldr	r3, [pc, #60]	; (801452c <MX_LWIP_Init+0x7c>)
 80144f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80144f4:	f003 0304 	and.w	r3, r3, #4
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d003      	beq.n	8014504 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80144fc:	480b      	ldr	r0, [pc, #44]	; (801452c <MX_LWIP_Init+0x7c>)
 80144fe:	f7f8 fa83 	bl	800ca08 <netif_set_up>
 8014502:	e002      	b.n	801450a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8014504:	4809      	ldr	r0, [pc, #36]	; (801452c <MX_LWIP_Init+0x7c>)
 8014506:	f7f8 fac3 	bl	800ca90 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801450a:	4808      	ldr	r0, [pc, #32]	; (801452c <MX_LWIP_Init+0x7c>)
 801450c:	f7f3 ffb8 	bl	8008480 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8014510:	bf00      	nop
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	2000aeac 	.word	0x2000aeac
 801451c:	2000aeb0 	.word	0x2000aeb0
 8014520:	2000aeb4 	.word	0x2000aeb4
 8014524:	08007655 	.word	0x08007655
 8014528:	08014419 	.word	0x08014419
 801452c:	2000ae78 	.word	0x2000ae78

08014530 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8014530:	b5b0      	push	{r4, r5, r7, lr}
 8014532:	b08a      	sub	sp, #40	; 0x28
 8014534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014536:	f7ec f82b 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801453a:	f000 f82f 	bl	801459c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801453e:	f000 f8d1 	bl	80146e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8014542:	f000 f8a1 	bl	8014688 <MX_USART3_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8014546:	4b11      	ldr	r3, [pc, #68]	; (801458c <main+0x5c>)
 8014548:	f107 0414 	add.w	r4, r7, #20
 801454c:	461d      	mov	r5, r3
 801454e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014552:	682b      	ldr	r3, [r5, #0]
 8014554:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8014556:	f107 0314 	add.w	r3, r7, #20
 801455a:	2100      	movs	r1, #0
 801455c:	4618      	mov	r0, r3
 801455e:	f7ee fb32 	bl	8002bc6 <osThreadCreate>
 8014562:	4602      	mov	r2, r0
 8014564:	4b0a      	ldr	r3, [pc, #40]	; (8014590 <main+0x60>)
 8014566:	601a      	str	r2, [r3, #0]

  /* definition and creation of netTask */
  osThreadDef(netTask, StartnetTask, osPriorityIdle, 0, 128);
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <main+0x64>)
 801456a:	463c      	mov	r4, r7
 801456c:	461d      	mov	r5, r3
 801456e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014572:	682b      	ldr	r3, [r5, #0]
 8014574:	6023      	str	r3, [r4, #0]
  netTaskHandle = osThreadCreate(osThread(netTask), NULL);
 8014576:	463b      	mov	r3, r7
 8014578:	2100      	movs	r1, #0
 801457a:	4618      	mov	r0, r3
 801457c:	f7ee fb23 	bl	8002bc6 <osThreadCreate>
 8014580:	4602      	mov	r2, r0
 8014582:	4b05      	ldr	r3, [pc, #20]	; (8014598 <main+0x68>)
 8014584:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8014586:	f7ee fb07 	bl	8002b98 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801458a:	e7fe      	b.n	801458a <main+0x5a>
 801458c:	08018960 	.word	0x08018960
 8014590:	2000aeb8 	.word	0x2000aeb8
 8014594:	0801897c 	.word	0x0801897c
 8014598:	2000aebc 	.word	0x2000aebc

0801459c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b094      	sub	sp, #80	; 0x50
 80145a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80145a2:	2300      	movs	r3, #0
 80145a4:	60bb      	str	r3, [r7, #8]
 80145a6:	4a34      	ldr	r2, [pc, #208]	; (8014678 <SystemClock_Config+0xdc>)
 80145a8:	4b33      	ldr	r3, [pc, #204]	; (8014678 <SystemClock_Config+0xdc>)
 80145aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145b0:	6413      	str	r3, [r2, #64]	; 0x40
 80145b2:	4b31      	ldr	r3, [pc, #196]	; (8014678 <SystemClock_Config+0xdc>)
 80145b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80145ba:	60bb      	str	r3, [r7, #8]
 80145bc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80145be:	2300      	movs	r3, #0
 80145c0:	607b      	str	r3, [r7, #4]
 80145c2:	4a2e      	ldr	r2, [pc, #184]	; (801467c <SystemClock_Config+0xe0>)
 80145c4:	4b2d      	ldr	r3, [pc, #180]	; (801467c <SystemClock_Config+0xe0>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	4b2b      	ldr	r3, [pc, #172]	; (801467c <SystemClock_Config+0xe0>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145d6:	607b      	str	r3, [r7, #4]
 80145d8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80145da:	2302      	movs	r3, #2
 80145dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80145de:	2301      	movs	r3, #1
 80145e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80145e2:	2310      	movs	r3, #16
 80145e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80145e6:	2302      	movs	r3, #2
 80145e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80145ea:	2300      	movs	r3, #0
 80145ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80145ee:	2308      	movs	r3, #8
 80145f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80145f2:	23a8      	movs	r3, #168	; 0xa8
 80145f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80145f6:	2302      	movs	r3, #2
 80145f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80145fa:	2304      	movs	r3, #4
 80145fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80145fe:	f107 0320 	add.w	r3, r7, #32
 8014602:	4618      	mov	r0, r3
 8014604:	f7ed fb44 	bl	8001c90 <HAL_RCC_OscConfig>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d003      	beq.n	8014616 <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 801460e:	21c7      	movs	r1, #199	; 0xc7
 8014610:	481b      	ldr	r0, [pc, #108]	; (8014680 <SystemClock_Config+0xe4>)
 8014612:	f000 f967 	bl	80148e4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014616:	230f      	movs	r3, #15
 8014618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801461a:	2302      	movs	r3, #2
 801461c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801461e:	2300      	movs	r3, #0
 8014620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8014622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8014628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801462c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801462e:	f107 030c 	add.w	r3, r7, #12
 8014632:	2105      	movs	r1, #5
 8014634:	4618      	mov	r0, r3
 8014636:	f7ed fd6d 	bl	8002114 <HAL_RCC_ClockConfig>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d003      	beq.n	8014648 <SystemClock_Config+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 8014640:	21d5      	movs	r1, #213	; 0xd5
 8014642:	480f      	ldr	r0, [pc, #60]	; (8014680 <SystemClock_Config+0xe4>)
 8014644:	f000 f94e 	bl	80148e4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8014648:	f7ed fefc 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 801464c:	4602      	mov	r2, r0
 801464e:	4b0d      	ldr	r3, [pc, #52]	; (8014684 <SystemClock_Config+0xe8>)
 8014650:	fba3 2302 	umull	r2, r3, r3, r2
 8014654:	099b      	lsrs	r3, r3, #6
 8014656:	4618      	mov	r0, r3
 8014658:	f7ec f92d 	bl	80008b6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801465c:	2004      	movs	r0, #4
 801465e:	f7ec f937 	bl	80008d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8014662:	2200      	movs	r2, #0
 8014664:	210f      	movs	r1, #15
 8014666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801466a:	f7ec f8fa 	bl	8000862 <HAL_NVIC_SetPriority>
}
 801466e:	bf00      	nop
 8014670:	3750      	adds	r7, #80	; 0x50
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	40023800 	.word	0x40023800
 801467c:	40007000 	.word	0x40007000
 8014680:	08018990 	.word	0x08018990
 8014684:	10624dd3 	.word	0x10624dd3

08014688 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 801468c:	4b12      	ldr	r3, [pc, #72]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 801468e:	4a13      	ldr	r2, [pc, #76]	; (80146dc <MX_USART3_UART_Init+0x54>)
 8014690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8014692:	4b11      	ldr	r3, [pc, #68]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 8014694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801469a:	4b0f      	ldr	r3, [pc, #60]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 801469c:	2200      	movs	r2, #0
 801469e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80146a0:	4b0d      	ldr	r3, [pc, #52]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146a2:	2200      	movs	r2, #0
 80146a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80146a6:	4b0c      	ldr	r3, [pc, #48]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80146ac:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146ae:	220c      	movs	r2, #12
 80146b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80146b2:	4b09      	ldr	r3, [pc, #36]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146b4:	2200      	movs	r2, #0
 80146b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80146b8:	4b07      	ldr	r3, [pc, #28]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80146be:	4806      	ldr	r0, [pc, #24]	; (80146d8 <MX_USART3_UART_Init+0x50>)
 80146c0:	f7ed fef4 	bl	80024ac <HAL_UART_Init>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d003      	beq.n	80146d2 <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80146ca:	21f2      	movs	r1, #242	; 0xf2
 80146cc:	4804      	ldr	r0, [pc, #16]	; (80146e0 <MX_USART3_UART_Init+0x58>)
 80146ce:	f000 f909 	bl	80148e4 <_Error_Handler>
  }

}
 80146d2:	bf00      	nop
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	2000ae38 	.word	0x2000ae38
 80146dc:	40004800 	.word	0x40004800
 80146e0:	08018990 	.word	0x08018990

080146e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80146ea:	2300      	movs	r3, #0
 80146ec:	613b      	str	r3, [r7, #16]
 80146ee:	4a38      	ldr	r2, [pc, #224]	; (80147d0 <MX_GPIO_Init+0xec>)
 80146f0:	4b37      	ldr	r3, [pc, #220]	; (80147d0 <MX_GPIO_Init+0xec>)
 80146f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f4:	f043 0304 	orr.w	r3, r3, #4
 80146f8:	6313      	str	r3, [r2, #48]	; 0x30
 80146fa:	4b35      	ldr	r3, [pc, #212]	; (80147d0 <MX_GPIO_Init+0xec>)
 80146fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146fe:	f003 0304 	and.w	r3, r3, #4
 8014702:	613b      	str	r3, [r7, #16]
 8014704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014706:	2300      	movs	r3, #0
 8014708:	60fb      	str	r3, [r7, #12]
 801470a:	4a31      	ldr	r2, [pc, #196]	; (80147d0 <MX_GPIO_Init+0xec>)
 801470c:	4b30      	ldr	r3, [pc, #192]	; (80147d0 <MX_GPIO_Init+0xec>)
 801470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014714:	6313      	str	r3, [r2, #48]	; 0x30
 8014716:	4b2e      	ldr	r3, [pc, #184]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014722:	2300      	movs	r3, #0
 8014724:	60bb      	str	r3, [r7, #8]
 8014726:	4a2a      	ldr	r2, [pc, #168]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014728:	4b29      	ldr	r3, [pc, #164]	; (80147d0 <MX_GPIO_Init+0xec>)
 801472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801472c:	f043 0301 	orr.w	r3, r3, #1
 8014730:	6313      	str	r3, [r2, #48]	; 0x30
 8014732:	4b27      	ldr	r3, [pc, #156]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	60bb      	str	r3, [r7, #8]
 801473c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801473e:	2300      	movs	r3, #0
 8014740:	607b      	str	r3, [r7, #4]
 8014742:	4a23      	ldr	r2, [pc, #140]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014744:	4b22      	ldr	r3, [pc, #136]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014748:	f043 0302 	orr.w	r3, r3, #2
 801474c:	6313      	str	r3, [r2, #48]	; 0x30
 801474e:	4b20      	ldr	r3, [pc, #128]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014752:	f003 0302 	and.w	r3, r3, #2
 8014756:	607b      	str	r3, [r7, #4]
 8014758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801475a:	2300      	movs	r3, #0
 801475c:	603b      	str	r3, [r7, #0]
 801475e:	4a1c      	ldr	r2, [pc, #112]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014760:	4b1b      	ldr	r3, [pc, #108]	; (80147d0 <MX_GPIO_Init+0xec>)
 8014762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014768:	6313      	str	r3, [r2, #48]	; 0x30
 801476a:	4b19      	ldr	r3, [pc, #100]	; (80147d0 <MX_GPIO_Init+0xec>)
 801476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014772:	603b      	str	r3, [r7, #0]
 8014774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8014776:	2200      	movs	r2, #0
 8014778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801477c:	4815      	ldr	r0, [pc, #84]	; (80147d4 <MX_GPIO_Init+0xf0>)
 801477e:	f7ed fa6d 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8014782:	2200      	movs	r2, #0
 8014784:	2140      	movs	r1, #64	; 0x40
 8014786:	4814      	ldr	r0, [pc, #80]	; (80147d8 <MX_GPIO_Init+0xf4>)
 8014788:	f7ed fa68 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 801478c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014792:	2301      	movs	r3, #1
 8014794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014796:	2300      	movs	r3, #0
 8014798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801479a:	2300      	movs	r3, #0
 801479c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801479e:	f107 0314 	add.w	r3, r7, #20
 80147a2:	4619      	mov	r1, r3
 80147a4:	480b      	ldr	r0, [pc, #44]	; (80147d4 <MX_GPIO_Init+0xf0>)
 80147a6:	f7ed f8bf 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80147aa:	2340      	movs	r3, #64	; 0x40
 80147ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80147ae:	2301      	movs	r3, #1
 80147b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147b6:	2300      	movs	r3, #0
 80147b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80147ba:	f107 0314 	add.w	r3, r7, #20
 80147be:	4619      	mov	r1, r3
 80147c0:	4805      	ldr	r0, [pc, #20]	; (80147d8 <MX_GPIO_Init+0xf4>)
 80147c2:	f7ed f8b1 	bl	8001928 <HAL_GPIO_Init>

}
 80147c6:	bf00      	nop
 80147c8:	3728      	adds	r7, #40	; 0x28
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	40023800 	.word	0x40023800
 80147d4:	40020800 	.word	0x40020800
 80147d8:	40021800 	.word	0x40021800

080147dc <StartDefaultTask>:
/* StartDefaultTask function */


extern struct netif gnetif;
void StartDefaultTask(void const * argument)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08c      	sub	sp, #48	; 0x30
 80147e0:	af02      	add	r7, sp, #8
 80147e2:	6078      	str	r0, [r7, #4]
  ip_addr_t remote_ip;
  struct netconn *conn, *newconn;
  err_t err;

  /* init code for LWIP */
  printf("Iniciando ethernet \r\n");
 80147e4:	4836      	ldr	r0, [pc, #216]	; (80148c0 <StartDefaultTask+0xe4>)
 80147e6:	f000 faf3 	bl	8014dd0 <puts>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80147ea:	2201      	movs	r2, #1
 80147ec:	2140      	movs	r1, #64	; 0x40
 80147ee:	4835      	ldr	r0, [pc, #212]	; (80148c4 <StartDefaultTask+0xe8>)
 80147f0:	f7ed fa34 	bl	8001c5c <HAL_GPIO_WritePin>
  MX_LWIP_Init();
 80147f4:	f7ff fe5c 	bl	80144b0 <MX_LWIP_Init>
  //Waiting for an IP
  while(gnetif.ip_addr.addr==0)osDelay(1);
 80147f8:	e002      	b.n	8014800 <StartDefaultTask+0x24>
 80147fa:	2001      	movs	r0, #1
 80147fc:	f7ee fa0a 	bl	8002c14 <osDelay>
 8014800:	4b31      	ldr	r3, [pc, #196]	; (80148c8 <StartDefaultTask+0xec>)
 8014802:	685b      	ldr	r3, [r3, #4]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d0f8      	beq.n	80147fa <StartDefaultTask+0x1e>
  printf("IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8014808:	4830      	ldr	r0, [pc, #192]	; (80148cc <StartDefaultTask+0xf0>)
 801480a:	f7f6 fd77 	bl	800b2fc <ip4addr_ntoa>
 801480e:	4603      	mov	r3, r0
 8014810:	4619      	mov	r1, r3
 8014812:	482f      	ldr	r0, [pc, #188]	; (80148d0 <StartDefaultTask+0xf4>)
 8014814:	f000 fa68 	bl	8014ce8 <iprintf>

  conn = netconn_new(NETCONN_TCP);
 8014818:	2200      	movs	r2, #0
 801481a:	2100      	movs	r1, #0
 801481c:	2010      	movs	r0, #16
 801481e:	f7f0 fe29 	bl	8005474 <netconn_new_with_proto_and_callback>
 8014822:	6278      	str	r0, [r7, #36]	; 0x24
  netconn_bind(conn, NULL, 7);
 8014824:	2207      	movs	r2, #7
 8014826:	2100      	movs	r1, #0
 8014828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801482a:	f7f0 fec3 	bl	80055b4 <netconn_bind>
  netconn_listen(conn);
 801482e:	21ff      	movs	r1, #255	; 0xff
 8014830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014832:	f7f0 fef7 	bl	8005624 <netconn_listen_with_backlog>

  for(;;)
  {
	  err = netconn_accept(conn, &newconn);
 8014836:	f107 0314 	add.w	r3, r7, #20
 801483a:	4619      	mov	r1, r3
 801483c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801483e:	f7f0 ff1d 	bl	800567c <netconn_accept>
 8014842:	4603      	mov	r3, r0
 8014844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  if (err == ERR_OK) {
 8014848:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801484c:	2b00      	cmp	r3, #0
 801484e:	d1f2      	bne.n	8014836 <StartDefaultTask+0x5a>
		  struct netbuf *buf;
		  void *data;
		  uint16_t len;

		  while((err = netconn_recv(newconn, &buf))== ERR_OK){
 8014850:	e01e      	b.n	8014890 <StartDefaultTask+0xb4>
			  do{
				  netbuf_data(buf,&data, &len);
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	f107 020a 	add.w	r2, r7, #10
 8014858:	f107 010c 	add.w	r1, r7, #12
 801485c:	4618      	mov	r0, r3
 801485e:	f7f2 fdd5 	bl	800740c <netbuf_data>
				  err = netconn_write(newconn,data,len, NETCONN_COPY);
 8014862:	6978      	ldr	r0, [r7, #20]
 8014864:	68f9      	ldr	r1, [r7, #12]
 8014866:	897b      	ldrh	r3, [r7, #10]
 8014868:	461a      	mov	r2, r3
 801486a:	2300      	movs	r3, #0
 801486c:	9300      	str	r3, [sp, #0]
 801486e:	2301      	movs	r3, #1
 8014870:	f7f1 f8ca 	bl	8005a08 <netconn_write_partly>
 8014874:	4603      	mov	r3, r0
 8014876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  }
			  while(netbuf_next(buf) >= 0);
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	4618      	mov	r0, r3
 801487e:	f7f2 fe0f 	bl	80074a0 <netbuf_next>
 8014882:	4603      	mov	r3, r0
 8014884:	2b00      	cmp	r3, #0
 8014886:	dae4      	bge.n	8014852 <StartDefaultTask+0x76>
			  netbuf_delete(buf);
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	4618      	mov	r0, r3
 801488c:	f7f2 fd9e 	bl	80073cc <netbuf_delete>
		  while((err = netconn_recv(newconn, &buf))== ERR_OK){
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	f107 0210 	add.w	r2, r7, #16
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f7f1 f83d 	bl	8005918 <netconn_recv>
 801489e:	4603      	mov	r3, r0
 80148a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80148a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d0d2      	beq.n	8014852 <StartDefaultTask+0x76>
		  }
		  netconn_close(newconn);
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7f1 f952 	bl	8005b58 <netconn_close>
		  netconn_delete(newconn);
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7f0 fe56 	bl	8005568 <netconn_delete>
	  err = netconn_accept(conn, &newconn);
 80148bc:	e7bb      	b.n	8014836 <StartDefaultTask+0x5a>
 80148be:	bf00      	nop
 80148c0:	080189a0 	.word	0x080189a0
 80148c4:	40021800 	.word	0x40021800
 80148c8:	2000ae78 	.word	0x2000ae78
 80148cc:	2000ae7c 	.word	0x2000ae7c
 80148d0:	080189b8 	.word	0x080189b8

080148d4 <StartnetTask>:
}


/* StartnetTask function */
void StartnetTask(void const * argument)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartnetTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80148dc:	2001      	movs	r0, #1
 80148de:	f7ee f999 	bl	8002c14 <osDelay>
 80148e2:	e7fb      	b.n	80148dc <StartnetTask+0x8>

080148e4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80148ee:	e7fe      	b.n	80148ee <_Error_Handler+0xa>

080148f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80148f6:	2300      	movs	r3, #0
 80148f8:	607b      	str	r3, [r7, #4]
 80148fa:	4a25      	ldr	r2, [pc, #148]	; (8014990 <HAL_MspInit+0xa0>)
 80148fc:	4b24      	ldr	r3, [pc, #144]	; (8014990 <HAL_MspInit+0xa0>)
 80148fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014904:	6453      	str	r3, [r2, #68]	; 0x44
 8014906:	4b22      	ldr	r3, [pc, #136]	; (8014990 <HAL_MspInit+0xa0>)
 8014908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801490e:	607b      	str	r3, [r7, #4]
 8014910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014912:	2300      	movs	r3, #0
 8014914:	603b      	str	r3, [r7, #0]
 8014916:	4a1e      	ldr	r2, [pc, #120]	; (8014990 <HAL_MspInit+0xa0>)
 8014918:	4b1d      	ldr	r3, [pc, #116]	; (8014990 <HAL_MspInit+0xa0>)
 801491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014920:	6413      	str	r3, [r2, #64]	; 0x40
 8014922:	4b1b      	ldr	r3, [pc, #108]	; (8014990 <HAL_MspInit+0xa0>)
 8014924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801492a:	603b      	str	r3, [r7, #0]
 801492c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801492e:	2003      	movs	r0, #3
 8014930:	f7eb ff8c 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8014934:	2200      	movs	r2, #0
 8014936:	2100      	movs	r1, #0
 8014938:	f06f 000b 	mvn.w	r0, #11
 801493c:	f7eb ff91 	bl	8000862 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8014940:	2200      	movs	r2, #0
 8014942:	2100      	movs	r1, #0
 8014944:	f06f 000a 	mvn.w	r0, #10
 8014948:	f7eb ff8b 	bl	8000862 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801494c:	2200      	movs	r2, #0
 801494e:	2100      	movs	r1, #0
 8014950:	f06f 0009 	mvn.w	r0, #9
 8014954:	f7eb ff85 	bl	8000862 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8014958:	2200      	movs	r2, #0
 801495a:	2100      	movs	r1, #0
 801495c:	f06f 0004 	mvn.w	r0, #4
 8014960:	f7eb ff7f 	bl	8000862 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8014964:	2200      	movs	r2, #0
 8014966:	2100      	movs	r1, #0
 8014968:	f06f 0003 	mvn.w	r0, #3
 801496c:	f7eb ff79 	bl	8000862 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014970:	2200      	movs	r2, #0
 8014972:	210f      	movs	r1, #15
 8014974:	f06f 0001 	mvn.w	r0, #1
 8014978:	f7eb ff73 	bl	8000862 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801497c:	2200      	movs	r2, #0
 801497e:	210f      	movs	r1, #15
 8014980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014984:	f7eb ff6d 	bl	8000862 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014988:	bf00      	nop
 801498a:	3708      	adds	r7, #8
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	40023800 	.word	0x40023800

08014994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b088      	sub	sp, #32
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4a12      	ldr	r2, [pc, #72]	; (80149ec <HAL_UART_MspInit+0x58>)
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d11e      	bne.n	80149e4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80149a6:	2300      	movs	r3, #0
 80149a8:	60bb      	str	r3, [r7, #8]
 80149aa:	4a11      	ldr	r2, [pc, #68]	; (80149f0 <HAL_UART_MspInit+0x5c>)
 80149ac:	4b10      	ldr	r3, [pc, #64]	; (80149f0 <HAL_UART_MspInit+0x5c>)
 80149ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80149b4:	6413      	str	r3, [r2, #64]	; 0x40
 80149b6:	4b0e      	ldr	r3, [pc, #56]	; (80149f0 <HAL_UART_MspInit+0x5c>)
 80149b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80149be:	60bb      	str	r3, [r7, #8]
 80149c0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80149c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80149c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149c8:	2302      	movs	r3, #2
 80149ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80149cc:	2301      	movs	r3, #1
 80149ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149d0:	2303      	movs	r3, #3
 80149d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80149d4:	2307      	movs	r3, #7
 80149d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80149d8:	f107 030c 	add.w	r3, r7, #12
 80149dc:	4619      	mov	r1, r3
 80149de:	4805      	ldr	r0, [pc, #20]	; (80149f4 <HAL_UART_MspInit+0x60>)
 80149e0:	f7ec ffa2 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80149e4:	bf00      	nop
 80149e6:	3720      	adds	r7, #32
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	40004800 	.word	0x40004800
 80149f0:	40023800 	.word	0x40023800
 80149f4:	40020400 	.word	0x40020400

080149f8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80149f8:	b480      	push	{r7}
 80149fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80149fc:	bf00      	nop
 80149fe:	46bd      	mov	sp, r7
 8014a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a04:	4770      	bx	lr

08014a06 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8014a06:	b480      	push	{r7}
 8014a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014a0a:	e7fe      	b.n	8014a0a <HardFault_Handler+0x4>

08014a0c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014a10:	e7fe      	b.n	8014a10 <MemManage_Handler+0x4>

08014a12 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8014a12:	b480      	push	{r7}
 8014a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014a16:	e7fe      	b.n	8014a16 <BusFault_Handler+0x4>

08014a18 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014a1c:	e7fe      	b.n	8014a1c <UsageFault_Handler+0x4>

08014a1e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8014a1e:	b480      	push	{r7}
 8014a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014a22:	bf00      	nop
 8014a24:	46bd      	mov	sp, r7
 8014a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2a:	4770      	bx	lr

08014a2c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014a30:	f7eb fe00 	bl	8000634 <HAL_IncTick>
  osSystickHandler();
 8014a34:	f7ee fb12 	bl	800305c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014a38:	bf00      	nop
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <ETH_IRQHandler>:

/**
* @brief This function handles Ethernet global interrupt.
*/
void ETH_IRQHandler(void)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014a40:	4802      	ldr	r0, [pc, #8]	; (8014a4c <ETH_IRQHandler+0x10>)
 8014a42:	f7ec fb47 	bl	80010d4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8014a46:	bf00      	nop
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20009620 	.word	0x20009620

08014a50 <_sbrk>:

/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
caddr_t _sbrk(int incr)
{
 8014a50:	b480      	push	{r7}
 8014a52:	b085      	sub	sp, #20
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8014a58:	4b15      	ldr	r3, [pc, #84]	; (8014ab0 <_sbrk+0x60>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d102      	bne.n	8014a66 <_sbrk+0x16>
		heap_end = &end;
 8014a60:	4b13      	ldr	r3, [pc, #76]	; (8014ab0 <_sbrk+0x60>)
 8014a62:	4a14      	ldr	r2, [pc, #80]	; (8014ab4 <_sbrk+0x64>)
 8014a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014a66:	4b12      	ldr	r3, [pc, #72]	; (8014ab0 <_sbrk+0x60>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	60fb      	str	r3, [r7, #12]

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8014a6c:	4b12      	ldr	r3, [pc, #72]	; (8014ab8 <_sbrk+0x68>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8014a7a:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 8014a7c:	4b0c      	ldr	r3, [pc, #48]	; (8014ab0 <_sbrk+0x60>)
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	441a      	add	r2, r3
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d905      	bls.n	8014a96 <_sbrk+0x46>
	{
		errno = ENOMEM;
 8014a8a:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <_sbrk+0x6c>)
 8014a8c:	220c      	movs	r2, #12
 8014a8e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a94:	e006      	b.n	8014aa4 <_sbrk+0x54>
	}

	heap_end += incr;
 8014a96:	4b06      	ldr	r3, [pc, #24]	; (8014ab0 <_sbrk+0x60>)
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	4a04      	ldr	r2, [pc, #16]	; (8014ab0 <_sbrk+0x60>)
 8014aa0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3714      	adds	r7, #20
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr
 8014ab0:	20004428 	.word	0x20004428
 8014ab4:	2000aec0 	.word	0x2000aec0
 8014ab8:	e000ed08 	.word	0xe000ed08
 8014abc:	20007d48 	.word	0x20007d48

08014ac0 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b086      	sub	sp, #24
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	60f8      	str	r0, [r7, #12]
 8014ac8:	60b9      	str	r1, [r7, #8]
 8014aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014acc:	2300      	movs	r3, #0
 8014ace:	617b      	str	r3, [r7, #20]
 8014ad0:	e009      	b.n	8014ae6 <_write+0x26>
	{
	   __io_putchar( *ptr++ );
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	1c5a      	adds	r2, r3, #1
 8014ad6:	60ba      	str	r2, [r7, #8]
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7ff fcd2 	bl	8014484 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	617b      	str	r3, [r7, #20]
 8014ae6:	697a      	ldr	r2, [r7, #20]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	dbf1      	blt.n	8014ad2 <_write+0x12>
	}
	return len;
 8014aee:	687b      	ldr	r3, [r7, #4]
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3718      	adds	r7, #24
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <_close>:

int _close(int file)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
	return -1;
 8014b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	370c      	adds	r7, #12
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr

08014b10 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014b20:	605a      	str	r2, [r3, #4]
	return 0;
 8014b22:	2300      	movs	r3, #0
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr

08014b30 <_isatty>:

int _isatty(int file)
{
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
	return 1;
 8014b38:	2301      	movs	r3, #1
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	370c      	adds	r7, #12
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr

08014b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014b46:	b480      	push	{r7}
 8014b48:	b085      	sub	sp, #20
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	60f8      	str	r0, [r7, #12]
 8014b4e:	60b9      	str	r1, [r7, #8]
 8014b50:	607a      	str	r2, [r7, #4]
	return 0;
 8014b52:	2300      	movs	r3, #0
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3714      	adds	r7, #20
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr

08014b60 <_read>:

int _read(int file, char *ptr, int len)
{
 8014b60:	b590      	push	{r4, r7, lr}
 8014b62:	b087      	sub	sp, #28
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	617b      	str	r3, [r7, #20]
 8014b70:	e00a      	b.n	8014b88 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 8014b72:	68bc      	ldr	r4, [r7, #8]
 8014b74:	1c63      	adds	r3, r4, #1
 8014b76:	60bb      	str	r3, [r7, #8]
 8014b78:	f3af 8000 	nop.w
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	3301      	adds	r3, #1
 8014b86:	617b      	str	r3, [r7, #20]
 8014b88:	697a      	ldr	r2, [r7, #20]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	dbf0      	blt.n	8014b72 <_read+0x12>
	}

   return len;
 8014b90:	687b      	ldr	r3, [r7, #4]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	371c      	adds	r7, #28
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd90      	pop	{r4, r7, pc}
	...

08014b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014ba0:	4a16      	ldr	r2, [pc, #88]	; (8014bfc <SystemInit+0x60>)
 8014ba2:	4b16      	ldr	r3, [pc, #88]	; (8014bfc <SystemInit+0x60>)
 8014ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014bb0:	4a13      	ldr	r2, [pc, #76]	; (8014c00 <SystemInit+0x64>)
 8014bb2:	4b13      	ldr	r3, [pc, #76]	; (8014c00 <SystemInit+0x64>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	f043 0301 	orr.w	r3, r3, #1
 8014bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014bbc:	4b10      	ldr	r3, [pc, #64]	; (8014c00 <SystemInit+0x64>)
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014bc2:	4a0f      	ldr	r2, [pc, #60]	; (8014c00 <SystemInit+0x64>)
 8014bc4:	4b0e      	ldr	r3, [pc, #56]	; (8014c00 <SystemInit+0x64>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014bd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014bd2:	4b0b      	ldr	r3, [pc, #44]	; (8014c00 <SystemInit+0x64>)
 8014bd4:	4a0b      	ldr	r2, [pc, #44]	; (8014c04 <SystemInit+0x68>)
 8014bd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014bd8:	4a09      	ldr	r2, [pc, #36]	; (8014c00 <SystemInit+0x64>)
 8014bda:	4b09      	ldr	r3, [pc, #36]	; (8014c00 <SystemInit+0x64>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014be4:	4b06      	ldr	r3, [pc, #24]	; (8014c00 <SystemInit+0x64>)
 8014be6:	2200      	movs	r2, #0
 8014be8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014bea:	4b04      	ldr	r3, [pc, #16]	; (8014bfc <SystemInit+0x60>)
 8014bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014bf0:	609a      	str	r2, [r3, #8]
#endif
}
 8014bf2:	bf00      	nop
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr
 8014bfc:	e000ed00 	.word	0xe000ed00
 8014c00:	40023800 	.word	0x40023800
 8014c04:	24003010 	.word	0x24003010

08014c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014c0e:	e003      	b.n	8014c18 <LoopCopyDataInit>

08014c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014c10:	4b0c      	ldr	r3, [pc, #48]	; (8014c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014c16:	3104      	adds	r1, #4

08014c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014c18:	480b      	ldr	r0, [pc, #44]	; (8014c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014c1a:	4b0c      	ldr	r3, [pc, #48]	; (8014c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014c20:	d3f6      	bcc.n	8014c10 <CopyDataInit>
  ldr  r2, =_sbss
 8014c22:	4a0b      	ldr	r2, [pc, #44]	; (8014c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014c24:	e002      	b.n	8014c2c <LoopFillZerobss>

08014c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014c28:	f842 3b04 	str.w	r3, [r2], #4

08014c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014c2c:	4b09      	ldr	r3, [pc, #36]	; (8014c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014c30:	d3f9      	bcc.n	8014c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014c32:	f7ff ffb3 	bl	8014b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014c36:	f000 f811 	bl	8014c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014c3a:	f7ff fc79 	bl	8014530 <main>
  bx  lr    
 8014c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8014c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014c44:	08018bd8 	.word	0x08018bd8
  ldr  r0, =_sdata
 8014c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014c4c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8014c50:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8014c54:	2000aec0 	.word	0x2000aec0

08014c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014c58:	e7fe      	b.n	8014c58 <ADC_IRQHandler>
	...

08014c5c <__libc_init_array>:
 8014c5c:	b570      	push	{r4, r5, r6, lr}
 8014c5e:	4e0d      	ldr	r6, [pc, #52]	; (8014c94 <__libc_init_array+0x38>)
 8014c60:	4c0d      	ldr	r4, [pc, #52]	; (8014c98 <__libc_init_array+0x3c>)
 8014c62:	1ba4      	subs	r4, r4, r6
 8014c64:	10a4      	asrs	r4, r4, #2
 8014c66:	2500      	movs	r5, #0
 8014c68:	42a5      	cmp	r5, r4
 8014c6a:	d109      	bne.n	8014c80 <__libc_init_array+0x24>
 8014c6c:	4e0b      	ldr	r6, [pc, #44]	; (8014c9c <__libc_init_array+0x40>)
 8014c6e:	4c0c      	ldr	r4, [pc, #48]	; (8014ca0 <__libc_init_array+0x44>)
 8014c70:	f000 ffd8 	bl	8015c24 <_init>
 8014c74:	1ba4      	subs	r4, r4, r6
 8014c76:	10a4      	asrs	r4, r4, #2
 8014c78:	2500      	movs	r5, #0
 8014c7a:	42a5      	cmp	r5, r4
 8014c7c:	d105      	bne.n	8014c8a <__libc_init_array+0x2e>
 8014c7e:	bd70      	pop	{r4, r5, r6, pc}
 8014c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c84:	4798      	blx	r3
 8014c86:	3501      	adds	r5, #1
 8014c88:	e7ee      	b.n	8014c68 <__libc_init_array+0xc>
 8014c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c8e:	4798      	blx	r3
 8014c90:	3501      	adds	r5, #1
 8014c92:	e7f2      	b.n	8014c7a <__libc_init_array+0x1e>
 8014c94:	08018bd0 	.word	0x08018bd0
 8014c98:	08018bd0 	.word	0x08018bd0
 8014c9c:	08018bd0 	.word	0x08018bd0
 8014ca0:	08018bd4 	.word	0x08018bd4

08014ca4 <memcmp>:
 8014ca4:	b510      	push	{r4, lr}
 8014ca6:	3901      	subs	r1, #1
 8014ca8:	4402      	add	r2, r0
 8014caa:	4290      	cmp	r0, r2
 8014cac:	d101      	bne.n	8014cb2 <memcmp+0xe>
 8014cae:	2000      	movs	r0, #0
 8014cb0:	bd10      	pop	{r4, pc}
 8014cb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014cb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014cba:	42a3      	cmp	r3, r4
 8014cbc:	d0f5      	beq.n	8014caa <memcmp+0x6>
 8014cbe:	1b18      	subs	r0, r3, r4
 8014cc0:	bd10      	pop	{r4, pc}

08014cc2 <memcpy>:
 8014cc2:	b510      	push	{r4, lr}
 8014cc4:	1e43      	subs	r3, r0, #1
 8014cc6:	440a      	add	r2, r1
 8014cc8:	4291      	cmp	r1, r2
 8014cca:	d100      	bne.n	8014cce <memcpy+0xc>
 8014ccc:	bd10      	pop	{r4, pc}
 8014cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cd6:	e7f7      	b.n	8014cc8 <memcpy+0x6>

08014cd8 <memset>:
 8014cd8:	4402      	add	r2, r0
 8014cda:	4603      	mov	r3, r0
 8014cdc:	4293      	cmp	r3, r2
 8014cde:	d100      	bne.n	8014ce2 <memset+0xa>
 8014ce0:	4770      	bx	lr
 8014ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8014ce6:	e7f9      	b.n	8014cdc <memset+0x4>

08014ce8 <iprintf>:
 8014ce8:	b40f      	push	{r0, r1, r2, r3}
 8014cea:	4b0a      	ldr	r3, [pc, #40]	; (8014d14 <iprintf+0x2c>)
 8014cec:	b513      	push	{r0, r1, r4, lr}
 8014cee:	681c      	ldr	r4, [r3, #0]
 8014cf0:	b124      	cbz	r4, 8014cfc <iprintf+0x14>
 8014cf2:	69a3      	ldr	r3, [r4, #24]
 8014cf4:	b913      	cbnz	r3, 8014cfc <iprintf+0x14>
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f000 fa5e 	bl	80151b8 <__sinit>
 8014cfc:	ab05      	add	r3, sp, #20
 8014cfe:	9a04      	ldr	r2, [sp, #16]
 8014d00:	68a1      	ldr	r1, [r4, #8]
 8014d02:	9301      	str	r3, [sp, #4]
 8014d04:	4620      	mov	r0, r4
 8014d06:	f000 fc23 	bl	8015550 <_vfiprintf_r>
 8014d0a:	b002      	add	sp, #8
 8014d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d10:	b004      	add	sp, #16
 8014d12:	4770      	bx	lr
 8014d14:	20000020 	.word	0x20000020

08014d18 <_puts_r>:
 8014d18:	b570      	push	{r4, r5, r6, lr}
 8014d1a:	460e      	mov	r6, r1
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	b118      	cbz	r0, 8014d28 <_puts_r+0x10>
 8014d20:	6983      	ldr	r3, [r0, #24]
 8014d22:	b90b      	cbnz	r3, 8014d28 <_puts_r+0x10>
 8014d24:	f000 fa48 	bl	80151b8 <__sinit>
 8014d28:	69ab      	ldr	r3, [r5, #24]
 8014d2a:	68ac      	ldr	r4, [r5, #8]
 8014d2c:	b913      	cbnz	r3, 8014d34 <_puts_r+0x1c>
 8014d2e:	4628      	mov	r0, r5
 8014d30:	f000 fa42 	bl	80151b8 <__sinit>
 8014d34:	4b23      	ldr	r3, [pc, #140]	; (8014dc4 <_puts_r+0xac>)
 8014d36:	429c      	cmp	r4, r3
 8014d38:	d117      	bne.n	8014d6a <_puts_r+0x52>
 8014d3a:	686c      	ldr	r4, [r5, #4]
 8014d3c:	89a3      	ldrh	r3, [r4, #12]
 8014d3e:	071b      	lsls	r3, r3, #28
 8014d40:	d51d      	bpl.n	8014d7e <_puts_r+0x66>
 8014d42:	6923      	ldr	r3, [r4, #16]
 8014d44:	b1db      	cbz	r3, 8014d7e <_puts_r+0x66>
 8014d46:	3e01      	subs	r6, #1
 8014d48:	68a3      	ldr	r3, [r4, #8]
 8014d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	60a3      	str	r3, [r4, #8]
 8014d52:	b9e9      	cbnz	r1, 8014d90 <_puts_r+0x78>
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	da2e      	bge.n	8014db6 <_puts_r+0x9e>
 8014d58:	4622      	mov	r2, r4
 8014d5a:	210a      	movs	r1, #10
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f000 f879 	bl	8014e54 <__swbuf_r>
 8014d62:	3001      	adds	r0, #1
 8014d64:	d011      	beq.n	8014d8a <_puts_r+0x72>
 8014d66:	200a      	movs	r0, #10
 8014d68:	bd70      	pop	{r4, r5, r6, pc}
 8014d6a:	4b17      	ldr	r3, [pc, #92]	; (8014dc8 <_puts_r+0xb0>)
 8014d6c:	429c      	cmp	r4, r3
 8014d6e:	d101      	bne.n	8014d74 <_puts_r+0x5c>
 8014d70:	68ac      	ldr	r4, [r5, #8]
 8014d72:	e7e3      	b.n	8014d3c <_puts_r+0x24>
 8014d74:	4b15      	ldr	r3, [pc, #84]	; (8014dcc <_puts_r+0xb4>)
 8014d76:	429c      	cmp	r4, r3
 8014d78:	bf08      	it	eq
 8014d7a:	68ec      	ldreq	r4, [r5, #12]
 8014d7c:	e7de      	b.n	8014d3c <_puts_r+0x24>
 8014d7e:	4621      	mov	r1, r4
 8014d80:	4628      	mov	r0, r5
 8014d82:	f000 f8b9 	bl	8014ef8 <__swsetup_r>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d0dd      	beq.n	8014d46 <_puts_r+0x2e>
 8014d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d8e:	bd70      	pop	{r4, r5, r6, pc}
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	da04      	bge.n	8014d9e <_puts_r+0x86>
 8014d94:	69a2      	ldr	r2, [r4, #24]
 8014d96:	4293      	cmp	r3, r2
 8014d98:	db06      	blt.n	8014da8 <_puts_r+0x90>
 8014d9a:	290a      	cmp	r1, #10
 8014d9c:	d004      	beq.n	8014da8 <_puts_r+0x90>
 8014d9e:	6823      	ldr	r3, [r4, #0]
 8014da0:	1c5a      	adds	r2, r3, #1
 8014da2:	6022      	str	r2, [r4, #0]
 8014da4:	7019      	strb	r1, [r3, #0]
 8014da6:	e7cf      	b.n	8014d48 <_puts_r+0x30>
 8014da8:	4622      	mov	r2, r4
 8014daa:	4628      	mov	r0, r5
 8014dac:	f000 f852 	bl	8014e54 <__swbuf_r>
 8014db0:	3001      	adds	r0, #1
 8014db2:	d1c9      	bne.n	8014d48 <_puts_r+0x30>
 8014db4:	e7e9      	b.n	8014d8a <_puts_r+0x72>
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	200a      	movs	r0, #10
 8014dba:	1c5a      	adds	r2, r3, #1
 8014dbc:	6022      	str	r2, [r4, #0]
 8014dbe:	7018      	strb	r0, [r3, #0]
 8014dc0:	bd70      	pop	{r4, r5, r6, pc}
 8014dc2:	bf00      	nop
 8014dc4:	08018b50 	.word	0x08018b50
 8014dc8:	08018b70 	.word	0x08018b70
 8014dcc:	08018b30 	.word	0x08018b30

08014dd0 <puts>:
 8014dd0:	4b02      	ldr	r3, [pc, #8]	; (8014ddc <puts+0xc>)
 8014dd2:	4601      	mov	r1, r0
 8014dd4:	6818      	ldr	r0, [r3, #0]
 8014dd6:	f7ff bf9f 	b.w	8014d18 <_puts_r>
 8014dda:	bf00      	nop
 8014ddc:	20000020 	.word	0x20000020

08014de0 <rand>:
 8014de0:	4b19      	ldr	r3, [pc, #100]	; (8014e48 <rand+0x68>)
 8014de2:	b510      	push	{r4, lr}
 8014de4:	681c      	ldr	r4, [r3, #0]
 8014de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014de8:	b9d3      	cbnz	r3, 8014e20 <rand+0x40>
 8014dea:	2018      	movs	r0, #24
 8014dec:	f000 fad2 	bl	8015394 <malloc>
 8014df0:	f243 330e 	movw	r3, #13070	; 0x330e
 8014df4:	63a0      	str	r0, [r4, #56]	; 0x38
 8014df6:	8003      	strh	r3, [r0, #0]
 8014df8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8014dfc:	8043      	strh	r3, [r0, #2]
 8014dfe:	f241 2334 	movw	r3, #4660	; 0x1234
 8014e02:	8083      	strh	r3, [r0, #4]
 8014e04:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8014e08:	80c3      	strh	r3, [r0, #6]
 8014e0a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8014e0e:	8103      	strh	r3, [r0, #8]
 8014e10:	2305      	movs	r3, #5
 8014e12:	8143      	strh	r3, [r0, #10]
 8014e14:	230b      	movs	r3, #11
 8014e16:	8183      	strh	r3, [r0, #12]
 8014e18:	2201      	movs	r2, #1
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014e20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014e22:	480a      	ldr	r0, [pc, #40]	; (8014e4c <rand+0x6c>)
 8014e24:	690a      	ldr	r2, [r1, #16]
 8014e26:	694b      	ldr	r3, [r1, #20]
 8014e28:	4c09      	ldr	r4, [pc, #36]	; (8014e50 <rand+0x70>)
 8014e2a:	4350      	muls	r0, r2
 8014e2c:	fb04 0003 	mla	r0, r4, r3, r0
 8014e30:	fba2 2304 	umull	r2, r3, r2, r4
 8014e34:	3201      	adds	r2, #1
 8014e36:	4403      	add	r3, r0
 8014e38:	f143 0300 	adc.w	r3, r3, #0
 8014e3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8014e40:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014e44:	bd10      	pop	{r4, pc}
 8014e46:	bf00      	nop
 8014e48:	20000020 	.word	0x20000020
 8014e4c:	5851f42d 	.word	0x5851f42d
 8014e50:	4c957f2d 	.word	0x4c957f2d

08014e54 <__swbuf_r>:
 8014e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e56:	460e      	mov	r6, r1
 8014e58:	4614      	mov	r4, r2
 8014e5a:	4605      	mov	r5, r0
 8014e5c:	b118      	cbz	r0, 8014e66 <__swbuf_r+0x12>
 8014e5e:	6983      	ldr	r3, [r0, #24]
 8014e60:	b90b      	cbnz	r3, 8014e66 <__swbuf_r+0x12>
 8014e62:	f000 f9a9 	bl	80151b8 <__sinit>
 8014e66:	4b21      	ldr	r3, [pc, #132]	; (8014eec <__swbuf_r+0x98>)
 8014e68:	429c      	cmp	r4, r3
 8014e6a:	d12a      	bne.n	8014ec2 <__swbuf_r+0x6e>
 8014e6c:	686c      	ldr	r4, [r5, #4]
 8014e6e:	69a3      	ldr	r3, [r4, #24]
 8014e70:	60a3      	str	r3, [r4, #8]
 8014e72:	89a3      	ldrh	r3, [r4, #12]
 8014e74:	071a      	lsls	r2, r3, #28
 8014e76:	d52e      	bpl.n	8014ed6 <__swbuf_r+0x82>
 8014e78:	6923      	ldr	r3, [r4, #16]
 8014e7a:	b363      	cbz	r3, 8014ed6 <__swbuf_r+0x82>
 8014e7c:	6923      	ldr	r3, [r4, #16]
 8014e7e:	6820      	ldr	r0, [r4, #0]
 8014e80:	1ac0      	subs	r0, r0, r3
 8014e82:	6963      	ldr	r3, [r4, #20]
 8014e84:	b2f6      	uxtb	r6, r6
 8014e86:	4298      	cmp	r0, r3
 8014e88:	4637      	mov	r7, r6
 8014e8a:	db04      	blt.n	8014e96 <__swbuf_r+0x42>
 8014e8c:	4621      	mov	r1, r4
 8014e8e:	4628      	mov	r0, r5
 8014e90:	f000 f928 	bl	80150e4 <_fflush_r>
 8014e94:	bb28      	cbnz	r0, 8014ee2 <__swbuf_r+0x8e>
 8014e96:	68a3      	ldr	r3, [r4, #8]
 8014e98:	3b01      	subs	r3, #1
 8014e9a:	60a3      	str	r3, [r4, #8]
 8014e9c:	6823      	ldr	r3, [r4, #0]
 8014e9e:	1c5a      	adds	r2, r3, #1
 8014ea0:	6022      	str	r2, [r4, #0]
 8014ea2:	701e      	strb	r6, [r3, #0]
 8014ea4:	6963      	ldr	r3, [r4, #20]
 8014ea6:	3001      	adds	r0, #1
 8014ea8:	4298      	cmp	r0, r3
 8014eaa:	d004      	beq.n	8014eb6 <__swbuf_r+0x62>
 8014eac:	89a3      	ldrh	r3, [r4, #12]
 8014eae:	07db      	lsls	r3, r3, #31
 8014eb0:	d519      	bpl.n	8014ee6 <__swbuf_r+0x92>
 8014eb2:	2e0a      	cmp	r6, #10
 8014eb4:	d117      	bne.n	8014ee6 <__swbuf_r+0x92>
 8014eb6:	4621      	mov	r1, r4
 8014eb8:	4628      	mov	r0, r5
 8014eba:	f000 f913 	bl	80150e4 <_fflush_r>
 8014ebe:	b190      	cbz	r0, 8014ee6 <__swbuf_r+0x92>
 8014ec0:	e00f      	b.n	8014ee2 <__swbuf_r+0x8e>
 8014ec2:	4b0b      	ldr	r3, [pc, #44]	; (8014ef0 <__swbuf_r+0x9c>)
 8014ec4:	429c      	cmp	r4, r3
 8014ec6:	d101      	bne.n	8014ecc <__swbuf_r+0x78>
 8014ec8:	68ac      	ldr	r4, [r5, #8]
 8014eca:	e7d0      	b.n	8014e6e <__swbuf_r+0x1a>
 8014ecc:	4b09      	ldr	r3, [pc, #36]	; (8014ef4 <__swbuf_r+0xa0>)
 8014ece:	429c      	cmp	r4, r3
 8014ed0:	bf08      	it	eq
 8014ed2:	68ec      	ldreq	r4, [r5, #12]
 8014ed4:	e7cb      	b.n	8014e6e <__swbuf_r+0x1a>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f000 f80d 	bl	8014ef8 <__swsetup_r>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d0cc      	beq.n	8014e7c <__swbuf_r+0x28>
 8014ee2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014ee6:	4638      	mov	r0, r7
 8014ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eea:	bf00      	nop
 8014eec:	08018b50 	.word	0x08018b50
 8014ef0:	08018b70 	.word	0x08018b70
 8014ef4:	08018b30 	.word	0x08018b30

08014ef8 <__swsetup_r>:
 8014ef8:	4b32      	ldr	r3, [pc, #200]	; (8014fc4 <__swsetup_r+0xcc>)
 8014efa:	b570      	push	{r4, r5, r6, lr}
 8014efc:	681d      	ldr	r5, [r3, #0]
 8014efe:	4606      	mov	r6, r0
 8014f00:	460c      	mov	r4, r1
 8014f02:	b125      	cbz	r5, 8014f0e <__swsetup_r+0x16>
 8014f04:	69ab      	ldr	r3, [r5, #24]
 8014f06:	b913      	cbnz	r3, 8014f0e <__swsetup_r+0x16>
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f000 f955 	bl	80151b8 <__sinit>
 8014f0e:	4b2e      	ldr	r3, [pc, #184]	; (8014fc8 <__swsetup_r+0xd0>)
 8014f10:	429c      	cmp	r4, r3
 8014f12:	d10f      	bne.n	8014f34 <__swsetup_r+0x3c>
 8014f14:	686c      	ldr	r4, [r5, #4]
 8014f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f1a:	b29a      	uxth	r2, r3
 8014f1c:	0715      	lsls	r5, r2, #28
 8014f1e:	d42c      	bmi.n	8014f7a <__swsetup_r+0x82>
 8014f20:	06d0      	lsls	r0, r2, #27
 8014f22:	d411      	bmi.n	8014f48 <__swsetup_r+0x50>
 8014f24:	2209      	movs	r2, #9
 8014f26:	6032      	str	r2, [r6, #0]
 8014f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f2c:	81a3      	strh	r3, [r4, #12]
 8014f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f32:	bd70      	pop	{r4, r5, r6, pc}
 8014f34:	4b25      	ldr	r3, [pc, #148]	; (8014fcc <__swsetup_r+0xd4>)
 8014f36:	429c      	cmp	r4, r3
 8014f38:	d101      	bne.n	8014f3e <__swsetup_r+0x46>
 8014f3a:	68ac      	ldr	r4, [r5, #8]
 8014f3c:	e7eb      	b.n	8014f16 <__swsetup_r+0x1e>
 8014f3e:	4b24      	ldr	r3, [pc, #144]	; (8014fd0 <__swsetup_r+0xd8>)
 8014f40:	429c      	cmp	r4, r3
 8014f42:	bf08      	it	eq
 8014f44:	68ec      	ldreq	r4, [r5, #12]
 8014f46:	e7e6      	b.n	8014f16 <__swsetup_r+0x1e>
 8014f48:	0751      	lsls	r1, r2, #29
 8014f4a:	d512      	bpl.n	8014f72 <__swsetup_r+0x7a>
 8014f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f4e:	b141      	cbz	r1, 8014f62 <__swsetup_r+0x6a>
 8014f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f54:	4299      	cmp	r1, r3
 8014f56:	d002      	beq.n	8014f5e <__swsetup_r+0x66>
 8014f58:	4630      	mov	r0, r6
 8014f5a:	f000 fa23 	bl	80153a4 <_free_r>
 8014f5e:	2300      	movs	r3, #0
 8014f60:	6363      	str	r3, [r4, #52]	; 0x34
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f68:	81a3      	strh	r3, [r4, #12]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	6063      	str	r3, [r4, #4]
 8014f6e:	6923      	ldr	r3, [r4, #16]
 8014f70:	6023      	str	r3, [r4, #0]
 8014f72:	89a3      	ldrh	r3, [r4, #12]
 8014f74:	f043 0308 	orr.w	r3, r3, #8
 8014f78:	81a3      	strh	r3, [r4, #12]
 8014f7a:	6923      	ldr	r3, [r4, #16]
 8014f7c:	b94b      	cbnz	r3, 8014f92 <__swsetup_r+0x9a>
 8014f7e:	89a3      	ldrh	r3, [r4, #12]
 8014f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f88:	d003      	beq.n	8014f92 <__swsetup_r+0x9a>
 8014f8a:	4621      	mov	r1, r4
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f000 f9c1 	bl	8015314 <__smakebuf_r>
 8014f92:	89a2      	ldrh	r2, [r4, #12]
 8014f94:	f012 0301 	ands.w	r3, r2, #1
 8014f98:	d00c      	beq.n	8014fb4 <__swsetup_r+0xbc>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60a3      	str	r3, [r4, #8]
 8014f9e:	6963      	ldr	r3, [r4, #20]
 8014fa0:	425b      	negs	r3, r3
 8014fa2:	61a3      	str	r3, [r4, #24]
 8014fa4:	6923      	ldr	r3, [r4, #16]
 8014fa6:	b953      	cbnz	r3, 8014fbe <__swsetup_r+0xc6>
 8014fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014fb0:	d1ba      	bne.n	8014f28 <__swsetup_r+0x30>
 8014fb2:	bd70      	pop	{r4, r5, r6, pc}
 8014fb4:	0792      	lsls	r2, r2, #30
 8014fb6:	bf58      	it	pl
 8014fb8:	6963      	ldrpl	r3, [r4, #20]
 8014fba:	60a3      	str	r3, [r4, #8]
 8014fbc:	e7f2      	b.n	8014fa4 <__swsetup_r+0xac>
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	e7f7      	b.n	8014fb2 <__swsetup_r+0xba>
 8014fc2:	bf00      	nop
 8014fc4:	20000020 	.word	0x20000020
 8014fc8:	08018b50 	.word	0x08018b50
 8014fcc:	08018b70 	.word	0x08018b70
 8014fd0:	08018b30 	.word	0x08018b30

08014fd4 <__sflush_r>:
 8014fd4:	898a      	ldrh	r2, [r1, #12]
 8014fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fda:	4605      	mov	r5, r0
 8014fdc:	0710      	lsls	r0, r2, #28
 8014fde:	460c      	mov	r4, r1
 8014fe0:	d45a      	bmi.n	8015098 <__sflush_r+0xc4>
 8014fe2:	684b      	ldr	r3, [r1, #4]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dc05      	bgt.n	8014ff4 <__sflush_r+0x20>
 8014fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	dc02      	bgt.n	8014ff4 <__sflush_r+0x20>
 8014fee:	2000      	movs	r0, #0
 8014ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ff6:	2e00      	cmp	r6, #0
 8014ff8:	d0f9      	beq.n	8014fee <__sflush_r+0x1a>
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015000:	682f      	ldr	r7, [r5, #0]
 8015002:	602b      	str	r3, [r5, #0]
 8015004:	d033      	beq.n	801506e <__sflush_r+0x9a>
 8015006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	075a      	lsls	r2, r3, #29
 801500c:	d505      	bpl.n	801501a <__sflush_r+0x46>
 801500e:	6863      	ldr	r3, [r4, #4]
 8015010:	1ac0      	subs	r0, r0, r3
 8015012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015014:	b10b      	cbz	r3, 801501a <__sflush_r+0x46>
 8015016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015018:	1ac0      	subs	r0, r0, r3
 801501a:	2300      	movs	r3, #0
 801501c:	4602      	mov	r2, r0
 801501e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015020:	6a21      	ldr	r1, [r4, #32]
 8015022:	4628      	mov	r0, r5
 8015024:	47b0      	blx	r6
 8015026:	1c43      	adds	r3, r0, #1
 8015028:	89a3      	ldrh	r3, [r4, #12]
 801502a:	d106      	bne.n	801503a <__sflush_r+0x66>
 801502c:	6829      	ldr	r1, [r5, #0]
 801502e:	291d      	cmp	r1, #29
 8015030:	d84b      	bhi.n	80150ca <__sflush_r+0xf6>
 8015032:	4a2b      	ldr	r2, [pc, #172]	; (80150e0 <__sflush_r+0x10c>)
 8015034:	40ca      	lsrs	r2, r1
 8015036:	07d6      	lsls	r6, r2, #31
 8015038:	d547      	bpl.n	80150ca <__sflush_r+0xf6>
 801503a:	2200      	movs	r2, #0
 801503c:	6062      	str	r2, [r4, #4]
 801503e:	04d9      	lsls	r1, r3, #19
 8015040:	6922      	ldr	r2, [r4, #16]
 8015042:	6022      	str	r2, [r4, #0]
 8015044:	d504      	bpl.n	8015050 <__sflush_r+0x7c>
 8015046:	1c42      	adds	r2, r0, #1
 8015048:	d101      	bne.n	801504e <__sflush_r+0x7a>
 801504a:	682b      	ldr	r3, [r5, #0]
 801504c:	b903      	cbnz	r3, 8015050 <__sflush_r+0x7c>
 801504e:	6560      	str	r0, [r4, #84]	; 0x54
 8015050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015052:	602f      	str	r7, [r5, #0]
 8015054:	2900      	cmp	r1, #0
 8015056:	d0ca      	beq.n	8014fee <__sflush_r+0x1a>
 8015058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801505c:	4299      	cmp	r1, r3
 801505e:	d002      	beq.n	8015066 <__sflush_r+0x92>
 8015060:	4628      	mov	r0, r5
 8015062:	f000 f99f 	bl	80153a4 <_free_r>
 8015066:	2000      	movs	r0, #0
 8015068:	6360      	str	r0, [r4, #52]	; 0x34
 801506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801506e:	6a21      	ldr	r1, [r4, #32]
 8015070:	2301      	movs	r3, #1
 8015072:	4628      	mov	r0, r5
 8015074:	47b0      	blx	r6
 8015076:	1c41      	adds	r1, r0, #1
 8015078:	d1c6      	bne.n	8015008 <__sflush_r+0x34>
 801507a:	682b      	ldr	r3, [r5, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d0c3      	beq.n	8015008 <__sflush_r+0x34>
 8015080:	2b1d      	cmp	r3, #29
 8015082:	d001      	beq.n	8015088 <__sflush_r+0xb4>
 8015084:	2b16      	cmp	r3, #22
 8015086:	d101      	bne.n	801508c <__sflush_r+0xb8>
 8015088:	602f      	str	r7, [r5, #0]
 801508a:	e7b0      	b.n	8014fee <__sflush_r+0x1a>
 801508c:	89a3      	ldrh	r3, [r4, #12]
 801508e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015092:	81a3      	strh	r3, [r4, #12]
 8015094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015098:	690f      	ldr	r7, [r1, #16]
 801509a:	2f00      	cmp	r7, #0
 801509c:	d0a7      	beq.n	8014fee <__sflush_r+0x1a>
 801509e:	0793      	lsls	r3, r2, #30
 80150a0:	680e      	ldr	r6, [r1, #0]
 80150a2:	bf08      	it	eq
 80150a4:	694b      	ldreq	r3, [r1, #20]
 80150a6:	600f      	str	r7, [r1, #0]
 80150a8:	bf18      	it	ne
 80150aa:	2300      	movne	r3, #0
 80150ac:	eba6 0807 	sub.w	r8, r6, r7
 80150b0:	608b      	str	r3, [r1, #8]
 80150b2:	f1b8 0f00 	cmp.w	r8, #0
 80150b6:	dd9a      	ble.n	8014fee <__sflush_r+0x1a>
 80150b8:	4643      	mov	r3, r8
 80150ba:	463a      	mov	r2, r7
 80150bc:	6a21      	ldr	r1, [r4, #32]
 80150be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80150c0:	4628      	mov	r0, r5
 80150c2:	47b0      	blx	r6
 80150c4:	2800      	cmp	r0, #0
 80150c6:	dc07      	bgt.n	80150d8 <__sflush_r+0x104>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ce:	81a3      	strh	r3, [r4, #12]
 80150d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d8:	4407      	add	r7, r0
 80150da:	eba8 0800 	sub.w	r8, r8, r0
 80150de:	e7e8      	b.n	80150b2 <__sflush_r+0xde>
 80150e0:	20400001 	.word	0x20400001

080150e4 <_fflush_r>:
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	690b      	ldr	r3, [r1, #16]
 80150e8:	4605      	mov	r5, r0
 80150ea:	460c      	mov	r4, r1
 80150ec:	b1db      	cbz	r3, 8015126 <_fflush_r+0x42>
 80150ee:	b118      	cbz	r0, 80150f8 <_fflush_r+0x14>
 80150f0:	6983      	ldr	r3, [r0, #24]
 80150f2:	b90b      	cbnz	r3, 80150f8 <_fflush_r+0x14>
 80150f4:	f000 f860 	bl	80151b8 <__sinit>
 80150f8:	4b0c      	ldr	r3, [pc, #48]	; (801512c <_fflush_r+0x48>)
 80150fa:	429c      	cmp	r4, r3
 80150fc:	d109      	bne.n	8015112 <_fflush_r+0x2e>
 80150fe:	686c      	ldr	r4, [r5, #4]
 8015100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015104:	b17b      	cbz	r3, 8015126 <_fflush_r+0x42>
 8015106:	4621      	mov	r1, r4
 8015108:	4628      	mov	r0, r5
 801510a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801510e:	f7ff bf61 	b.w	8014fd4 <__sflush_r>
 8015112:	4b07      	ldr	r3, [pc, #28]	; (8015130 <_fflush_r+0x4c>)
 8015114:	429c      	cmp	r4, r3
 8015116:	d101      	bne.n	801511c <_fflush_r+0x38>
 8015118:	68ac      	ldr	r4, [r5, #8]
 801511a:	e7f1      	b.n	8015100 <_fflush_r+0x1c>
 801511c:	4b05      	ldr	r3, [pc, #20]	; (8015134 <_fflush_r+0x50>)
 801511e:	429c      	cmp	r4, r3
 8015120:	bf08      	it	eq
 8015122:	68ec      	ldreq	r4, [r5, #12]
 8015124:	e7ec      	b.n	8015100 <_fflush_r+0x1c>
 8015126:	2000      	movs	r0, #0
 8015128:	bd38      	pop	{r3, r4, r5, pc}
 801512a:	bf00      	nop
 801512c:	08018b50 	.word	0x08018b50
 8015130:	08018b70 	.word	0x08018b70
 8015134:	08018b30 	.word	0x08018b30

08015138 <_cleanup_r>:
 8015138:	4901      	ldr	r1, [pc, #4]	; (8015140 <_cleanup_r+0x8>)
 801513a:	f000 b8a9 	b.w	8015290 <_fwalk_reent>
 801513e:	bf00      	nop
 8015140:	080150e5 	.word	0x080150e5

08015144 <std.isra.0>:
 8015144:	2300      	movs	r3, #0
 8015146:	b510      	push	{r4, lr}
 8015148:	4604      	mov	r4, r0
 801514a:	6003      	str	r3, [r0, #0]
 801514c:	6043      	str	r3, [r0, #4]
 801514e:	6083      	str	r3, [r0, #8]
 8015150:	8181      	strh	r1, [r0, #12]
 8015152:	6643      	str	r3, [r0, #100]	; 0x64
 8015154:	81c2      	strh	r2, [r0, #14]
 8015156:	6103      	str	r3, [r0, #16]
 8015158:	6143      	str	r3, [r0, #20]
 801515a:	6183      	str	r3, [r0, #24]
 801515c:	4619      	mov	r1, r3
 801515e:	2208      	movs	r2, #8
 8015160:	305c      	adds	r0, #92	; 0x5c
 8015162:	f7ff fdb9 	bl	8014cd8 <memset>
 8015166:	4b05      	ldr	r3, [pc, #20]	; (801517c <std.isra.0+0x38>)
 8015168:	6263      	str	r3, [r4, #36]	; 0x24
 801516a:	4b05      	ldr	r3, [pc, #20]	; (8015180 <std.isra.0+0x3c>)
 801516c:	62a3      	str	r3, [r4, #40]	; 0x28
 801516e:	4b05      	ldr	r3, [pc, #20]	; (8015184 <std.isra.0+0x40>)
 8015170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015172:	4b05      	ldr	r3, [pc, #20]	; (8015188 <std.isra.0+0x44>)
 8015174:	6224      	str	r4, [r4, #32]
 8015176:	6323      	str	r3, [r4, #48]	; 0x30
 8015178:	bd10      	pop	{r4, pc}
 801517a:	bf00      	nop
 801517c:	08015ac9 	.word	0x08015ac9
 8015180:	08015aeb 	.word	0x08015aeb
 8015184:	08015b23 	.word	0x08015b23
 8015188:	08015b47 	.word	0x08015b47

0801518c <__sfmoreglue>:
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	1e4a      	subs	r2, r1, #1
 8015190:	2568      	movs	r5, #104	; 0x68
 8015192:	4355      	muls	r5, r2
 8015194:	460e      	mov	r6, r1
 8015196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801519a:	f000 f951 	bl	8015440 <_malloc_r>
 801519e:	4604      	mov	r4, r0
 80151a0:	b140      	cbz	r0, 80151b4 <__sfmoreglue+0x28>
 80151a2:	2100      	movs	r1, #0
 80151a4:	e880 0042 	stmia.w	r0, {r1, r6}
 80151a8:	300c      	adds	r0, #12
 80151aa:	60a0      	str	r0, [r4, #8]
 80151ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80151b0:	f7ff fd92 	bl	8014cd8 <memset>
 80151b4:	4620      	mov	r0, r4
 80151b6:	bd70      	pop	{r4, r5, r6, pc}

080151b8 <__sinit>:
 80151b8:	6983      	ldr	r3, [r0, #24]
 80151ba:	b510      	push	{r4, lr}
 80151bc:	4604      	mov	r4, r0
 80151be:	bb33      	cbnz	r3, 801520e <__sinit+0x56>
 80151c0:	6483      	str	r3, [r0, #72]	; 0x48
 80151c2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80151c4:	6503      	str	r3, [r0, #80]	; 0x50
 80151c6:	4b12      	ldr	r3, [pc, #72]	; (8015210 <__sinit+0x58>)
 80151c8:	4a12      	ldr	r2, [pc, #72]	; (8015214 <__sinit+0x5c>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	6282      	str	r2, [r0, #40]	; 0x28
 80151ce:	4298      	cmp	r0, r3
 80151d0:	bf04      	itt	eq
 80151d2:	2301      	moveq	r3, #1
 80151d4:	6183      	streq	r3, [r0, #24]
 80151d6:	f000 f81f 	bl	8015218 <__sfp>
 80151da:	6060      	str	r0, [r4, #4]
 80151dc:	4620      	mov	r0, r4
 80151de:	f000 f81b 	bl	8015218 <__sfp>
 80151e2:	60a0      	str	r0, [r4, #8]
 80151e4:	4620      	mov	r0, r4
 80151e6:	f000 f817 	bl	8015218 <__sfp>
 80151ea:	2200      	movs	r2, #0
 80151ec:	60e0      	str	r0, [r4, #12]
 80151ee:	2104      	movs	r1, #4
 80151f0:	6860      	ldr	r0, [r4, #4]
 80151f2:	f7ff ffa7 	bl	8015144 <std.isra.0>
 80151f6:	2201      	movs	r2, #1
 80151f8:	2109      	movs	r1, #9
 80151fa:	68a0      	ldr	r0, [r4, #8]
 80151fc:	f7ff ffa2 	bl	8015144 <std.isra.0>
 8015200:	2202      	movs	r2, #2
 8015202:	2112      	movs	r1, #18
 8015204:	68e0      	ldr	r0, [r4, #12]
 8015206:	f7ff ff9d 	bl	8015144 <std.isra.0>
 801520a:	2301      	movs	r3, #1
 801520c:	61a3      	str	r3, [r4, #24]
 801520e:	bd10      	pop	{r4, pc}
 8015210:	08018b90 	.word	0x08018b90
 8015214:	08015139 	.word	0x08015139

08015218 <__sfp>:
 8015218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801521a:	4b1c      	ldr	r3, [pc, #112]	; (801528c <__sfp+0x74>)
 801521c:	681e      	ldr	r6, [r3, #0]
 801521e:	69b3      	ldr	r3, [r6, #24]
 8015220:	4607      	mov	r7, r0
 8015222:	b913      	cbnz	r3, 801522a <__sfp+0x12>
 8015224:	4630      	mov	r0, r6
 8015226:	f7ff ffc7 	bl	80151b8 <__sinit>
 801522a:	3648      	adds	r6, #72	; 0x48
 801522c:	68b4      	ldr	r4, [r6, #8]
 801522e:	6873      	ldr	r3, [r6, #4]
 8015230:	3b01      	subs	r3, #1
 8015232:	d503      	bpl.n	801523c <__sfp+0x24>
 8015234:	6833      	ldr	r3, [r6, #0]
 8015236:	b133      	cbz	r3, 8015246 <__sfp+0x2e>
 8015238:	6836      	ldr	r6, [r6, #0]
 801523a:	e7f7      	b.n	801522c <__sfp+0x14>
 801523c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015240:	b16d      	cbz	r5, 801525e <__sfp+0x46>
 8015242:	3468      	adds	r4, #104	; 0x68
 8015244:	e7f4      	b.n	8015230 <__sfp+0x18>
 8015246:	2104      	movs	r1, #4
 8015248:	4638      	mov	r0, r7
 801524a:	f7ff ff9f 	bl	801518c <__sfmoreglue>
 801524e:	6030      	str	r0, [r6, #0]
 8015250:	2800      	cmp	r0, #0
 8015252:	d1f1      	bne.n	8015238 <__sfp+0x20>
 8015254:	230c      	movs	r3, #12
 8015256:	603b      	str	r3, [r7, #0]
 8015258:	4604      	mov	r4, r0
 801525a:	4620      	mov	r0, r4
 801525c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801525e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015262:	81e3      	strh	r3, [r4, #14]
 8015264:	2301      	movs	r3, #1
 8015266:	81a3      	strh	r3, [r4, #12]
 8015268:	6665      	str	r5, [r4, #100]	; 0x64
 801526a:	6025      	str	r5, [r4, #0]
 801526c:	60a5      	str	r5, [r4, #8]
 801526e:	6065      	str	r5, [r4, #4]
 8015270:	6125      	str	r5, [r4, #16]
 8015272:	6165      	str	r5, [r4, #20]
 8015274:	61a5      	str	r5, [r4, #24]
 8015276:	2208      	movs	r2, #8
 8015278:	4629      	mov	r1, r5
 801527a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801527e:	f7ff fd2b 	bl	8014cd8 <memset>
 8015282:	6365      	str	r5, [r4, #52]	; 0x34
 8015284:	63a5      	str	r5, [r4, #56]	; 0x38
 8015286:	64a5      	str	r5, [r4, #72]	; 0x48
 8015288:	64e5      	str	r5, [r4, #76]	; 0x4c
 801528a:	e7e6      	b.n	801525a <__sfp+0x42>
 801528c:	08018b90 	.word	0x08018b90

08015290 <_fwalk_reent>:
 8015290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015294:	4680      	mov	r8, r0
 8015296:	4689      	mov	r9, r1
 8015298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801529c:	2600      	movs	r6, #0
 801529e:	b914      	cbnz	r4, 80152a6 <_fwalk_reent+0x16>
 80152a0:	4630      	mov	r0, r6
 80152a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152a6:	68a5      	ldr	r5, [r4, #8]
 80152a8:	6867      	ldr	r7, [r4, #4]
 80152aa:	3f01      	subs	r7, #1
 80152ac:	d501      	bpl.n	80152b2 <_fwalk_reent+0x22>
 80152ae:	6824      	ldr	r4, [r4, #0]
 80152b0:	e7f5      	b.n	801529e <_fwalk_reent+0xe>
 80152b2:	89ab      	ldrh	r3, [r5, #12]
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d907      	bls.n	80152c8 <_fwalk_reent+0x38>
 80152b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80152bc:	3301      	adds	r3, #1
 80152be:	d003      	beq.n	80152c8 <_fwalk_reent+0x38>
 80152c0:	4629      	mov	r1, r5
 80152c2:	4640      	mov	r0, r8
 80152c4:	47c8      	blx	r9
 80152c6:	4306      	orrs	r6, r0
 80152c8:	3568      	adds	r5, #104	; 0x68
 80152ca:	e7ee      	b.n	80152aa <_fwalk_reent+0x1a>

080152cc <__swhatbuf_r>:
 80152cc:	b570      	push	{r4, r5, r6, lr}
 80152ce:	460e      	mov	r6, r1
 80152d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d4:	2900      	cmp	r1, #0
 80152d6:	b090      	sub	sp, #64	; 0x40
 80152d8:	4614      	mov	r4, r2
 80152da:	461d      	mov	r5, r3
 80152dc:	da07      	bge.n	80152ee <__swhatbuf_r+0x22>
 80152de:	2300      	movs	r3, #0
 80152e0:	602b      	str	r3, [r5, #0]
 80152e2:	89b3      	ldrh	r3, [r6, #12]
 80152e4:	061a      	lsls	r2, r3, #24
 80152e6:	d410      	bmi.n	801530a <__swhatbuf_r+0x3e>
 80152e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152ec:	e00e      	b.n	801530c <__swhatbuf_r+0x40>
 80152ee:	aa01      	add	r2, sp, #4
 80152f0:	f000 fc50 	bl	8015b94 <_fstat_r>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	dbf2      	blt.n	80152de <__swhatbuf_r+0x12>
 80152f8:	9a02      	ldr	r2, [sp, #8]
 80152fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015302:	425a      	negs	r2, r3
 8015304:	415a      	adcs	r2, r3
 8015306:	602a      	str	r2, [r5, #0]
 8015308:	e7ee      	b.n	80152e8 <__swhatbuf_r+0x1c>
 801530a:	2340      	movs	r3, #64	; 0x40
 801530c:	2000      	movs	r0, #0
 801530e:	6023      	str	r3, [r4, #0]
 8015310:	b010      	add	sp, #64	; 0x40
 8015312:	bd70      	pop	{r4, r5, r6, pc}

08015314 <__smakebuf_r>:
 8015314:	898b      	ldrh	r3, [r1, #12]
 8015316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015318:	079d      	lsls	r5, r3, #30
 801531a:	4606      	mov	r6, r0
 801531c:	460c      	mov	r4, r1
 801531e:	d507      	bpl.n	8015330 <__smakebuf_r+0x1c>
 8015320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	6123      	str	r3, [r4, #16]
 8015328:	2301      	movs	r3, #1
 801532a:	6163      	str	r3, [r4, #20]
 801532c:	b002      	add	sp, #8
 801532e:	bd70      	pop	{r4, r5, r6, pc}
 8015330:	ab01      	add	r3, sp, #4
 8015332:	466a      	mov	r2, sp
 8015334:	f7ff ffca 	bl	80152cc <__swhatbuf_r>
 8015338:	9900      	ldr	r1, [sp, #0]
 801533a:	4605      	mov	r5, r0
 801533c:	4630      	mov	r0, r6
 801533e:	f000 f87f 	bl	8015440 <_malloc_r>
 8015342:	b948      	cbnz	r0, 8015358 <__smakebuf_r+0x44>
 8015344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015348:	059a      	lsls	r2, r3, #22
 801534a:	d4ef      	bmi.n	801532c <__smakebuf_r+0x18>
 801534c:	f023 0303 	bic.w	r3, r3, #3
 8015350:	f043 0302 	orr.w	r3, r3, #2
 8015354:	81a3      	strh	r3, [r4, #12]
 8015356:	e7e3      	b.n	8015320 <__smakebuf_r+0xc>
 8015358:	4b0d      	ldr	r3, [pc, #52]	; (8015390 <__smakebuf_r+0x7c>)
 801535a:	62b3      	str	r3, [r6, #40]	; 0x28
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	6020      	str	r0, [r4, #0]
 8015360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015364:	81a3      	strh	r3, [r4, #12]
 8015366:	9b00      	ldr	r3, [sp, #0]
 8015368:	6163      	str	r3, [r4, #20]
 801536a:	9b01      	ldr	r3, [sp, #4]
 801536c:	6120      	str	r0, [r4, #16]
 801536e:	b15b      	cbz	r3, 8015388 <__smakebuf_r+0x74>
 8015370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015374:	4630      	mov	r0, r6
 8015376:	f000 fc1f 	bl	8015bb8 <_isatty_r>
 801537a:	b128      	cbz	r0, 8015388 <__smakebuf_r+0x74>
 801537c:	89a3      	ldrh	r3, [r4, #12]
 801537e:	f023 0303 	bic.w	r3, r3, #3
 8015382:	f043 0301 	orr.w	r3, r3, #1
 8015386:	81a3      	strh	r3, [r4, #12]
 8015388:	89a3      	ldrh	r3, [r4, #12]
 801538a:	431d      	orrs	r5, r3
 801538c:	81a5      	strh	r5, [r4, #12]
 801538e:	e7cd      	b.n	801532c <__smakebuf_r+0x18>
 8015390:	08015139 	.word	0x08015139

08015394 <malloc>:
 8015394:	4b02      	ldr	r3, [pc, #8]	; (80153a0 <malloc+0xc>)
 8015396:	4601      	mov	r1, r0
 8015398:	6818      	ldr	r0, [r3, #0]
 801539a:	f000 b851 	b.w	8015440 <_malloc_r>
 801539e:	bf00      	nop
 80153a0:	20000020 	.word	0x20000020

080153a4 <_free_r>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4605      	mov	r5, r0
 80153a8:	2900      	cmp	r1, #0
 80153aa:	d045      	beq.n	8015438 <_free_r+0x94>
 80153ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153b0:	1f0c      	subs	r4, r1, #4
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	bfb8      	it	lt
 80153b6:	18e4      	addlt	r4, r4, r3
 80153b8:	f000 fc20 	bl	8015bfc <__malloc_lock>
 80153bc:	4a1f      	ldr	r2, [pc, #124]	; (801543c <_free_r+0x98>)
 80153be:	6813      	ldr	r3, [r2, #0]
 80153c0:	4610      	mov	r0, r2
 80153c2:	b933      	cbnz	r3, 80153d2 <_free_r+0x2e>
 80153c4:	6063      	str	r3, [r4, #4]
 80153c6:	6014      	str	r4, [r2, #0]
 80153c8:	4628      	mov	r0, r5
 80153ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153ce:	f000 bc16 	b.w	8015bfe <__malloc_unlock>
 80153d2:	42a3      	cmp	r3, r4
 80153d4:	d90c      	bls.n	80153f0 <_free_r+0x4c>
 80153d6:	6821      	ldr	r1, [r4, #0]
 80153d8:	1862      	adds	r2, r4, r1
 80153da:	4293      	cmp	r3, r2
 80153dc:	bf04      	itt	eq
 80153de:	681a      	ldreq	r2, [r3, #0]
 80153e0:	685b      	ldreq	r3, [r3, #4]
 80153e2:	6063      	str	r3, [r4, #4]
 80153e4:	bf04      	itt	eq
 80153e6:	1852      	addeq	r2, r2, r1
 80153e8:	6022      	streq	r2, [r4, #0]
 80153ea:	6004      	str	r4, [r0, #0]
 80153ec:	e7ec      	b.n	80153c8 <_free_r+0x24>
 80153ee:	4613      	mov	r3, r2
 80153f0:	685a      	ldr	r2, [r3, #4]
 80153f2:	b10a      	cbz	r2, 80153f8 <_free_r+0x54>
 80153f4:	42a2      	cmp	r2, r4
 80153f6:	d9fa      	bls.n	80153ee <_free_r+0x4a>
 80153f8:	6819      	ldr	r1, [r3, #0]
 80153fa:	1858      	adds	r0, r3, r1
 80153fc:	42a0      	cmp	r0, r4
 80153fe:	d10b      	bne.n	8015418 <_free_r+0x74>
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	4401      	add	r1, r0
 8015404:	1858      	adds	r0, r3, r1
 8015406:	4282      	cmp	r2, r0
 8015408:	6019      	str	r1, [r3, #0]
 801540a:	d1dd      	bne.n	80153c8 <_free_r+0x24>
 801540c:	6810      	ldr	r0, [r2, #0]
 801540e:	6852      	ldr	r2, [r2, #4]
 8015410:	605a      	str	r2, [r3, #4]
 8015412:	4401      	add	r1, r0
 8015414:	6019      	str	r1, [r3, #0]
 8015416:	e7d7      	b.n	80153c8 <_free_r+0x24>
 8015418:	d902      	bls.n	8015420 <_free_r+0x7c>
 801541a:	230c      	movs	r3, #12
 801541c:	602b      	str	r3, [r5, #0]
 801541e:	e7d3      	b.n	80153c8 <_free_r+0x24>
 8015420:	6820      	ldr	r0, [r4, #0]
 8015422:	1821      	adds	r1, r4, r0
 8015424:	428a      	cmp	r2, r1
 8015426:	bf04      	itt	eq
 8015428:	6811      	ldreq	r1, [r2, #0]
 801542a:	6852      	ldreq	r2, [r2, #4]
 801542c:	6062      	str	r2, [r4, #4]
 801542e:	bf04      	itt	eq
 8015430:	1809      	addeq	r1, r1, r0
 8015432:	6021      	streq	r1, [r4, #0]
 8015434:	605c      	str	r4, [r3, #4]
 8015436:	e7c7      	b.n	80153c8 <_free_r+0x24>
 8015438:	bd38      	pop	{r3, r4, r5, pc}
 801543a:	bf00      	nop
 801543c:	2000442c 	.word	0x2000442c

08015440 <_malloc_r>:
 8015440:	b570      	push	{r4, r5, r6, lr}
 8015442:	1ccd      	adds	r5, r1, #3
 8015444:	f025 0503 	bic.w	r5, r5, #3
 8015448:	3508      	adds	r5, #8
 801544a:	2d0c      	cmp	r5, #12
 801544c:	bf38      	it	cc
 801544e:	250c      	movcc	r5, #12
 8015450:	2d00      	cmp	r5, #0
 8015452:	4606      	mov	r6, r0
 8015454:	db01      	blt.n	801545a <_malloc_r+0x1a>
 8015456:	42a9      	cmp	r1, r5
 8015458:	d903      	bls.n	8015462 <_malloc_r+0x22>
 801545a:	230c      	movs	r3, #12
 801545c:	6033      	str	r3, [r6, #0]
 801545e:	2000      	movs	r0, #0
 8015460:	bd70      	pop	{r4, r5, r6, pc}
 8015462:	f000 fbcb 	bl	8015bfc <__malloc_lock>
 8015466:	4a23      	ldr	r2, [pc, #140]	; (80154f4 <_malloc_r+0xb4>)
 8015468:	6814      	ldr	r4, [r2, #0]
 801546a:	4621      	mov	r1, r4
 801546c:	b991      	cbnz	r1, 8015494 <_malloc_r+0x54>
 801546e:	4c22      	ldr	r4, [pc, #136]	; (80154f8 <_malloc_r+0xb8>)
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	b91b      	cbnz	r3, 801547c <_malloc_r+0x3c>
 8015474:	4630      	mov	r0, r6
 8015476:	f000 fb17 	bl	8015aa8 <_sbrk_r>
 801547a:	6020      	str	r0, [r4, #0]
 801547c:	4629      	mov	r1, r5
 801547e:	4630      	mov	r0, r6
 8015480:	f000 fb12 	bl	8015aa8 <_sbrk_r>
 8015484:	1c43      	adds	r3, r0, #1
 8015486:	d126      	bne.n	80154d6 <_malloc_r+0x96>
 8015488:	230c      	movs	r3, #12
 801548a:	6033      	str	r3, [r6, #0]
 801548c:	4630      	mov	r0, r6
 801548e:	f000 fbb6 	bl	8015bfe <__malloc_unlock>
 8015492:	e7e4      	b.n	801545e <_malloc_r+0x1e>
 8015494:	680b      	ldr	r3, [r1, #0]
 8015496:	1b5b      	subs	r3, r3, r5
 8015498:	d41a      	bmi.n	80154d0 <_malloc_r+0x90>
 801549a:	2b0b      	cmp	r3, #11
 801549c:	d90f      	bls.n	80154be <_malloc_r+0x7e>
 801549e:	600b      	str	r3, [r1, #0]
 80154a0:	50cd      	str	r5, [r1, r3]
 80154a2:	18cc      	adds	r4, r1, r3
 80154a4:	4630      	mov	r0, r6
 80154a6:	f000 fbaa 	bl	8015bfe <__malloc_unlock>
 80154aa:	f104 000b 	add.w	r0, r4, #11
 80154ae:	1d23      	adds	r3, r4, #4
 80154b0:	f020 0007 	bic.w	r0, r0, #7
 80154b4:	1ac3      	subs	r3, r0, r3
 80154b6:	d01b      	beq.n	80154f0 <_malloc_r+0xb0>
 80154b8:	425a      	negs	r2, r3
 80154ba:	50e2      	str	r2, [r4, r3]
 80154bc:	bd70      	pop	{r4, r5, r6, pc}
 80154be:	428c      	cmp	r4, r1
 80154c0:	bf0d      	iteet	eq
 80154c2:	6863      	ldreq	r3, [r4, #4]
 80154c4:	684b      	ldrne	r3, [r1, #4]
 80154c6:	6063      	strne	r3, [r4, #4]
 80154c8:	6013      	streq	r3, [r2, #0]
 80154ca:	bf18      	it	ne
 80154cc:	460c      	movne	r4, r1
 80154ce:	e7e9      	b.n	80154a4 <_malloc_r+0x64>
 80154d0:	460c      	mov	r4, r1
 80154d2:	6849      	ldr	r1, [r1, #4]
 80154d4:	e7ca      	b.n	801546c <_malloc_r+0x2c>
 80154d6:	1cc4      	adds	r4, r0, #3
 80154d8:	f024 0403 	bic.w	r4, r4, #3
 80154dc:	42a0      	cmp	r0, r4
 80154de:	d005      	beq.n	80154ec <_malloc_r+0xac>
 80154e0:	1a21      	subs	r1, r4, r0
 80154e2:	4630      	mov	r0, r6
 80154e4:	f000 fae0 	bl	8015aa8 <_sbrk_r>
 80154e8:	3001      	adds	r0, #1
 80154ea:	d0cd      	beq.n	8015488 <_malloc_r+0x48>
 80154ec:	6025      	str	r5, [r4, #0]
 80154ee:	e7d9      	b.n	80154a4 <_malloc_r+0x64>
 80154f0:	bd70      	pop	{r4, r5, r6, pc}
 80154f2:	bf00      	nop
 80154f4:	2000442c 	.word	0x2000442c
 80154f8:	20004430 	.word	0x20004430

080154fc <__sfputc_r>:
 80154fc:	6893      	ldr	r3, [r2, #8]
 80154fe:	3b01      	subs	r3, #1
 8015500:	2b00      	cmp	r3, #0
 8015502:	b410      	push	{r4}
 8015504:	6093      	str	r3, [r2, #8]
 8015506:	da09      	bge.n	801551c <__sfputc_r+0x20>
 8015508:	6994      	ldr	r4, [r2, #24]
 801550a:	42a3      	cmp	r3, r4
 801550c:	db02      	blt.n	8015514 <__sfputc_r+0x18>
 801550e:	b2cb      	uxtb	r3, r1
 8015510:	2b0a      	cmp	r3, #10
 8015512:	d103      	bne.n	801551c <__sfputc_r+0x20>
 8015514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015518:	f7ff bc9c 	b.w	8014e54 <__swbuf_r>
 801551c:	6813      	ldr	r3, [r2, #0]
 801551e:	1c58      	adds	r0, r3, #1
 8015520:	6010      	str	r0, [r2, #0]
 8015522:	7019      	strb	r1, [r3, #0]
 8015524:	b2c8      	uxtb	r0, r1
 8015526:	f85d 4b04 	ldr.w	r4, [sp], #4
 801552a:	4770      	bx	lr

0801552c <__sfputs_r>:
 801552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552e:	4606      	mov	r6, r0
 8015530:	460f      	mov	r7, r1
 8015532:	4614      	mov	r4, r2
 8015534:	18d5      	adds	r5, r2, r3
 8015536:	42ac      	cmp	r4, r5
 8015538:	d101      	bne.n	801553e <__sfputs_r+0x12>
 801553a:	2000      	movs	r0, #0
 801553c:	e007      	b.n	801554e <__sfputs_r+0x22>
 801553e:	463a      	mov	r2, r7
 8015540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015544:	4630      	mov	r0, r6
 8015546:	f7ff ffd9 	bl	80154fc <__sfputc_r>
 801554a:	1c43      	adds	r3, r0, #1
 801554c:	d1f3      	bne.n	8015536 <__sfputs_r+0xa>
 801554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015550 <_vfiprintf_r>:
 8015550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015554:	b09d      	sub	sp, #116	; 0x74
 8015556:	460c      	mov	r4, r1
 8015558:	4617      	mov	r7, r2
 801555a:	9303      	str	r3, [sp, #12]
 801555c:	4606      	mov	r6, r0
 801555e:	b118      	cbz	r0, 8015568 <_vfiprintf_r+0x18>
 8015560:	6983      	ldr	r3, [r0, #24]
 8015562:	b90b      	cbnz	r3, 8015568 <_vfiprintf_r+0x18>
 8015564:	f7ff fe28 	bl	80151b8 <__sinit>
 8015568:	4b7c      	ldr	r3, [pc, #496]	; (801575c <_vfiprintf_r+0x20c>)
 801556a:	429c      	cmp	r4, r3
 801556c:	d157      	bne.n	801561e <_vfiprintf_r+0xce>
 801556e:	6874      	ldr	r4, [r6, #4]
 8015570:	89a3      	ldrh	r3, [r4, #12]
 8015572:	0718      	lsls	r0, r3, #28
 8015574:	d55d      	bpl.n	8015632 <_vfiprintf_r+0xe2>
 8015576:	6923      	ldr	r3, [r4, #16]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d05a      	beq.n	8015632 <_vfiprintf_r+0xe2>
 801557c:	2300      	movs	r3, #0
 801557e:	9309      	str	r3, [sp, #36]	; 0x24
 8015580:	2320      	movs	r3, #32
 8015582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015586:	2330      	movs	r3, #48	; 0x30
 8015588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801558c:	f04f 0b01 	mov.w	fp, #1
 8015590:	46b8      	mov	r8, r7
 8015592:	4645      	mov	r5, r8
 8015594:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015598:	2b00      	cmp	r3, #0
 801559a:	d155      	bne.n	8015648 <_vfiprintf_r+0xf8>
 801559c:	ebb8 0a07 	subs.w	sl, r8, r7
 80155a0:	d00b      	beq.n	80155ba <_vfiprintf_r+0x6a>
 80155a2:	4653      	mov	r3, sl
 80155a4:	463a      	mov	r2, r7
 80155a6:	4621      	mov	r1, r4
 80155a8:	4630      	mov	r0, r6
 80155aa:	f7ff ffbf 	bl	801552c <__sfputs_r>
 80155ae:	3001      	adds	r0, #1
 80155b0:	f000 80c4 	beq.w	801573c <_vfiprintf_r+0x1ec>
 80155b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b6:	4453      	add	r3, sl
 80155b8:	9309      	str	r3, [sp, #36]	; 0x24
 80155ba:	f898 3000 	ldrb.w	r3, [r8]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	f000 80bc 	beq.w	801573c <_vfiprintf_r+0x1ec>
 80155c4:	2300      	movs	r3, #0
 80155c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155ca:	9304      	str	r3, [sp, #16]
 80155cc:	9307      	str	r3, [sp, #28]
 80155ce:	9205      	str	r2, [sp, #20]
 80155d0:	9306      	str	r3, [sp, #24]
 80155d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155d6:	931a      	str	r3, [sp, #104]	; 0x68
 80155d8:	2205      	movs	r2, #5
 80155da:	7829      	ldrb	r1, [r5, #0]
 80155dc:	4860      	ldr	r0, [pc, #384]	; (8015760 <_vfiprintf_r+0x210>)
 80155de:	f7ea fdff 	bl	80001e0 <memchr>
 80155e2:	f105 0801 	add.w	r8, r5, #1
 80155e6:	9b04      	ldr	r3, [sp, #16]
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d131      	bne.n	8015650 <_vfiprintf_r+0x100>
 80155ec:	06d9      	lsls	r1, r3, #27
 80155ee:	bf44      	itt	mi
 80155f0:	2220      	movmi	r2, #32
 80155f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80155f6:	071a      	lsls	r2, r3, #28
 80155f8:	bf44      	itt	mi
 80155fa:	222b      	movmi	r2, #43	; 0x2b
 80155fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015600:	782a      	ldrb	r2, [r5, #0]
 8015602:	2a2a      	cmp	r2, #42	; 0x2a
 8015604:	d02c      	beq.n	8015660 <_vfiprintf_r+0x110>
 8015606:	9a07      	ldr	r2, [sp, #28]
 8015608:	2100      	movs	r1, #0
 801560a:	200a      	movs	r0, #10
 801560c:	46a8      	mov	r8, r5
 801560e:	3501      	adds	r5, #1
 8015610:	f898 3000 	ldrb.w	r3, [r8]
 8015614:	3b30      	subs	r3, #48	; 0x30
 8015616:	2b09      	cmp	r3, #9
 8015618:	d96d      	bls.n	80156f6 <_vfiprintf_r+0x1a6>
 801561a:	b371      	cbz	r1, 801567a <_vfiprintf_r+0x12a>
 801561c:	e026      	b.n	801566c <_vfiprintf_r+0x11c>
 801561e:	4b51      	ldr	r3, [pc, #324]	; (8015764 <_vfiprintf_r+0x214>)
 8015620:	429c      	cmp	r4, r3
 8015622:	d101      	bne.n	8015628 <_vfiprintf_r+0xd8>
 8015624:	68b4      	ldr	r4, [r6, #8]
 8015626:	e7a3      	b.n	8015570 <_vfiprintf_r+0x20>
 8015628:	4b4f      	ldr	r3, [pc, #316]	; (8015768 <_vfiprintf_r+0x218>)
 801562a:	429c      	cmp	r4, r3
 801562c:	bf08      	it	eq
 801562e:	68f4      	ldreq	r4, [r6, #12]
 8015630:	e79e      	b.n	8015570 <_vfiprintf_r+0x20>
 8015632:	4621      	mov	r1, r4
 8015634:	4630      	mov	r0, r6
 8015636:	f7ff fc5f 	bl	8014ef8 <__swsetup_r>
 801563a:	2800      	cmp	r0, #0
 801563c:	d09e      	beq.n	801557c <_vfiprintf_r+0x2c>
 801563e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015642:	b01d      	add	sp, #116	; 0x74
 8015644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015648:	2b25      	cmp	r3, #37	; 0x25
 801564a:	d0a7      	beq.n	801559c <_vfiprintf_r+0x4c>
 801564c:	46a8      	mov	r8, r5
 801564e:	e7a0      	b.n	8015592 <_vfiprintf_r+0x42>
 8015650:	4a43      	ldr	r2, [pc, #268]	; (8015760 <_vfiprintf_r+0x210>)
 8015652:	1a80      	subs	r0, r0, r2
 8015654:	fa0b f000 	lsl.w	r0, fp, r0
 8015658:	4318      	orrs	r0, r3
 801565a:	9004      	str	r0, [sp, #16]
 801565c:	4645      	mov	r5, r8
 801565e:	e7bb      	b.n	80155d8 <_vfiprintf_r+0x88>
 8015660:	9a03      	ldr	r2, [sp, #12]
 8015662:	1d11      	adds	r1, r2, #4
 8015664:	6812      	ldr	r2, [r2, #0]
 8015666:	9103      	str	r1, [sp, #12]
 8015668:	2a00      	cmp	r2, #0
 801566a:	db01      	blt.n	8015670 <_vfiprintf_r+0x120>
 801566c:	9207      	str	r2, [sp, #28]
 801566e:	e004      	b.n	801567a <_vfiprintf_r+0x12a>
 8015670:	4252      	negs	r2, r2
 8015672:	f043 0302 	orr.w	r3, r3, #2
 8015676:	9207      	str	r2, [sp, #28]
 8015678:	9304      	str	r3, [sp, #16]
 801567a:	f898 3000 	ldrb.w	r3, [r8]
 801567e:	2b2e      	cmp	r3, #46	; 0x2e
 8015680:	d110      	bne.n	80156a4 <_vfiprintf_r+0x154>
 8015682:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015686:	2b2a      	cmp	r3, #42	; 0x2a
 8015688:	f108 0101 	add.w	r1, r8, #1
 801568c:	d137      	bne.n	80156fe <_vfiprintf_r+0x1ae>
 801568e:	9b03      	ldr	r3, [sp, #12]
 8015690:	1d1a      	adds	r2, r3, #4
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	9203      	str	r2, [sp, #12]
 8015696:	2b00      	cmp	r3, #0
 8015698:	bfb8      	it	lt
 801569a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801569e:	f108 0802 	add.w	r8, r8, #2
 80156a2:	9305      	str	r3, [sp, #20]
 80156a4:	4d31      	ldr	r5, [pc, #196]	; (801576c <_vfiprintf_r+0x21c>)
 80156a6:	f898 1000 	ldrb.w	r1, [r8]
 80156aa:	2203      	movs	r2, #3
 80156ac:	4628      	mov	r0, r5
 80156ae:	f7ea fd97 	bl	80001e0 <memchr>
 80156b2:	b140      	cbz	r0, 80156c6 <_vfiprintf_r+0x176>
 80156b4:	2340      	movs	r3, #64	; 0x40
 80156b6:	1b40      	subs	r0, r0, r5
 80156b8:	fa03 f000 	lsl.w	r0, r3, r0
 80156bc:	9b04      	ldr	r3, [sp, #16]
 80156be:	4303      	orrs	r3, r0
 80156c0:	9304      	str	r3, [sp, #16]
 80156c2:	f108 0801 	add.w	r8, r8, #1
 80156c6:	f898 1000 	ldrb.w	r1, [r8]
 80156ca:	4829      	ldr	r0, [pc, #164]	; (8015770 <_vfiprintf_r+0x220>)
 80156cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156d0:	2206      	movs	r2, #6
 80156d2:	f108 0701 	add.w	r7, r8, #1
 80156d6:	f7ea fd83 	bl	80001e0 <memchr>
 80156da:	2800      	cmp	r0, #0
 80156dc:	d034      	beq.n	8015748 <_vfiprintf_r+0x1f8>
 80156de:	4b25      	ldr	r3, [pc, #148]	; (8015774 <_vfiprintf_r+0x224>)
 80156e0:	bb03      	cbnz	r3, 8015724 <_vfiprintf_r+0x1d4>
 80156e2:	9b03      	ldr	r3, [sp, #12]
 80156e4:	3307      	adds	r3, #7
 80156e6:	f023 0307 	bic.w	r3, r3, #7
 80156ea:	3308      	adds	r3, #8
 80156ec:	9303      	str	r3, [sp, #12]
 80156ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f0:	444b      	add	r3, r9
 80156f2:	9309      	str	r3, [sp, #36]	; 0x24
 80156f4:	e74c      	b.n	8015590 <_vfiprintf_r+0x40>
 80156f6:	fb00 3202 	mla	r2, r0, r2, r3
 80156fa:	2101      	movs	r1, #1
 80156fc:	e786      	b.n	801560c <_vfiprintf_r+0xbc>
 80156fe:	2300      	movs	r3, #0
 8015700:	9305      	str	r3, [sp, #20]
 8015702:	4618      	mov	r0, r3
 8015704:	250a      	movs	r5, #10
 8015706:	4688      	mov	r8, r1
 8015708:	3101      	adds	r1, #1
 801570a:	f898 2000 	ldrb.w	r2, [r8]
 801570e:	3a30      	subs	r2, #48	; 0x30
 8015710:	2a09      	cmp	r2, #9
 8015712:	d903      	bls.n	801571c <_vfiprintf_r+0x1cc>
 8015714:	2b00      	cmp	r3, #0
 8015716:	d0c5      	beq.n	80156a4 <_vfiprintf_r+0x154>
 8015718:	9005      	str	r0, [sp, #20]
 801571a:	e7c3      	b.n	80156a4 <_vfiprintf_r+0x154>
 801571c:	fb05 2000 	mla	r0, r5, r0, r2
 8015720:	2301      	movs	r3, #1
 8015722:	e7f0      	b.n	8015706 <_vfiprintf_r+0x1b6>
 8015724:	ab03      	add	r3, sp, #12
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	4622      	mov	r2, r4
 801572a:	4b13      	ldr	r3, [pc, #76]	; (8015778 <_vfiprintf_r+0x228>)
 801572c:	a904      	add	r1, sp, #16
 801572e:	4630      	mov	r0, r6
 8015730:	f3af 8000 	nop.w
 8015734:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015738:	4681      	mov	r9, r0
 801573a:	d1d8      	bne.n	80156ee <_vfiprintf_r+0x19e>
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	065b      	lsls	r3, r3, #25
 8015740:	f53f af7d 	bmi.w	801563e <_vfiprintf_r+0xee>
 8015744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015746:	e77c      	b.n	8015642 <_vfiprintf_r+0xf2>
 8015748:	ab03      	add	r3, sp, #12
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4622      	mov	r2, r4
 801574e:	4b0a      	ldr	r3, [pc, #40]	; (8015778 <_vfiprintf_r+0x228>)
 8015750:	a904      	add	r1, sp, #16
 8015752:	4630      	mov	r0, r6
 8015754:	f000 f888 	bl	8015868 <_printf_i>
 8015758:	e7ec      	b.n	8015734 <_vfiprintf_r+0x1e4>
 801575a:	bf00      	nop
 801575c:	08018b50 	.word	0x08018b50
 8015760:	08018b94 	.word	0x08018b94
 8015764:	08018b70 	.word	0x08018b70
 8015768:	08018b30 	.word	0x08018b30
 801576c:	08018b9a 	.word	0x08018b9a
 8015770:	08018b9e 	.word	0x08018b9e
 8015774:	00000000 	.word	0x00000000
 8015778:	0801552d 	.word	0x0801552d

0801577c <_printf_common>:
 801577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015780:	4691      	mov	r9, r2
 8015782:	461f      	mov	r7, r3
 8015784:	688a      	ldr	r2, [r1, #8]
 8015786:	690b      	ldr	r3, [r1, #16]
 8015788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801578c:	4293      	cmp	r3, r2
 801578e:	bfb8      	it	lt
 8015790:	4613      	movlt	r3, r2
 8015792:	f8c9 3000 	str.w	r3, [r9]
 8015796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801579a:	4606      	mov	r6, r0
 801579c:	460c      	mov	r4, r1
 801579e:	b112      	cbz	r2, 80157a6 <_printf_common+0x2a>
 80157a0:	3301      	adds	r3, #1
 80157a2:	f8c9 3000 	str.w	r3, [r9]
 80157a6:	6823      	ldr	r3, [r4, #0]
 80157a8:	0699      	lsls	r1, r3, #26
 80157aa:	bf42      	ittt	mi
 80157ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80157b0:	3302      	addmi	r3, #2
 80157b2:	f8c9 3000 	strmi.w	r3, [r9]
 80157b6:	6825      	ldr	r5, [r4, #0]
 80157b8:	f015 0506 	ands.w	r5, r5, #6
 80157bc:	d107      	bne.n	80157ce <_printf_common+0x52>
 80157be:	f104 0a19 	add.w	sl, r4, #25
 80157c2:	68e3      	ldr	r3, [r4, #12]
 80157c4:	f8d9 2000 	ldr.w	r2, [r9]
 80157c8:	1a9b      	subs	r3, r3, r2
 80157ca:	429d      	cmp	r5, r3
 80157cc:	db29      	blt.n	8015822 <_printf_common+0xa6>
 80157ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80157d2:	6822      	ldr	r2, [r4, #0]
 80157d4:	3300      	adds	r3, #0
 80157d6:	bf18      	it	ne
 80157d8:	2301      	movne	r3, #1
 80157da:	0692      	lsls	r2, r2, #26
 80157dc:	d42e      	bmi.n	801583c <_printf_common+0xc0>
 80157de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80157e2:	4639      	mov	r1, r7
 80157e4:	4630      	mov	r0, r6
 80157e6:	47c0      	blx	r8
 80157e8:	3001      	adds	r0, #1
 80157ea:	d021      	beq.n	8015830 <_printf_common+0xb4>
 80157ec:	6823      	ldr	r3, [r4, #0]
 80157ee:	68e5      	ldr	r5, [r4, #12]
 80157f0:	f8d9 2000 	ldr.w	r2, [r9]
 80157f4:	f003 0306 	and.w	r3, r3, #6
 80157f8:	2b04      	cmp	r3, #4
 80157fa:	bf08      	it	eq
 80157fc:	1aad      	subeq	r5, r5, r2
 80157fe:	68a3      	ldr	r3, [r4, #8]
 8015800:	6922      	ldr	r2, [r4, #16]
 8015802:	bf0c      	ite	eq
 8015804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015808:	2500      	movne	r5, #0
 801580a:	4293      	cmp	r3, r2
 801580c:	bfc4      	itt	gt
 801580e:	1a9b      	subgt	r3, r3, r2
 8015810:	18ed      	addgt	r5, r5, r3
 8015812:	f04f 0900 	mov.w	r9, #0
 8015816:	341a      	adds	r4, #26
 8015818:	454d      	cmp	r5, r9
 801581a:	d11b      	bne.n	8015854 <_printf_common+0xd8>
 801581c:	2000      	movs	r0, #0
 801581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015822:	2301      	movs	r3, #1
 8015824:	4652      	mov	r2, sl
 8015826:	4639      	mov	r1, r7
 8015828:	4630      	mov	r0, r6
 801582a:	47c0      	blx	r8
 801582c:	3001      	adds	r0, #1
 801582e:	d103      	bne.n	8015838 <_printf_common+0xbc>
 8015830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015838:	3501      	adds	r5, #1
 801583a:	e7c2      	b.n	80157c2 <_printf_common+0x46>
 801583c:	18e1      	adds	r1, r4, r3
 801583e:	1c5a      	adds	r2, r3, #1
 8015840:	2030      	movs	r0, #48	; 0x30
 8015842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015846:	4422      	add	r2, r4
 8015848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801584c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015850:	3302      	adds	r3, #2
 8015852:	e7c4      	b.n	80157de <_printf_common+0x62>
 8015854:	2301      	movs	r3, #1
 8015856:	4622      	mov	r2, r4
 8015858:	4639      	mov	r1, r7
 801585a:	4630      	mov	r0, r6
 801585c:	47c0      	blx	r8
 801585e:	3001      	adds	r0, #1
 8015860:	d0e6      	beq.n	8015830 <_printf_common+0xb4>
 8015862:	f109 0901 	add.w	r9, r9, #1
 8015866:	e7d7      	b.n	8015818 <_printf_common+0x9c>

08015868 <_printf_i>:
 8015868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801586c:	4617      	mov	r7, r2
 801586e:	7e0a      	ldrb	r2, [r1, #24]
 8015870:	b085      	sub	sp, #20
 8015872:	2a6e      	cmp	r2, #110	; 0x6e
 8015874:	4698      	mov	r8, r3
 8015876:	4606      	mov	r6, r0
 8015878:	460c      	mov	r4, r1
 801587a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801587c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8015880:	f000 80bc 	beq.w	80159fc <_printf_i+0x194>
 8015884:	d81a      	bhi.n	80158bc <_printf_i+0x54>
 8015886:	2a63      	cmp	r2, #99	; 0x63
 8015888:	d02e      	beq.n	80158e8 <_printf_i+0x80>
 801588a:	d80a      	bhi.n	80158a2 <_printf_i+0x3a>
 801588c:	2a00      	cmp	r2, #0
 801588e:	f000 80c8 	beq.w	8015a22 <_printf_i+0x1ba>
 8015892:	2a58      	cmp	r2, #88	; 0x58
 8015894:	f000 808a 	beq.w	80159ac <_printf_i+0x144>
 8015898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801589c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80158a0:	e02a      	b.n	80158f8 <_printf_i+0x90>
 80158a2:	2a64      	cmp	r2, #100	; 0x64
 80158a4:	d001      	beq.n	80158aa <_printf_i+0x42>
 80158a6:	2a69      	cmp	r2, #105	; 0x69
 80158a8:	d1f6      	bne.n	8015898 <_printf_i+0x30>
 80158aa:	6821      	ldr	r1, [r4, #0]
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80158b2:	d023      	beq.n	80158fc <_printf_i+0x94>
 80158b4:	1d11      	adds	r1, r2, #4
 80158b6:	6019      	str	r1, [r3, #0]
 80158b8:	6813      	ldr	r3, [r2, #0]
 80158ba:	e027      	b.n	801590c <_printf_i+0xa4>
 80158bc:	2a73      	cmp	r2, #115	; 0x73
 80158be:	f000 80b4 	beq.w	8015a2a <_printf_i+0x1c2>
 80158c2:	d808      	bhi.n	80158d6 <_printf_i+0x6e>
 80158c4:	2a6f      	cmp	r2, #111	; 0x6f
 80158c6:	d02a      	beq.n	801591e <_printf_i+0xb6>
 80158c8:	2a70      	cmp	r2, #112	; 0x70
 80158ca:	d1e5      	bne.n	8015898 <_printf_i+0x30>
 80158cc:	680a      	ldr	r2, [r1, #0]
 80158ce:	f042 0220 	orr.w	r2, r2, #32
 80158d2:	600a      	str	r2, [r1, #0]
 80158d4:	e003      	b.n	80158de <_printf_i+0x76>
 80158d6:	2a75      	cmp	r2, #117	; 0x75
 80158d8:	d021      	beq.n	801591e <_printf_i+0xb6>
 80158da:	2a78      	cmp	r2, #120	; 0x78
 80158dc:	d1dc      	bne.n	8015898 <_printf_i+0x30>
 80158de:	2278      	movs	r2, #120	; 0x78
 80158e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80158e4:	496e      	ldr	r1, [pc, #440]	; (8015aa0 <_printf_i+0x238>)
 80158e6:	e064      	b.n	80159b2 <_printf_i+0x14a>
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80158ee:	1d11      	adds	r1, r2, #4
 80158f0:	6019      	str	r1, [r3, #0]
 80158f2:	6813      	ldr	r3, [r2, #0]
 80158f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80158f8:	2301      	movs	r3, #1
 80158fa:	e0a3      	b.n	8015a44 <_printf_i+0x1dc>
 80158fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8015900:	f102 0104 	add.w	r1, r2, #4
 8015904:	6019      	str	r1, [r3, #0]
 8015906:	d0d7      	beq.n	80158b8 <_printf_i+0x50>
 8015908:	f9b2 3000 	ldrsh.w	r3, [r2]
 801590c:	2b00      	cmp	r3, #0
 801590e:	da03      	bge.n	8015918 <_printf_i+0xb0>
 8015910:	222d      	movs	r2, #45	; 0x2d
 8015912:	425b      	negs	r3, r3
 8015914:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015918:	4962      	ldr	r1, [pc, #392]	; (8015aa4 <_printf_i+0x23c>)
 801591a:	220a      	movs	r2, #10
 801591c:	e017      	b.n	801594e <_printf_i+0xe6>
 801591e:	6820      	ldr	r0, [r4, #0]
 8015920:	6819      	ldr	r1, [r3, #0]
 8015922:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015926:	d003      	beq.n	8015930 <_printf_i+0xc8>
 8015928:	1d08      	adds	r0, r1, #4
 801592a:	6018      	str	r0, [r3, #0]
 801592c:	680b      	ldr	r3, [r1, #0]
 801592e:	e006      	b.n	801593e <_printf_i+0xd6>
 8015930:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015934:	f101 0004 	add.w	r0, r1, #4
 8015938:	6018      	str	r0, [r3, #0]
 801593a:	d0f7      	beq.n	801592c <_printf_i+0xc4>
 801593c:	880b      	ldrh	r3, [r1, #0]
 801593e:	4959      	ldr	r1, [pc, #356]	; (8015aa4 <_printf_i+0x23c>)
 8015940:	2a6f      	cmp	r2, #111	; 0x6f
 8015942:	bf14      	ite	ne
 8015944:	220a      	movne	r2, #10
 8015946:	2208      	moveq	r2, #8
 8015948:	2000      	movs	r0, #0
 801594a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801594e:	6865      	ldr	r5, [r4, #4]
 8015950:	60a5      	str	r5, [r4, #8]
 8015952:	2d00      	cmp	r5, #0
 8015954:	f2c0 809c 	blt.w	8015a90 <_printf_i+0x228>
 8015958:	6820      	ldr	r0, [r4, #0]
 801595a:	f020 0004 	bic.w	r0, r0, #4
 801595e:	6020      	str	r0, [r4, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d13f      	bne.n	80159e4 <_printf_i+0x17c>
 8015964:	2d00      	cmp	r5, #0
 8015966:	f040 8095 	bne.w	8015a94 <_printf_i+0x22c>
 801596a:	4675      	mov	r5, lr
 801596c:	2a08      	cmp	r2, #8
 801596e:	d10b      	bne.n	8015988 <_printf_i+0x120>
 8015970:	6823      	ldr	r3, [r4, #0]
 8015972:	07da      	lsls	r2, r3, #31
 8015974:	d508      	bpl.n	8015988 <_printf_i+0x120>
 8015976:	6923      	ldr	r3, [r4, #16]
 8015978:	6862      	ldr	r2, [r4, #4]
 801597a:	429a      	cmp	r2, r3
 801597c:	bfde      	ittt	le
 801597e:	2330      	movle	r3, #48	; 0x30
 8015980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015984:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015988:	ebae 0305 	sub.w	r3, lr, r5
 801598c:	6123      	str	r3, [r4, #16]
 801598e:	f8cd 8000 	str.w	r8, [sp]
 8015992:	463b      	mov	r3, r7
 8015994:	aa03      	add	r2, sp, #12
 8015996:	4621      	mov	r1, r4
 8015998:	4630      	mov	r0, r6
 801599a:	f7ff feef 	bl	801577c <_printf_common>
 801599e:	3001      	adds	r0, #1
 80159a0:	d155      	bne.n	8015a4e <_printf_i+0x1e6>
 80159a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159a6:	b005      	add	sp, #20
 80159a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80159b0:	493c      	ldr	r1, [pc, #240]	; (8015aa4 <_printf_i+0x23c>)
 80159b2:	6822      	ldr	r2, [r4, #0]
 80159b4:	6818      	ldr	r0, [r3, #0]
 80159b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80159ba:	f100 0504 	add.w	r5, r0, #4
 80159be:	601d      	str	r5, [r3, #0]
 80159c0:	d001      	beq.n	80159c6 <_printf_i+0x15e>
 80159c2:	6803      	ldr	r3, [r0, #0]
 80159c4:	e002      	b.n	80159cc <_printf_i+0x164>
 80159c6:	0655      	lsls	r5, r2, #25
 80159c8:	d5fb      	bpl.n	80159c2 <_printf_i+0x15a>
 80159ca:	8803      	ldrh	r3, [r0, #0]
 80159cc:	07d0      	lsls	r0, r2, #31
 80159ce:	bf44      	itt	mi
 80159d0:	f042 0220 	orrmi.w	r2, r2, #32
 80159d4:	6022      	strmi	r2, [r4, #0]
 80159d6:	b91b      	cbnz	r3, 80159e0 <_printf_i+0x178>
 80159d8:	6822      	ldr	r2, [r4, #0]
 80159da:	f022 0220 	bic.w	r2, r2, #32
 80159de:	6022      	str	r2, [r4, #0]
 80159e0:	2210      	movs	r2, #16
 80159e2:	e7b1      	b.n	8015948 <_printf_i+0xe0>
 80159e4:	4675      	mov	r5, lr
 80159e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80159ea:	fb02 3310 	mls	r3, r2, r0, r3
 80159ee:	5ccb      	ldrb	r3, [r1, r3]
 80159f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80159f4:	4603      	mov	r3, r0
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d1f5      	bne.n	80159e6 <_printf_i+0x17e>
 80159fa:	e7b7      	b.n	801596c <_printf_i+0x104>
 80159fc:	6808      	ldr	r0, [r1, #0]
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	6949      	ldr	r1, [r1, #20]
 8015a02:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015a06:	d004      	beq.n	8015a12 <_printf_i+0x1aa>
 8015a08:	1d10      	adds	r0, r2, #4
 8015a0a:	6018      	str	r0, [r3, #0]
 8015a0c:	6813      	ldr	r3, [r2, #0]
 8015a0e:	6019      	str	r1, [r3, #0]
 8015a10:	e007      	b.n	8015a22 <_printf_i+0x1ba>
 8015a12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a16:	f102 0004 	add.w	r0, r2, #4
 8015a1a:	6018      	str	r0, [r3, #0]
 8015a1c:	6813      	ldr	r3, [r2, #0]
 8015a1e:	d0f6      	beq.n	8015a0e <_printf_i+0x1a6>
 8015a20:	8019      	strh	r1, [r3, #0]
 8015a22:	2300      	movs	r3, #0
 8015a24:	6123      	str	r3, [r4, #16]
 8015a26:	4675      	mov	r5, lr
 8015a28:	e7b1      	b.n	801598e <_printf_i+0x126>
 8015a2a:	681a      	ldr	r2, [r3, #0]
 8015a2c:	1d11      	adds	r1, r2, #4
 8015a2e:	6019      	str	r1, [r3, #0]
 8015a30:	6815      	ldr	r5, [r2, #0]
 8015a32:	6862      	ldr	r2, [r4, #4]
 8015a34:	2100      	movs	r1, #0
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7ea fbd2 	bl	80001e0 <memchr>
 8015a3c:	b108      	cbz	r0, 8015a42 <_printf_i+0x1da>
 8015a3e:	1b40      	subs	r0, r0, r5
 8015a40:	6060      	str	r0, [r4, #4]
 8015a42:	6863      	ldr	r3, [r4, #4]
 8015a44:	6123      	str	r3, [r4, #16]
 8015a46:	2300      	movs	r3, #0
 8015a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a4c:	e79f      	b.n	801598e <_printf_i+0x126>
 8015a4e:	6923      	ldr	r3, [r4, #16]
 8015a50:	462a      	mov	r2, r5
 8015a52:	4639      	mov	r1, r7
 8015a54:	4630      	mov	r0, r6
 8015a56:	47c0      	blx	r8
 8015a58:	3001      	adds	r0, #1
 8015a5a:	d0a2      	beq.n	80159a2 <_printf_i+0x13a>
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	079b      	lsls	r3, r3, #30
 8015a60:	d507      	bpl.n	8015a72 <_printf_i+0x20a>
 8015a62:	2500      	movs	r5, #0
 8015a64:	f104 0919 	add.w	r9, r4, #25
 8015a68:	68e3      	ldr	r3, [r4, #12]
 8015a6a:	9a03      	ldr	r2, [sp, #12]
 8015a6c:	1a9b      	subs	r3, r3, r2
 8015a6e:	429d      	cmp	r5, r3
 8015a70:	db05      	blt.n	8015a7e <_printf_i+0x216>
 8015a72:	68e0      	ldr	r0, [r4, #12]
 8015a74:	9b03      	ldr	r3, [sp, #12]
 8015a76:	4298      	cmp	r0, r3
 8015a78:	bfb8      	it	lt
 8015a7a:	4618      	movlt	r0, r3
 8015a7c:	e793      	b.n	80159a6 <_printf_i+0x13e>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	464a      	mov	r2, r9
 8015a82:	4639      	mov	r1, r7
 8015a84:	4630      	mov	r0, r6
 8015a86:	47c0      	blx	r8
 8015a88:	3001      	adds	r0, #1
 8015a8a:	d08a      	beq.n	80159a2 <_printf_i+0x13a>
 8015a8c:	3501      	adds	r5, #1
 8015a8e:	e7eb      	b.n	8015a68 <_printf_i+0x200>
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d1a7      	bne.n	80159e4 <_printf_i+0x17c>
 8015a94:	780b      	ldrb	r3, [r1, #0]
 8015a96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a9e:	e765      	b.n	801596c <_printf_i+0x104>
 8015aa0:	08018bb6 	.word	0x08018bb6
 8015aa4:	08018ba5 	.word	0x08018ba5

08015aa8 <_sbrk_r>:
 8015aa8:	b538      	push	{r3, r4, r5, lr}
 8015aaa:	4c06      	ldr	r4, [pc, #24]	; (8015ac4 <_sbrk_r+0x1c>)
 8015aac:	2300      	movs	r3, #0
 8015aae:	4605      	mov	r5, r0
 8015ab0:	4608      	mov	r0, r1
 8015ab2:	6023      	str	r3, [r4, #0]
 8015ab4:	f7fe ffcc 	bl	8014a50 <_sbrk>
 8015ab8:	1c43      	adds	r3, r0, #1
 8015aba:	d102      	bne.n	8015ac2 <_sbrk_r+0x1a>
 8015abc:	6823      	ldr	r3, [r4, #0]
 8015abe:	b103      	cbz	r3, 8015ac2 <_sbrk_r+0x1a>
 8015ac0:	602b      	str	r3, [r5, #0]
 8015ac2:	bd38      	pop	{r3, r4, r5, pc}
 8015ac4:	20007d48 	.word	0x20007d48

08015ac8 <__sread>:
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	460c      	mov	r4, r1
 8015acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad0:	f000 f896 	bl	8015c00 <_read_r>
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	bfab      	itete	ge
 8015ad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015ada:	89a3      	ldrhlt	r3, [r4, #12]
 8015adc:	181b      	addge	r3, r3, r0
 8015ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ae2:	bfac      	ite	ge
 8015ae4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ae6:	81a3      	strhlt	r3, [r4, #12]
 8015ae8:	bd10      	pop	{r4, pc}

08015aea <__swrite>:
 8015aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aee:	461f      	mov	r7, r3
 8015af0:	898b      	ldrh	r3, [r1, #12]
 8015af2:	05db      	lsls	r3, r3, #23
 8015af4:	4605      	mov	r5, r0
 8015af6:	460c      	mov	r4, r1
 8015af8:	4616      	mov	r6, r2
 8015afa:	d505      	bpl.n	8015b08 <__swrite+0x1e>
 8015afc:	2302      	movs	r3, #2
 8015afe:	2200      	movs	r2, #0
 8015b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b04:	f000 f868 	bl	8015bd8 <_lseek_r>
 8015b08:	89a3      	ldrh	r3, [r4, #12]
 8015b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015b12:	81a3      	strh	r3, [r4, #12]
 8015b14:	4632      	mov	r2, r6
 8015b16:	463b      	mov	r3, r7
 8015b18:	4628      	mov	r0, r5
 8015b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b1e:	f000 b817 	b.w	8015b50 <_write_r>

08015b22 <__sseek>:
 8015b22:	b510      	push	{r4, lr}
 8015b24:	460c      	mov	r4, r1
 8015b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b2a:	f000 f855 	bl	8015bd8 <_lseek_r>
 8015b2e:	1c43      	adds	r3, r0, #1
 8015b30:	89a3      	ldrh	r3, [r4, #12]
 8015b32:	bf15      	itete	ne
 8015b34:	6560      	strne	r0, [r4, #84]	; 0x54
 8015b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015b3e:	81a3      	strheq	r3, [r4, #12]
 8015b40:	bf18      	it	ne
 8015b42:	81a3      	strhne	r3, [r4, #12]
 8015b44:	bd10      	pop	{r4, pc}

08015b46 <__sclose>:
 8015b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b4a:	f000 b813 	b.w	8015b74 <_close_r>
	...

08015b50 <_write_r>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4c07      	ldr	r4, [pc, #28]	; (8015b70 <_write_r+0x20>)
 8015b54:	4605      	mov	r5, r0
 8015b56:	4608      	mov	r0, r1
 8015b58:	4611      	mov	r1, r2
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	6022      	str	r2, [r4, #0]
 8015b5e:	461a      	mov	r2, r3
 8015b60:	f7fe ffae 	bl	8014ac0 <_write>
 8015b64:	1c43      	adds	r3, r0, #1
 8015b66:	d102      	bne.n	8015b6e <_write_r+0x1e>
 8015b68:	6823      	ldr	r3, [r4, #0]
 8015b6a:	b103      	cbz	r3, 8015b6e <_write_r+0x1e>
 8015b6c:	602b      	str	r3, [r5, #0]
 8015b6e:	bd38      	pop	{r3, r4, r5, pc}
 8015b70:	20007d48 	.word	0x20007d48

08015b74 <_close_r>:
 8015b74:	b538      	push	{r3, r4, r5, lr}
 8015b76:	4c06      	ldr	r4, [pc, #24]	; (8015b90 <_close_r+0x1c>)
 8015b78:	2300      	movs	r3, #0
 8015b7a:	4605      	mov	r5, r0
 8015b7c:	4608      	mov	r0, r1
 8015b7e:	6023      	str	r3, [r4, #0]
 8015b80:	f7fe ffba 	bl	8014af8 <_close>
 8015b84:	1c43      	adds	r3, r0, #1
 8015b86:	d102      	bne.n	8015b8e <_close_r+0x1a>
 8015b88:	6823      	ldr	r3, [r4, #0]
 8015b8a:	b103      	cbz	r3, 8015b8e <_close_r+0x1a>
 8015b8c:	602b      	str	r3, [r5, #0]
 8015b8e:	bd38      	pop	{r3, r4, r5, pc}
 8015b90:	20007d48 	.word	0x20007d48

08015b94 <_fstat_r>:
 8015b94:	b538      	push	{r3, r4, r5, lr}
 8015b96:	4c07      	ldr	r4, [pc, #28]	; (8015bb4 <_fstat_r+0x20>)
 8015b98:	2300      	movs	r3, #0
 8015b9a:	4605      	mov	r5, r0
 8015b9c:	4608      	mov	r0, r1
 8015b9e:	4611      	mov	r1, r2
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	f7fe ffb5 	bl	8014b10 <_fstat>
 8015ba6:	1c43      	adds	r3, r0, #1
 8015ba8:	d102      	bne.n	8015bb0 <_fstat_r+0x1c>
 8015baa:	6823      	ldr	r3, [r4, #0]
 8015bac:	b103      	cbz	r3, 8015bb0 <_fstat_r+0x1c>
 8015bae:	602b      	str	r3, [r5, #0]
 8015bb0:	bd38      	pop	{r3, r4, r5, pc}
 8015bb2:	bf00      	nop
 8015bb4:	20007d48 	.word	0x20007d48

08015bb8 <_isatty_r>:
 8015bb8:	b538      	push	{r3, r4, r5, lr}
 8015bba:	4c06      	ldr	r4, [pc, #24]	; (8015bd4 <_isatty_r+0x1c>)
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	4605      	mov	r5, r0
 8015bc0:	4608      	mov	r0, r1
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	f7fe ffb4 	bl	8014b30 <_isatty>
 8015bc8:	1c43      	adds	r3, r0, #1
 8015bca:	d102      	bne.n	8015bd2 <_isatty_r+0x1a>
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	b103      	cbz	r3, 8015bd2 <_isatty_r+0x1a>
 8015bd0:	602b      	str	r3, [r5, #0]
 8015bd2:	bd38      	pop	{r3, r4, r5, pc}
 8015bd4:	20007d48 	.word	0x20007d48

08015bd8 <_lseek_r>:
 8015bd8:	b538      	push	{r3, r4, r5, lr}
 8015bda:	4c07      	ldr	r4, [pc, #28]	; (8015bf8 <_lseek_r+0x20>)
 8015bdc:	4605      	mov	r5, r0
 8015bde:	4608      	mov	r0, r1
 8015be0:	4611      	mov	r1, r2
 8015be2:	2200      	movs	r2, #0
 8015be4:	6022      	str	r2, [r4, #0]
 8015be6:	461a      	mov	r2, r3
 8015be8:	f7fe ffad 	bl	8014b46 <_lseek>
 8015bec:	1c43      	adds	r3, r0, #1
 8015bee:	d102      	bne.n	8015bf6 <_lseek_r+0x1e>
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	b103      	cbz	r3, 8015bf6 <_lseek_r+0x1e>
 8015bf4:	602b      	str	r3, [r5, #0]
 8015bf6:	bd38      	pop	{r3, r4, r5, pc}
 8015bf8:	20007d48 	.word	0x20007d48

08015bfc <__malloc_lock>:
 8015bfc:	4770      	bx	lr

08015bfe <__malloc_unlock>:
 8015bfe:	4770      	bx	lr

08015c00 <_read_r>:
 8015c00:	b538      	push	{r3, r4, r5, lr}
 8015c02:	4c07      	ldr	r4, [pc, #28]	; (8015c20 <_read_r+0x20>)
 8015c04:	4605      	mov	r5, r0
 8015c06:	4608      	mov	r0, r1
 8015c08:	4611      	mov	r1, r2
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	6022      	str	r2, [r4, #0]
 8015c0e:	461a      	mov	r2, r3
 8015c10:	f7fe ffa6 	bl	8014b60 <_read>
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	d102      	bne.n	8015c1e <_read_r+0x1e>
 8015c18:	6823      	ldr	r3, [r4, #0]
 8015c1a:	b103      	cbz	r3, 8015c1e <_read_r+0x1e>
 8015c1c:	602b      	str	r3, [r5, #0]
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
 8015c20:	20007d48 	.word	0x20007d48

08015c24 <_init>:
 8015c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c26:	bf00      	nop
 8015c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c2a:	bc08      	pop	{r3}
 8015c2c:	469e      	mov	lr, r3
 8015c2e:	4770      	bx	lr

08015c30 <_fini>:
 8015c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c32:	bf00      	nop
 8015c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c36:	bc08      	pop	{r3}
 8015c38:	469e      	mov	lr, r3
 8015c3a:	4770      	bx	lr
