
I2C_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08005284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00003e14  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e88  20003e88  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013656  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027c3  00000000  00000000  000336fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d08  00000000  00000000  00035ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c00  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000062d7  00000000  00000000  000377c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044f7  00000000  00000000  0003da9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041f96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003ce4  00000000  00000000  00042014  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  00045cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00045d7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005078 	.word	0x08005078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005078 	.word	0x08005078

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f90b 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	200f      	movs	r0, #15
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f003 fcce 	bl	8003f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f915 	bl	8000812 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000600:	f000 f8eb 	bl	80007da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000000c 	.word	0x2000000c
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20003de8 	.word	0x20003de8

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20003de8 	.word	0x20003de8

08000664 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	da0b      	bge.n	80006f4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	490d      	ldr	r1, [pc, #52]	; (8000714 <NVIC_SetPriority+0x4c>)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	3b04      	subs	r3, #4
 80006e6:	683a      	ldr	r2, [r7, #0]
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f2:	e009      	b.n	8000708 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	4908      	ldr	r1, [pc, #32]	; (8000718 <NVIC_SetPriority+0x50>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	e000e100 	.word	0xe000e100

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	2201      	movs	r2, #1
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	401a      	ands	r2, r3
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000762:	2101      	movs	r1, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	1e59      	subs	r1, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000790:	d301      	bcc.n	8000796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000792:	2301      	movs	r3, #1
 8000794:	e00f      	b.n	80007b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <SysTick_Config+0x40>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079e:	210f      	movs	r1, #15
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a4:	f7ff ff90 	bl	80006c8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Config+0x40>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SysTick_Config+0x40>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff49 	bl	8000664 <NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff5e 	bl	80006ac <NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ff90 	bl	800071c <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff5f 	bl	80006c8 <NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffb0 	bl	8000780 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d106      	bne.n	8000848 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000846:	e005      	b.n	8000854 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000848:	4a05      	ldr	r2, [pc, #20]	; (8000860 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f023 0304 	bic.w	r3, r3, #4
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e16b      	b.n	8000b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000880:	2201      	movs	r2, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 815a 	bne.w	8000b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_Init+0x4a>
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d123      	bne.n	80008f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	08da      	lsrs	r2, r3, #3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	220f      	movs	r2, #15
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	691a      	ldr	r2, [r3, #16]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	08da      	lsrs	r2, r3, #3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3208      	adds	r2, #8
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 0203 	and.w	r2, r3, #3
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d00b      	beq.n	800094a <HAL_GPIO_Init+0xe6>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d007      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093e:	2b11      	cmp	r3, #17
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b12      	cmp	r3, #18
 8000948:	d130      	bne.n	80009ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000980:	2201      	movs	r2, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	091b      	lsrs	r3, r3, #4
 8000996:	f003 0201 	and.w	r2, r3, #1
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80b4 	beq.w	8000b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4a5f      	ldr	r2, [pc, #380]	; (8000b6c <HAL_GPIO_Init+0x308>)
 80009f0:	4b5e      	ldr	r3, [pc, #376]	; (8000b6c <HAL_GPIO_Init+0x308>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b5c      	ldr	r3, [pc, #368]	; (8000b6c <HAL_GPIO_Init+0x308>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	4a5a      	ldr	r2, [pc, #360]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a51      	ldr	r2, [pc, #324]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d02b      	beq.n	8000a8a <HAL_GPIO_Init+0x226>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <HAL_GPIO_Init+0x314>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d025      	beq.n	8000a86 <HAL_GPIO_Init+0x222>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <HAL_GPIO_Init+0x318>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d01f      	beq.n	8000a82 <HAL_GPIO_Init+0x21e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4e      	ldr	r2, [pc, #312]	; (8000b80 <HAL_GPIO_Init+0x31c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d019      	beq.n	8000a7e <HAL_GPIO_Init+0x21a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0x216>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4c      	ldr	r2, [pc, #304]	; (8000b88 <HAL_GPIO_Init+0x324>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d00d      	beq.n	8000a76 <HAL_GPIO_Init+0x212>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4b      	ldr	r2, [pc, #300]	; (8000b8c <HAL_GPIO_Init+0x328>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d007      	beq.n	8000a72 <HAL_GPIO_Init+0x20e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4a      	ldr	r2, [pc, #296]	; (8000b90 <HAL_GPIO_Init+0x32c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_GPIO_Init+0x20a>
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	e00e      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a6e:	2308      	movs	r3, #8
 8000a70:	e00c      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a72:	2306      	movs	r3, #6
 8000a74:	e00a      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a76:	2305      	movs	r3, #5
 8000a78:	e008      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e004      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e002      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	f002 0203 	and.w	r2, r2, #3
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	4093      	lsls	r3, r2
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9c:	4934      	ldr	r1, [pc, #208]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ace:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b4c:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	f67f ae90 	bls.w	8000880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b60:	bf00      	nop
 8000b62:	3724      	adds	r7, #36	; 0x24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40021400 	.word	0x40021400
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40021c00 	.word	0x40021c00
 8000b94:	40013c00 	.word	0x40013c00

08000b98 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e0c8      	b.n	8000d44 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d106      	bne.n	8000bcc <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f003 fa16 	bl	8003ff8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2224      	movs	r2, #36	; 0x24
 8000bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000be4:	f001 fad4 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8000be8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4a57      	ldr	r2, [pc, #348]	; (8000d4c <HAL_I2C_Init+0x1b4>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4952      	ldr	r1, [pc, #328]	; (8000d50 <HAL_I2C_Init+0x1b8>)
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d802      	bhi.n	8000c12 <HAL_I2C_Init+0x7a>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	e009      	b.n	8000c26 <HAL_I2C_Init+0x8e>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c18:	fb01 f303 	mul.w	r3, r1, r3
 8000c1c:	494d      	ldr	r1, [pc, #308]	; (8000d54 <HAL_I2C_Init+0x1bc>)
 8000c1e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c22:	099b      	lsrs	r3, r3, #6
 8000c24:	3301      	adds	r3, #1
 8000c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a47      	ldr	r2, [pc, #284]	; (8000d50 <HAL_I2C_Init+0x1b8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d812      	bhi.n	8000c5c <HAL_I2C_Init+0xc4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d906      	bls.n	8000c58 <HAL_I2C_Init+0xc0>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	e045      	b.n	8000ce4 <HAL_I2C_Init+0x14c>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e043      	b.n	8000ce4 <HAL_I2C_Init+0x14c>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <HAL_I2C_Init+0xec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	e010      	b.n	8000ca6 <HAL_I2C_Init+0x10e>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	009a      	lsls	r2, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2301      	moveq	r3, #1
 8000ca2:	2300      	movne	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_I2C_Init+0x116>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e01a      	b.n	8000ce4 <HAL_I2C_Init+0x14c>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10a      	bne.n	8000ccc <HAL_I2C_Init+0x134>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cca:	e00b      	b.n	8000ce4 <HAL_I2C_Init+0x14c>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009a      	lsls	r2, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	69d1      	ldr	r1, [r2, #28]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	6a12      	ldr	r2, [r2, #32]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6911      	ldr	r1, [r2, #16]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68d2      	ldr	r2, [r2, #12]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6951      	ldr	r1, [r2, #20]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6992      	ldr	r2, [r2, #24]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	6812      	ldr	r2, [r2, #0]
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2220      	movs	r2, #32
 8000d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	431bde83 	.word	0x431bde83
 8000d50:	000186a0 	.word	0x000186a0
 8000d54:	10624dd3 	.word	0x10624dd3

08000d58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	461a      	mov	r2, r3
 8000d64:	460b      	mov	r3, r1
 8000d66:	817b      	strh	r3, [r7, #10]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000d70:	f7ff fc6c 	bl	800064c <HAL_GetTick>
 8000d74:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b20      	cmp	r3, #32
 8000d80:	f040 80ee 	bne.w	8000f60 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2319      	movs	r3, #25
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4977      	ldr	r1, [pc, #476]	; (8000f6c <HAL_I2C_Master_Transmit+0x214>)
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 fc6c 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e0e1      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_I2C_Master_Transmit+0x54>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e0da      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d007      	beq.n	8000dd2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000de0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2221      	movs	r2, #33	; 0x21
 8000de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2210      	movs	r2, #16
 8000dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	893a      	ldrh	r2, [r7, #8]
 8000e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_I2C_Master_Transmit+0x218>)
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e14:	8979      	ldrh	r1, [r7, #10]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	6a3a      	ldr	r2, [r7, #32]
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f000 fadc 	bl	80013d8 <I2C_MasterRequestWrite>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00f      	beq.n	8000e46 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d105      	bne.n	8000e3a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e093      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e08d      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8000e5c:	e066      	b.n	8000f2c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	6a39      	ldr	r1, [r7, #32]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 fcc1 	bl	80017ea <I2C_WaitOnTXEFlagUntilTimeout>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00f      	beq.n	8000e8e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d109      	bne.n	8000e8a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e84:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e06b      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e069      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	1c58      	adds	r0, r3, #1
 8000e98:	68f9      	ldr	r1, [r7, #12]
 8000e9a:	6248      	str	r0, [r1, #36]	; 0x24
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d119      	bne.n	8000efc <HAL_I2C_Master_Transmit+0x1a4>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d015      	beq.n	8000efc <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	1c58      	adds	r0, r3, #1
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	6248      	str	r0, [r1, #36]	; 0x24
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	6a39      	ldr	r1, [r7, #32]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 fcaf 	bl	8001864 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00f      	beq.n	8000f2c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d109      	bne.n	8000f28 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f22:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e01c      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e01a      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d194      	bne.n	8000e5e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	6812      	ldr	r2, [r2, #0]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2220      	movs	r2, #32
 8000f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e000      	b.n	8000f62 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8000f60:	2302      	movs	r3, #2
  }
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	00100002 	.word	0x00100002
 8000f70:	ffff0000 	.word	0xffff0000

08000f74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	460b      	mov	r3, r1
 8000f82:	817b      	strh	r3, [r7, #10]
 8000f84:	4613      	mov	r3, r2
 8000f86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000f8c:	f7ff fb5e 	bl	800064c <HAL_GetTick>
 8000f90:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	f040 8215 	bne.w	80013ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2319      	movs	r3, #25
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4985      	ldr	r1, [pc, #532]	; (80011c0 <HAL_I2C_Master_Receive+0x24c>)
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f000 fb5e 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e208      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_I2C_Master_Receive+0x54>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e201      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d007      	beq.n	8000fee <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2222      	movs	r2, #34	; 0x22
 8001002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2210      	movs	r2, #16
 800100a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	893a      	ldrh	r2, [r7, #8]
 800101e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a68      	ldr	r2, [pc, #416]	; (80011c4 <HAL_I2C_Master_Receive+0x250>)
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001030:	8979      	ldrh	r1, [r7, #10]
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f000 fa50 	bl	80014dc <I2C_MasterRequestRead>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00f      	beq.n	8001062 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b04      	cmp	r3, #4
 8001048:	d105      	bne.n	8001056 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e1ba      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1b4      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001066:	2b00      	cmp	r3, #0
 8001068:	d113      	bne.n	8001092 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e188      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001096:	2b01      	cmp	r3, #1
 8001098:	d11b      	bne.n	80010d2 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e168      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d11b      	bne.n	8001112 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	e148      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001138:	e134      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113e:	2b03      	cmp	r3, #3
 8001140:	f200 80eb 	bhi.w	800131a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001148:	2b01      	cmp	r3, #1
 800114a:	d127      	bne.n	800119c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 fbc4 	bl	80018de <I2C_WaitOnRXNEFlagUntilTimeout>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	2b20      	cmp	r3, #32
 8001162:	d101      	bne.n	8001168 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e131      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e12f      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	1c59      	adds	r1, r3, #1
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	6251      	str	r1, [r2, #36]	; 0x24
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	6912      	ldr	r2, [r2, #16]
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800119a:	e103      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d14a      	bne.n	800123a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011aa:	2200      	movs	r2, #0
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <HAL_I2C_Master_Receive+0x254>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fa5c 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e106      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
 80011be:	bf00      	nop
 80011c0:	00100002 	.word	0x00100002
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	1c59      	adds	r1, r3, #1
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	6251      	str	r1, [r2, #36]	; 0x24
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	6912      	ldr	r2, [r2, #16]
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f4:	3b01      	subs	r3, #1
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b01      	subs	r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	1c59      	adds	r1, r3, #1
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6251      	str	r1, [r2, #36]	; 0x24
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	6912      	ldr	r2, [r2, #16]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001222:	3b01      	subs	r3, #1
 8001224:	b29a      	uxth	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	3b01      	subs	r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001238:	e0b4      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	2200      	movs	r2, #0
 8001242:	4964      	ldr	r1, [pc, #400]	; (80013d4 <HAL_I2C_Master_Receive+0x460>)
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 fa11 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0bb      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	1c59      	adds	r1, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	6251      	str	r1, [r2, #36]	; 0x24
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	6912      	ldr	r2, [r2, #16]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001298:	2200      	movs	r2, #0
 800129a:	494e      	ldr	r1, [pc, #312]	; (80013d4 <HAL_I2C_Master_Receive+0x460>)
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f9e5 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e08f      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	1c59      	adds	r1, r3, #1
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	6251      	str	r1, [r2, #36]	; 0x24
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	6912      	ldr	r2, [r2, #16]
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	1c59      	adds	r1, r3, #1
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	6251      	str	r1, [r2, #36]	; 0x24
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	6912      	ldr	r2, [r2, #16]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001318:	e044      	b.n	80013a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fadd 	bl	80018de <I2C_WaitOnRXNEFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2b20      	cmp	r3, #32
 8001330:	d101      	bne.n	8001336 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e04a      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e048      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	6251      	str	r1, [r2, #36]	; 0x24
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	6912      	ldr	r2, [r2, #16]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001352:	3b01      	subs	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b04      	cmp	r3, #4
 8001374:	d116      	bne.n	80013a4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	6251      	str	r1, [r2, #36]	; 0x24
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	6912      	ldr	r2, [r2, #16]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139a:	b29b      	uxth	r3, r3
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f47f aec6 	bne.w	800113a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2220      	movs	r2, #32
 80013b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80013ca:	2302      	movs	r3, #2
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	00010004 	.word	0x00010004

080013d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af02      	add	r7, sp, #8
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	460b      	mov	r3, r1
 80013e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d006      	beq.n	8001402 <I2C_MasterRequestWrite+0x2a>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d003      	beq.n	8001402 <I2C_MasterRequestWrite+0x2a>
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001400:	d108      	bne.n	8001414 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00b      	b.n	800142c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	2b12      	cmp	r3, #18
 800141a:	d107      	bne.n	800142c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800142a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f917 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e040      	b.n	80014ca <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001450:	d107      	bne.n	8001462 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	897a      	ldrh	r2, [r7, #10]
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	e021      	b.n	80014a6 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	897a      	ldrh	r2, [r7, #10]
 8001468:	11d2      	asrs	r2, r2, #7
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	f002 0206 	and.w	r2, r2, #6
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f062 020f 	orn	r2, r2, #15
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <I2C_MasterRequestWrite+0xfc>)
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f944 	bl	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b04      	cmp	r3, #4
 8001492:	d101      	bne.n	8001498 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e018      	b.n	80014ca <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e016      	b.n	80014ca <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	897a      	ldrh	r2, [r7, #10]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	490b      	ldr	r1, [pc, #44]	; (80014d8 <I2C_MasterRequestWrite+0x100>)
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f92e 	bl	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d101      	bne.n	80014c4 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e002      	b.n	80014ca <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e000      	b.n	80014ca <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	00010008 	.word	0x00010008
 80014d8:	00010002 	.word	0x00010002

080014dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	460b      	mov	r3, r1
 80014ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001500:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d006      	beq.n	8001516 <I2C_MasterRequestRead+0x3a>
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d003      	beq.n	8001516 <I2C_MasterRequestRead+0x3a>
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001514:	d108      	bne.n	8001528 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e00b      	b.n	8001540 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	2b11      	cmp	r3, #17
 800152e:	d107      	bne.n	8001540 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f88d 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e07f      	b.n	800165c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001564:	d108      	bne.n	8001578 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	897a      	ldrh	r2, [r7, #10]
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	e05f      	b.n	8001638 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	897a      	ldrh	r2, [r7, #10]
 800157e:	11d2      	asrs	r2, r2, #7
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f002 0206 	and.w	r2, r2, #6
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f062 020f 	orn	r2, r2, #15
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4933      	ldr	r1, [pc, #204]	; (8001664 <I2C_MasterRequestRead+0x188>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f8b9 	bl	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d101      	bne.n	80015ae <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e056      	b.n	800165c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e054      	b.n	800165c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	897a      	ldrh	r2, [r7, #10]
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4929      	ldr	r1, [pc, #164]	; (8001668 <I2C_MasterRequestRead+0x18c>)
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f8a3 	bl	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d101      	bne.n	80015da <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e040      	b.n	800165c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e03e      	b.n	800165c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001602:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 f82b 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e01d      	b.n	800165c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	897a      	ldrh	r2, [r7, #10]
 8001626:	11d2      	asrs	r2, r2, #7
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	f002 0206 	and.w	r2, r2, #6
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f062 020e 	orn	r2, r2, #14
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	490a      	ldr	r1, [pc, #40]	; (8001668 <I2C_MasterRequestRead+0x18c>)
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f865 	bl	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b04      	cmp	r3, #4
 8001650:	d101      	bne.n	8001656 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e002      	b.n	800165c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e000      	b.n	800165c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	00010008 	.word	0x00010008
 8001668:	00010002 	.word	0x00010002

0800166c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800167c:	e01f      	b.n	80016be <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001684:	d01b      	beq.n	80016be <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <I2C_WaitOnFlagUntilTimeout+0x30>
 800168c:	f7fe ffde 	bl	800064c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad2      	subs	r2, r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d910      	bls.n	80016be <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e023      	b.n	8001706 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10d      	bne.n	80016e4 <I2C_WaitOnFlagUntilTimeout+0x78>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4013      	ands	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	e00c      	b.n	80016fe <I2C_WaitOnFlagUntilTimeout+0x92>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4013      	ands	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	429a      	cmp	r2, r3
 8001702:	d0bc      	beq.n	800167e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800171c:	e040      	b.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d11c      	bne.n	8001768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001746:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2204      	movs	r2, #4
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e03c      	b.n	80017e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800176e:	d017      	beq.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001776:	f7fe ff69 	bl	800064c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e020      	b.n	80017e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10c      	bne.n	80017c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	43da      	mvns	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4013      	ands	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e00b      	b.n	80017dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4013      	ands	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d19e      	bne.n	800171e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f6:	e029      	b.n	800184c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f8ba 	bl	8001972 <I2C_IsAcknowledgeFailed>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e029      	b.n	800185c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800180e:	d01d      	beq.n	800184c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001816:	f7fe ff19 	bl	800064c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad2      	subs	r2, r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d912      	bls.n	800184c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f043 0220 	orr.w	r2, r3, #32
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e007      	b.n	800185c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b80      	cmp	r3, #128	; 0x80
 8001858:	d1ce      	bne.n	80017f8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001870:	e029      	b.n	80018c6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f87d 	bl	8001972 <I2C_IsAcknowledgeFailed>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e029      	b.n	80018d6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001888:	d01d      	beq.n	80018c6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d007      	beq.n	80018a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001890:	f7fe fedc 	bl	800064c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	429a      	cmp	r2, r3
 800189e:	d912      	bls.n	80018c6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f043 0220 	orr.w	r2, r3, #32
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e007      	b.n	80018d6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d1ce      	bne.n	8001872 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018ea:	e036      	b.n	800195a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d114      	bne.n	8001924 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f06f 0210 	mvn.w	r2, #16
 8001902:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e022      	b.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800192a:	f7fe fe8f 	bl	800064c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90f      	bls.n	800195a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f043 0220 	orr.w	r2, r3, #32
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e007      	b.n	800196a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001964:	2b40      	cmp	r3, #64	; 0x40
 8001966:	d1c1      	bne.n	80018ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d114      	bne.n	80019b4 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001992:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e22d      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d075      	beq.n	8001ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e2:	4ba3      	ldr	r3, [pc, #652]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d00c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4ba0      	ldr	r3, [pc, #640]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b9d      	ldr	r3, [pc, #628]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b99      	ldr	r3, [pc, #612]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05b      	beq.n	8001acc <HAL_RCC_OscConfig+0x108>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d157      	bne.n	8001acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e208      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x74>
 8001a2a:	4a91      	ldr	r2, [pc, #580]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x98>
 8001a42:	4a8b      	ldr	r2, [pc, #556]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4a88      	ldr	r2, [pc, #544]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	4b87      	ldr	r3, [pc, #540]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xb0>
 8001a5c:	4a84      	ldr	r2, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4a81      	ldr	r2, [pc, #516]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	4b81      	ldr	r3, [pc, #516]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fde6 	bl	800064c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a84:	f7fe fde2 	bl	800064c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1cd      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xc0>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fdd2 	bl	800064c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7fe fdce 	bl	800064c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1b9      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0xe8>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ada:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e18d      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4956      	ldr	r1, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	4b55      	ldr	r3, [pc, #340]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_RCC_OscConfig+0x2b0>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7fe fd87 	bl	800064c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7fe fd83 	bl	800064c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e16e      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4943      	ldr	r1, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_RCC_OscConfig+0x2b0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fd66 	bl	800064c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b84:	f7fe fd62 	bl	800064c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e14d      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d030      	beq.n	8001c10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x2b4>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7fe fd46 	bl	800064c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7fe fd42 	bl	800064c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e12d      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x200>
 8001be2:	e015      	b.n	8001c10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_OscConfig+0x2b4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7fe fd2f 	bl	800064c <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7fe fd2b 	bl	800064c <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e116      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80a0 	beq.w	8001d5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x2b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d121      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5a:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <HAL_RCC_OscConfig+0x2b8>)
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCC_OscConfig+0x2b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c66:	f7fe fcf1 	bl	800064c <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e011      	b.n	8001c92 <HAL_RCC_OscConfig+0x2ce>
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470000 	.word	0x42470000
 8001c78:	42470e80 	.word	0x42470e80
 8001c7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe fce4 	bl	800064c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0cf      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x478>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
 8001ca6:	4a66      	ldr	r2, [pc, #408]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001ca8:	4b65      	ldr	r3, [pc, #404]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x32a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x312>
 8001cbc:	4a60      	ldr	r2, [pc, #384]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x32a>
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce2:	4a57      	ldr	r2, [pc, #348]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7fe fca9 	bl	800064c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe fca5 	bl	800064c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e08e      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x33a>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fc93 	bl	800064c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fc8f 	bl	800064c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e078      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4a3b      	ldr	r2, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d54:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d064      	beq.n	8001e30 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d05c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d141      	bne.n	8001dfe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x480>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fc64 	bl	800064c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe fc60 	bl	800064c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e04b      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da6:	4926      	ldr	r1, [pc, #152]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	019b      	lsls	r3, r3, #6
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_RCC_OscConfig+0x480>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fc39 	bl	800064c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fc35 	bl	800064c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e020      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x41a>
 8001dfc:	e018      	b.n	8001e30 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x480>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fc22 	bl	800064c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fc1e 	bl	800064c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_RCC_OscConfig+0x47c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x448>
 8001e2a:	e001      	b.n	8001e30 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470060 	.word	0x42470060

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0ca      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d20c      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 020f 	and.w	r2, r3, #15
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b6      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	494f      	ldr	r1, [pc, #316]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d044      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e07d      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06d      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e065      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4936      	ldr	r1, [pc, #216]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 0203 	bic.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f38:	f7fe fb88 	bl	800064c <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7fe fb84 	bl	800064c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e04d      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d90c      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_RCC_ClockConfig+0x1b4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e030      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4918      	ldr	r1, [pc, #96]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4911      	ldr	r1, [pc, #68]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fce:	f000 f81d 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fea:	200f      	movs	r0, #15
 8001fec:	f7fe faea 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00
 8002000:	40023800 	.word	0x40023800
 8002004:	080051c4 	.word	0x080051c4
 8002008:	2000000c 	.word	0x2000000c

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002014:	2200      	movs	r2, #0
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	617a      	str	r2, [r7, #20]
 800201c:	2200      	movs	r2, #0
 800201e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002020:	2200      	movs	r2, #0
 8002022:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002024:	4a51      	ldr	r2, [pc, #324]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 8002026:	6892      	ldr	r2, [r2, #8]
 8002028:	f002 020c 	and.w	r2, r2, #12
 800202c:	2a04      	cmp	r2, #4
 800202e:	d007      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 8002030:	2a08      	cmp	r2, #8
 8002032:	d008      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x3a>
 8002034:	2a00      	cmp	r2, #0
 8002036:	f040 8090 	bne.w	800215a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_GetSysClockFreq+0x164>)
 800203c:	613b      	str	r3, [r7, #16]
       break;
 800203e:	e08f      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002040:	4b4c      	ldr	r3, [pc, #304]	; (8002174 <HAL_RCC_GetSysClockFreq+0x168>)
 8002042:	613b      	str	r3, [r7, #16]
      break;
 8002044:	e08c      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002046:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 8002048:	6852      	ldr	r2, [r2, #4]
 800204a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800204e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002050:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 8002052:	6852      	ldr	r2, [r2, #4]
 8002054:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002058:	2a00      	cmp	r2, #0
 800205a:	d023      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b43      	ldr	r3, [pc, #268]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	f04f 0400 	mov.w	r4, #0
 8002066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	ea03 0301 	and.w	r3, r3, r1
 8002072:	ea04 0402 	and.w	r4, r4, r2
 8002076:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_RCC_GetSysClockFreq+0x168>)
 8002078:	fb02 f104 	mul.w	r1, r2, r4
 800207c:	2200      	movs	r2, #0
 800207e:	fb02 f203 	mul.w	r2, r2, r3
 8002082:	440a      	add	r2, r1
 8002084:	493b      	ldr	r1, [pc, #236]	; (8002174 <HAL_RCC_GetSysClockFreq+0x168>)
 8002086:	fba3 0101 	umull	r0, r1, r3, r1
 800208a:	1853      	adds	r3, r2, r1
 800208c:	4619      	mov	r1, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	f7fe f8ea 	bl	8000270 <__aeabi_uldivmod>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e04c      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a4:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 80020a6:	6852      	ldr	r2, [r2, #4]
 80020a8:	0992      	lsrs	r2, r2, #6
 80020aa:	4611      	mov	r1, r2
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80020b4:	f04f 0600 	mov.w	r6, #0
 80020b8:	ea05 0501 	and.w	r5, r5, r1
 80020bc:	ea06 0602 	and.w	r6, r6, r2
 80020c0:	4629      	mov	r1, r5
 80020c2:	4632      	mov	r2, r6
 80020c4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80020c8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80020cc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80020d0:	4651      	mov	r1, sl
 80020d2:	465a      	mov	r2, fp
 80020d4:	46aa      	mov	sl, r5
 80020d6:	46b3      	mov	fp, r6
 80020d8:	4655      	mov	r5, sl
 80020da:	465e      	mov	r6, fp
 80020dc:	1b4d      	subs	r5, r1, r5
 80020de:	eb62 0606 	sbc.w	r6, r2, r6
 80020e2:	4629      	mov	r1, r5
 80020e4:	4632      	mov	r2, r6
 80020e6:	0194      	lsls	r4, r2, #6
 80020e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ec:	018b      	lsls	r3, r1, #6
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	eb64 0402 	sbc.w	r4, r4, r2
 80020f4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80020f8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80020fc:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002100:	4643      	mov	r3, r8
 8002102:	464c      	mov	r4, r9
 8002104:	4655      	mov	r5, sl
 8002106:	465e      	mov	r6, fp
 8002108:	18ed      	adds	r5, r5, r3
 800210a:	eb46 0604 	adc.w	r6, r6, r4
 800210e:	462b      	mov	r3, r5
 8002110:	4634      	mov	r4, r6
 8002112:	02a2      	lsls	r2, r4, #10
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002126:	4618      	mov	r0, r3
 8002128:	4621      	mov	r1, r4
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f04f 0400 	mov.w	r4, #0
 8002130:	461a      	mov	r2, r3
 8002132:	4623      	mov	r3, r4
 8002134:	f7fe f89c 	bl	8000270 <__aeabi_uldivmod>
 8002138:	4603      	mov	r3, r0
 800213a:	460c      	mov	r4, r1
 800213c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_GetSysClockFreq+0x160>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c1b      	lsrs	r3, r3, #16
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	3301      	adds	r3, #1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	613b      	str	r3, [r7, #16]
      break;
 8002158:	e002      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0x164>)
 800215c:	613b      	str	r3, [r7, #16]
      break;
 800215e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002160:	693b      	ldr	r3, [r7, #16]
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	00f42400 	.word	0x00f42400
 8002174:	017d7840 	.word	0x017d7840

08002178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000000c 	.word	0x2000000c

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4601      	mov	r1, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	080051d4 	.word	0x080051d4

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021bc:	f7ff ffdc 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	0b5b      	lsrs	r3, r3, #13
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	080051d4 	.word	0x080051d4

080021e0 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e03f      	b.n	8002272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 ff28 	bl	800405c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002222:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f90b 	bl	8002440 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	6912      	ldr	r2, [r2, #16]
 8002234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	6952      	ldr	r2, [r2, #20]
 8002244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002248:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002258:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b088      	sub	sp, #32
 800227e:	af02      	add	r7, sp, #8
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b20      	cmp	r3, #32
 8002298:	f040 8082 	bne.w	80023a0 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_UART_Transmit+0x2e>
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e07a      	b.n	80023a2 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_UART_Transmit+0x40>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e073      	b.n	80023a2 <HAL_UART_Transmit+0x128>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2221      	movs	r2, #33	; 0x21
 80022cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022d0:	f7fe f9bc 	bl	800064c <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80022e2:	e041      	b.n	8002368 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fa:	d121      	bne.n	8002340 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2200      	movs	r2, #0
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f84f 	bl	80023aa <UART_WaitOnFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e045      	b.n	80023a2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	8812      	ldrh	r2, [r2, #0]
 8002322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002326:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3302      	adds	r3, #2
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	e017      	b.n	8002368 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3301      	adds	r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	e013      	b.n	8002368 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f82d 	bl	80023aa <UART_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e023      	b.n	80023a2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c59      	adds	r1, r3, #1
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1b8      	bne.n	80022e4 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f814 	bl	80023aa <UART_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e00a      	b.n	80023a2 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80023ba:	e02c      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c2:	d028      	beq.n	8002416 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0x30>
 80023ca:	f7fe f93f 	bl	800064c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	1ad2      	subs	r2, r2, r3
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d91d      	bls.n	8002416 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	68d2      	ldr	r2, [r2, #12]
 80023e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	6952      	ldr	r2, [r2, #20]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	429a      	cmp	r2, r3
 8002424:	bf0c      	ite	eq
 8002426:	2301      	moveq	r3, #1
 8002428:	2300      	movne	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	429a      	cmp	r2, r3
 8002432:	d0c3      	beq.n	80023bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800245a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800247c:	f023 030c 	bic.w	r3, r3, #12
 8002480:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4313      	orrs	r3, r2
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d0:	f040 80e4 	bne.w	800269c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4aab      	ldr	r2, [pc, #684]	; (8002788 <UART_SetConfig+0x348>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <UART_SetConfig+0xa8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4aaa      	ldr	r2, [pc, #680]	; (800278c <UART_SetConfig+0x34c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d16c      	bne.n	80025c2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681c      	ldr	r4, [r3, #0]
 80024ec:	f7ff fe64 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	441a      	add	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4aa2      	ldr	r2, [pc, #648]	; (8002790 <UART_SetConfig+0x350>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	011d      	lsls	r5, r3, #4
 8002510:	f7ff fe52 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8002514:	4602      	mov	r2, r0
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009a      	lsls	r2, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fbb2 f6f3 	udiv	r6, r2, r3
 800252a:	f7ff fe45 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 800252e:	4602      	mov	r2, r0
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	009a      	lsls	r2, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	4a92      	ldr	r2, [pc, #584]	; (8002790 <UART_SetConfig+0x350>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2264      	movs	r2, #100	; 0x64
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	1af3      	subs	r3, r6, r3
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	3332      	adds	r3, #50	; 0x32
 8002558:	4a8d      	ldr	r2, [pc, #564]	; (8002790 <UART_SetConfig+0x350>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002566:	441d      	add	r5, r3
 8002568:	f7ff fe26 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 800256c:	4602      	mov	r2, r0
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002582:	f7ff fe19 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8002586:	4602      	mov	r2, r0
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009a      	lsls	r2, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	4a7c      	ldr	r2, [pc, #496]	; (8002790 <UART_SetConfig+0x350>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2264      	movs	r2, #100	; 0x64
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	1af3      	subs	r3, r6, r3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	3332      	adds	r3, #50	; 0x32
 80025b0:	4a77      	ldr	r2, [pc, #476]	; (8002790 <UART_SetConfig+0x350>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	442b      	add	r3, r5
 80025be:	60a3      	str	r3, [r4, #8]
 80025c0:	e154      	b.n	800286c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681c      	ldr	r4, [r3, #0]
 80025c6:	f7ff fde3 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009a      	lsls	r2, r3, #2
 80025d4:	441a      	add	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	4a6b      	ldr	r2, [pc, #428]	; (8002790 <UART_SetConfig+0x350>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	011d      	lsls	r5, r3, #4
 80025ea:	f7ff fdd1 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009a      	lsls	r2, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fbb2 f6f3 	udiv	r6, r2, r3
 8002604:	f7ff fdc4 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002608:	4602      	mov	r2, r0
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	441a      	add	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <UART_SetConfig+0x350>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	2264      	movs	r2, #100	; 0x64
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	1af3      	subs	r3, r6, r3
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3332      	adds	r3, #50	; 0x32
 8002632:	4a57      	ldr	r2, [pc, #348]	; (8002790 <UART_SetConfig+0x350>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002640:	441d      	add	r5, r3
 8002642:	f7ff fda5 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002646:	4602      	mov	r2, r0
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fbb2 f6f3 	udiv	r6, r2, r3
 800265c:	f7ff fd98 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002660:	4602      	mov	r2, r0
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	009a      	lsls	r2, r3, #2
 800266a:	441a      	add	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	4a46      	ldr	r2, [pc, #280]	; (8002790 <UART_SetConfig+0x350>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	2264      	movs	r2, #100	; 0x64
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	1af3      	subs	r3, r6, r3
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3332      	adds	r3, #50	; 0x32
 800268a:	4a41      	ldr	r2, [pc, #260]	; (8002790 <UART_SetConfig+0x350>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	442b      	add	r3, r5
 8002698:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800269a:	e0e7      	b.n	800286c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a39      	ldr	r2, [pc, #228]	; (8002788 <UART_SetConfig+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d004      	beq.n	80026b0 <UART_SetConfig+0x270>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a38      	ldr	r2, [pc, #224]	; (800278c <UART_SetConfig+0x34c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d171      	bne.n	8002794 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681c      	ldr	r4, [r3, #0]
 80026b4:	f7ff fd80 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4a30      	ldr	r2, [pc, #192]	; (8002790 <UART_SetConfig+0x350>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	011d      	lsls	r5, r3, #4
 80026d8:	f7ff fd6e 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009a      	lsls	r2, r3, #2
 80026e6:	441a      	add	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80026f2:	f7ff fd61 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <UART_SetConfig+0x350>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2264      	movs	r2, #100	; 0x64
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	1af3      	subs	r3, r6, r3
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	3332      	adds	r3, #50	; 0x32
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <UART_SetConfig+0x350>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	441d      	add	r5, r3
 800272e:	f7ff fd43 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8002732:	4602      	mov	r2, r0
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	fbb2 f6f3 	udiv	r6, r2, r3
 8002748:	f7ff fd36 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 800274c:	4602      	mov	r2, r0
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <UART_SetConfig+0x350>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	2264      	movs	r2, #100	; 0x64
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	1af3      	subs	r3, r6, r3
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	3332      	adds	r3, #50	; 0x32
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <UART_SetConfig+0x350>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	442b      	add	r3, r5
 8002784:	60a3      	str	r3, [r4, #8]
 8002786:	e071      	b.n	800286c <UART_SetConfig+0x42c>
 8002788:	40011000 	.word	0x40011000
 800278c:	40011400 	.word	0x40011400
 8002790:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681c      	ldr	r4, [r3, #0]
 8002798:	f7ff fcfa 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800279c:	4602      	mov	r2, r0
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009a      	lsls	r2, r3, #2
 80027a6:	441a      	add	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <UART_SetConfig+0x434>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	011d      	lsls	r5, r3, #4
 80027bc:	f7ff fce8 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80027d6:	f7ff fcdb 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <UART_SetConfig+0x434>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2264      	movs	r2, #100	; 0x64
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	1af3      	subs	r3, r6, r3
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	; 0x32
 8002804:	4a1b      	ldr	r2, [pc, #108]	; (8002874 <UART_SetConfig+0x434>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002810:	441d      	add	r5, r3
 8002812:	f7ff fcbd 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002816:	4602      	mov	r2, r0
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fbb2 f6f3 	udiv	r6, r2, r3
 800282c:	f7ff fcb0 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002830:	4602      	mov	r2, r0
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	009a      	lsls	r2, r3, #2
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <UART_SetConfig+0x434>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	2264      	movs	r2, #100	; 0x64
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	1af3      	subs	r3, r6, r3
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	3332      	adds	r3, #50	; 0x32
 800285a:	4a06      	ldr	r2, [pc, #24]	; (8002874 <UART_SetConfig+0x434>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	442b      	add	r3, r5
 8002868:	60a3      	str	r3, [r4, #8]
}
 800286a:	e7ff      	b.n	800286c <UART_SetConfig+0x42c>
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288a:	2b84      	cmp	r3, #132	; 0x84
 800288c:	d005      	beq.n	800289a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800288e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	3303      	adds	r3, #3
 8002898:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028ac:	f000 fe06 	bl	80034bc <vTaskStartScheduler>
  
  return osOK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685c      	ldr	r4, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028cc:	b29e      	uxth	r6, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ffcf 	bl	8002878 <makeFreeRtosPriority>
 80028da:	4602      	mov	r2, r0
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4632      	mov	r2, r6
 80028e8:	4629      	mov	r1, r5
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 fc88 	bl	8003200 <xTaskCreate>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002904 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <osDelay+0x16>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	e000      	b.n	800291c <osDelay+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fd99 	bl	8003454 <vTaskDelay>
  
  return osOK;
 8002922:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002930:	f001 f894 	bl	8003a5c <xTaskGetSchedulerState>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800293a:	f000 fa45 	bl	8002dc8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f103 0208 	add.w	r2, r3, #8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800295a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0208 	add.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fa:	d103      	bne.n	8002a04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e00c      	b.n	8002a1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3308      	adds	r3, #8
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <vListInsert+0x2e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d9f6      	bls.n	8002a0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d103      	bne.n	8002a8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3b04      	subs	r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3b04      	subs	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f023 0201 	bic.w	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002adc:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <pxPortInitialiseStack+0x64>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3b14      	subs	r3, #20
 8002ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3b04      	subs	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f06f 0202 	mvn.w	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3b20      	subs	r3, #32
 8002b00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	08002b15 	.word	0x08002b15

08002b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <prvTaskExitError+0x38>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b22:	d009      	beq.n	8002b38 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	e7fe      	b.n	8002b36 <prvTaskExitError+0x22>
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8002b4a:	e7fe      	b.n	8002b4a <prvTaskExitError+0x36>
 8002b4c:	20000008 	.word	0x20000008

08002b50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <pxCurrentTCBConst2>)
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	6808      	ldr	r0, [r1, #0]
 8002b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5a:	f380 8809 	msr	PSP, r0
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f380 8811 	msr	BASEPRI, r0
 8002b6a:	4770      	bx	lr
 8002b6c:	f3af 8000 	nop.w

08002b70 <pxCurrentTCBConst2>:
 8002b70:	20003cb0 	.word	0x20003cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop

08002b78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b78:	4806      	ldr	r0, [pc, #24]	; (8002b94 <prvPortStartFirstTask+0x1c>)
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	6800      	ldr	r0, [r0, #0]
 8002b7e:	f380 8808 	msr	MSP, r0
 8002b82:	b662      	cpsie	i
 8002b84:	b661      	cpsie	f
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	df00      	svc	0
 8002b90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b92:	bf00      	nop
 8002b94:	e000ed08 	.word	0xe000ed08

08002b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <xPortStartScheduler+0xf4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	; (8002c90 <xPortStartScheduler+0xf8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d109      	bne.n	8002bbc <xPortStartScheduler+0x24>
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	e7fe      	b.n	8002bba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <xPortStartScheduler+0xf4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <xPortStartScheduler+0xfc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d109      	bne.n	8002bda <xPortStartScheduler+0x42>
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e7fe      	b.n	8002bd8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <xPortStartScheduler+0x100>)
 8002bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <xPortStartScheduler+0x104>)
 8002c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c08:	e009      	b.n	8002c1e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d0ef      	beq.n	8002c0a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <xPortStartScheduler+0x108>)
 8002c3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <xPortStartScheduler+0x10c>)
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <xPortStartScheduler+0x10c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <xPortStartScheduler+0x10c>)
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <xPortStartScheduler+0x10c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c60:	f000 f8d2 	bl	8002e08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <xPortStartScheduler+0x110>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002c6a:	f000 f8e9 	bl	8002e40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <xPortStartScheduler+0x114>)
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <xPortStartScheduler+0x114>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c7a:	f7ff ff7d 	bl	8002b78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8002c7e:	f7ff ff49 	bl	8002b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	e000ed00 	.word	0xe000ed00
 8002c90:	410fc271 	.word	0x410fc271
 8002c94:	410fc270 	.word	0x410fc270
 8002c98:	e000e400 	.word	0xe000e400
 8002c9c:	20000090 	.word	0x20000090
 8002ca0:	20000094 	.word	0x20000094
 8002ca4:	e000ed20 	.word	0xe000ed20
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	e000ef34 	.word	0xe000ef34

08002cb0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <vPortEnterCritical+0x54>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <vPortEnterCritical+0x54>)
 8002cd0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <vPortEnterCritical+0x54>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <vPortEnterCritical+0x58>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <vPortEnterCritical+0x48>
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	e7fe      	b.n	8002cf6 <vPortEnterCritical+0x46>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	20000008 	.word	0x20000008
 8002d08:	e000ed04 	.word	0xe000ed04

08002d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <vPortExitCritical+0x22>
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	e7fe      	b.n	8002d2c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <vPortExitCritical+0x4c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <vPortExitCritical+0x3e>
 8002d40:	2300      	movs	r3, #0
 8002d42:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	00000000 	.word	0x00000000

08002d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d60:	f3ef 8009 	mrs	r0, PSP
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <pxCurrentTCBConst>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	f01e 0f10 	tst.w	lr, #16
 8002d70:	bf08      	it	eq
 8002d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	6010      	str	r0, [r2, #0]
 8002d7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d84:	f380 8811 	msr	BASEPRI, r0
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f000 fd40 	bl	8003814 <vTaskSwitchContext>
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f380 8811 	msr	BASEPRI, r0
 8002d9c:	bc08      	pop	{r3}
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	6808      	ldr	r0, [r1, #0]
 8002da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da6:	f01e 0f10 	tst.w	lr, #16
 8002daa:	bf08      	it	eq
 8002dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002db0:	f380 8809 	msr	PSP, r0
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	f3af 8000 	nop.w

08002dc0 <pxCurrentTCBConst>:
 8002dc0:	20003cb0 	.word	0x20003cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop

08002dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002de0:	f000 fc5c 	bl	800369c <xTaskIncrementTick>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <xPortSysTickHandler+0x3c>)
 8002dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <vPortSetupTimerInterrupt+0x28>)
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <vPortSetupTimerInterrupt+0x2c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4909      	ldr	r1, [pc, #36]	; (8002e38 <vPortSetupTimerInterrupt+0x30>)
 8002e14:	fba1 1303 	umull	r1, r3, r1, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <vPortSetupTimerInterrupt+0x34>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e014 	.word	0xe000e014
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	10624dd3 	.word	0x10624dd3
 8002e3c:	e000e010 	.word	0xe000e010

08002e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e50 <vPortEnableVFP+0x10>
 8002e44:	6801      	ldr	r1, [r0, #0]
 8002e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e4a:	6001      	str	r1, [r0, #0]
 8002e4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e4e:	bf00      	nop
 8002e50:	e000ed88 	.word	0xe000ed88

08002e54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e60:	f000 fb72 	bl	8003548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <pvPortMalloc+0x170>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e6c:	f000 f90c 	bl	8003088 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e70:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <pvPortMalloc+0x174>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 808c 	bne.w	8002f96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01c      	beq.n	8002ebe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002e84:	2208      	movs	r2, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d013      	beq.n	8002ebe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <pvPortMalloc+0x6a>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e7fe      	b.n	8002ebc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d068      	beq.n	8002f96 <pvPortMalloc+0x142>
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <pvPortMalloc+0x178>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d863      	bhi.n	8002f96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ece:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <pvPortMalloc+0x17c>)
 8002ed0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <pvPortMalloc+0x17c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ed8:	e004      	b.n	8002ee4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d203      	bcs.n	8002ef6 <pvPortMalloc+0xa2>
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f1      	bne.n	8002eda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <pvPortMalloc+0x170>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d04a      	beq.n	8002f96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2208      	movs	r2, #8
 8002f06:	4413      	add	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	1ad2      	subs	r2, r2, r3
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d91e      	bls.n	8002f60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <pvPortMalloc+0xf4>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e7fe      	b.n	8002f46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f5a:	69b8      	ldr	r0, [r7, #24]
 8002f5c:	f000 f8f6 	bl	800314c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <pvPortMalloc+0x178>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <pvPortMalloc+0x178>)
 8002f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <pvPortMalloc+0x178>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <pvPortMalloc+0x180>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d203      	bcs.n	8002f82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <pvPortMalloc+0x178>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <pvPortMalloc+0x180>)
 8002f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <pvPortMalloc+0x174>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f96:	f000 fae5 	bl	8003564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <pvPortMalloc+0x164>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e7fe      	b.n	8002fb6 <pvPortMalloc+0x162>
	return pvReturn;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3728      	adds	r7, #40	; 0x28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20003ca0 	.word	0x20003ca0
 8002fc8:	20003cac 	.word	0x20003cac
 8002fcc:	20003ca4 	.word	0x20003ca4
 8002fd0:	20003c98 	.word	0x20003c98
 8002fd4:	20003ca8 	.word	0x20003ca8

08002fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d046      	beq.n	8003078 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002fea:	2308      	movs	r3, #8
 8002fec:	425b      	negs	r3, r3
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <vPortFree+0xa8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <vPortFree+0x42>
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e7fe      	b.n	8003018 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <vPortFree+0x5e>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	e7fe      	b.n	8003034 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <vPortFree+0xa8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d019      	beq.n	8003078 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d115      	bne.n	8003078 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <vPortFree+0xa8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	43db      	mvns	r3, r3
 8003056:	401a      	ands	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800305c:	f000 fa74 	bl	8003548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <vPortFree+0xac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4413      	add	r3, r2
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <vPortFree+0xac>)
 800306c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800306e:	6938      	ldr	r0, [r7, #16]
 8003070:	f000 f86c 	bl	800314c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003074:	f000 fa76 	bl	8003564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003078:	bf00      	nop
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20003cac 	.word	0x20003cac
 8003084:	20003ca4 	.word	0x20003ca4

08003088 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800308e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003092:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <prvHeapInit+0xac>)
 8003096:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3307      	adds	r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <prvHeapInit+0xac>)
 80030b8:	4413      	add	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <prvHeapInit+0xb0>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <prvHeapInit+0xb0>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4413      	add	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030d4:	2208      	movs	r2, #8
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <prvHeapInit+0xb4>)
 80030e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <prvHeapInit+0xb4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <prvHeapInit+0xb4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	1ad2      	subs	r2, r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <prvHeapInit+0xb4>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <prvHeapInit+0xb8>)
 8003116:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a09      	ldr	r2, [pc, #36]	; (8003144 <prvHeapInit+0xbc>)
 800311e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <prvHeapInit+0xc0>)
 8003122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	20000098 	.word	0x20000098
 8003138:	20003c98 	.word	0x20003c98
 800313c:	20003ca0 	.word	0x20003ca0
 8003140:	20003ca8 	.word	0x20003ca8
 8003144:	20003ca4 	.word	0x20003ca4
 8003148:	20003cac 	.word	0x20003cac

0800314c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003154:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <prvInsertBlockIntoFreeList+0xac>)
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e002      	b.n	8003160 <prvInsertBlockIntoFreeList+0x14>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d3f7      	bcc.n	800315a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d108      	bne.n	800318e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	441a      	add	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	441a      	add	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d118      	bne.n	80031d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <prvInsertBlockIntoFreeList+0xb0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d00d      	beq.n	80031ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e008      	b.n	80031dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <prvInsertBlockIntoFreeList+0xb0>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e003      	b.n	80031dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d002      	beq.n	80031ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20003c98 	.word	0x20003c98
 80031fc:	20003ca0 	.word	0x20003ca0

08003200 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fe1d 	bl	8002e54 <pvPortMalloc>
 800321a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003222:	2054      	movs	r0, #84	; 0x54
 8003224:	f7ff fe16 	bl	8002e54 <pvPortMalloc>
 8003228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
 8003236:	e005      	b.n	8003244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003238:	6978      	ldr	r0, [r7, #20]
 800323a:	f7ff fecd 	bl	8002fd8 <vPortFree>
 800323e:	e001      	b.n	8003244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	2300      	movs	r3, #0
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f80e 	bl	8003282 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003266:	69f8      	ldr	r0, [r7, #28]
 8003268:	f000 f88a 	bl	8003380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800326c:	2301      	movs	r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e002      	b.n	8003278 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003276:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003278:	69bb      	ldr	r3, [r7, #24]
	}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b088      	sub	sp, #32
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800329a:	3b01      	subs	r3, #1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <prvInitialiseNewTask+0x46>
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e7fe      	b.n	80032c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	e012      	b.n	80032f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	7819      	ldrb	r1, [r3, #0]
 80032d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	3334      	adds	r3, #52	; 0x34
 80032de:	460a      	mov	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	d9e9      	bls.n	80032ce <prvInitialiseNewTask+0x4c>
 80032fa:	e000      	b.n	80032fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80032fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2b06      	cmp	r3, #6
 800330a:	d901      	bls.n	8003310 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800330c:	2306      	movs	r3, #6
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	3304      	adds	r3, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb2b 	bl	8002982 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	3318      	adds	r3, #24
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fb26 	bl	8002982 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	f1c3 0207 	rsb	r2, r3, #7
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2200      	movs	r2, #0
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	69b8      	ldr	r0, [r7, #24]
 8003360:	f7ff fba4 	bl	8002aac <pxPortInitialiseStack>
 8003364:	4602      	mov	r2, r0
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003376:	bf00      	nop
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003388:	f7ff fc92 	bl	8002cb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <prvAddNewTaskToReadyList+0xb8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <prvAddNewTaskToReadyList+0xb8>)
 8003394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003396:	4b29      	ldr	r3, [pc, #164]	; (800343c <prvAddNewTaskToReadyList+0xbc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800339e:	4a27      	ldr	r2, [pc, #156]	; (800343c <prvAddNewTaskToReadyList+0xbc>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <prvAddNewTaskToReadyList+0xb8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d110      	bne.n	80033ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033ac:	f000 faa4 	bl	80038f8 <prvInitialiseTaskLists>
 80033b0:	e00d      	b.n	80033ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033b2:	4b23      	ldr	r3, [pc, #140]	; (8003440 <prvAddNewTaskToReadyList+0xc0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <prvAddNewTaskToReadyList+0xbc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d802      	bhi.n	80033ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <prvAddNewTaskToReadyList+0xbc>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <prvAddNewTaskToReadyList+0xc4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <prvAddNewTaskToReadyList+0xc4>)
 80033d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <prvAddNewTaskToReadyList+0xc8>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a15      	ldr	r2, [pc, #84]	; (800344c <prvAddNewTaskToReadyList+0xcc>)
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7ff facb 	bl	800299c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003406:	f7ff fc81 	bl	8002d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <prvAddNewTaskToReadyList+0xc0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <prvAddNewTaskToReadyList+0xbc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	429a      	cmp	r2, r3
 800341e:	d207      	bcs.n	8003430 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <prvAddNewTaskToReadyList+0xd0>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20003db0 	.word	0x20003db0
 800343c:	20003cb0 	.word	0x20003cb0
 8003440:	20003dbc 	.word	0x20003dbc
 8003444:	20003dcc 	.word	0x20003dcc
 8003448:	20003db8 	.word	0x20003db8
 800344c:	20003cb4 	.word	0x20003cb4
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <vTaskDelay+0x60>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <vTaskDelay+0x2e>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e7fe      	b.n	8003480 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003482:	f000 f861 	bl	8003548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003486:	2100      	movs	r1, #0
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb05 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800348e:	f000 f869 	bl	8003564 <xTaskResumeAll>
 8003492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <vTaskDelay+0x64>)
 800349c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20003dd8 	.word	0x20003dd8
 80034b8:	e000ed04 	.word	0xe000ed04

080034bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80034c2:	4b1b      	ldr	r3, [pc, #108]	; (8003530 <vTaskStartScheduler+0x74>)
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	2300      	movs	r3, #0
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	4919      	ldr	r1, [pc, #100]	; (8003534 <vTaskStartScheduler+0x78>)
 80034d0:	4819      	ldr	r0, [pc, #100]	; (8003538 <vTaskStartScheduler+0x7c>)
 80034d2:	f7ff fe95 	bl	8003200 <xTaskCreate>
 80034d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d115      	bne.n	800350a <vTaskStartScheduler+0x4e>
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <vTaskStartScheduler+0x80>)
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <vTaskStartScheduler+0x84>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <vTaskStartScheduler+0x88>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003504:	f7ff fb48 	bl	8002b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003508:	e00d      	b.n	8003526 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003510:	d109      	bne.n	8003526 <vTaskStartScheduler+0x6a>
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e7fe      	b.n	8003524 <vTaskStartScheduler+0x68>
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20003dd4 	.word	0x20003dd4
 8003534:	08005090 	.word	0x08005090
 8003538:	080038c9 	.word	0x080038c9
 800353c:	20003dd0 	.word	0x20003dd0
 8003540:	20003dbc 	.word	0x20003dbc
 8003544:	20003db4 	.word	0x20003db4

08003548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <vTaskSuspendAll+0x18>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a03      	ldr	r2, [pc, #12]	; (8003560 <vTaskSuspendAll+0x18>)
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20003dd8 	.word	0x20003dd8

08003564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003572:	4b41      	ldr	r3, [pc, #260]	; (8003678 <xTaskResumeAll+0x114>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <xTaskResumeAll+0x2a>
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	e7fe      	b.n	800358c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800358e:	f7ff fb8f 	bl	8002cb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003592:	4b39      	ldr	r3, [pc, #228]	; (8003678 <xTaskResumeAll+0x114>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a37      	ldr	r2, [pc, #220]	; (8003678 <xTaskResumeAll+0x114>)
 800359a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359c:	4b36      	ldr	r3, [pc, #216]	; (8003678 <xTaskResumeAll+0x114>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d161      	bne.n	8003668 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035a4:	4b35      	ldr	r3, [pc, #212]	; (800367c <xTaskResumeAll+0x118>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05d      	beq.n	8003668 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ac:	e02e      	b.n	800360c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <xTaskResumeAll+0x11c>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3318      	adds	r3, #24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fa4b 	bl	8002a56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fa46 	bl	8002a56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	2201      	movs	r2, #1
 80035d0:	409a      	lsls	r2, r3
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <xTaskResumeAll+0x120>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <xTaskResumeAll+0x120>)
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <xTaskResumeAll+0x124>)
 80035ea:	441a      	add	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7ff f9d2 	bl	800299c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <xTaskResumeAll+0x128>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003606:	4b22      	ldr	r3, [pc, #136]	; (8003690 <xTaskResumeAll+0x12c>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800360c:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <xTaskResumeAll+0x11c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1cc      	bne.n	80035ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800361a:	f000 f9f9 	bl	8003a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <xTaskResumeAll+0x130>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800362a:	f000 f837 	bl	800369c <xTaskIncrementTick>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <xTaskResumeAll+0x12c>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3b01      	subs	r3, #1
 800363e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f1      	bne.n	800362a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <xTaskResumeAll+0x130>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <xTaskResumeAll+0x12c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003654:	2301      	movs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <xTaskResumeAll+0x134>)
 800365a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003668:	f7ff fb50 	bl	8002d0c <vPortExitCritical>

	return xAlreadyYielded;
 800366c:	68bb      	ldr	r3, [r7, #8]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20003dd8 	.word	0x20003dd8
 800367c:	20003db0 	.word	0x20003db0
 8003680:	20003d70 	.word	0x20003d70
 8003684:	20003db8 	.word	0x20003db8
 8003688:	20003cb4 	.word	0x20003cb4
 800368c:	20003cb0 	.word	0x20003cb0
 8003690:	20003dc4 	.word	0x20003dc4
 8003694:	20003dc0 	.word	0x20003dc0
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <xTaskIncrementTick+0x14c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 808c 	bne.w	80037c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80036b0:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <xTaskIncrementTick+0x150>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036b8:	4a4c      	ldr	r2, [pc, #304]	; (80037ec <xTaskIncrementTick+0x150>)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11f      	bne.n	8003704 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80036c4:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <xTaskIncrementTick+0x154>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <xTaskIncrementTick+0x46>
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	e7fe      	b.n	80036e0 <xTaskIncrementTick+0x44>
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <xTaskIncrementTick+0x154>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <xTaskIncrementTick+0x158>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a40      	ldr	r2, [pc, #256]	; (80037f0 <xTaskIncrementTick+0x154>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <xTaskIncrementTick+0x158>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <xTaskIncrementTick+0x15c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4a3e      	ldr	r2, [pc, #248]	; (80037f8 <xTaskIncrementTick+0x15c>)
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	f000 f986 	bl	8003a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003704:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <xTaskIncrementTick+0x160>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d34d      	bcc.n	80037aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <xTaskIncrementTick+0x154>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <xTaskIncrementTick+0x80>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <xTaskIncrementTick+0x82>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <xTaskIncrementTick+0x160>)
 8003724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003728:	601a      	str	r2, [r3, #0]
					break;
 800372a:	e03e      	b.n	80037aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800372c:	4b30      	ldr	r3, [pc, #192]	; (80037f0 <xTaskIncrementTick+0x154>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d203      	bcs.n	800374c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003744:	4a2d      	ldr	r2, [pc, #180]	; (80037fc <xTaskIncrementTick+0x160>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
						break;
 800374a:	e02e      	b.n	80037aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3304      	adds	r3, #4
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff f980 	bl	8002a56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3318      	adds	r3, #24
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f977 	bl	8002a56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <xTaskIncrementTick+0x164>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	4a22      	ldr	r2, [pc, #136]	; (8003800 <xTaskIncrementTick+0x164>)
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <xTaskIncrementTick+0x168>)
 8003788:	441a      	add	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff f903 	bl	800299c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <xTaskIncrementTick+0x16c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3b4      	bcc.n	800370e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037a8:	e7b1      	b.n	800370e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <xTaskIncrementTick+0x16c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	4914      	ldr	r1, [pc, #80]	; (8003804 <xTaskIncrementTick+0x168>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d907      	bls.n	80037d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e004      	b.n	80037d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <xTaskIncrementTick+0x170>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <xTaskIncrementTick+0x170>)
 80037d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <xTaskIncrementTick+0x174>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80037de:	697b      	ldr	r3, [r7, #20]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20003dd8 	.word	0x20003dd8
 80037ec:	20003db4 	.word	0x20003db4
 80037f0:	20003d68 	.word	0x20003d68
 80037f4:	20003d6c 	.word	0x20003d6c
 80037f8:	20003dc8 	.word	0x20003dc8
 80037fc:	20003dd0 	.word	0x20003dd0
 8003800:	20003db8 	.word	0x20003db8
 8003804:	20003cb4 	.word	0x20003cb4
 8003808:	20003cb0 	.word	0x20003cb0
 800380c:	20003dc0 	.word	0x20003dc0
 8003810:	20003dc4 	.word	0x20003dc4

08003814 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <vTaskSwitchContext+0xa0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <vTaskSwitchContext+0xa4>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003828:	e03e      	b.n	80038a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <vTaskSwitchContext+0xa4>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <vTaskSwitchContext+0xa8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800383e:	7afb      	ldrb	r3, [r7, #11]
 8003840:	f1c3 031f 	rsb	r3, r3, #31
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	491e      	ldr	r1, [pc, #120]	; (80038c0 <vTaskSwitchContext+0xac>)
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <vTaskSwitchContext+0x5a>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e7fe      	b.n	800386c <vTaskSwitchContext+0x58>
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <vTaskSwitchContext+0xac>)
 800387a:	4413      	add	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	3308      	adds	r3, #8
 8003890:	429a      	cmp	r2, r3
 8003892:	d104      	bne.n	800389e <vTaskSwitchContext+0x8a>
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <vTaskSwitchContext+0xb0>)
 80038a6:	6013      	str	r3, [r2, #0]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20003dd8 	.word	0x20003dd8
 80038b8:	20003dc4 	.word	0x20003dc4
 80038bc:	20003db8 	.word	0x20003db8
 80038c0:	20003cb4 	.word	0x20003cb4
 80038c4:	20003cb0 	.word	0x20003cb0

080038c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038d0:	f000 f852 	bl	8003978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <prvIdleTask+0x28>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d9f9      	bls.n	80038d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <prvIdleTask+0x2c>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038ec:	e7f0      	b.n	80038d0 <prvIdleTask+0x8>
 80038ee:	bf00      	nop
 80038f0:	20003cb4 	.word	0x20003cb4
 80038f4:	e000ed04 	.word	0xe000ed04

080038f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	e00c      	b.n	800391e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <prvInitialiseTaskLists+0x60>)
 8003910:	4413      	add	r3, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f815 	bl	8002942 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d9ef      	bls.n	8003904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <prvInitialiseTaskLists+0x64>)
 8003926:	f7ff f80c 	bl	8002942 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800392a:	480d      	ldr	r0, [pc, #52]	; (8003960 <prvInitialiseTaskLists+0x68>)
 800392c:	f7ff f809 	bl	8002942 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <prvInitialiseTaskLists+0x6c>)
 8003932:	f7ff f806 	bl	8002942 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003936:	480c      	ldr	r0, [pc, #48]	; (8003968 <prvInitialiseTaskLists+0x70>)
 8003938:	f7ff f803 	bl	8002942 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <prvInitialiseTaskLists+0x74>)
 800393e:	f7ff f800 	bl	8002942 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvInitialiseTaskLists+0x78>)
 8003944:	4a05      	ldr	r2, [pc, #20]	; (800395c <prvInitialiseTaskLists+0x64>)
 8003946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvInitialiseTaskLists+0x7c>)
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <prvInitialiseTaskLists+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20003cb4 	.word	0x20003cb4
 800395c:	20003d40 	.word	0x20003d40
 8003960:	20003d54 	.word	0x20003d54
 8003964:	20003d70 	.word	0x20003d70
 8003968:	20003d84 	.word	0x20003d84
 800396c:	20003d9c 	.word	0x20003d9c
 8003970:	20003d68 	.word	0x20003d68
 8003974:	20003d6c 	.word	0x20003d6c

08003978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800397e:	e028      	b.n	80039d2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003980:	f7ff fde2 	bl	8003548 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <prvCheckTasksWaitingTermination+0x6c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003994:	f7ff fde6 	bl	8003564 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800399e:	f7ff f987 	bl	8002cb0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <prvCheckTasksWaitingTermination+0x6c>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3304      	adds	r3, #4
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f851 	bl	8002a56 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <prvCheckTasksWaitingTermination+0x70>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <prvCheckTasksWaitingTermination+0x70>)
 80039bc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <prvCheckTasksWaitingTermination+0x74>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a09      	ldr	r2, [pc, #36]	; (80039ec <prvCheckTasksWaitingTermination+0x74>)
 80039c6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80039c8:	f7ff f9a0 	bl	8002d0c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80039cc:	6838      	ldr	r0, [r7, #0]
 80039ce:	f000 f80f 	bl	80039f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <prvCheckTasksWaitingTermination+0x74>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d2      	bne.n	8003980 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20003d84 	.word	0x20003d84
 80039e8:	20003db0 	.word	0x20003db0
 80039ec:	20003d98 	.word	0x20003d98

080039f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff faeb 	bl	8002fd8 <vPortFree>
			vPortFree( pxTCB );
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fae8 	bl	8002fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <prvResetNextTaskUnblockTime+0x44>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <prvResetNextTaskUnblockTime+0x14>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <prvResetNextTaskUnblockTime+0x16>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <prvResetNextTaskUnblockTime+0x48>)
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a32:	e008      	b.n	8003a46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvResetNextTaskUnblockTime+0x44>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <prvResetNextTaskUnblockTime+0x48>)
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20003d68 	.word	0x20003d68
 8003a58:	20003dd0 	.word	0x20003dd0

08003a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <xTaskGetSchedulerState+0x34>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	e008      	b.n	8003a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <xTaskGetSchedulerState+0x38>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	e001      	b.n	8003a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a82:	687b      	ldr	r3, [r7, #4]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	20003dbc 	.word	0x20003dbc
 8003a94:	20003dd8 	.word	0x20003dd8

08003a98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aa2:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa8:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe ffd1 	bl	8002a56 <uxListRemove>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4013      	ands	r3, r2
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ad0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad8:	d10a      	bne.n	8003af0 <prvAddCurrentTaskToDelayedList+0x58>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	481a      	ldr	r0, [pc, #104]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003aea:	f7fe ff57 	bl	800299c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aee:	e026      	b.n	8003b3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003af8:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d209      	bcs.n	8003b1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe ff65 	bl	80029e4 <vListInsert>
}
 8003b1a:	e010      	b.n	8003b3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f7fe ff5b 	bl	80029e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d202      	bcs.n	8003b3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b38:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6013      	str	r3, [r2, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20003db4 	.word	0x20003db4
 8003b4c:	20003cb0 	.word	0x20003cb0
 8003b50:	20003db8 	.word	0x20003db8
 8003b54:	20003d9c 	.word	0x20003d9c
 8003b58:	20003d6c 	.word	0x20003d6c
 8003b5c:	20003d68 	.word	0x20003d68
 8003b60:	20003dd0 	.word	0x20003dd0

08003b64 <__io_putchar>:
/*****************Printf implementation***********/
//With this funcitons we can use printf instead of
//the HAL stm32 implementation

int __io_putchar(int ch)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &c[0], 1, 10);
 8003b72:	f107 010c 	add.w	r1, r7, #12
 8003b76:	230a      	movs	r3, #10
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <__io_putchar+0x28>)
 8003b7c:	f7fe fb7d 	bl	800227a <HAL_UART_Transmit>
 return ch;
 8003b80:	687b      	ldr	r3, [r7, #4]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20003dec 	.word	0x20003dec

08003b90 <_write>:

int _write(int file,char *ptr, int len)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e009      	b.n	8003bb6 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	60ba      	str	r2, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffda 	bl	8003b64 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	dbf1      	blt.n	8003ba2 <_write+0x12>
 }
return len;
 8003bbe:	687b      	ldr	r3, [r7, #4]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bce:	f7fc fcd7 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bd2:	f000 f81d 	bl	8003c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bd6:	f000 f8e5 	bl	8003da4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003bda:	f000 f883 	bl	8003ce4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003bde:	f000 f8b3 	bl	8003d48 <MX_USART3_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <main+0x40>)
 8003be4:	1d3c      	adds	r4, r7, #4
 8003be6:	461d      	mov	r5, r3
 8003be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fe5e 	bl	80028b6 <osThreadCreate>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <main+0x44>)
 8003bfe:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8003c00:	f7fe fe52 	bl	80028a8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <main+0x3c>
 8003c06:	bf00      	nop
 8003c08:	080050a4 	.word	0x080050a4
 8003c0c:	20003e2c 	.word	0x20003e2c

08003c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b094      	sub	sp, #80	; 0x50
 8003c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	4a2e      	ldr	r2, [pc, #184]	; (8003cd4 <SystemClock_Config+0xc4>)
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <SystemClock_Config+0xc4>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	; 0x40
 8003c26:	4b2b      	ldr	r3, [pc, #172]	; (8003cd4 <SystemClock_Config+0xc4>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <SystemClock_Config+0xc8>)
 8003c38:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <SystemClock_Config+0xc8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <SystemClock_Config+0xc8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4a:	607b      	str	r3, [r7, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c52:	2301      	movs	r3, #1
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003c56:	2310      	movs	r3, #16
 8003c58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c5e:	f107 0320 	add.w	r3, r7, #32
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd feae 	bl	80019c4 <HAL_RCC_OscConfig>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <SystemClock_Config+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c6e:	21c4      	movs	r1, #196	; 0xc4
 8003c70:	481a      	ldr	r0, [pc, #104]	; (8003cdc <SystemClock_Config+0xcc>)
 8003c72:	f000 f8bc 	bl	8003dee <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c76:	230f      	movs	r3, #15
 8003c78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe f8d9 	bl	8001e48 <HAL_RCC_ClockConfig>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c9c:	21d2      	movs	r1, #210	; 0xd2
 8003c9e:	480f      	ldr	r0, [pc, #60]	; (8003cdc <SystemClock_Config+0xcc>)
 8003ca0:	f000 f8a5 	bl	8003dee <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003ca4:	f7fe fa68 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <SystemClock_Config+0xd0>)
 8003cac:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fdad 	bl	8000812 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003cb8:	2004      	movs	r0, #4
 8003cba:	f7fc fdb7 	bl	800082c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	210f      	movs	r1, #15
 8003cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc6:	f7fc fd88 	bl	80007da <HAL_NVIC_SetPriority>
}
 8003cca:	bf00      	nop
 8003ccc:	3750      	adds	r7, #80	; 0x50
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	080050b8 	.word	0x080050b8
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003cea:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <MX_I2C1_Init+0x58>)
 8003cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <MX_I2C1_Init+0x5c>)
 8003cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d20:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_I2C1_Init+0x54>)
 8003d22:	f7fc ff39 	bl	8000b98 <HAL_I2C_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d2c:	21f0      	movs	r1, #240	; 0xf0
 8003d2e:	4805      	ldr	r0, [pc, #20]	; (8003d44 <MX_I2C1_Init+0x60>)
 8003d30:	f000 f85d 	bl	8003dee <_Error_Handler>
  }

}
 8003d34:	bf00      	nop
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20003e30 	.word	0x20003e30
 8003d3c:	40005400 	.word	0x40005400
 8003d40:	000186a0 	.word	0x000186a0
 8003d44:	080050b8 	.word	0x080050b8

08003d48 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <MX_USART3_UART_Init+0x54>)
 8003d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d6e:	220c      	movs	r2, #12
 8003d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d78:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d7e:	4806      	ldr	r0, [pc, #24]	; (8003d98 <MX_USART3_UART_Init+0x50>)
 8003d80:	f7fe fa2e 	bl	80021e0 <HAL_UART_Init>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <MX_USART3_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003d8a:	f240 1103 	movw	r1, #259	; 0x103
 8003d8e:	4804      	ldr	r0, [pc, #16]	; (8003da0 <MX_USART3_UART_Init+0x58>)
 8003d90:	f000 f82d 	bl	8003dee <_Error_Handler>
  }

}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20003dec 	.word	0x20003dec
 8003d9c:	40004800 	.word	0x40004800
 8003da0:	080050b8 	.word	0x080050b8

08003da4 <MX_GPIO_Init>:

/** Pinout Configuration
*/
static void MX_GPIO_Init(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <MX_GPIO_Init+0x30>)
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <MX_GPIO_Init+0x30>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <MX_GPIO_Init+0x30>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]

}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  //This thread check the temperature every second

  for(;;)
  {
	humidity_temp();
 8003de0:	f000 f85e 	bl	8003ea0 <humidity_temp>
	osDelay(1000);
 8003de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de8:	f7fe fd8c 	bl	8002904 <osDelay>
  {
 8003dec:	e7f8      	b.n	8003de0 <StartDefaultTask+0x8>

08003dee <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003df8:	e7fe      	b.n	8003df8 <_Error_Handler+0xa>
	...

08003dfc <hih6130_getreg32>:

  return regval;
}

static uint32_t hih6130_getreg32( uint8_t regaddr)//modify the arguments
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  uint16_t byte1, byte2, byte3, byte4;//byte1 is the msb and byte4 is the lsb
  uint16_t msb, lsb;
  uint32_t regval = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
  int ret;

  /*Write the register address*/
  ret=HAL_I2C_Master_Transmit (&hi2c1, HIH6130_ADDRESS<<1,&regaddr, 1, 100);
 8003e0a:	1dfa      	adds	r2, r7, #7
 8003e0c:	2364      	movs	r3, #100	; 0x64
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2301      	movs	r3, #1
 8003e12:	214e      	movs	r1, #78	; 0x4e
 8003e14:	481f      	ldr	r0, [pc, #124]	; (8003e94 <hih6130_getreg32+0x98>)
 8003e16:	f7fc ff9f 	bl	8000d58 <HAL_I2C_Master_Transmit>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	617b      	str	r3, [r7, #20]
  if(ret>0){
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dd03      	ble.n	8003e2c <hih6130_getreg32+0x30>
    //error
	  printf("Error getreg32 transmit: %i \r\n",ret);
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	481c      	ldr	r0, [pc, #112]	; (8003e98 <hih6130_getreg32+0x9c>)
 8003e28:	f000 f9f8 	bl	800421c <iprintf>
  }

  //Read the register value

  ret=HAL_I2C_Master_Receive (&hi2c1,HIH6130_ADDRESS<<1,&regval,4,100);
 8003e2c:	f107 0208 	add.w	r2, r7, #8
 8003e30:	2364      	movs	r3, #100	; 0x64
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2304      	movs	r3, #4
 8003e36:	214e      	movs	r1, #78	; 0x4e
 8003e38:	4816      	ldr	r0, [pc, #88]	; (8003e94 <hih6130_getreg32+0x98>)
 8003e3a:	f7fd f89b 	bl	8000f74 <HAL_I2C_Master_Receive>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	617b      	str	r3, [r7, #20]
  if(ret>0){
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	dd03      	ble.n	8003e50 <hih6130_getreg32+0x54>
   printf("Error getreg32 receive: %i \r\n",ret);
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	4814      	ldr	r0, [pc, #80]	; (8003e9c <hih6130_getreg32+0xa0>)
 8003e4c:	f000 f9e6 	bl	800421c <iprintf>
  }

  byte1=(regval & 0xFF);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	827b      	strh	r3, [r7, #18]
  byte2=(regval & 0xFF00) >>8;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	823b      	strh	r3, [r7, #16]
  byte3=(regval & 0xFFFF00) >> 16;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	81fb      	strh	r3, [r7, #14]
  byte4=(regval & 0xFFFFFF00) >> 24;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0e1b      	lsrs	r3, r3, #24
 8003e70:	81bb      	strh	r3, [r7, #12]

  regval=(byte1 << 24) | (byte2 << 16) | (byte3 << 8) | byte4;
 8003e72:	8a7b      	ldrh	r3, [r7, #18]
 8003e74:	061a      	lsls	r2, r3, #24
 8003e76:	8a3b      	ldrh	r3, [r7, #16]
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	431a      	orrs	r2, r3
 8003e82:	89bb      	ldrh	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]

  return regval;
 8003e88:	68bb      	ldr	r3, [r7, #8]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20003e30 	.word	0x20003e30
 8003e98:	08005150 	.word	0x08005150
 8003e9c:	08005170 	.word	0x08005170

08003ea0 <humidity_temp>:
  ret=HAL_I2C_Master_Transmit (&hi2c1, HIH6130_ADDRESS<<1,(uint8_t *) &data, 2, 100);

  return ;
}

void humidity_temp(){
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0

	uint32_t regval0 ;
	uint32_t data = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
	uint8_t sensor_status=0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	72fb      	strb	r3, [r7, #11]
	uint16_t humidity_data,humidity = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	813b      	strh	r3, [r7, #8]
	int16_t temperature_data, temperature = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	80fb      	strh	r3, [r7, #6]

	data = hih6130_getreg32( HIH6130_READREG);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7ff ffa0 	bl	8003dfc <hih6130_getreg32>
 8003ebc:	60f8      	str	r0, [r7, #12]

	//This is the data that we recieve from the device
	//Are four bytes
	//First we check the state of the sensor (First two bits)
	sensor_status=(data & 0xFFFFFF00) >> 30;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	0f9b      	lsrs	r3, r3, #30
 8003ec2:	72fb      	strb	r3, [r7, #11]

	if(sensor_status == 0 || sensor_status == 1){
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <humidity_temp+0x30>
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d137      	bne.n	8003f40 <humidity_temp+0xa0>
	//sensor status = 0, sensor is working correctly
	//sensor status = 1, sensor is working correctly but you should reduce the measure frequency
	//because the data that is showing is from the buffer
	//Getting the humidity data
	humidity_data = (data & 0xFFFFFF00) >> 16;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	80bb      	strh	r3, [r7, #4]

	humidity_data = (humidity_data) << 2;
 8003ed6:	88bb      	ldrh	r3, [r7, #4]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	80bb      	strh	r3, [r7, #4]
	humidity_data = (humidity_data) >> 2;
 8003edc:	88bb      	ldrh	r3, [r7, #4]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	80bb      	strh	r3, [r7, #4]

	humidity=humidity_data*100/(16384 -1);
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	2264      	movs	r2, #100	; 0x64
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <humidity_temp+0xa8>)
 8003eec:	fb82 1203 	smull	r1, r2, r2, r3
 8003ef0:	441a      	add	r2, r3
 8003ef2:	1352      	asrs	r2, r2, #13
 8003ef4:	17db      	asrs	r3, r3, #31
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	813b      	strh	r3, [r7, #8]
	printf("humidity value: %i \r\n",humidity);
 8003efa:	893b      	ldrh	r3, [r7, #8]
 8003efc:	4619      	mov	r1, r3
 8003efe:	4813      	ldr	r0, [pc, #76]	; (8003f4c <humidity_temp+0xac>)
 8003f00:	f000 f98c 	bl	800421c <iprintf>
	//Getting the temperature data
	temperature_data = (data & 0xFFFF) >> 2;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003f0e:	807b      	strh	r3, [r7, #2]

	temperature = temperature_data*165/(16384-1) - 40;
 8003f10:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <humidity_temp+0xa8>)
 8003f20:	fb82 1203 	smull	r1, r2, r2, r3
 8003f24:	441a      	add	r2, r3
 8003f26:	1352      	asrs	r2, r2, #13
 8003f28:	17db      	asrs	r3, r3, #31
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b28      	subs	r3, #40	; 0x28
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	80fb      	strh	r3, [r7, #6]

	printf("temperature value: %i \r\n",temperature);
 8003f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4805      	ldr	r0, [pc, #20]	; (8003f50 <humidity_temp+0xb0>)
 8003f3c:	f000 f96e 	bl	800421c <iprintf>
}
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	80020009 	.word	0x80020009
 8003f4c:	08005190 	.word	0x08005190
 8003f50:	080051a8 	.word	0x080051a8

08003f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_MspInit+0xa0>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f92:	2003      	movs	r0, #3
 8003f94:	f7fc fc16 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f06f 000b 	mvn.w	r0, #11
 8003fa0:	f7fc fc1b 	bl	80007da <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f06f 000a 	mvn.w	r0, #10
 8003fac:	f7fc fc15 	bl	80007da <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f06f 0009 	mvn.w	r0, #9
 8003fb8:	f7fc fc0f 	bl	80007da <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f06f 0004 	mvn.w	r0, #4
 8003fc4:	f7fc fc09 	bl	80007da <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	f06f 0003 	mvn.w	r0, #3
 8003fd0:	f7fc fc03 	bl	80007da <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	f06f 0001 	mvn.w	r0, #1
 8003fdc:	f7fc fbfd 	bl	80007da <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	210f      	movs	r1, #15
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe8:	f7fc fbf7 	bl	80007da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <HAL_I2C_MspInit+0x58>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d11d      	bne.n	8004046 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400e:	2312      	movs	r3, #18
 8004010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004012:	2301      	movs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004016:	2303      	movs	r3, #3
 8004018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800401a:	2304      	movs	r3, #4
 800401c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	4619      	mov	r1, r3
 8004024:	480b      	ldr	r0, [pc, #44]	; (8004054 <HAL_I2C_MspInit+0x5c>)
 8004026:	f7fc fc1d 	bl	8000864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <HAL_I2C_MspInit+0x60>)
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_I2C_MspInit+0x60>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_I2C_MspInit+0x60>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004046:	bf00      	nop
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40005400 	.word	0x40005400
 8004054:	40020400 	.word	0x40020400
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a12      	ldr	r2, [pc, #72]	; (80040b4 <HAL_UART_MspInit+0x58>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d11e      	bne.n	80040ac <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_UART_MspInit+0x5c>)
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_UART_MspInit+0x5c>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_UART_MspInit+0x5c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800408a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800408e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004094:	2301      	movs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004098:	2303      	movs	r3, #3
 800409a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800409c:	2307      	movs	r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a0:	f107 030c 	add.w	r3, r7, #12
 80040a4:	4619      	mov	r1, r3
 80040a6:	4805      	ldr	r0, [pc, #20]	; (80040bc <HAL_UART_MspInit+0x60>)
 80040a8:	f7fc fbdc 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40004800 	.word	0x40004800
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40020400 	.word	0x40020400

080040c0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <HardFault_Handler+0x4>

080040d4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <MemManage_Handler+0x4>

080040da <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <BusFault_Handler+0x4>

080040e0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <UsageFault_Handler+0x4>

080040e6 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f8:	f7fc fa94 	bl	8000624 <HAL_IncTick>
  osSystickHandler();
 80040fc:	f7fe fc16 	bl	800292c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}

08004104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <SystemInit+0x60>)
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <SystemInit+0x60>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <SystemInit+0x64>)
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <SystemInit+0x64>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <SystemInit+0x64>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800412a:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <SystemInit+0x64>)
 800412c:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <SystemInit+0x64>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <SystemInit+0x64>)
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <SystemInit+0x68>)
 800413e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004140:	4a09      	ldr	r2, [pc, #36]	; (8004168 <SystemInit+0x64>)
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <SystemInit+0x64>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SystemInit+0x64>)
 800414e:	2200      	movs	r2, #0
 8004150:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <SystemInit+0x60>)
 8004154:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004158:	609a      	str	r2, [r3, #8]
#endif
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00
 8004168:	40023800 	.word	0x40023800
 800416c:	24003010 	.word	0x24003010

08004170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004176:	e003      	b.n	8004180 <LoopCopyDataInit>

08004178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800417a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800417c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800417e:	3104      	adds	r1, #4

08004180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004180:	480b      	ldr	r0, [pc, #44]	; (80041b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004188:	d3f6      	bcc.n	8004178 <CopyDataInit>
  ldr  r2, =_sbss
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800418c:	e002      	b.n	8004194 <LoopFillZerobss>

0800418e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800418e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004190:	f842 3b04 	str.w	r3, [r2], #4

08004194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004198:	d3f9      	bcc.n	800418e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800419a:	f7ff ffb3 	bl	8004104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419e:	f000 f811 	bl	80041c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a2:	f7ff fd11 	bl	8003bc8 <main>
  bx  lr    
 80041a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041ac:	08005284 	.word	0x08005284
  ldr  r0, =_sdata
 80041b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041b4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80041b8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80041bc:	20003e88 	.word	0x20003e88

080041c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC_IRQHandler>
	...

080041c4 <__libc_init_array>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	4e0d      	ldr	r6, [pc, #52]	; (80041fc <__libc_init_array+0x38>)
 80041c8:	4c0d      	ldr	r4, [pc, #52]	; (8004200 <__libc_init_array+0x3c>)
 80041ca:	1ba4      	subs	r4, r4, r6
 80041cc:	10a4      	asrs	r4, r4, #2
 80041ce:	2500      	movs	r5, #0
 80041d0:	42a5      	cmp	r5, r4
 80041d2:	d109      	bne.n	80041e8 <__libc_init_array+0x24>
 80041d4:	4e0b      	ldr	r6, [pc, #44]	; (8004204 <__libc_init_array+0x40>)
 80041d6:	4c0c      	ldr	r4, [pc, #48]	; (8004208 <__libc_init_array+0x44>)
 80041d8:	f000 ff4e 	bl	8005078 <_init>
 80041dc:	1ba4      	subs	r4, r4, r6
 80041de:	10a4      	asrs	r4, r4, #2
 80041e0:	2500      	movs	r5, #0
 80041e2:	42a5      	cmp	r5, r4
 80041e4:	d105      	bne.n	80041f2 <__libc_init_array+0x2e>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041ec:	4798      	blx	r3
 80041ee:	3501      	adds	r5, #1
 80041f0:	e7ee      	b.n	80041d0 <__libc_init_array+0xc>
 80041f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041f6:	4798      	blx	r3
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7f2      	b.n	80041e2 <__libc_init_array+0x1e>
 80041fc:	0800527c 	.word	0x0800527c
 8004200:	0800527c 	.word	0x0800527c
 8004204:	0800527c 	.word	0x0800527c
 8004208:	08005280 	.word	0x08005280

0800420c <memset>:
 800420c:	4402      	add	r2, r0
 800420e:	4603      	mov	r3, r0
 8004210:	4293      	cmp	r3, r2
 8004212:	d100      	bne.n	8004216 <memset+0xa>
 8004214:	4770      	bx	lr
 8004216:	f803 1b01 	strb.w	r1, [r3], #1
 800421a:	e7f9      	b.n	8004210 <memset+0x4>

0800421c <iprintf>:
 800421c:	b40f      	push	{r0, r1, r2, r3}
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <iprintf+0x2c>)
 8004220:	b513      	push	{r0, r1, r4, lr}
 8004222:	681c      	ldr	r4, [r3, #0]
 8004224:	b124      	cbz	r4, 8004230 <iprintf+0x14>
 8004226:	69a3      	ldr	r3, [r4, #24]
 8004228:	b913      	cbnz	r3, 8004230 <iprintf+0x14>
 800422a:	4620      	mov	r0, r4
 800422c:	f000 f84e 	bl	80042cc <__sinit>
 8004230:	ab05      	add	r3, sp, #20
 8004232:	9a04      	ldr	r2, [sp, #16]
 8004234:	68a1      	ldr	r1, [r4, #8]
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	4620      	mov	r0, r4
 800423a:	f000 f959 	bl	80044f0 <_vfiprintf_r>
 800423e:	b002      	add	sp, #8
 8004240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr
 8004248:	20000010 	.word	0x20000010

0800424c <_cleanup_r>:
 800424c:	4901      	ldr	r1, [pc, #4]	; (8004254 <_cleanup_r+0x8>)
 800424e:	f000 b8a9 	b.w	80043a4 <_fwalk_reent>
 8004252:	bf00      	nop
 8004254:	08004dc5 	.word	0x08004dc5

08004258 <std.isra.0>:
 8004258:	2300      	movs	r3, #0
 800425a:	b510      	push	{r4, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	6003      	str	r3, [r0, #0]
 8004260:	6043      	str	r3, [r0, #4]
 8004262:	6083      	str	r3, [r0, #8]
 8004264:	8181      	strh	r1, [r0, #12]
 8004266:	6643      	str	r3, [r0, #100]	; 0x64
 8004268:	81c2      	strh	r2, [r0, #14]
 800426a:	6103      	str	r3, [r0, #16]
 800426c:	6143      	str	r3, [r0, #20]
 800426e:	6183      	str	r3, [r0, #24]
 8004270:	4619      	mov	r1, r3
 8004272:	2208      	movs	r2, #8
 8004274:	305c      	adds	r0, #92	; 0x5c
 8004276:	f7ff ffc9 	bl	800420c <memset>
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <std.isra.0+0x38>)
 800427c:	6263      	str	r3, [r4, #36]	; 0x24
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <std.isra.0+0x3c>)
 8004280:	62a3      	str	r3, [r4, #40]	; 0x28
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <std.isra.0+0x40>)
 8004284:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <std.isra.0+0x44>)
 8004288:	6224      	str	r4, [r4, #32]
 800428a:	6323      	str	r3, [r4, #48]	; 0x30
 800428c:	bd10      	pop	{r4, pc}
 800428e:	bf00      	nop
 8004290:	08004a69 	.word	0x08004a69
 8004294:	08004a8b 	.word	0x08004a8b
 8004298:	08004ac3 	.word	0x08004ac3
 800429c:	08004ae7 	.word	0x08004ae7

080042a0 <__sfmoreglue>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	1e4a      	subs	r2, r1, #1
 80042a4:	2568      	movs	r5, #104	; 0x68
 80042a6:	4355      	muls	r5, r2
 80042a8:	460e      	mov	r6, r1
 80042aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042ae:	f000 f897 	bl	80043e0 <_malloc_r>
 80042b2:	4604      	mov	r4, r0
 80042b4:	b140      	cbz	r0, 80042c8 <__sfmoreglue+0x28>
 80042b6:	2100      	movs	r1, #0
 80042b8:	e880 0042 	stmia.w	r0, {r1, r6}
 80042bc:	300c      	adds	r0, #12
 80042be:	60a0      	str	r0, [r4, #8]
 80042c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042c4:	f7ff ffa2 	bl	800420c <memset>
 80042c8:	4620      	mov	r0, r4
 80042ca:	bd70      	pop	{r4, r5, r6, pc}

080042cc <__sinit>:
 80042cc:	6983      	ldr	r3, [r0, #24]
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	bb33      	cbnz	r3, 8004322 <__sinit+0x56>
 80042d4:	6483      	str	r3, [r0, #72]	; 0x48
 80042d6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80042d8:	6503      	str	r3, [r0, #80]	; 0x50
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <__sinit+0x58>)
 80042dc:	4a12      	ldr	r2, [pc, #72]	; (8004328 <__sinit+0x5c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6282      	str	r2, [r0, #40]	; 0x28
 80042e2:	4298      	cmp	r0, r3
 80042e4:	bf04      	itt	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	6183      	streq	r3, [r0, #24]
 80042ea:	f000 f81f 	bl	800432c <__sfp>
 80042ee:	6060      	str	r0, [r4, #4]
 80042f0:	4620      	mov	r0, r4
 80042f2:	f000 f81b 	bl	800432c <__sfp>
 80042f6:	60a0      	str	r0, [r4, #8]
 80042f8:	4620      	mov	r0, r4
 80042fa:	f000 f817 	bl	800432c <__sfp>
 80042fe:	2200      	movs	r2, #0
 8004300:	60e0      	str	r0, [r4, #12]
 8004302:	2104      	movs	r1, #4
 8004304:	6860      	ldr	r0, [r4, #4]
 8004306:	f7ff ffa7 	bl	8004258 <std.isra.0>
 800430a:	2201      	movs	r2, #1
 800430c:	2109      	movs	r1, #9
 800430e:	68a0      	ldr	r0, [r4, #8]
 8004310:	f7ff ffa2 	bl	8004258 <std.isra.0>
 8004314:	2202      	movs	r2, #2
 8004316:	2112      	movs	r1, #18
 8004318:	68e0      	ldr	r0, [r4, #12]
 800431a:	f7ff ff9d 	bl	8004258 <std.isra.0>
 800431e:	2301      	movs	r3, #1
 8004320:	61a3      	str	r3, [r4, #24]
 8004322:	bd10      	pop	{r4, pc}
 8004324:	0800523c 	.word	0x0800523c
 8004328:	0800424d 	.word	0x0800424d

0800432c <__sfp>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <__sfp+0x74>)
 8004330:	681e      	ldr	r6, [r3, #0]
 8004332:	69b3      	ldr	r3, [r6, #24]
 8004334:	4607      	mov	r7, r0
 8004336:	b913      	cbnz	r3, 800433e <__sfp+0x12>
 8004338:	4630      	mov	r0, r6
 800433a:	f7ff ffc7 	bl	80042cc <__sinit>
 800433e:	3648      	adds	r6, #72	; 0x48
 8004340:	68b4      	ldr	r4, [r6, #8]
 8004342:	6873      	ldr	r3, [r6, #4]
 8004344:	3b01      	subs	r3, #1
 8004346:	d503      	bpl.n	8004350 <__sfp+0x24>
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	b133      	cbz	r3, 800435a <__sfp+0x2e>
 800434c:	6836      	ldr	r6, [r6, #0]
 800434e:	e7f7      	b.n	8004340 <__sfp+0x14>
 8004350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004354:	b16d      	cbz	r5, 8004372 <__sfp+0x46>
 8004356:	3468      	adds	r4, #104	; 0x68
 8004358:	e7f4      	b.n	8004344 <__sfp+0x18>
 800435a:	2104      	movs	r1, #4
 800435c:	4638      	mov	r0, r7
 800435e:	f7ff ff9f 	bl	80042a0 <__sfmoreglue>
 8004362:	6030      	str	r0, [r6, #0]
 8004364:	2800      	cmp	r0, #0
 8004366:	d1f1      	bne.n	800434c <__sfp+0x20>
 8004368:	230c      	movs	r3, #12
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4604      	mov	r4, r0
 800436e:	4620      	mov	r0, r4
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004376:	81e3      	strh	r3, [r4, #14]
 8004378:	2301      	movs	r3, #1
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	6665      	str	r5, [r4, #100]	; 0x64
 800437e:	6025      	str	r5, [r4, #0]
 8004380:	60a5      	str	r5, [r4, #8]
 8004382:	6065      	str	r5, [r4, #4]
 8004384:	6125      	str	r5, [r4, #16]
 8004386:	6165      	str	r5, [r4, #20]
 8004388:	61a5      	str	r5, [r4, #24]
 800438a:	2208      	movs	r2, #8
 800438c:	4629      	mov	r1, r5
 800438e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004392:	f7ff ff3b 	bl	800420c <memset>
 8004396:	6365      	str	r5, [r4, #52]	; 0x34
 8004398:	63a5      	str	r5, [r4, #56]	; 0x38
 800439a:	64a5      	str	r5, [r4, #72]	; 0x48
 800439c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800439e:	e7e6      	b.n	800436e <__sfp+0x42>
 80043a0:	0800523c 	.word	0x0800523c

080043a4 <_fwalk_reent>:
 80043a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a8:	4680      	mov	r8, r0
 80043aa:	4689      	mov	r9, r1
 80043ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043b0:	2600      	movs	r6, #0
 80043b2:	b914      	cbnz	r4, 80043ba <_fwalk_reent+0x16>
 80043b4:	4630      	mov	r0, r6
 80043b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ba:	68a5      	ldr	r5, [r4, #8]
 80043bc:	6867      	ldr	r7, [r4, #4]
 80043be:	3f01      	subs	r7, #1
 80043c0:	d501      	bpl.n	80043c6 <_fwalk_reent+0x22>
 80043c2:	6824      	ldr	r4, [r4, #0]
 80043c4:	e7f5      	b.n	80043b2 <_fwalk_reent+0xe>
 80043c6:	89ab      	ldrh	r3, [r5, #12]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d907      	bls.n	80043dc <_fwalk_reent+0x38>
 80043cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043d0:	3301      	adds	r3, #1
 80043d2:	d003      	beq.n	80043dc <_fwalk_reent+0x38>
 80043d4:	4629      	mov	r1, r5
 80043d6:	4640      	mov	r0, r8
 80043d8:	47c8      	blx	r9
 80043da:	4306      	orrs	r6, r0
 80043dc:	3568      	adds	r5, #104	; 0x68
 80043de:	e7ee      	b.n	80043be <_fwalk_reent+0x1a>

080043e0 <_malloc_r>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	1ccd      	adds	r5, r1, #3
 80043e4:	f025 0503 	bic.w	r5, r5, #3
 80043e8:	3508      	adds	r5, #8
 80043ea:	2d0c      	cmp	r5, #12
 80043ec:	bf38      	it	cc
 80043ee:	250c      	movcc	r5, #12
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	4606      	mov	r6, r0
 80043f4:	db01      	blt.n	80043fa <_malloc_r+0x1a>
 80043f6:	42a9      	cmp	r1, r5
 80043f8:	d903      	bls.n	8004402 <_malloc_r+0x22>
 80043fa:	230c      	movs	r3, #12
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	2000      	movs	r0, #0
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	f000 fd7f 	bl	8004f04 <__malloc_lock>
 8004406:	4a23      	ldr	r2, [pc, #140]	; (8004494 <_malloc_r+0xb4>)
 8004408:	6814      	ldr	r4, [r2, #0]
 800440a:	4621      	mov	r1, r4
 800440c:	b991      	cbnz	r1, 8004434 <_malloc_r+0x54>
 800440e:	4c22      	ldr	r4, [pc, #136]	; (8004498 <_malloc_r+0xb8>)
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	b91b      	cbnz	r3, 800441c <_malloc_r+0x3c>
 8004414:	4630      	mov	r0, r6
 8004416:	f000 fb17 	bl	8004a48 <_sbrk_r>
 800441a:	6020      	str	r0, [r4, #0]
 800441c:	4629      	mov	r1, r5
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fb12 	bl	8004a48 <_sbrk_r>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d126      	bne.n	8004476 <_malloc_r+0x96>
 8004428:	230c      	movs	r3, #12
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	4630      	mov	r0, r6
 800442e:	f000 fd6a 	bl	8004f06 <__malloc_unlock>
 8004432:	e7e4      	b.n	80043fe <_malloc_r+0x1e>
 8004434:	680b      	ldr	r3, [r1, #0]
 8004436:	1b5b      	subs	r3, r3, r5
 8004438:	d41a      	bmi.n	8004470 <_malloc_r+0x90>
 800443a:	2b0b      	cmp	r3, #11
 800443c:	d90f      	bls.n	800445e <_malloc_r+0x7e>
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	50cd      	str	r5, [r1, r3]
 8004442:	18cc      	adds	r4, r1, r3
 8004444:	4630      	mov	r0, r6
 8004446:	f000 fd5e 	bl	8004f06 <__malloc_unlock>
 800444a:	f104 000b 	add.w	r0, r4, #11
 800444e:	1d23      	adds	r3, r4, #4
 8004450:	f020 0007 	bic.w	r0, r0, #7
 8004454:	1ac3      	subs	r3, r0, r3
 8004456:	d01b      	beq.n	8004490 <_malloc_r+0xb0>
 8004458:	425a      	negs	r2, r3
 800445a:	50e2      	str	r2, [r4, r3]
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	428c      	cmp	r4, r1
 8004460:	bf0d      	iteet	eq
 8004462:	6863      	ldreq	r3, [r4, #4]
 8004464:	684b      	ldrne	r3, [r1, #4]
 8004466:	6063      	strne	r3, [r4, #4]
 8004468:	6013      	streq	r3, [r2, #0]
 800446a:	bf18      	it	ne
 800446c:	460c      	movne	r4, r1
 800446e:	e7e9      	b.n	8004444 <_malloc_r+0x64>
 8004470:	460c      	mov	r4, r1
 8004472:	6849      	ldr	r1, [r1, #4]
 8004474:	e7ca      	b.n	800440c <_malloc_r+0x2c>
 8004476:	1cc4      	adds	r4, r0, #3
 8004478:	f024 0403 	bic.w	r4, r4, #3
 800447c:	42a0      	cmp	r0, r4
 800447e:	d005      	beq.n	800448c <_malloc_r+0xac>
 8004480:	1a21      	subs	r1, r4, r0
 8004482:	4630      	mov	r0, r6
 8004484:	f000 fae0 	bl	8004a48 <_sbrk_r>
 8004488:	3001      	adds	r0, #1
 800448a:	d0cd      	beq.n	8004428 <_malloc_r+0x48>
 800448c:	6025      	str	r5, [r4, #0]
 800448e:	e7d9      	b.n	8004444 <_malloc_r+0x64>
 8004490:	bd70      	pop	{r4, r5, r6, pc}
 8004492:	bf00      	nop
 8004494:	20003ddc 	.word	0x20003ddc
 8004498:	20003de0 	.word	0x20003de0

0800449c <__sfputc_r>:
 800449c:	6893      	ldr	r3, [r2, #8]
 800449e:	3b01      	subs	r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	b410      	push	{r4}
 80044a4:	6093      	str	r3, [r2, #8]
 80044a6:	da09      	bge.n	80044bc <__sfputc_r+0x20>
 80044a8:	6994      	ldr	r4, [r2, #24]
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	db02      	blt.n	80044b4 <__sfputc_r+0x18>
 80044ae:	b2cb      	uxtb	r3, r1
 80044b0:	2b0a      	cmp	r3, #10
 80044b2:	d103      	bne.n	80044bc <__sfputc_r+0x20>
 80044b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044b8:	f000 bb1a 	b.w	8004af0 <__swbuf_r>
 80044bc:	6813      	ldr	r3, [r2, #0]
 80044be:	1c58      	adds	r0, r3, #1
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	7019      	strb	r1, [r3, #0]
 80044c4:	b2c8      	uxtb	r0, r1
 80044c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <__sfputs_r>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	4606      	mov	r6, r0
 80044d0:	460f      	mov	r7, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	18d5      	adds	r5, r2, r3
 80044d6:	42ac      	cmp	r4, r5
 80044d8:	d101      	bne.n	80044de <__sfputs_r+0x12>
 80044da:	2000      	movs	r0, #0
 80044dc:	e007      	b.n	80044ee <__sfputs_r+0x22>
 80044de:	463a      	mov	r2, r7
 80044e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff ffd9 	bl	800449c <__sfputc_r>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	d1f3      	bne.n	80044d6 <__sfputs_r+0xa>
 80044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044f0 <_vfiprintf_r>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	b09d      	sub	sp, #116	; 0x74
 80044f6:	460c      	mov	r4, r1
 80044f8:	4617      	mov	r7, r2
 80044fa:	9303      	str	r3, [sp, #12]
 80044fc:	4606      	mov	r6, r0
 80044fe:	b118      	cbz	r0, 8004508 <_vfiprintf_r+0x18>
 8004500:	6983      	ldr	r3, [r0, #24]
 8004502:	b90b      	cbnz	r3, 8004508 <_vfiprintf_r+0x18>
 8004504:	f7ff fee2 	bl	80042cc <__sinit>
 8004508:	4b7c      	ldr	r3, [pc, #496]	; (80046fc <_vfiprintf_r+0x20c>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d157      	bne.n	80045be <_vfiprintf_r+0xce>
 800450e:	6874      	ldr	r4, [r6, #4]
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	0718      	lsls	r0, r3, #28
 8004514:	d55d      	bpl.n	80045d2 <_vfiprintf_r+0xe2>
 8004516:	6923      	ldr	r3, [r4, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d05a      	beq.n	80045d2 <_vfiprintf_r+0xe2>
 800451c:	2300      	movs	r3, #0
 800451e:	9309      	str	r3, [sp, #36]	; 0x24
 8004520:	2320      	movs	r3, #32
 8004522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004526:	2330      	movs	r3, #48	; 0x30
 8004528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800452c:	f04f 0b01 	mov.w	fp, #1
 8004530:	46b8      	mov	r8, r7
 8004532:	4645      	mov	r5, r8
 8004534:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d155      	bne.n	80045e8 <_vfiprintf_r+0xf8>
 800453c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004540:	d00b      	beq.n	800455a <_vfiprintf_r+0x6a>
 8004542:	4653      	mov	r3, sl
 8004544:	463a      	mov	r2, r7
 8004546:	4621      	mov	r1, r4
 8004548:	4630      	mov	r0, r6
 800454a:	f7ff ffbf 	bl	80044cc <__sfputs_r>
 800454e:	3001      	adds	r0, #1
 8004550:	f000 80c4 	beq.w	80046dc <_vfiprintf_r+0x1ec>
 8004554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004556:	4453      	add	r3, sl
 8004558:	9309      	str	r3, [sp, #36]	; 0x24
 800455a:	f898 3000 	ldrb.w	r3, [r8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80bc 	beq.w	80046dc <_vfiprintf_r+0x1ec>
 8004564:	2300      	movs	r3, #0
 8004566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800456a:	9304      	str	r3, [sp, #16]
 800456c:	9307      	str	r3, [sp, #28]
 800456e:	9205      	str	r2, [sp, #20]
 8004570:	9306      	str	r3, [sp, #24]
 8004572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004576:	931a      	str	r3, [sp, #104]	; 0x68
 8004578:	2205      	movs	r2, #5
 800457a:	7829      	ldrb	r1, [r5, #0]
 800457c:	4860      	ldr	r0, [pc, #384]	; (8004700 <_vfiprintf_r+0x210>)
 800457e:	f7fb fe27 	bl	80001d0 <memchr>
 8004582:	f105 0801 	add.w	r8, r5, #1
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	2800      	cmp	r0, #0
 800458a:	d131      	bne.n	80045f0 <_vfiprintf_r+0x100>
 800458c:	06d9      	lsls	r1, r3, #27
 800458e:	bf44      	itt	mi
 8004590:	2220      	movmi	r2, #32
 8004592:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004596:	071a      	lsls	r2, r3, #28
 8004598:	bf44      	itt	mi
 800459a:	222b      	movmi	r2, #43	; 0x2b
 800459c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045a0:	782a      	ldrb	r2, [r5, #0]
 80045a2:	2a2a      	cmp	r2, #42	; 0x2a
 80045a4:	d02c      	beq.n	8004600 <_vfiprintf_r+0x110>
 80045a6:	9a07      	ldr	r2, [sp, #28]
 80045a8:	2100      	movs	r1, #0
 80045aa:	200a      	movs	r0, #10
 80045ac:	46a8      	mov	r8, r5
 80045ae:	3501      	adds	r5, #1
 80045b0:	f898 3000 	ldrb.w	r3, [r8]
 80045b4:	3b30      	subs	r3, #48	; 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d96d      	bls.n	8004696 <_vfiprintf_r+0x1a6>
 80045ba:	b371      	cbz	r1, 800461a <_vfiprintf_r+0x12a>
 80045bc:	e026      	b.n	800460c <_vfiprintf_r+0x11c>
 80045be:	4b51      	ldr	r3, [pc, #324]	; (8004704 <_vfiprintf_r+0x214>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	d101      	bne.n	80045c8 <_vfiprintf_r+0xd8>
 80045c4:	68b4      	ldr	r4, [r6, #8]
 80045c6:	e7a3      	b.n	8004510 <_vfiprintf_r+0x20>
 80045c8:	4b4f      	ldr	r3, [pc, #316]	; (8004708 <_vfiprintf_r+0x218>)
 80045ca:	429c      	cmp	r4, r3
 80045cc:	bf08      	it	eq
 80045ce:	68f4      	ldreq	r4, [r6, #12]
 80045d0:	e79e      	b.n	8004510 <_vfiprintf_r+0x20>
 80045d2:	4621      	mov	r1, r4
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 faef 	bl	8004bb8 <__swsetup_r>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d09e      	beq.n	800451c <_vfiprintf_r+0x2c>
 80045de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045e2:	b01d      	add	sp, #116	; 0x74
 80045e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e8:	2b25      	cmp	r3, #37	; 0x25
 80045ea:	d0a7      	beq.n	800453c <_vfiprintf_r+0x4c>
 80045ec:	46a8      	mov	r8, r5
 80045ee:	e7a0      	b.n	8004532 <_vfiprintf_r+0x42>
 80045f0:	4a43      	ldr	r2, [pc, #268]	; (8004700 <_vfiprintf_r+0x210>)
 80045f2:	1a80      	subs	r0, r0, r2
 80045f4:	fa0b f000 	lsl.w	r0, fp, r0
 80045f8:	4318      	orrs	r0, r3
 80045fa:	9004      	str	r0, [sp, #16]
 80045fc:	4645      	mov	r5, r8
 80045fe:	e7bb      	b.n	8004578 <_vfiprintf_r+0x88>
 8004600:	9a03      	ldr	r2, [sp, #12]
 8004602:	1d11      	adds	r1, r2, #4
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	9103      	str	r1, [sp, #12]
 8004608:	2a00      	cmp	r2, #0
 800460a:	db01      	blt.n	8004610 <_vfiprintf_r+0x120>
 800460c:	9207      	str	r2, [sp, #28]
 800460e:	e004      	b.n	800461a <_vfiprintf_r+0x12a>
 8004610:	4252      	negs	r2, r2
 8004612:	f043 0302 	orr.w	r3, r3, #2
 8004616:	9207      	str	r2, [sp, #28]
 8004618:	9304      	str	r3, [sp, #16]
 800461a:	f898 3000 	ldrb.w	r3, [r8]
 800461e:	2b2e      	cmp	r3, #46	; 0x2e
 8004620:	d110      	bne.n	8004644 <_vfiprintf_r+0x154>
 8004622:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004626:	2b2a      	cmp	r3, #42	; 0x2a
 8004628:	f108 0101 	add.w	r1, r8, #1
 800462c:	d137      	bne.n	800469e <_vfiprintf_r+0x1ae>
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	1d1a      	adds	r2, r3, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	9203      	str	r2, [sp, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfb8      	it	lt
 800463a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800463e:	f108 0802 	add.w	r8, r8, #2
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	4d31      	ldr	r5, [pc, #196]	; (800470c <_vfiprintf_r+0x21c>)
 8004646:	f898 1000 	ldrb.w	r1, [r8]
 800464a:	2203      	movs	r2, #3
 800464c:	4628      	mov	r0, r5
 800464e:	f7fb fdbf 	bl	80001d0 <memchr>
 8004652:	b140      	cbz	r0, 8004666 <_vfiprintf_r+0x176>
 8004654:	2340      	movs	r3, #64	; 0x40
 8004656:	1b40      	subs	r0, r0, r5
 8004658:	fa03 f000 	lsl.w	r0, r3, r0
 800465c:	9b04      	ldr	r3, [sp, #16]
 800465e:	4303      	orrs	r3, r0
 8004660:	9304      	str	r3, [sp, #16]
 8004662:	f108 0801 	add.w	r8, r8, #1
 8004666:	f898 1000 	ldrb.w	r1, [r8]
 800466a:	4829      	ldr	r0, [pc, #164]	; (8004710 <_vfiprintf_r+0x220>)
 800466c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004670:	2206      	movs	r2, #6
 8004672:	f108 0701 	add.w	r7, r8, #1
 8004676:	f7fb fdab 	bl	80001d0 <memchr>
 800467a:	2800      	cmp	r0, #0
 800467c:	d034      	beq.n	80046e8 <_vfiprintf_r+0x1f8>
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <_vfiprintf_r+0x224>)
 8004680:	bb03      	cbnz	r3, 80046c4 <_vfiprintf_r+0x1d4>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	3307      	adds	r3, #7
 8004686:	f023 0307 	bic.w	r3, r3, #7
 800468a:	3308      	adds	r3, #8
 800468c:	9303      	str	r3, [sp, #12]
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	444b      	add	r3, r9
 8004692:	9309      	str	r3, [sp, #36]	; 0x24
 8004694:	e74c      	b.n	8004530 <_vfiprintf_r+0x40>
 8004696:	fb00 3202 	mla	r2, r0, r2, r3
 800469a:	2101      	movs	r1, #1
 800469c:	e786      	b.n	80045ac <_vfiprintf_r+0xbc>
 800469e:	2300      	movs	r3, #0
 80046a0:	9305      	str	r3, [sp, #20]
 80046a2:	4618      	mov	r0, r3
 80046a4:	250a      	movs	r5, #10
 80046a6:	4688      	mov	r8, r1
 80046a8:	3101      	adds	r1, #1
 80046aa:	f898 2000 	ldrb.w	r2, [r8]
 80046ae:	3a30      	subs	r2, #48	; 0x30
 80046b0:	2a09      	cmp	r2, #9
 80046b2:	d903      	bls.n	80046bc <_vfiprintf_r+0x1cc>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0c5      	beq.n	8004644 <_vfiprintf_r+0x154>
 80046b8:	9005      	str	r0, [sp, #20]
 80046ba:	e7c3      	b.n	8004644 <_vfiprintf_r+0x154>
 80046bc:	fb05 2000 	mla	r0, r5, r0, r2
 80046c0:	2301      	movs	r3, #1
 80046c2:	e7f0      	b.n	80046a6 <_vfiprintf_r+0x1b6>
 80046c4:	ab03      	add	r3, sp, #12
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	4622      	mov	r2, r4
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <_vfiprintf_r+0x228>)
 80046cc:	a904      	add	r1, sp, #16
 80046ce:	4630      	mov	r0, r6
 80046d0:	f3af 8000 	nop.w
 80046d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80046d8:	4681      	mov	r9, r0
 80046da:	d1d8      	bne.n	800468e <_vfiprintf_r+0x19e>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	065b      	lsls	r3, r3, #25
 80046e0:	f53f af7d 	bmi.w	80045de <_vfiprintf_r+0xee>
 80046e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046e6:	e77c      	b.n	80045e2 <_vfiprintf_r+0xf2>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	4622      	mov	r2, r4
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <_vfiprintf_r+0x228>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4630      	mov	r0, r6
 80046f4:	f000 f888 	bl	8004808 <_printf_i>
 80046f8:	e7ec      	b.n	80046d4 <_vfiprintf_r+0x1e4>
 80046fa:	bf00      	nop
 80046fc:	080051fc 	.word	0x080051fc
 8004700:	08005240 	.word	0x08005240
 8004704:	0800521c 	.word	0x0800521c
 8004708:	080051dc 	.word	0x080051dc
 800470c:	08005246 	.word	0x08005246
 8004710:	0800524a 	.word	0x0800524a
 8004714:	00000000 	.word	0x00000000
 8004718:	080044cd 	.word	0x080044cd

0800471c <_printf_common>:
 800471c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004720:	4691      	mov	r9, r2
 8004722:	461f      	mov	r7, r3
 8004724:	688a      	ldr	r2, [r1, #8]
 8004726:	690b      	ldr	r3, [r1, #16]
 8004728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800472c:	4293      	cmp	r3, r2
 800472e:	bfb8      	it	lt
 8004730:	4613      	movlt	r3, r2
 8004732:	f8c9 3000 	str.w	r3, [r9]
 8004736:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	b112      	cbz	r2, 8004746 <_printf_common+0x2a>
 8004740:	3301      	adds	r3, #1
 8004742:	f8c9 3000 	str.w	r3, [r9]
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	0699      	lsls	r1, r3, #26
 800474a:	bf42      	ittt	mi
 800474c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004750:	3302      	addmi	r3, #2
 8004752:	f8c9 3000 	strmi.w	r3, [r9]
 8004756:	6825      	ldr	r5, [r4, #0]
 8004758:	f015 0506 	ands.w	r5, r5, #6
 800475c:	d107      	bne.n	800476e <_printf_common+0x52>
 800475e:	f104 0a19 	add.w	sl, r4, #25
 8004762:	68e3      	ldr	r3, [r4, #12]
 8004764:	f8d9 2000 	ldr.w	r2, [r9]
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	429d      	cmp	r5, r3
 800476c:	db29      	blt.n	80047c2 <_printf_common+0xa6>
 800476e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	3300      	adds	r3, #0
 8004776:	bf18      	it	ne
 8004778:	2301      	movne	r3, #1
 800477a:	0692      	lsls	r2, r2, #26
 800477c:	d42e      	bmi.n	80047dc <_printf_common+0xc0>
 800477e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004782:	4639      	mov	r1, r7
 8004784:	4630      	mov	r0, r6
 8004786:	47c0      	blx	r8
 8004788:	3001      	adds	r0, #1
 800478a:	d021      	beq.n	80047d0 <_printf_common+0xb4>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	68e5      	ldr	r5, [r4, #12]
 8004790:	f8d9 2000 	ldr.w	r2, [r9]
 8004794:	f003 0306 	and.w	r3, r3, #6
 8004798:	2b04      	cmp	r3, #4
 800479a:	bf08      	it	eq
 800479c:	1aad      	subeq	r5, r5, r2
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	6922      	ldr	r2, [r4, #16]
 80047a2:	bf0c      	ite	eq
 80047a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047a8:	2500      	movne	r5, #0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bfc4      	itt	gt
 80047ae:	1a9b      	subgt	r3, r3, r2
 80047b0:	18ed      	addgt	r5, r5, r3
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	341a      	adds	r4, #26
 80047b8:	454d      	cmp	r5, r9
 80047ba:	d11b      	bne.n	80047f4 <_printf_common+0xd8>
 80047bc:	2000      	movs	r0, #0
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	2301      	movs	r3, #1
 80047c4:	4652      	mov	r2, sl
 80047c6:	4639      	mov	r1, r7
 80047c8:	4630      	mov	r0, r6
 80047ca:	47c0      	blx	r8
 80047cc:	3001      	adds	r0, #1
 80047ce:	d103      	bne.n	80047d8 <_printf_common+0xbc>
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	3501      	adds	r5, #1
 80047da:	e7c2      	b.n	8004762 <_printf_common+0x46>
 80047dc:	18e1      	adds	r1, r4, r3
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	2030      	movs	r0, #48	; 0x30
 80047e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047e6:	4422      	add	r2, r4
 80047e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047f0:	3302      	adds	r3, #2
 80047f2:	e7c4      	b.n	800477e <_printf_common+0x62>
 80047f4:	2301      	movs	r3, #1
 80047f6:	4622      	mov	r2, r4
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	47c0      	blx	r8
 80047fe:	3001      	adds	r0, #1
 8004800:	d0e6      	beq.n	80047d0 <_printf_common+0xb4>
 8004802:	f109 0901 	add.w	r9, r9, #1
 8004806:	e7d7      	b.n	80047b8 <_printf_common+0x9c>

08004808 <_printf_i>:
 8004808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800480c:	4617      	mov	r7, r2
 800480e:	7e0a      	ldrb	r2, [r1, #24]
 8004810:	b085      	sub	sp, #20
 8004812:	2a6e      	cmp	r2, #110	; 0x6e
 8004814:	4698      	mov	r8, r3
 8004816:	4606      	mov	r6, r0
 8004818:	460c      	mov	r4, r1
 800481a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800481c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004820:	f000 80bc 	beq.w	800499c <_printf_i+0x194>
 8004824:	d81a      	bhi.n	800485c <_printf_i+0x54>
 8004826:	2a63      	cmp	r2, #99	; 0x63
 8004828:	d02e      	beq.n	8004888 <_printf_i+0x80>
 800482a:	d80a      	bhi.n	8004842 <_printf_i+0x3a>
 800482c:	2a00      	cmp	r2, #0
 800482e:	f000 80c8 	beq.w	80049c2 <_printf_i+0x1ba>
 8004832:	2a58      	cmp	r2, #88	; 0x58
 8004834:	f000 808a 	beq.w	800494c <_printf_i+0x144>
 8004838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800483c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004840:	e02a      	b.n	8004898 <_printf_i+0x90>
 8004842:	2a64      	cmp	r2, #100	; 0x64
 8004844:	d001      	beq.n	800484a <_printf_i+0x42>
 8004846:	2a69      	cmp	r2, #105	; 0x69
 8004848:	d1f6      	bne.n	8004838 <_printf_i+0x30>
 800484a:	6821      	ldr	r1, [r4, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004852:	d023      	beq.n	800489c <_printf_i+0x94>
 8004854:	1d11      	adds	r1, r2, #4
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	e027      	b.n	80048ac <_printf_i+0xa4>
 800485c:	2a73      	cmp	r2, #115	; 0x73
 800485e:	f000 80b4 	beq.w	80049ca <_printf_i+0x1c2>
 8004862:	d808      	bhi.n	8004876 <_printf_i+0x6e>
 8004864:	2a6f      	cmp	r2, #111	; 0x6f
 8004866:	d02a      	beq.n	80048be <_printf_i+0xb6>
 8004868:	2a70      	cmp	r2, #112	; 0x70
 800486a:	d1e5      	bne.n	8004838 <_printf_i+0x30>
 800486c:	680a      	ldr	r2, [r1, #0]
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	600a      	str	r2, [r1, #0]
 8004874:	e003      	b.n	800487e <_printf_i+0x76>
 8004876:	2a75      	cmp	r2, #117	; 0x75
 8004878:	d021      	beq.n	80048be <_printf_i+0xb6>
 800487a:	2a78      	cmp	r2, #120	; 0x78
 800487c:	d1dc      	bne.n	8004838 <_printf_i+0x30>
 800487e:	2278      	movs	r2, #120	; 0x78
 8004880:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004884:	496e      	ldr	r1, [pc, #440]	; (8004a40 <_printf_i+0x238>)
 8004886:	e064      	b.n	8004952 <_printf_i+0x14a>
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800488e:	1d11      	adds	r1, r2, #4
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004898:	2301      	movs	r3, #1
 800489a:	e0a3      	b.n	80049e4 <_printf_i+0x1dc>
 800489c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80048a0:	f102 0104 	add.w	r1, r2, #4
 80048a4:	6019      	str	r1, [r3, #0]
 80048a6:	d0d7      	beq.n	8004858 <_printf_i+0x50>
 80048a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da03      	bge.n	80048b8 <_printf_i+0xb0>
 80048b0:	222d      	movs	r2, #45	; 0x2d
 80048b2:	425b      	negs	r3, r3
 80048b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048b8:	4962      	ldr	r1, [pc, #392]	; (8004a44 <_printf_i+0x23c>)
 80048ba:	220a      	movs	r2, #10
 80048bc:	e017      	b.n	80048ee <_printf_i+0xe6>
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80048c6:	d003      	beq.n	80048d0 <_printf_i+0xc8>
 80048c8:	1d08      	adds	r0, r1, #4
 80048ca:	6018      	str	r0, [r3, #0]
 80048cc:	680b      	ldr	r3, [r1, #0]
 80048ce:	e006      	b.n	80048de <_printf_i+0xd6>
 80048d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048d4:	f101 0004 	add.w	r0, r1, #4
 80048d8:	6018      	str	r0, [r3, #0]
 80048da:	d0f7      	beq.n	80048cc <_printf_i+0xc4>
 80048dc:	880b      	ldrh	r3, [r1, #0]
 80048de:	4959      	ldr	r1, [pc, #356]	; (8004a44 <_printf_i+0x23c>)
 80048e0:	2a6f      	cmp	r2, #111	; 0x6f
 80048e2:	bf14      	ite	ne
 80048e4:	220a      	movne	r2, #10
 80048e6:	2208      	moveq	r2, #8
 80048e8:	2000      	movs	r0, #0
 80048ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80048ee:	6865      	ldr	r5, [r4, #4]
 80048f0:	60a5      	str	r5, [r4, #8]
 80048f2:	2d00      	cmp	r5, #0
 80048f4:	f2c0 809c 	blt.w	8004a30 <_printf_i+0x228>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	f020 0004 	bic.w	r0, r0, #4
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d13f      	bne.n	8004984 <_printf_i+0x17c>
 8004904:	2d00      	cmp	r5, #0
 8004906:	f040 8095 	bne.w	8004a34 <_printf_i+0x22c>
 800490a:	4675      	mov	r5, lr
 800490c:	2a08      	cmp	r2, #8
 800490e:	d10b      	bne.n	8004928 <_printf_i+0x120>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	07da      	lsls	r2, r3, #31
 8004914:	d508      	bpl.n	8004928 <_printf_i+0x120>
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	6862      	ldr	r2, [r4, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	bfde      	ittt	le
 800491e:	2330      	movle	r3, #48	; 0x30
 8004920:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004924:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004928:	ebae 0305 	sub.w	r3, lr, r5
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	f8cd 8000 	str.w	r8, [sp]
 8004932:	463b      	mov	r3, r7
 8004934:	aa03      	add	r2, sp, #12
 8004936:	4621      	mov	r1, r4
 8004938:	4630      	mov	r0, r6
 800493a:	f7ff feef 	bl	800471c <_printf_common>
 800493e:	3001      	adds	r0, #1
 8004940:	d155      	bne.n	80049ee <_printf_i+0x1e6>
 8004942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004946:	b005      	add	sp, #20
 8004948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800494c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004950:	493c      	ldr	r1, [pc, #240]	; (8004a44 <_printf_i+0x23c>)
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f012 0f80 	tst.w	r2, #128	; 0x80
 800495a:	f100 0504 	add.w	r5, r0, #4
 800495e:	601d      	str	r5, [r3, #0]
 8004960:	d001      	beq.n	8004966 <_printf_i+0x15e>
 8004962:	6803      	ldr	r3, [r0, #0]
 8004964:	e002      	b.n	800496c <_printf_i+0x164>
 8004966:	0655      	lsls	r5, r2, #25
 8004968:	d5fb      	bpl.n	8004962 <_printf_i+0x15a>
 800496a:	8803      	ldrh	r3, [r0, #0]
 800496c:	07d0      	lsls	r0, r2, #31
 800496e:	bf44      	itt	mi
 8004970:	f042 0220 	orrmi.w	r2, r2, #32
 8004974:	6022      	strmi	r2, [r4, #0]
 8004976:	b91b      	cbnz	r3, 8004980 <_printf_i+0x178>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	f022 0220 	bic.w	r2, r2, #32
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	2210      	movs	r2, #16
 8004982:	e7b1      	b.n	80048e8 <_printf_i+0xe0>
 8004984:	4675      	mov	r5, lr
 8004986:	fbb3 f0f2 	udiv	r0, r3, r2
 800498a:	fb02 3310 	mls	r3, r2, r0, r3
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004994:	4603      	mov	r3, r0
 8004996:	2800      	cmp	r0, #0
 8004998:	d1f5      	bne.n	8004986 <_printf_i+0x17e>
 800499a:	e7b7      	b.n	800490c <_printf_i+0x104>
 800499c:	6808      	ldr	r0, [r1, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	6949      	ldr	r1, [r1, #20]
 80049a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80049a6:	d004      	beq.n	80049b2 <_printf_i+0x1aa>
 80049a8:	1d10      	adds	r0, r2, #4
 80049aa:	6018      	str	r0, [r3, #0]
 80049ac:	6813      	ldr	r3, [r2, #0]
 80049ae:	6019      	str	r1, [r3, #0]
 80049b0:	e007      	b.n	80049c2 <_printf_i+0x1ba>
 80049b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049b6:	f102 0004 	add.w	r0, r2, #4
 80049ba:	6018      	str	r0, [r3, #0]
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	d0f6      	beq.n	80049ae <_printf_i+0x1a6>
 80049c0:	8019      	strh	r1, [r3, #0]
 80049c2:	2300      	movs	r3, #0
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	4675      	mov	r5, lr
 80049c8:	e7b1      	b.n	800492e <_printf_i+0x126>
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	1d11      	adds	r1, r2, #4
 80049ce:	6019      	str	r1, [r3, #0]
 80049d0:	6815      	ldr	r5, [r2, #0]
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	2100      	movs	r1, #0
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7fb fbfa 	bl	80001d0 <memchr>
 80049dc:	b108      	cbz	r0, 80049e2 <_printf_i+0x1da>
 80049de:	1b40      	subs	r0, r0, r5
 80049e0:	6060      	str	r0, [r4, #4]
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	2300      	movs	r3, #0
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ec:	e79f      	b.n	800492e <_printf_i+0x126>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	462a      	mov	r2, r5
 80049f2:	4639      	mov	r1, r7
 80049f4:	4630      	mov	r0, r6
 80049f6:	47c0      	blx	r8
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0a2      	beq.n	8004942 <_printf_i+0x13a>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	d507      	bpl.n	8004a12 <_printf_i+0x20a>
 8004a02:	2500      	movs	r5, #0
 8004a04:	f104 0919 	add.w	r9, r4, #25
 8004a08:	68e3      	ldr	r3, [r4, #12]
 8004a0a:	9a03      	ldr	r2, [sp, #12]
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	429d      	cmp	r5, r3
 8004a10:	db05      	blt.n	8004a1e <_printf_i+0x216>
 8004a12:	68e0      	ldr	r0, [r4, #12]
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	4298      	cmp	r0, r3
 8004a18:	bfb8      	it	lt
 8004a1a:	4618      	movlt	r0, r3
 8004a1c:	e793      	b.n	8004946 <_printf_i+0x13e>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	464a      	mov	r2, r9
 8004a22:	4639      	mov	r1, r7
 8004a24:	4630      	mov	r0, r6
 8004a26:	47c0      	blx	r8
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d08a      	beq.n	8004942 <_printf_i+0x13a>
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	e7eb      	b.n	8004a08 <_printf_i+0x200>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1a7      	bne.n	8004984 <_printf_i+0x17c>
 8004a34:	780b      	ldrb	r3, [r1, #0]
 8004a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a3e:	e765      	b.n	800490c <_printf_i+0x104>
 8004a40:	08005262 	.word	0x08005262
 8004a44:	08005251 	.word	0x08005251

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4c06      	ldr	r4, [pc, #24]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4605      	mov	r5, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	f000 fb02 	bl	800505c <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20003e84 	.word	0x20003e84

08004a68 <__sread>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	f000 fa98 	bl	8004fa4 <_read_r>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	bfab      	itete	ge
 8004a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a7c:	181b      	addge	r3, r3, r0
 8004a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a82:	bfac      	ite	ge
 8004a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a86:	81a3      	strhlt	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__swrite>:
 8004a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	461f      	mov	r7, r3
 8004a90:	898b      	ldrh	r3, [r1, #12]
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	4605      	mov	r5, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	4616      	mov	r6, r2
 8004a9a:	d505      	bpl.n	8004aa8 <__swrite+0x1e>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa4:	f000 f9b8 	bl	8004e18 <_lseek_r>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4628      	mov	r0, r5
 8004aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004abe:	f000 b869 	b.w	8004b94 <_write_r>

08004ac2 <__sseek>:
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 f9a5 	bl	8004e18 <_lseek_r>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	bf15      	itete	ne
 8004ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ade:	81a3      	strheq	r3, [r4, #12]
 8004ae0:	bf18      	it	ne
 8004ae2:	81a3      	strhne	r3, [r4, #12]
 8004ae4:	bd10      	pop	{r4, pc}

08004ae6 <__sclose>:
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 b8d3 	b.w	8004c94 <_close_r>
	...

08004af0 <__swbuf_r>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	460e      	mov	r6, r1
 8004af4:	4614      	mov	r4, r2
 8004af6:	4605      	mov	r5, r0
 8004af8:	b118      	cbz	r0, 8004b02 <__swbuf_r+0x12>
 8004afa:	6983      	ldr	r3, [r0, #24]
 8004afc:	b90b      	cbnz	r3, 8004b02 <__swbuf_r+0x12>
 8004afe:	f7ff fbe5 	bl	80042cc <__sinit>
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <__swbuf_r+0x98>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d12a      	bne.n	8004b5e <__swbuf_r+0x6e>
 8004b08:	686c      	ldr	r4, [r5, #4]
 8004b0a:	69a3      	ldr	r3, [r4, #24]
 8004b0c:	60a3      	str	r3, [r4, #8]
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	071a      	lsls	r2, r3, #28
 8004b12:	d52e      	bpl.n	8004b72 <__swbuf_r+0x82>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	b363      	cbz	r3, 8004b72 <__swbuf_r+0x82>
 8004b18:	6923      	ldr	r3, [r4, #16]
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	1ac0      	subs	r0, r0, r3
 8004b1e:	6963      	ldr	r3, [r4, #20]
 8004b20:	b2f6      	uxtb	r6, r6
 8004b22:	4298      	cmp	r0, r3
 8004b24:	4637      	mov	r7, r6
 8004b26:	db04      	blt.n	8004b32 <__swbuf_r+0x42>
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f000 f94a 	bl	8004dc4 <_fflush_r>
 8004b30:	bb28      	cbnz	r0, 8004b7e <__swbuf_r+0x8e>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	701e      	strb	r6, [r3, #0]
 8004b40:	6963      	ldr	r3, [r4, #20]
 8004b42:	3001      	adds	r0, #1
 8004b44:	4298      	cmp	r0, r3
 8004b46:	d004      	beq.n	8004b52 <__swbuf_r+0x62>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	07db      	lsls	r3, r3, #31
 8004b4c:	d519      	bpl.n	8004b82 <__swbuf_r+0x92>
 8004b4e:	2e0a      	cmp	r6, #10
 8004b50:	d117      	bne.n	8004b82 <__swbuf_r+0x92>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	f000 f935 	bl	8004dc4 <_fflush_r>
 8004b5a:	b190      	cbz	r0, 8004b82 <__swbuf_r+0x92>
 8004b5c:	e00f      	b.n	8004b7e <__swbuf_r+0x8e>
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <__swbuf_r+0x9c>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	d101      	bne.n	8004b68 <__swbuf_r+0x78>
 8004b64:	68ac      	ldr	r4, [r5, #8]
 8004b66:	e7d0      	b.n	8004b0a <__swbuf_r+0x1a>
 8004b68:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <__swbuf_r+0xa0>)
 8004b6a:	429c      	cmp	r4, r3
 8004b6c:	bf08      	it	eq
 8004b6e:	68ec      	ldreq	r4, [r5, #12]
 8004b70:	e7cb      	b.n	8004b0a <__swbuf_r+0x1a>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 f81f 	bl	8004bb8 <__swsetup_r>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d0cc      	beq.n	8004b18 <__swbuf_r+0x28>
 8004b7e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b82:	4638      	mov	r0, r7
 8004b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b86:	bf00      	nop
 8004b88:	080051fc 	.word	0x080051fc
 8004b8c:	0800521c 	.word	0x0800521c
 8004b90:	080051dc 	.word	0x080051dc

08004b94 <_write_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4c07      	ldr	r4, [pc, #28]	; (8004bb4 <_write_r+0x20>)
 8004b98:	4605      	mov	r5, r0
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	6022      	str	r2, [r4, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7fe fff4 	bl	8003b90 <_write>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_write_r+0x1e>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_write_r+0x1e>
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20003e84 	.word	0x20003e84

08004bb8 <__swsetup_r>:
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <__swsetup_r+0xcc>)
 8004bba:	b570      	push	{r4, r5, r6, lr}
 8004bbc:	681d      	ldr	r5, [r3, #0]
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	b125      	cbz	r5, 8004bce <__swsetup_r+0x16>
 8004bc4:	69ab      	ldr	r3, [r5, #24]
 8004bc6:	b913      	cbnz	r3, 8004bce <__swsetup_r+0x16>
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7ff fb7f 	bl	80042cc <__sinit>
 8004bce:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <__swsetup_r+0xd0>)
 8004bd0:	429c      	cmp	r4, r3
 8004bd2:	d10f      	bne.n	8004bf4 <__swsetup_r+0x3c>
 8004bd4:	686c      	ldr	r4, [r5, #4]
 8004bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	0715      	lsls	r5, r2, #28
 8004bde:	d42c      	bmi.n	8004c3a <__swsetup_r+0x82>
 8004be0:	06d0      	lsls	r0, r2, #27
 8004be2:	d411      	bmi.n	8004c08 <__swsetup_r+0x50>
 8004be4:	2209      	movs	r2, #9
 8004be6:	6032      	str	r2, [r6, #0]
 8004be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <__swsetup_r+0xd4>)
 8004bf6:	429c      	cmp	r4, r3
 8004bf8:	d101      	bne.n	8004bfe <__swsetup_r+0x46>
 8004bfa:	68ac      	ldr	r4, [r5, #8]
 8004bfc:	e7eb      	b.n	8004bd6 <__swsetup_r+0x1e>
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <__swsetup_r+0xd8>)
 8004c00:	429c      	cmp	r4, r3
 8004c02:	bf08      	it	eq
 8004c04:	68ec      	ldreq	r4, [r5, #12]
 8004c06:	e7e6      	b.n	8004bd6 <__swsetup_r+0x1e>
 8004c08:	0751      	lsls	r1, r2, #29
 8004c0a:	d512      	bpl.n	8004c32 <__swsetup_r+0x7a>
 8004c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c0e:	b141      	cbz	r1, 8004c22 <__swsetup_r+0x6a>
 8004c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d002      	beq.n	8004c1e <__swsetup_r+0x66>
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f975 	bl	8004f08 <_free_r>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6363      	str	r3, [r4, #52]	; 0x34
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c28:	81a3      	strh	r3, [r4, #12]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f043 0308 	orr.w	r3, r3, #8
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	b94b      	cbnz	r3, 8004c52 <__swsetup_r+0x9a>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d003      	beq.n	8004c52 <__swsetup_r+0x9a>
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 f919 	bl	8004e84 <__smakebuf_r>
 8004c52:	89a2      	ldrh	r2, [r4, #12]
 8004c54:	f012 0301 	ands.w	r3, r2, #1
 8004c58:	d00c      	beq.n	8004c74 <__swsetup_r+0xbc>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6963      	ldr	r3, [r4, #20]
 8004c60:	425b      	negs	r3, r3
 8004c62:	61a3      	str	r3, [r4, #24]
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	b953      	cbnz	r3, 8004c7e <__swsetup_r+0xc6>
 8004c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004c70:	d1ba      	bne.n	8004be8 <__swsetup_r+0x30>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	0792      	lsls	r2, r2, #30
 8004c76:	bf58      	it	pl
 8004c78:	6963      	ldrpl	r3, [r4, #20]
 8004c7a:	60a3      	str	r3, [r4, #8]
 8004c7c:	e7f2      	b.n	8004c64 <__swsetup_r+0xac>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e7f7      	b.n	8004c72 <__swsetup_r+0xba>
 8004c82:	bf00      	nop
 8004c84:	20000010 	.word	0x20000010
 8004c88:	080051fc 	.word	0x080051fc
 8004c8c:	0800521c 	.word	0x0800521c
 8004c90:	080051dc 	.word	0x080051dc

08004c94 <_close_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4c06      	ldr	r4, [pc, #24]	; (8004cb0 <_close_r+0x1c>)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	f000 f9b4 	bl	800500c <_close>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_close_r+0x1a>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_close_r+0x1a>
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20003e84 	.word	0x20003e84

08004cb4 <__sflush_r>:
 8004cb4:	898a      	ldrh	r2, [r1, #12]
 8004cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cba:	4605      	mov	r5, r0
 8004cbc:	0710      	lsls	r0, r2, #28
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	d45a      	bmi.n	8004d78 <__sflush_r+0xc4>
 8004cc2:	684b      	ldr	r3, [r1, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dc05      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dc02      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d0f9      	beq.n	8004cce <__sflush_r+0x1a>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce0:	682f      	ldr	r7, [r5, #0]
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	d033      	beq.n	8004d4e <__sflush_r+0x9a>
 8004ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	075a      	lsls	r2, r3, #29
 8004cec:	d505      	bpl.n	8004cfa <__sflush_r+0x46>
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	1ac0      	subs	r0, r0, r3
 8004cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf4:	b10b      	cbz	r3, 8004cfa <__sflush_r+0x46>
 8004cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf8:	1ac0      	subs	r0, r0, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d00:	6a21      	ldr	r1, [r4, #32]
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b0      	blx	r6
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	d106      	bne.n	8004d1a <__sflush_r+0x66>
 8004d0c:	6829      	ldr	r1, [r5, #0]
 8004d0e:	291d      	cmp	r1, #29
 8004d10:	d84b      	bhi.n	8004daa <__sflush_r+0xf6>
 8004d12:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <__sflush_r+0x10c>)
 8004d14:	40ca      	lsrs	r2, r1
 8004d16:	07d6      	lsls	r6, r2, #31
 8004d18:	d547      	bpl.n	8004daa <__sflush_r+0xf6>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	04d9      	lsls	r1, r3, #19
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	d504      	bpl.n	8004d30 <__sflush_r+0x7c>
 8004d26:	1c42      	adds	r2, r0, #1
 8004d28:	d101      	bne.n	8004d2e <__sflush_r+0x7a>
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	b903      	cbnz	r3, 8004d30 <__sflush_r+0x7c>
 8004d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d32:	602f      	str	r7, [r5, #0]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d0ca      	beq.n	8004cce <__sflush_r+0x1a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__sflush_r+0x92>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f8e1 	bl	8004f08 <_free_r>
 8004d46:	2000      	movs	r0, #0
 8004d48:	6360      	str	r0, [r4, #52]	; 0x34
 8004d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4e:	6a21      	ldr	r1, [r4, #32]
 8004d50:	2301      	movs	r3, #1
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b0      	blx	r6
 8004d56:	1c41      	adds	r1, r0, #1
 8004d58:	d1c6      	bne.n	8004ce8 <__sflush_r+0x34>
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0c3      	beq.n	8004ce8 <__sflush_r+0x34>
 8004d60:	2b1d      	cmp	r3, #29
 8004d62:	d001      	beq.n	8004d68 <__sflush_r+0xb4>
 8004d64:	2b16      	cmp	r3, #22
 8004d66:	d101      	bne.n	8004d6c <__sflush_r+0xb8>
 8004d68:	602f      	str	r7, [r5, #0]
 8004d6a:	e7b0      	b.n	8004cce <__sflush_r+0x1a>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	690f      	ldr	r7, [r1, #16]
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d0a7      	beq.n	8004cce <__sflush_r+0x1a>
 8004d7e:	0793      	lsls	r3, r2, #30
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	bf08      	it	eq
 8004d84:	694b      	ldreq	r3, [r1, #20]
 8004d86:	600f      	str	r7, [r1, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	eba6 0807 	sub.w	r8, r6, r7
 8004d90:	608b      	str	r3, [r1, #8]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	dd9a      	ble.n	8004cce <__sflush_r+0x1a>
 8004d98:	4643      	mov	r3, r8
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	6a21      	ldr	r1, [r4, #32]
 8004d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b0      	blx	r6
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dc07      	bgt.n	8004db8 <__sflush_r+0x104>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db8:	4407      	add	r7, r0
 8004dba:	eba8 0800 	sub.w	r8, r8, r0
 8004dbe:	e7e8      	b.n	8004d92 <__sflush_r+0xde>
 8004dc0:	20400001 	.word	0x20400001

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b1db      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004dce:	b118      	cbz	r0, 8004dd8 <_fflush_r+0x14>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_fflush_r+0x14>
 8004dd4:	f7ff fa7a 	bl	80042cc <__sinit>
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <_fflush_r+0x48>)
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d109      	bne.n	8004df2 <_fflush_r+0x2e>
 8004dde:	686c      	ldr	r4, [r5, #4]
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	b17b      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dee:	f7ff bf61 	b.w	8004cb4 <__sflush_r>
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <_fflush_r+0x4c>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d101      	bne.n	8004dfc <_fflush_r+0x38>
 8004df8:	68ac      	ldr	r4, [r5, #8]
 8004dfa:	e7f1      	b.n	8004de0 <_fflush_r+0x1c>
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <_fflush_r+0x50>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	bf08      	it	eq
 8004e02:	68ec      	ldreq	r4, [r5, #12]
 8004e04:	e7ec      	b.n	8004de0 <_fflush_r+0x1c>
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	080051fc 	.word	0x080051fc
 8004e10:	0800521c 	.word	0x0800521c
 8004e14:	080051dc 	.word	0x080051dc

08004e18 <_lseek_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4c07      	ldr	r4, [pc, #28]	; (8004e38 <_lseek_r+0x20>)
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	4608      	mov	r0, r1
 8004e20:	4611      	mov	r1, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	6022      	str	r2, [r4, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	f000 f908 	bl	800503c <_lseek>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_lseek_r+0x1e>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_lseek_r+0x1e>
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20003e84 	.word	0x20003e84

08004e3c <__swhatbuf_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	460e      	mov	r6, r1
 8004e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e44:	2900      	cmp	r1, #0
 8004e46:	b090      	sub	sp, #64	; 0x40
 8004e48:	4614      	mov	r4, r2
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	da07      	bge.n	8004e5e <__swhatbuf_r+0x22>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	89b3      	ldrh	r3, [r6, #12]
 8004e54:	061a      	lsls	r2, r3, #24
 8004e56:	d410      	bmi.n	8004e7a <__swhatbuf_r+0x3e>
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	e00e      	b.n	8004e7c <__swhatbuf_r+0x40>
 8004e5e:	aa01      	add	r2, sp, #4
 8004e60:	f000 f8b2 	bl	8004fc8 <_fstat_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	dbf2      	blt.n	8004e4e <__swhatbuf_r+0x12>
 8004e68:	9a02      	ldr	r2, [sp, #8]
 8004e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e72:	425a      	negs	r2, r3
 8004e74:	415a      	adcs	r2, r3
 8004e76:	602a      	str	r2, [r5, #0]
 8004e78:	e7ee      	b.n	8004e58 <__swhatbuf_r+0x1c>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	b010      	add	sp, #64	; 0x40
 8004e82:	bd70      	pop	{r4, r5, r6, pc}

08004e84 <__smakebuf_r>:
 8004e84:	898b      	ldrh	r3, [r1, #12]
 8004e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e88:	079d      	lsls	r5, r3, #30
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	d507      	bpl.n	8004ea0 <__smakebuf_r+0x1c>
 8004e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	6163      	str	r3, [r4, #20]
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	ab01      	add	r3, sp, #4
 8004ea2:	466a      	mov	r2, sp
 8004ea4:	f7ff ffca 	bl	8004e3c <__swhatbuf_r>
 8004ea8:	9900      	ldr	r1, [sp, #0]
 8004eaa:	4605      	mov	r5, r0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7ff fa97 	bl	80043e0 <_malloc_r>
 8004eb2:	b948      	cbnz	r0, 8004ec8 <__smakebuf_r+0x44>
 8004eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb8:	059a      	lsls	r2, r3, #22
 8004eba:	d4ef      	bmi.n	8004e9c <__smakebuf_r+0x18>
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	f043 0302 	orr.w	r3, r3, #2
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	e7e3      	b.n	8004e90 <__smakebuf_r+0xc>
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <__smakebuf_r+0x7c>)
 8004eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	6020      	str	r0, [r4, #0]
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	6163      	str	r3, [r4, #20]
 8004eda:	9b01      	ldr	r3, [sp, #4]
 8004edc:	6120      	str	r0, [r4, #16]
 8004ede:	b15b      	cbz	r3, 8004ef8 <__smakebuf_r+0x74>
 8004ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f881 	bl	8004fec <_isatty_r>
 8004eea:	b128      	cbz	r0, 8004ef8 <__smakebuf_r+0x74>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	431d      	orrs	r5, r3
 8004efc:	81a5      	strh	r5, [r4, #12]
 8004efe:	e7cd      	b.n	8004e9c <__smakebuf_r+0x18>
 8004f00:	0800424d 	.word	0x0800424d

08004f04 <__malloc_lock>:
 8004f04:	4770      	bx	lr

08004f06 <__malloc_unlock>:
 8004f06:	4770      	bx	lr

08004f08 <_free_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d045      	beq.n	8004f9c <_free_r+0x94>
 8004f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f14:	1f0c      	subs	r4, r1, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	18e4      	addlt	r4, r4, r3
 8004f1c:	f7ff fff2 	bl	8004f04 <__malloc_lock>
 8004f20:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <_free_r+0x98>)
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	4610      	mov	r0, r2
 8004f26:	b933      	cbnz	r3, 8004f36 <_free_r+0x2e>
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	6014      	str	r4, [r2, #0]
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f32:	f7ff bfe8 	b.w	8004f06 <__malloc_unlock>
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	d90c      	bls.n	8004f54 <_free_r+0x4c>
 8004f3a:	6821      	ldr	r1, [r4, #0]
 8004f3c:	1862      	adds	r2, r4, r1
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bf04      	itt	eq
 8004f42:	681a      	ldreq	r2, [r3, #0]
 8004f44:	685b      	ldreq	r3, [r3, #4]
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	bf04      	itt	eq
 8004f4a:	1852      	addeq	r2, r2, r1
 8004f4c:	6022      	streq	r2, [r4, #0]
 8004f4e:	6004      	str	r4, [r0, #0]
 8004f50:	e7ec      	b.n	8004f2c <_free_r+0x24>
 8004f52:	4613      	mov	r3, r2
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	b10a      	cbz	r2, 8004f5c <_free_r+0x54>
 8004f58:	42a2      	cmp	r2, r4
 8004f5a:	d9fa      	bls.n	8004f52 <_free_r+0x4a>
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	1858      	adds	r0, r3, r1
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d10b      	bne.n	8004f7c <_free_r+0x74>
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	4401      	add	r1, r0
 8004f68:	1858      	adds	r0, r3, r1
 8004f6a:	4282      	cmp	r2, r0
 8004f6c:	6019      	str	r1, [r3, #0]
 8004f6e:	d1dd      	bne.n	8004f2c <_free_r+0x24>
 8004f70:	6810      	ldr	r0, [r2, #0]
 8004f72:	6852      	ldr	r2, [r2, #4]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	4401      	add	r1, r0
 8004f78:	6019      	str	r1, [r3, #0]
 8004f7a:	e7d7      	b.n	8004f2c <_free_r+0x24>
 8004f7c:	d902      	bls.n	8004f84 <_free_r+0x7c>
 8004f7e:	230c      	movs	r3, #12
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	e7d3      	b.n	8004f2c <_free_r+0x24>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	1821      	adds	r1, r4, r0
 8004f88:	428a      	cmp	r2, r1
 8004f8a:	bf04      	itt	eq
 8004f8c:	6811      	ldreq	r1, [r2, #0]
 8004f8e:	6852      	ldreq	r2, [r2, #4]
 8004f90:	6062      	str	r2, [r4, #4]
 8004f92:	bf04      	itt	eq
 8004f94:	1809      	addeq	r1, r1, r0
 8004f96:	6021      	streq	r1, [r4, #0]
 8004f98:	605c      	str	r4, [r3, #4]
 8004f9a:	e7c7      	b.n	8004f2c <_free_r+0x24>
 8004f9c:	bd38      	pop	{r3, r4, r5, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20003ddc 	.word	0x20003ddc

08004fa4 <_read_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4c07      	ldr	r4, [pc, #28]	; (8004fc4 <_read_r+0x20>)
 8004fa8:	4605      	mov	r5, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 f84a 	bl	800504c <_read>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_read_r+0x1e>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_read_r+0x1e>
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20003e84 	.word	0x20003e84

08004fc8 <_fstat_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4c07      	ldr	r4, [pc, #28]	; (8004fe8 <_fstat_r+0x20>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4605      	mov	r5, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	f000 f821 	bl	800501c <_fstat>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d102      	bne.n	8004fe4 <_fstat_r+0x1c>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	b103      	cbz	r3, 8004fe4 <_fstat_r+0x1c>
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20003e84 	.word	0x20003e84

08004fec <_isatty_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4c06      	ldr	r4, [pc, #24]	; (8005008 <_isatty_r+0x1c>)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	f000 f818 	bl	800502c <_isatty>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_isatty_r+0x1a>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	b103      	cbz	r3, 8005006 <_isatty_r+0x1a>
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	20003e84 	.word	0x20003e84

0800500c <_close>:
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <_close+0xc>)
 800500e:	2258      	movs	r2, #88	; 0x58
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005016:	4770      	bx	lr
 8005018:	20003e84 	.word	0x20003e84

0800501c <_fstat>:
 800501c:	4b02      	ldr	r3, [pc, #8]	; (8005028 <_fstat+0xc>)
 800501e:	2258      	movs	r2, #88	; 0x58
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005026:	4770      	bx	lr
 8005028:	20003e84 	.word	0x20003e84

0800502c <_isatty>:
 800502c:	4b02      	ldr	r3, [pc, #8]	; (8005038 <_isatty+0xc>)
 800502e:	2258      	movs	r2, #88	; 0x58
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	2000      	movs	r0, #0
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20003e84 	.word	0x20003e84

0800503c <_lseek>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <_lseek+0xc>)
 800503e:	2258      	movs	r2, #88	; 0x58
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005046:	4770      	bx	lr
 8005048:	20003e84 	.word	0x20003e84

0800504c <_read>:
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <_read+0xc>)
 800504e:	2258      	movs	r2, #88	; 0x58
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005056:	4770      	bx	lr
 8005058:	20003e84 	.word	0x20003e84

0800505c <_sbrk>:
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <_sbrk+0x14>)
 800505e:	6819      	ldr	r1, [r3, #0]
 8005060:	4602      	mov	r2, r0
 8005062:	b909      	cbnz	r1, 8005068 <_sbrk+0xc>
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <_sbrk+0x18>)
 8005066:	6019      	str	r1, [r3, #0]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	4402      	add	r2, r0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4770      	bx	lr
 8005070:	20003de4 	.word	0x20003de4
 8005074:	20003e88 	.word	0x20003e88

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
