
interruption_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08003ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  8 .bss          00003dc0  20000074  20000074  00020074  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003e34  20003e34  00020074  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 11 .debug_info   000116fe  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000026a7  00000000  00000000  000317a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b10  00000000  00000000  00033e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a08  00000000  00000000  00034960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005306  00000000  00000000  00035368  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c5d  00000000  00000000  0003a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e2cb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031e4  00000000  00000000  0003e348  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0004152c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  000415b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003bbc 	.word	0x08003bbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003bbc 	.word	0x08003bbc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f925 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f002 fd74 	bl	8003000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f93d 	bl	80007c2 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000560:	f000 f905 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000000c 	.word	0x2000000c
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20003de8 	.word	0x20003de8

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20003de8 	.word	0x20003de8

080005c4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <NVIC_SetPriorityGrouping+0x44>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <NVIC_SetPriorityGrouping+0x44>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	60d3      	str	r3, [r2, #12]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <NVIC_GetPriorityGrouping+0x18>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	0a1b      	lsrs	r3, r3, #8
 8000616:	f003 0307 	and.w	r3, r3, #7
}
 800061a:	4618      	mov	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <NVIC_EnableIRQ+0x30>)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	095b      	lsrs	r3, r3, #5
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	f002 021f 	and.w	r2, r2, #31
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	da0b      	bge.n	8000688 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	490d      	ldr	r1, [pc, #52]	; (80006a8 <NVIC_SetPriority+0x4c>)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	3b04      	subs	r3, #4
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000686:	e009      	b.n	800069c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <NVIC_SetPriority+0x50>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	2201      	movs	r2, #1
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	401a      	ands	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f6:	2101      	movs	r1, #1
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	1e59      	subs	r1, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff90 	bl	800065c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff2f 	bl	80005c4 <NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff44 	bl	800060c <NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff90 	bl	80006b0 <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5f 	bl	800065c <NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff37 	bl	8000628 <NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d106      	bne.n	80007f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007f6:	e005      	b.n	8000804 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007f8:	4a05      	ldr	r2, [pc, #20]	; (8000810 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	e16b      	b.n	8000b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000830:	2201      	movs	r2, #1
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 815a 	bne.w	8000b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0x4a>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d123      	bne.n	80008a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	08da      	lsrs	r2, r3, #3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	220f      	movs	r2, #15
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	691a      	ldr	r2, [r3, #16]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	69b9      	ldr	r1, [r7, #24]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2203      	movs	r2, #3
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	4013      	ands	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0203 	and.w	r2, r3, #3
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d00b      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d007      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	2b11      	cmp	r3, #17
 80008f0:	d003      	beq.n	80008fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d130      	bne.n	800095c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4313      	orrs	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	091b      	lsrs	r3, r3, #4
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 80b4 	beq.w	8000b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4a5f      	ldr	r2, [pc, #380]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a0:	4b5e      	ldr	r3, [pc, #376]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b5c      	ldr	r3, [pc, #368]	; (8000b1c <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <HAL_GPIO_Init+0x310>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d02b      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a50      	ldr	r2, [pc, #320]	; (8000b28 <HAL_GPIO_Init+0x314>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d025      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	; (8000b2c <HAL_GPIO_Init+0x318>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d01f      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4e      	ldr	r2, [pc, #312]	; (8000b30 <HAL_GPIO_Init+0x31c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d019      	beq.n	8000a2e <HAL_GPIO_Init+0x21a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d013      	beq.n	8000a2a <HAL_GPIO_Init+0x216>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00d      	beq.n	8000a26 <HAL_GPIO_Init+0x212>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <HAL_GPIO_Init+0x328>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <HAL_GPIO_Init+0x20e>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4a      	ldr	r2, [pc, #296]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_GPIO_Init+0x20a>
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	e00e      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e00c      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a22:	2306      	movs	r3, #6
 8000a24:	e00a      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a26:	2305      	movs	r3, #5
 8000a28:	e008      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	e006      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a2e:	2303      	movs	r3, #3
 8000a30:	e004      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a32:	2302      	movs	r3, #2
 8000a34:	e002      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a36:	2301      	movs	r3, #1
 8000a38:	e000      	b.n	8000a3c <HAL_GPIO_Init+0x228>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	f002 0203 	and.w	r2, r2, #3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4093      	lsls	r3, r2
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a4c:	4934      	ldr	r1, [pc, #208]	; (8000b20 <HAL_GPIO_Init+0x30c>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aa8:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000afc:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	f67f ae90 	bls.w	8000830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b10:	bf00      	nop
 8000b12:	3724      	adds	r7, #36	; 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40021400 	.word	0x40021400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fa2e 	bl	8002fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8000b80:	4905      	ldr	r1, [pc, #20]	; (8000b98 <HAL_PWR_EnableWakeUpPin+0x20>)
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_PWR_EnableWakeUpPin+0x20>)
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40007000 	.word	0x40007000

08000b9c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <HAL_PWR_DisableWakeUpPin+0x24>)
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_PWR_DisableWakeUpPin+0x24>)
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4013      	ands	r3, r2
 8000bb0:	604b      	str	r3, [r1, #4]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e22d      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d075      	beq.n	8000cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000be2:	4ba3      	ldr	r3, [pc, #652]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d00c      	beq.n	8000c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bee:	4ba0      	ldr	r3, [pc, #640]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d112      	bne.n	8000c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfa:	4b9d      	ldr	r3, [pc, #628]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c06:	d10b      	bne.n	8000c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c08:	4b99      	ldr	r3, [pc, #612]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d05b      	beq.n	8000ccc <HAL_RCC_OscConfig+0x108>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d157      	bne.n	8000ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e208      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c28:	d106      	bne.n	8000c38 <HAL_RCC_OscConfig+0x74>
 8000c2a:	4a91      	ldr	r2, [pc, #580]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	4b90      	ldr	r3, [pc, #576]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e01d      	b.n	8000c74 <HAL_RCC_OscConfig+0xb0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x98>
 8000c42:	4a8b      	ldr	r2, [pc, #556]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	4b8a      	ldr	r3, [pc, #552]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4a88      	ldr	r2, [pc, #544]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	4b87      	ldr	r3, [pc, #540]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e00b      	b.n	8000c74 <HAL_RCC_OscConfig+0xb0>
 8000c5c:	4a84      	ldr	r2, [pc, #528]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c5e:	4b84      	ldr	r3, [pc, #528]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4a81      	ldr	r2, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	4b81      	ldr	r3, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d013      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc96 	bl	80005ac <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fc92 	bl	80005ac <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e1cd      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c96:	4b76      	ldr	r3, [pc, #472]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f0      	beq.n	8000c84 <HAL_RCC_OscConfig+0xc0>
 8000ca2:	e014      	b.n	8000cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc82 	bl	80005ac <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fc7e 	bl	80005ac <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e1b9      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbe:	4b6c      	ldr	r3, [pc, #432]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0xe8>
 8000cca:	e000      	b.n	8000cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d063      	beq.n	8000da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cda:	4b65      	ldr	r3, [pc, #404]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00b      	beq.n	8000cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce6:	4b62      	ldr	r3, [pc, #392]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d11c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d116      	bne.n	8000d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfe:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <HAL_RCC_OscConfig+0x152>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d001      	beq.n	8000d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e18d      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d16:	4956      	ldr	r1, [pc, #344]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d2a:	e03a      	b.n	8000da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d020      	beq.n	8000d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d34:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <HAL_RCC_OscConfig+0x2b0>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fc37 	bl	80005ac <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc33 	bl	80005ac <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e16e      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	4943      	ldr	r1, [pc, #268]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	e015      	b.n	8000da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <HAL_RCC_OscConfig+0x2b0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc16 	bl	80005ac <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc12 	bl	80005ac <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e14d      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f0      	bne.n	8000d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d030      	beq.n	8000e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d016      	beq.n	8000de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_RCC_OscConfig+0x2b4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fbf6 	bl	80005ac <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fbf2 	bl	80005ac <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e12d      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x200>
 8000de2:	e015      	b.n	8000e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <HAL_RCC_OscConfig+0x2b4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dea:	f7ff fbdf 	bl	80005ac <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df2:	f7ff fbdb 	bl	80005ac <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e116      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f0      	bne.n	8000df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a0 	beq.w	8000f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10f      	bne.n	8000e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_RCC_OscConfig+0x2b8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d121      	bne.n	8000e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_RCC_OscConfig+0x2b8>)
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_RCC_OscConfig+0x2b8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fba1 	bl	80005ac <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	e011      	b.n	8000e92 <HAL_RCC_OscConfig+0x2ce>
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	42470000 	.word	0x42470000
 8000e78:	42470e80 	.word	0x42470e80
 8000e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e80:	f7ff fb94 	bl	80005ac <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e0cf      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e92:	4b6a      	ldr	r3, [pc, #424]	; (800103c <HAL_RCC_OscConfig+0x478>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d106      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
 8000ea6:	4a66      	ldr	r2, [pc, #408]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ea8:	4b65      	ldr	r3, [pc, #404]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb2:	e01c      	b.n	8000eee <HAL_RCC_OscConfig+0x32a>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d10c      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x312>
 8000ebc:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ebe:	4b60      	ldr	r3, [pc, #384]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec8:	4a5d      	ldr	r2, [pc, #372]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000eca:	4b5d      	ldr	r3, [pc, #372]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	e00b      	b.n	8000eee <HAL_RCC_OscConfig+0x32a>
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ed8:	4b59      	ldr	r3, [pc, #356]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee2:	4a57      	ldr	r2, [pc, #348]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ee4:	4b56      	ldr	r3, [pc, #344]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d015      	beq.n	8000f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb59 	bl	80005ac <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb55 	bl	80005ac <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e08e      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0ee      	beq.n	8000efe <HAL_RCC_OscConfig+0x33a>
 8000f20:	e014      	b.n	8000f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fb43 	bl	80005ac <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f28:	e00a      	b.n	8000f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f2a:	f7ff fb3f 	bl	80005ac <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e078      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1ee      	bne.n	8000f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d105      	bne.n	8000f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f52:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d064      	beq.n	8001030 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d05c      	beq.n	800102c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d141      	bne.n	8000ffe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_RCC_OscConfig+0x480>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fb14 	bl	80005ac <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f88:	f7ff fb10 	bl	80005ac <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e04b      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fa6:	4926      	ldr	r1, [pc, #152]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69da      	ldr	r2, [r3, #28]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	019b      	lsls	r3, r3, #6
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_RCC_OscConfig+0x480>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fae9 	bl	80005ac <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fde:	f7ff fae5 	bl	80005ac <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e020      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x41a>
 8000ffc:	e018      	b.n	8001030 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_RCC_OscConfig+0x480>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fad2 	bl	80005ac <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800100c:	f7ff face 	bl	80005ac <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e009      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_RCC_OscConfig+0x47c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x448>
 800102a:	e001      	b.n	8001030 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000
 8001040:	40023800 	.word	0x40023800
 8001044:	42470060 	.word	0x42470060

08001048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0ca      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4b67      	ldr	r3, [pc, #412]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 020f 	and.w	r2, r3, #15
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d20c      	bcs.n	8001084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b62      	ldr	r3, [pc, #392]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 020f 	and.w	r2, r3, #15
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0b6      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800109c:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010b6:	4b52      	ldr	r3, [pc, #328]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	494f      	ldr	r1, [pc, #316]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d119      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e07d      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	2b03      	cmp	r3, #3
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e06d      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e065      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001126:	4936      	ldr	r1, [pc, #216]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 0203 	bic.w	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001138:	f7ff fa38 	bl	80005ac <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	e00a      	b.n	8001156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fa34 	bl	80005ac <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e04d      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 020c 	and.w	r2, r3, #12
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	429a      	cmp	r2, r3
 8001166:	d1eb      	bne.n	8001140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 020f 	and.w	r2, r3, #15
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d90c      	bls.n	8001190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_RCC_ClockConfig+0x1b4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 020f 	and.w	r2, r3, #15
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e030      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	4918      	ldr	r1, [pc, #96]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ba:	4911      	ldr	r1, [pc, #68]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ce:	f000 f81d 	bl	800120c <HAL_RCC_GetSysClockFreq>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	fa21 f303 	lsr.w	r3, r1, r3
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80011ea:	200f      	movs	r0, #15
 80011ec:	f7ff f99a 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	08003c1c 	.word	0x08003c1c
 8001208:	2000000c 	.word	0x2000000c

0800120c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001210:	b087      	sub	sp, #28
 8001212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001214:	2200      	movs	r2, #0
 8001216:	60fa      	str	r2, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	617a      	str	r2, [r7, #20]
 800121c:	2200      	movs	r2, #0
 800121e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001220:	2200      	movs	r2, #0
 8001222:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001224:	4a51      	ldr	r2, [pc, #324]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 8001226:	6892      	ldr	r2, [r2, #8]
 8001228:	f002 020c 	and.w	r2, r2, #12
 800122c:	2a04      	cmp	r2, #4
 800122e:	d007      	beq.n	8001240 <HAL_RCC_GetSysClockFreq+0x34>
 8001230:	2a08      	cmp	r2, #8
 8001232:	d008      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x3a>
 8001234:	2a00      	cmp	r2, #0
 8001236:	f040 8090 	bne.w	800135a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <HAL_RCC_GetSysClockFreq+0x164>)
 800123c:	613b      	str	r3, [r7, #16]
       break;
 800123e:	e08f      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_RCC_GetSysClockFreq+0x168>)
 8001242:	613b      	str	r3, [r7, #16]
      break;
 8001244:	e08c      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001246:	4a49      	ldr	r2, [pc, #292]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 8001248:	6852      	ldr	r2, [r2, #4]
 800124a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800124e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001250:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 8001252:	6852      	ldr	r2, [r2, #4]
 8001254:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001258:	2a00      	cmp	r2, #0
 800125a:	d023      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	f04f 0400 	mov.w	r4, #0
 8001266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	ea03 0301 	and.w	r3, r3, r1
 8001272:	ea04 0402 	and.w	r4, r4, r2
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_RCC_GetSysClockFreq+0x168>)
 8001278:	fb02 f104 	mul.w	r1, r2, r4
 800127c:	2200      	movs	r2, #0
 800127e:	fb02 f203 	mul.w	r2, r2, r3
 8001282:	440a      	add	r2, r1
 8001284:	493b      	ldr	r1, [pc, #236]	; (8001374 <HAL_RCC_GetSysClockFreq+0x168>)
 8001286:	fba3 0101 	umull	r0, r1, r3, r1
 800128a:	1853      	adds	r3, r2, r1
 800128c:	4619      	mov	r1, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	f7fe ff9a 	bl	80001d0 <__aeabi_uldivmod>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e04c      	b.n	800133e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a4:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 80012a6:	6852      	ldr	r2, [r2, #4]
 80012a8:	0992      	lsrs	r2, r2, #6
 80012aa:	4611      	mov	r1, r2
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f240 15ff 	movw	r5, #511	; 0x1ff
 80012b4:	f04f 0600 	mov.w	r6, #0
 80012b8:	ea05 0501 	and.w	r5, r5, r1
 80012bc:	ea06 0602 	and.w	r6, r6, r2
 80012c0:	4629      	mov	r1, r5
 80012c2:	4632      	mov	r2, r6
 80012c4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80012c8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80012cc:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80012d0:	4651      	mov	r1, sl
 80012d2:	465a      	mov	r2, fp
 80012d4:	46aa      	mov	sl, r5
 80012d6:	46b3      	mov	fp, r6
 80012d8:	4655      	mov	r5, sl
 80012da:	465e      	mov	r6, fp
 80012dc:	1b4d      	subs	r5, r1, r5
 80012de:	eb62 0606 	sbc.w	r6, r2, r6
 80012e2:	4629      	mov	r1, r5
 80012e4:	4632      	mov	r2, r6
 80012e6:	0194      	lsls	r4, r2, #6
 80012e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012ec:	018b      	lsls	r3, r1, #6
 80012ee:	1a5b      	subs	r3, r3, r1
 80012f0:	eb64 0402 	sbc.w	r4, r4, r2
 80012f4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80012f8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80012fc:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001300:	4643      	mov	r3, r8
 8001302:	464c      	mov	r4, r9
 8001304:	4655      	mov	r5, sl
 8001306:	465e      	mov	r6, fp
 8001308:	18ed      	adds	r5, r5, r3
 800130a:	eb46 0604 	adc.w	r6, r6, r4
 800130e:	462b      	mov	r3, r5
 8001310:	4634      	mov	r4, r6
 8001312:	02a2      	lsls	r2, r4, #10
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001326:	4618      	mov	r0, r3
 8001328:	4621      	mov	r1, r4
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f04f 0400 	mov.w	r4, #0
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	f7fe ff4c 	bl	80001d0 <__aeabi_uldivmod>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_GetSysClockFreq+0x160>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0c1b      	lsrs	r3, r3, #16
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	3301      	adds	r3, #1
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	613b      	str	r3, [r7, #16]
      break;
 8001358:	e002      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetSysClockFreq+0x164>)
 800135c:	613b      	str	r3, [r7, #16]
      break;
 800135e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001360:	693b      	ldr	r3, [r7, #16]
}
 8001362:	4618      	mov	r0, r3
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	00f42400 	.word	0x00f42400
 8001374:	017d7840 	.word	0x017d7840

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_RCC_GetHCLKFreq+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c

08001390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001394:	f7ff fff0 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8001398:	4601      	mov	r1, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	08003c2c 	.word	0x08003c2c

080013b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013bc:	f7ff ffdc 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0b5b      	lsrs	r3, r3, #13
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	08003c2c 	.word	0x08003c2c

080013e0 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e03f      	b.n	8001472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f001 fe4c 	bl	80030a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	68d2      	ldr	r2, [r2, #12]
 800141e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001422:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f90b 	bl	8001640 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	6912      	ldr	r2, [r2, #16]
 8001434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	6952      	ldr	r2, [r2, #20]
 8001444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001448:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	68d2      	ldr	r2, [r2, #12]
 8001454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001458:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af02      	add	r7, sp, #8
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b20      	cmp	r3, #32
 8001498:	f040 8082 	bne.w	80015a0 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_UART_Transmit+0x2e>
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e07a      	b.n	80015a2 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_UART_Transmit+0x40>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e073      	b.n	80015a2 <HAL_UART_Transmit+0x128>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2221      	movs	r2, #33	; 0x21
 80014cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014d0:	f7ff f86c 	bl	80005ac <HAL_GetTick>
 80014d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	88fa      	ldrh	r2, [r7, #6]
 80014e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80014e2:	e041      	b.n	8001568 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fa:	d121      	bne.n	8001540 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f84f 	bl	80015aa <UART_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e045      	b.n	80015a2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001526:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3302      	adds	r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	e017      	b.n	8001568 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	3301      	adds	r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	e013      	b.n	8001568 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f82d 	bl	80015aa <UART_WaitOnFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e023      	b.n	80015a2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c59      	adds	r1, r3, #1
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800156c:	b29b      	uxth	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1b8      	bne.n	80014e4 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2200      	movs	r2, #0
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f814 	bl	80015aa <UART_WaitOnFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e00a      	b.n	80015a2 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80015a0:	2302      	movs	r3, #2
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	4613      	mov	r3, r2
 80015b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80015ba:	e02c      	b.n	8001616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c2:	d028      	beq.n	8001616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <UART_WaitOnFlagUntilTimeout+0x30>
 80015ca:	f7fe ffef 	bl	80005ac <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	1ad2      	subs	r2, r2, r3
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d91d      	bls.n	8001616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	68d2      	ldr	r2, [r2, #12]
 80015e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	6952      	ldr	r2, [r2, #20]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2220      	movs	r2, #32
 8001606:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e00f      	b.n	8001636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	429a      	cmp	r2, r3
 8001632:	d0c3      	beq.n	80015bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800167c:	f023 030c 	bic.w	r3, r3, #12
 8001680:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4313      	orrs	r3, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d0:	f040 80e4 	bne.w	800189c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4aab      	ldr	r2, [pc, #684]	; (8001988 <UART_SetConfig+0x348>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d004      	beq.n	80016e8 <UART_SetConfig+0xa8>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4aaa      	ldr	r2, [pc, #680]	; (800198c <UART_SetConfig+0x34c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d16c      	bne.n	80017c2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	f7ff fe64 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009a      	lsls	r2, r3, #2
 80016fa:	441a      	add	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4aa2      	ldr	r2, [pc, #648]	; (8001990 <UART_SetConfig+0x350>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	011d      	lsls	r5, r3, #4
 8001710:	f7ff fe52 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001714:	4602      	mov	r2, r0
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009a      	lsls	r2, r3, #2
 800171e:	441a      	add	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fbb2 f6f3 	udiv	r6, r2, r3
 800172a:	f7ff fe45 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800172e:	4602      	mov	r2, r0
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	009a      	lsls	r2, r3, #2
 8001738:	441a      	add	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	4a92      	ldr	r2, [pc, #584]	; (8001990 <UART_SetConfig+0x350>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2264      	movs	r2, #100	; 0x64
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	1af3      	subs	r3, r6, r3
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	3332      	adds	r3, #50	; 0x32
 8001758:	4a8d      	ldr	r2, [pc, #564]	; (8001990 <UART_SetConfig+0x350>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001766:	441d      	add	r5, r3
 8001768:	f7ff fe26 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800176c:	4602      	mov	r2, r0
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009a      	lsls	r2, r3, #2
 8001776:	441a      	add	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001782:	f7ff fe19 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001786:	4602      	mov	r2, r0
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	009a      	lsls	r2, r3, #2
 8001790:	441a      	add	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	4a7c      	ldr	r2, [pc, #496]	; (8001990 <UART_SetConfig+0x350>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2264      	movs	r2, #100	; 0x64
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	1af3      	subs	r3, r6, r3
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	3332      	adds	r3, #50	; 0x32
 80017b0:	4a77      	ldr	r2, [pc, #476]	; (8001990 <UART_SetConfig+0x350>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	442b      	add	r3, r5
 80017be:	60a3      	str	r3, [r4, #8]
 80017c0:	e154      	b.n	8001a6c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681c      	ldr	r4, [r3, #0]
 80017c6:	f7ff fde3 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	009a      	lsls	r2, r3, #2
 80017d4:	441a      	add	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	4a6b      	ldr	r2, [pc, #428]	; (8001990 <UART_SetConfig+0x350>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	011d      	lsls	r5, r3, #4
 80017ea:	f7ff fdd1 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	009a      	lsls	r2, r3, #2
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fbb2 f6f3 	udiv	r6, r2, r3
 8001804:	f7ff fdc4 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001808:	4602      	mov	r2, r0
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	441a      	add	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4a5c      	ldr	r2, [pc, #368]	; (8001990 <UART_SetConfig+0x350>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	2264      	movs	r2, #100	; 0x64
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	1af3      	subs	r3, r6, r3
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	3332      	adds	r3, #50	; 0x32
 8001832:	4a57      	ldr	r2, [pc, #348]	; (8001990 <UART_SetConfig+0x350>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001840:	441d      	add	r5, r3
 8001842:	f7ff fda5 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001846:	4602      	mov	r2, r0
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fbb2 f6f3 	udiv	r6, r2, r3
 800185c:	f7ff fd98 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001860:	4602      	mov	r2, r0
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009a      	lsls	r2, r3, #2
 800186a:	441a      	add	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <UART_SetConfig+0x350>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	2264      	movs	r2, #100	; 0x64
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	1af3      	subs	r3, r6, r3
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	3332      	adds	r3, #50	; 0x32
 800188a:	4a41      	ldr	r2, [pc, #260]	; (8001990 <UART_SetConfig+0x350>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	442b      	add	r3, r5
 8001898:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800189a:	e0e7      	b.n	8001a6c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a39      	ldr	r2, [pc, #228]	; (8001988 <UART_SetConfig+0x348>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <UART_SetConfig+0x270>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a38      	ldr	r2, [pc, #224]	; (800198c <UART_SetConfig+0x34c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d171      	bne.n	8001994 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681c      	ldr	r4, [r3, #0]
 80018b4:	f7ff fd80 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	441a      	add	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4a30      	ldr	r2, [pc, #192]	; (8001990 <UART_SetConfig+0x350>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	011d      	lsls	r5, r3, #4
 80018d8:	f7ff fd6e 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009a      	lsls	r2, r3, #2
 80018e6:	441a      	add	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80018f2:	f7ff fd61 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009a      	lsls	r2, r3, #2
 8001900:	441a      	add	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <UART_SetConfig+0x350>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	2264      	movs	r2, #100	; 0x64
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	1af3      	subs	r3, r6, r3
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	3332      	adds	r3, #50	; 0x32
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <UART_SetConfig+0x350>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192c:	441d      	add	r5, r3
 800192e:	f7ff fd43 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001932:	4602      	mov	r2, r0
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	009a      	lsls	r2, r3, #2
 800193c:	441a      	add	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fbb2 f6f3 	udiv	r6, r2, r3
 8001948:	f7ff fd36 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800194c:	4602      	mov	r2, r0
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	009a      	lsls	r2, r3, #2
 8001956:	441a      	add	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <UART_SetConfig+0x350>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	2264      	movs	r2, #100	; 0x64
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	1af3      	subs	r3, r6, r3
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	3332      	adds	r3, #50	; 0x32
 8001976:	4a06      	ldr	r2, [pc, #24]	; (8001990 <UART_SetConfig+0x350>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	095b      	lsrs	r3, r3, #5
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	442b      	add	r3, r5
 8001984:	60a3      	str	r3, [r4, #8]
 8001986:	e071      	b.n	8001a6c <UART_SetConfig+0x42c>
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681c      	ldr	r4, [r3, #0]
 8001998:	f7ff fcfa 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800199c:	4602      	mov	r2, r0
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	441a      	add	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4a30      	ldr	r2, [pc, #192]	; (8001a74 <UART_SetConfig+0x434>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	011d      	lsls	r5, r3, #4
 80019bc:	f7ff fce8 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	441a      	add	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80019d6:	f7ff fcdb 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009a      	lsls	r2, r3, #2
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <UART_SetConfig+0x434>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2264      	movs	r2, #100	; 0x64
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	1af3      	subs	r3, r6, r3
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	3332      	adds	r3, #50	; 0x32
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <UART_SetConfig+0x434>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a10:	441d      	add	r5, r3
 8001a12:	f7ff fcbd 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009a      	lsls	r2, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8001a2c:	f7ff fcb0 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	441a      	add	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <UART_SetConfig+0x434>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	2264      	movs	r2, #100	; 0x64
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	1af3      	subs	r3, r6, r3
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	3332      	adds	r3, #50	; 0x32
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <UART_SetConfig+0x434>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	442b      	add	r3, r5
 8001a68:	60a3      	str	r3, [r4, #8]
}
 8001a6a:	e7ff      	b.n	8001a6c <UART_SetConfig+0x42c>
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	51eb851f 	.word	0x51eb851f

08001a78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	2b84      	cmp	r3, #132	; 0x84
 8001a8c:	d005      	beq.n	8001a9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001a8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	3303      	adds	r3, #3
 8001a98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001aac:	f000 fe06 	bl	80026bc <vTaskStartScheduler>
  
  return osOK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab8:	b087      	sub	sp, #28
 8001aba:	af02      	add	r7, sp, #8
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685c      	ldr	r4, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001acc:	b29e      	uxth	r6, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ffcf 	bl	8001a78 <makeFreeRtosPriority>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	4629      	mov	r1, r5
 8001aea:	4620      	mov	r0, r4
 8001aec:	f000 fc88 	bl	8002400 <xTaskCreate>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <osDelay+0x16>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	e000      	b.n	8001b1c <osDelay+0x18>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fd99 	bl	8002654 <vTaskDelay>
  
  return osOK;
 8001b22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b30:	f001 f894 	bl	8002c5c <xTaskGetSchedulerState>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001b3a:	f000 fa45 	bl	8001fc8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f103 0208 	add.w	r2, r3, #8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f103 0208 	add.w	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f103 0208 	add.w	r2, r3, #8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfa:	d103      	bne.n	8001c04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e00c      	b.n	8001c1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3308      	adds	r3, #8
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e002      	b.n	8001c12 <vListInsert+0x2e>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d9f6      	bls.n	8001c0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6892      	ldr	r2, [r2, #8]
 8001c6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6852      	ldr	r2, [r2, #4]
 8001c76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d103      	bne.n	8001c8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3b04      	subs	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f023 0201 	bic.w	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3b04      	subs	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <pxPortInitialiseStack+0x64>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b14      	subs	r3, #20
 8001ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3b04      	subs	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f06f 0202 	mvn.w	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3b20      	subs	r3, #32
 8001d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	08001d15 	.word	0x08001d15

08001d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <prvTaskExitError+0x38>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d22:	d009      	beq.n	8001d38 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	e7fe      	b.n	8001d36 <prvTaskExitError+0x22>
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001d4a:	e7fe      	b.n	8001d4a <prvTaskExitError+0x36>
 8001d4c:	20000008 	.word	0x20000008

08001d50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <pxCurrentTCBConst2>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	6808      	ldr	r0, [r1, #0]
 8001d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d5a:	f380 8809 	msr	PSP, r0
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f380 8811 	msr	BASEPRI, r0
 8001d6a:	4770      	bx	lr
 8001d6c:	f3af 8000 	nop.w

08001d70 <pxCurrentTCBConst2>:
 8001d70:	20003cb0 	.word	0x20003cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop

08001d78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <prvPortStartFirstTask+0x1c>)
 8001d7a:	6800      	ldr	r0, [r0, #0]
 8001d7c:	6800      	ldr	r0, [r0, #0]
 8001d7e:	f380 8808 	msr	MSP, r0
 8001d82:	b662      	cpsie	i
 8001d84:	b661      	cpsie	f
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	df00      	svc	0
 8001d90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001d92:	bf00      	nop
 8001d94:	e000ed08 	.word	0xe000ed08

08001d98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <xPortStartScheduler+0xf4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <xPortStartScheduler+0xf8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d109      	bne.n	8001dbc <xPortStartScheduler+0x24>
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e7fe      	b.n	8001dba <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <xPortStartScheduler+0xf4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <xPortStartScheduler+0xfc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d109      	bne.n	8001dda <xPortStartScheduler+0x42>
 8001dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e7fe      	b.n	8001dd8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <xPortStartScheduler+0x100>)
 8001ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	22ff      	movs	r2, #255	; 0xff
 8001dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <xPortStartScheduler+0x104>)
 8001e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e08:	e009      	b.n	8001e1e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001e0a:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b80      	cmp	r3, #128	; 0x80
 8001e28:	d0ef      	beq.n	8001e0a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <xPortStartScheduler+0x108>)
 8001e3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <xPortStartScheduler+0x10c>)
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <xPortStartScheduler+0x10c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <xPortStartScheduler+0x10c>)
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <xPortStartScheduler+0x10c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001e5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001e60:	f000 f8d2 	bl	8002008 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <xPortStartScheduler+0x110>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001e6a:	f000 f8e9 	bl	8002040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <xPortStartScheduler+0x114>)
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <xPortStartScheduler+0x114>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001e78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001e7a:	f7ff ff7d 	bl	8001d78 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001e7e:	f7ff ff49 	bl	8001d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	410fc271 	.word	0x410fc271
 8001e94:	410fc270 	.word	0x410fc270
 8001e98:	e000e400 	.word	0xe000e400
 8001e9c:	20000090 	.word	0x20000090
 8001ea0:	20000094 	.word	0x20000094
 8001ea4:	e000ed20 	.word	0xe000ed20
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	e000ef34 	.word	0xe000ef34

08001eb0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <vPortEnterCritical+0x54>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <vPortEnterCritical+0x54>)
 8001ed0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <vPortEnterCritical+0x54>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d10e      	bne.n	8001ef8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <vPortEnterCritical+0x58>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <vPortEnterCritical+0x48>
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	e7fe      	b.n	8001ef6 <vPortEnterCritical+0x46>
	}
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	20000008 	.word	0x20000008
 8001f08:	e000ed04 	.word	0xe000ed04

08001f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <vPortExitCritical+0x4c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <vPortExitCritical+0x22>
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e7fe      	b.n	8001f2c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <vPortExitCritical+0x4c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <vPortExitCritical+0x4c>)
 8001f36:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <vPortExitCritical+0x4c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <vPortExitCritical+0x3e>
 8001f40:	2300      	movs	r3, #0
 8001f42:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	00000000 	.word	0x00000000

08001f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001f60:	f3ef 8009 	mrs	r0, PSP
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <pxCurrentTCBConst>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f01e 0f10 	tst.w	lr, #16
 8001f70:	bf08      	it	eq
 8001f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7a:	6010      	str	r0, [r2, #0]
 8001f7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f84:	f380 8811 	msr	BASEPRI, r0
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f000 fd40 	bl	8002a14 <vTaskSwitchContext>
 8001f94:	f04f 0000 	mov.w	r0, #0
 8001f98:	f380 8811 	msr	BASEPRI, r0
 8001f9c:	bc08      	pop	{r3}
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	6808      	ldr	r0, [r1, #0]
 8001fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa6:	f01e 0f10 	tst.w	lr, #16
 8001faa:	bf08      	it	eq
 8001fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001fb0:	f380 8809 	msr	PSP, r0
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w

08001fc0 <pxCurrentTCBConst>:
 8001fc0:	20003cb0 	.word	0x20003cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop

08001fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001fe0:	f000 fc5c 	bl	800289c <xTaskIncrementTick>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <xPortSysTickHandler+0x3c>)
 8001fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	e000ed04 	.word	0xe000ed04

08002008 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <vPortSetupTimerInterrupt+0x28>)
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <vPortSetupTimerInterrupt+0x2c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4909      	ldr	r1, [pc, #36]	; (8002038 <vPortSetupTimerInterrupt+0x30>)
 8002014:	fba1 1303 	umull	r1, r3, r1, r3
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	3b01      	subs	r3, #1
 800201c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <vPortSetupTimerInterrupt+0x34>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e014 	.word	0xe000e014
 8002034:	2000000c 	.word	0x2000000c
 8002038:	10624dd3 	.word	0x10624dd3
 800203c:	e000e010 	.word	0xe000e010

08002040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002050 <vPortEnableVFP+0x10>
 8002044:	6801      	ldr	r1, [r0, #0]
 8002046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800204a:	6001      	str	r1, [r0, #0]
 800204c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800204e:	bf00      	nop
 8002050:	e000ed88 	.word	0xe000ed88

08002054 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002060:	f000 fb72 	bl	8002748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <pvPortMalloc+0x170>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800206c:	f000 f90c 	bl	8002288 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <pvPortMalloc+0x174>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 808c 	bne.w	8002196 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002084:	2208      	movs	r2, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f023 0307 	bic.w	r3, r3, #7
 800209c:	3308      	adds	r3, #8
 800209e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <pvPortMalloc+0x6a>
	__asm volatile
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e7fe      	b.n	80020bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d068      	beq.n	8002196 <pvPortMalloc+0x142>
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <pvPortMalloc+0x178>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d863      	bhi.n	8002196 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <pvPortMalloc+0x17c>)
 80020d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <pvPortMalloc+0x17c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020d8:	e004      	b.n	80020e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d203      	bcs.n	80020f6 <pvPortMalloc+0xa2>
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f1      	bne.n	80020da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <pvPortMalloc+0x170>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d04a      	beq.n	8002196 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	4413      	add	r3, r2
 8002108:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1ad2      	subs	r2, r2, r3
 800211a:	2308      	movs	r3, #8
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	429a      	cmp	r2, r3
 8002120:	d91e      	bls.n	8002160 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <pvPortMalloc+0xf4>
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e7fe      	b.n	8002146 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800215a:	69b8      	ldr	r0, [r7, #24]
 800215c:	f000 f8f6 	bl	800234c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <pvPortMalloc+0x178>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	4a18      	ldr	r2, [pc, #96]	; (80021cc <pvPortMalloc+0x178>)
 800216c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <pvPortMalloc+0x178>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <pvPortMalloc+0x180>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d203      	bcs.n	8002182 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <pvPortMalloc+0x178>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <pvPortMalloc+0x180>)
 8002180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <pvPortMalloc+0x174>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	431a      	orrs	r2, r3
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002196:	f000 fae5 	bl	8002764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <pvPortMalloc+0x164>
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e7fe      	b.n	80021b6 <pvPortMalloc+0x162>
	return pvReturn;
 80021b8:	69fb      	ldr	r3, [r7, #28]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20003ca0 	.word	0x20003ca0
 80021c8:	20003cac 	.word	0x20003cac
 80021cc:	20003ca4 	.word	0x20003ca4
 80021d0:	20003c98 	.word	0x20003c98
 80021d4:	20003ca8 	.word	0x20003ca8

080021d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d046      	beq.n	8002278 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80021ea:	2308      	movs	r3, #8
 80021ec:	425b      	negs	r3, r3
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <vPortFree+0xa8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <vPortFree+0x42>
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e7fe      	b.n	8002218 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <vPortFree+0x5e>
 8002222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e7fe      	b.n	8002234 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <vPortFree+0xa8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d019      	beq.n	8002278 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d115      	bne.n	8002278 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <vPortFree+0xa8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800225c:	f000 fa74 	bl	8002748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <vPortFree+0xac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4413      	add	r3, r2
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <vPortFree+0xac>)
 800226c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800226e:	6938      	ldr	r0, [r7, #16]
 8002270:	f000 f86c 	bl	800234c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002274:	f000 fa76 	bl	8002764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20003cac 	.word	0x20003cac
 8002284:	20003ca4 	.word	0x20003ca4

08002288 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800228e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002292:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <prvHeapInit+0xac>)
 8002296:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3307      	adds	r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <prvHeapInit+0xac>)
 80022b8:	4413      	add	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <prvHeapInit+0xb0>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <prvHeapInit+0xb0>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80022d4:	2208      	movs	r2, #8
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <prvHeapInit+0xb4>)
 80022e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <prvHeapInit+0xb4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <prvHeapInit+0xb4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	1ad2      	subs	r2, r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <prvHeapInit+0xb4>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <prvHeapInit+0xb8>)
 8002316:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a09      	ldr	r2, [pc, #36]	; (8002344 <prvHeapInit+0xbc>)
 800231e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <prvHeapInit+0xc0>)
 8002322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20000098 	.word	0x20000098
 8002338:	20003c98 	.word	0x20003c98
 800233c:	20003ca0 	.word	0x20003ca0
 8002340:	20003ca8 	.word	0x20003ca8
 8002344:	20003ca4 	.word	0x20003ca4
 8002348:	20003cac 	.word	0x20003cac

0800234c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <prvInsertBlockIntoFreeList+0xac>)
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e002      	b.n	8002360 <prvInsertBlockIntoFreeList+0x14>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	d3f7      	bcc.n	800235a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	441a      	add	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d108      	bne.n	800238e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	441a      	add	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	441a      	add	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d118      	bne.n	80023d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <prvInsertBlockIntoFreeList+0xb0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d00d      	beq.n	80023ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	441a      	add	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <prvInsertBlockIntoFreeList+0xb0>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e003      	b.n	80023dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d002      	beq.n	80023ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20003c98 	.word	0x20003c98
 80023fc:	20003ca0 	.word	0x20003ca0

08002400 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af04      	add	r7, sp, #16
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe1d 	bl	8002054 <pvPortMalloc>
 800241a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002422:	2054      	movs	r0, #84	; 0x54
 8002424:	f7ff fe16 	bl	8002054 <pvPortMalloc>
 8002428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
 8002436:	e005      	b.n	8002444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f7ff fecd 	bl	80021d8 <vPortFree>
 800243e:	e001      	b.n	8002444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	2300      	movs	r3, #0
 800244e:	9303      	str	r3, [sp, #12]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	9302      	str	r3, [sp, #8]
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f80e 	bl	8002482 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002466:	69f8      	ldr	r0, [r7, #28]
 8002468:	f000 f88a 	bl	8002580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	e002      	b.n	8002478 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002476:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002478:	69bb      	ldr	r3, [r7, #24]
	}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800249a:	3b01      	subs	r3, #1
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f023 0307 	bic.w	r3, r3, #7
 80024a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d009      	beq.n	80024c8 <prvInitialiseNewTask+0x46>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e7fe      	b.n	80024c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e012      	b.n	80024f4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	7819      	ldrb	r1, [r3, #0]
 80024d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	3334      	adds	r3, #52	; 0x34
 80024de:	460a      	mov	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	d9e9      	bls.n	80024ce <prvInitialiseNewTask+0x4c>
 80024fa:	e000      	b.n	80024fe <prvInitialiseNewTask+0x7c>
		{
			break;
 80024fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	2b06      	cmp	r3, #6
 800250a:	d901      	bls.n	8002510 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800250c:	2306      	movs	r3, #6
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	2200      	movs	r2, #0
 8002520:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fb2b 	bl	8001b82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3318      	adds	r3, #24
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fb26 	bl	8001b82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	f1c3 0207 	rsb	r2, r3, #7
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	2200      	movs	r2, #0
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	69b8      	ldr	r0, [r7, #24]
 8002560:	f7ff fba4 	bl	8001cac <pxPortInitialiseStack>
 8002564:	4602      	mov	r2, r0
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002588:	f7ff fc92 	bl	8001eb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <prvAddNewTaskToReadyList+0xb8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a29      	ldr	r2, [pc, #164]	; (8002638 <prvAddNewTaskToReadyList+0xb8>)
 8002594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <prvAddNewTaskToReadyList+0xbc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800259e:	4a27      	ldr	r2, [pc, #156]	; (800263c <prvAddNewTaskToReadyList+0xbc>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <prvAddNewTaskToReadyList+0xb8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d110      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025ac:	f000 faa4 	bl	8002af8 <prvInitialiseTaskLists>
 80025b0:	e00d      	b.n	80025ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <prvAddNewTaskToReadyList+0xc0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <prvAddNewTaskToReadyList+0xbc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d802      	bhi.n	80025ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <prvAddNewTaskToReadyList+0xbc>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <prvAddNewTaskToReadyList+0xc4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <prvAddNewTaskToReadyList+0xc4>)
 80025d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	2201      	movs	r2, #1
 80025de:	409a      	lsls	r2, r3
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <prvAddNewTaskToReadyList+0xc8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <prvAddNewTaskToReadyList+0xc8>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <prvAddNewTaskToReadyList+0xcc>)
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f7ff facb 	bl	8001b9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002606:	f7ff fc81 	bl	8001f0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <prvAddNewTaskToReadyList+0xc0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00e      	beq.n	8002630 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <prvAddNewTaskToReadyList+0xbc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <prvAddNewTaskToReadyList+0xd0>)
 8002622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20003db0 	.word	0x20003db0
 800263c:	20003cb0 	.word	0x20003cb0
 8002640:	20003dbc 	.word	0x20003dbc
 8002644:	20003dcc 	.word	0x20003dcc
 8002648:	20003db8 	.word	0x20003db8
 800264c:	20003cb4 	.word	0x20003cb4
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <vTaskDelay+0x60>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <vTaskDelay+0x2e>
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	e7fe      	b.n	8002680 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002682:	f000 f861 	bl	8002748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002686:	2100      	movs	r1, #0
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fb05 	bl	8002c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800268e:	f000 f869 	bl	8002764 <xTaskResumeAll>
 8002692:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <vTaskDelay+0x64>)
 800269c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20003dd8 	.word	0x20003dd8
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <vTaskStartScheduler+0x74>)
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2300      	movs	r3, #0
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	4919      	ldr	r1, [pc, #100]	; (8002734 <vTaskStartScheduler+0x78>)
 80026d0:	4819      	ldr	r0, [pc, #100]	; (8002738 <vTaskStartScheduler+0x7c>)
 80026d2:	f7ff fe95 	bl	8002400 <xTaskCreate>
 80026d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d115      	bne.n	800270a <vTaskStartScheduler+0x4e>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <vTaskStartScheduler+0x80>)
 80026f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <vTaskStartScheduler+0x84>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <vTaskStartScheduler+0x88>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002704:	f7ff fb48 	bl	8001d98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002708:	e00d      	b.n	8002726 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d109      	bne.n	8002726 <vTaskStartScheduler+0x6a>
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	e7fe      	b.n	8002724 <vTaskStartScheduler+0x68>
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20003dd4 	.word	0x20003dd4
 8002734:	08003bd4 	.word	0x08003bd4
 8002738:	08002ac9 	.word	0x08002ac9
 800273c:	20003dd0 	.word	0x20003dd0
 8002740:	20003dbc 	.word	0x20003dbc
 8002744:	20003db4 	.word	0x20003db4

08002748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <vTaskSuspendAll+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a03      	ldr	r2, [pc, #12]	; (8002760 <vTaskSuspendAll+0x18>)
 8002754:	6013      	str	r3, [r2, #0]
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20003dd8 	.word	0x20003dd8

08002764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <xTaskResumeAll+0x114>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <xTaskResumeAll+0x2a>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	e7fe      	b.n	800278c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800278e:	f7ff fb8f 	bl	8001eb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <xTaskResumeAll+0x114>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3b01      	subs	r3, #1
 8002798:	4a37      	ldr	r2, [pc, #220]	; (8002878 <xTaskResumeAll+0x114>)
 800279a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <xTaskResumeAll+0x114>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d161      	bne.n	8002868 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <xTaskResumeAll+0x118>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05d      	beq.n	8002868 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ac:	e02e      	b.n	800280c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <xTaskResumeAll+0x11c>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3318      	adds	r3, #24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fa4b 	bl	8001c56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fa46 	bl	8001c56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <xTaskResumeAll+0x120>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <xTaskResumeAll+0x120>)
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <xTaskResumeAll+0x124>)
 80027ea:	441a      	add	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f7ff f9d2 	bl	8001b9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <xTaskResumeAll+0x128>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <xTaskResumeAll+0x12c>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <xTaskResumeAll+0x11c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1cc      	bne.n	80027ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800281a:	f000 f9f9 	bl	8002c10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <xTaskResumeAll+0x130>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800282a:	f000 f837 	bl	800289c <xTaskIncrementTick>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <xTaskResumeAll+0x12c>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3b01      	subs	r3, #1
 800283e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f1      	bne.n	800282a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <xTaskResumeAll+0x130>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <xTaskResumeAll+0x12c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002854:	2301      	movs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <xTaskResumeAll+0x134>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002868:	f7ff fb50 	bl	8001f0c <vPortExitCritical>

	return xAlreadyYielded;
 800286c:	68bb      	ldr	r3, [r7, #8]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20003dd8 	.word	0x20003dd8
 800287c:	20003db0 	.word	0x20003db0
 8002880:	20003d70 	.word	0x20003d70
 8002884:	20003db8 	.word	0x20003db8
 8002888:	20003cb4 	.word	0x20003cb4
 800288c:	20003cb0 	.word	0x20003cb0
 8002890:	20003dc4 	.word	0x20003dc4
 8002894:	20003dc0 	.word	0x20003dc0
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028a6:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <xTaskIncrementTick+0x14c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 808c 	bne.w	80029c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <xTaskIncrementTick+0x150>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <xTaskIncrementTick+0x150>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11f      	bne.n	8002904 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <xTaskIncrementTick+0x154>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <xTaskIncrementTick+0x46>
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	e7fe      	b.n	80028e0 <xTaskIncrementTick+0x44>
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <xTaskIncrementTick+0x154>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <xTaskIncrementTick+0x158>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <xTaskIncrementTick+0x154>)
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <xTaskIncrementTick+0x158>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <xTaskIncrementTick+0x15c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a3e      	ldr	r2, [pc, #248]	; (80029f8 <xTaskIncrementTick+0x15c>)
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	f000 f986 	bl	8002c10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002904:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <xTaskIncrementTick+0x160>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d34d      	bcc.n	80029aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <xTaskIncrementTick+0x154>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <xTaskIncrementTick+0x80>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <xTaskIncrementTick+0x82>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <xTaskIncrementTick+0x160>)
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002928:	601a      	str	r2, [r3, #0]
					break;
 800292a:	e03e      	b.n	80029aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <xTaskIncrementTick+0x154>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d203      	bcs.n	800294c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002944:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <xTaskIncrementTick+0x160>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
						break;
 800294a:	e02e      	b.n	80029aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f980 	bl	8001c56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3318      	adds	r3, #24
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f977 	bl	8001c56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2201      	movs	r2, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <xTaskIncrementTick+0x164>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <xTaskIncrementTick+0x164>)
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <xTaskIncrementTick+0x168>)
 8002988:	441a      	add	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3304      	adds	r3, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f7ff f903 	bl	8001b9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <xTaskIncrementTick+0x16c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3b4      	bcc.n	800290e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029a8:	e7b1      	b.n	800290e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <xTaskIncrementTick+0x16c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	4914      	ldr	r1, [pc, #80]	; (8002a04 <xTaskIncrementTick+0x168>)
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d907      	bls.n	80029d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e004      	b.n	80029d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <xTaskIncrementTick+0x170>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <xTaskIncrementTick+0x170>)
 80029d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <xTaskIncrementTick+0x174>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80029da:	2301      	movs	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80029de:	697b      	ldr	r3, [r7, #20]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20003dd8 	.word	0x20003dd8
 80029ec:	20003db4 	.word	0x20003db4
 80029f0:	20003d68 	.word	0x20003d68
 80029f4:	20003d6c 	.word	0x20003d6c
 80029f8:	20003dc8 	.word	0x20003dc8
 80029fc:	20003dd0 	.word	0x20003dd0
 8002a00:	20003db8 	.word	0x20003db8
 8002a04:	20003cb4 	.word	0x20003cb4
 8002a08:	20003cb0 	.word	0x20003cb0
 8002a0c:	20003dc0 	.word	0x20003dc0
 8002a10:	20003dc4 	.word	0x20003dc4

08002a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <vTaskSwitchContext+0xa0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <vTaskSwitchContext+0xa4>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a28:	e03e      	b.n	8002aa8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <vTaskSwitchContext+0xa4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a30:	4b22      	ldr	r3, [pc, #136]	; (8002abc <vTaskSwitchContext+0xa8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	f1c3 031f 	rsb	r3, r3, #31
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	491e      	ldr	r1, [pc, #120]	; (8002ac0 <vTaskSwitchContext+0xac>)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	e7fe      	b.n	8002a6c <vTaskSwitchContext+0x58>
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <vTaskSwitchContext+0xac>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d104      	bne.n	8002a9e <vTaskSwitchContext+0x8a>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <vTaskSwitchContext+0xb0>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	20003dd8 	.word	0x20003dd8
 8002ab8:	20003dc4 	.word	0x20003dc4
 8002abc:	20003db8 	.word	0x20003db8
 8002ac0:	20003cb4 	.word	0x20003cb4
 8002ac4:	20003cb0 	.word	0x20003cb0

08002ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ad0:	f000 f852 	bl	8002b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <prvIdleTask+0x28>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d9f9      	bls.n	8002ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <prvIdleTask+0x2c>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002aec:	e7f0      	b.n	8002ad0 <prvIdleTask+0x8>
 8002aee:	bf00      	nop
 8002af0:	20003cb4 	.word	0x20003cb4
 8002af4:	e000ed04 	.word	0xe000ed04

08002af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	e00c      	b.n	8002b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <prvInitialiseTaskLists+0x60>)
 8002b10:	4413      	add	r3, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f815 	bl	8001b42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d9ef      	bls.n	8002b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <prvInitialiseTaskLists+0x64>)
 8002b26:	f7ff f80c 	bl	8001b42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <prvInitialiseTaskLists+0x68>)
 8002b2c:	f7ff f809 	bl	8001b42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <prvInitialiseTaskLists+0x6c>)
 8002b32:	f7ff f806 	bl	8001b42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b36:	480c      	ldr	r0, [pc, #48]	; (8002b68 <prvInitialiseTaskLists+0x70>)
 8002b38:	f7ff f803 	bl	8001b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <prvInitialiseTaskLists+0x74>)
 8002b3e:	f7ff f800 	bl	8001b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <prvInitialiseTaskLists+0x78>)
 8002b44:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <prvInitialiseTaskLists+0x64>)
 8002b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <prvInitialiseTaskLists+0x7c>)
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <prvInitialiseTaskLists+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20003cb4 	.word	0x20003cb4
 8002b5c:	20003d40 	.word	0x20003d40
 8002b60:	20003d54 	.word	0x20003d54
 8002b64:	20003d70 	.word	0x20003d70
 8002b68:	20003d84 	.word	0x20003d84
 8002b6c:	20003d9c 	.word	0x20003d9c
 8002b70:	20003d68 	.word	0x20003d68
 8002b74:	20003d6c 	.word	0x20003d6c

08002b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b7e:	e028      	b.n	8002bd2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002b80:	f7ff fde2 	bl	8002748 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <prvCheckTasksWaitingTermination+0x6c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002b94:	f7ff fde6 	bl	8002764 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002b9e:	f7ff f987 	bl	8001eb0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <prvCheckTasksWaitingTermination+0x6c>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f851 	bl	8001c56 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <prvCheckTasksWaitingTermination+0x70>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <prvCheckTasksWaitingTermination+0x70>)
 8002bbc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <prvCheckTasksWaitingTermination+0x74>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <prvCheckTasksWaitingTermination+0x74>)
 8002bc6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002bc8:	f7ff f9a0 	bl	8001f0c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002bcc:	6838      	ldr	r0, [r7, #0]
 8002bce:	f000 f80f 	bl	8002bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <prvCheckTasksWaitingTermination+0x74>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1d2      	bne.n	8002b80 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20003d84 	.word	0x20003d84
 8002be8:	20003db0 	.word	0x20003db0
 8002bec:	20003d98 	.word	0x20003d98

08002bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff faeb 	bl	80021d8 <vPortFree>
			vPortFree( pxTCB );
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fae8 	bl	80021d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <prvResetNextTaskUnblockTime+0x44>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <prvResetNextTaskUnblockTime+0x14>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <prvResetNextTaskUnblockTime+0x16>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d004      	beq.n	8002c34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <prvResetNextTaskUnblockTime+0x48>)
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c32:	e008      	b.n	8002c46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <prvResetNextTaskUnblockTime+0x44>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <prvResetNextTaskUnblockTime+0x48>)
 8002c44:	6013      	str	r3, [r2, #0]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20003d68 	.word	0x20003d68
 8002c58:	20003dd0 	.word	0x20003dd0

08002c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <xTaskGetSchedulerState+0x34>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e008      	b.n	8002c82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <xTaskGetSchedulerState+0x38>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e001      	b.n	8002c82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c82:	687b      	ldr	r3, [r7, #4]
	}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	20003dbc 	.word	0x20003dbc
 8002c94:	20003dd8 	.word	0x20003dd8

08002c98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ffd1 	bl	8001c56 <uxListRemove>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	4a20      	ldr	r2, [pc, #128]	; (8002d50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002cd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd8:	d10a      	bne.n	8002cf0 <prvAddCurrentTaskToDelayedList+0x58>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	481a      	ldr	r0, [pc, #104]	; (8002d54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002cea:	f7fe ff57 	bl	8001b9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002cee:	e026      	b.n	8002d3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d209      	bcs.n	8002d1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f7fe ff65 	bl	8001be4 <vListInsert>
}
 8002d1a:	e010      	b.n	8002d3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f7fe ff5b 	bl	8001be4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d202      	bcs.n	8002d3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002d38:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6013      	str	r3, [r2, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20003db4 	.word	0x20003db4
 8002d4c:	20003cb0 	.word	0x20003cb0
 8002d50:	20003db8 	.word	0x20003db8
 8002d54:	20003d9c 	.word	0x20003d9c
 8002d58:	20003d6c 	.word	0x20003d6c
 8002d5c:	20003d68 	.word	0x20003d68
 8002d60:	20003dd0 	.word	0x20003dd0

08002d64 <__io_putchar>:
/*****************Printf implementation***********/
//With this funcitons we can use printf instead of
//the HAL stm32 implementation

int __io_putchar(int ch)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart3, &c[0], 1, 10);
 8002d72:	f107 010c 	add.w	r1, r7, #12
 8002d76:	230a      	movs	r3, #10
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4804      	ldr	r0, [pc, #16]	; (8002d8c <__io_putchar+0x28>)
 8002d7c:	f7fe fb7d 	bl	800147a <HAL_UART_Transmit>
 return ch;
 8002d80:	687b      	ldr	r3, [r7, #4]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20003dec 	.word	0x20003dec

08002d90 <_write>:

int _write(int file,char *ptr, int len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e009      	b.n	8002db6 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffda 	bl	8002d64 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf1      	blt.n	8002da2 <_write+0x12>
 }
return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dce:	f7fd fb87 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dd2:	f000 f81b 	bl	8002e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd6:	f000 f8b1 	bl	8002f3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002dda:	f000 f881 	bl	8002ee0 <MX_USART3_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <main+0x3c>)
 8002de0:	1d3c      	adds	r4, r7, #4
 8002de2:	461d      	mov	r5, r3
 8002de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de8:	682b      	ldr	r3, [r5, #0]
 8002dea:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe fe60 	bl	8001ab6 <osThreadCreate>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <main+0x40>)
 8002dfa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8002dfc:	f7fe fe54 	bl	8001aa8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <main+0x38>
 8002e02:	bf00      	nop
 8002e04:	08003be8 	.word	0x08003be8
 8002e08:	20003e2c 	.word	0x20003e2c

08002e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b094      	sub	sp, #80	; 0x50
 8002e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <SystemClock_Config+0xc4>)
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <SystemClock_Config+0xc4>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <SystemClock_Config+0xc4>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <SystemClock_Config+0xc8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e52:	2310      	movs	r3, #16
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e5a:	f107 0320 	add.w	r3, r7, #32
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd feb0 	bl	8000bc4 <HAL_RCC_OscConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <SystemClock_Config+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e6a:	21ba      	movs	r1, #186	; 0xba
 8002e6c:	481a      	ldr	r0, [pc, #104]	; (8002ed8 <SystemClock_Config+0xcc>)
 8002e6e:	f000 f8c1 	bl	8002ff4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e72:	230f      	movs	r3, #15
 8002e74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f8db 	bl	8001048 <HAL_RCC_ClockConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e98:	21c8      	movs	r1, #200	; 0xc8
 8002e9a:	480f      	ldr	r0, [pc, #60]	; (8002ed8 <SystemClock_Config+0xcc>)
 8002e9c:	f000 f8aa 	bl	8002ff4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ea0:	f7fe fa6a 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <SystemClock_Config+0xd0>)
 8002ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fc87 	bl	80007c2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002eb4:	2004      	movs	r0, #4
 8002eb6:	f7fd fc91 	bl	80007dc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec2:	f7fd fc54 	bl	800076e <HAL_NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3750      	adds	r7, #80	; 0x50
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	08003bfc 	.word	0x08003bfc
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <MX_USART3_UART_Init+0x54>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f16:	4806      	ldr	r0, [pc, #24]	; (8002f30 <MX_USART3_UART_Init+0x50>)
 8002f18:	f7fe fa62 	bl	80013e0 <HAL_UART_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <MX_USART3_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f22:	21e5      	movs	r1, #229	; 0xe5
 8002f24:	4804      	ldr	r0, [pc, #16]	; (8002f38 <MX_USART3_UART_Init+0x58>)
 8002f26:	f000 f865 	bl	8002ff4 <_Error_Handler>
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20003dec 	.word	0x20003dec
 8002f34:	40004800 	.word	0x40004800
 8002f38:	08003bfc 	.word	0x08003bfc

08002f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4a19      	ldr	r2, [pc, #100]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <MX_GPIO_Init+0x70>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <MX_GPIO_Init+0x74>)
 8002f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <MX_GPIO_Init+0x78>)
 8002f8e:	f7fd fc41 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	2006      	movs	r0, #6
 8002f98:	f7fd fbe9 	bl	800076e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f9c:	2006      	movs	r0, #6
 8002f9e:	f7fd fc02 	bl	80007a6 <HAL_NVIC_EnableIRQ>

}
 8002fa2:	bf00      	nop
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	10110000 	.word	0x10110000
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fe fd9f 	bl	8001b04 <osDelay>
 8002fc6:	e7fb      	b.n	8002fc0 <StartDefaultTask+0x8>

08002fc8 <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 5 */ 
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
//This function is the callback of the interruption produce by the on board button
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8002fd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fd6:	f7fd fde1 	bl	8000b9c <HAL_PWR_DisableWakeUpPin>

  printf("Interruption\r\n");
 8002fda:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <HAL_GPIO_EXTI_Callback+0x28>)
 8002fdc:	f000 f9a6 	bl	800332c <puts>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fe4:	f7fd fdc8 	bl	8000b78 <HAL_PWR_EnableWakeUpPin>

}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	08003c0c 	.word	0x08003c0c

08002ff4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002ffe:	e7fe      	b.n	8002ffe <_Error_Handler+0xa>

08003000 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <HAL_MspInit+0xa0>)
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_MspInit+0xa0>)
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_MspInit+0xa0>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <HAL_MspInit+0xa0>)
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_MspInit+0xa0>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_MspInit+0xa0>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f7fd fb8a 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	f06f 000b 	mvn.w	r0, #11
 800304c:	f7fd fb8f 	bl	800076e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	f06f 000a 	mvn.w	r0, #10
 8003058:	f7fd fb89 	bl	800076e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800305c:	2200      	movs	r2, #0
 800305e:	2100      	movs	r1, #0
 8003060:	f06f 0009 	mvn.w	r0, #9
 8003064:	f7fd fb83 	bl	800076e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	f06f 0004 	mvn.w	r0, #4
 8003070:	f7fd fb7d 	bl	800076e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	f06f 0003 	mvn.w	r0, #3
 800307c:	f7fd fb77 	bl	800076e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	210f      	movs	r1, #15
 8003084:	f06f 0001 	mvn.w	r0, #1
 8003088:	f7fd fb71 	bl	800076e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003094:	f7fd fb6b 	bl	800076e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_UART_MspInit+0x58>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11e      	bne.n	80030f4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_UART_MspInit+0x5c>)
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_UART_MspInit+0x5c>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_UART_MspInit+0x5c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030dc:	2301      	movs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e4:	2307      	movs	r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4619      	mov	r1, r3
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <HAL_UART_MspInit+0x60>)
 80030f0:	f7fd fb90 	bl	8000814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030f4:	bf00      	nop
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40004800 	.word	0x40004800
 8003100:	40023800 	.word	0x40023800
 8003104:	40020400 	.word	0x40020400

08003108 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <HardFault_Handler+0x4>

0800311c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <MemManage_Handler+0x4>

08003122 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <BusFault_Handler+0x4>

08003128 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <UsageFault_Handler+0x4>

0800312e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003140:	f7fd fa20 	bl	8000584 <HAL_IncTick>
  osSystickHandler();
 8003144:	f7fe fcf2 	bl	8001b2c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003150:	2001      	movs	r0, #1
 8003152:	f7fd fcf9 	bl	8000b48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <SystemInit+0x60>)
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <SystemInit+0x60>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800316c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <SystemInit+0x64>)
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <SystemInit+0x64>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <SystemInit+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003182:	4a0f      	ldr	r2, [pc, #60]	; (80031c0 <SystemInit+0x64>)
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <SystemInit+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <SystemInit+0x64>)
 8003194:	4a0b      	ldr	r2, [pc, #44]	; (80031c4 <SystemInit+0x68>)
 8003196:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <SystemInit+0x64>)
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <SystemInit+0x64>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <SystemInit+0x64>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <SystemInit+0x60>)
 80031ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031b0:	609a      	str	r2, [r3, #8]
#endif
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	24003010 	.word	0x24003010

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ce:	e003      	b.n	80031d8 <LoopCopyDataInit>

080031d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031d6:	3104      	adds	r1, #4

080031d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031d8:	480b      	ldr	r0, [pc, #44]	; (8003208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031e0:	d3f6      	bcc.n	80031d0 <CopyDataInit>
  ldr  r2, =_sbss
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031e4:	e002      	b.n	80031ec <LoopFillZerobss>

080031e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031e8:	f842 3b04 	str.w	r3, [r2], #4

080031ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031f0:	d3f9      	bcc.n	80031e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031f2:	f7ff ffb3 	bl	800315c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f6:	f000 f811 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fa:	f7ff fde5 	bl	8002dc8 <main>
  bx  lr    
 80031fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003204:	08003ca8 	.word	0x08003ca8
  ldr  r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800320c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003210:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8003214:	20003e34 	.word	0x20003e34

08003218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC_IRQHandler>
	...

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4e0d      	ldr	r6, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1ba4      	subs	r4, r4, r6
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2500      	movs	r5, #0
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4e0b      	ldr	r6, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f000 fcc4 	bl	8003bbc <_init>
 8003234:	1ba4      	subs	r4, r4, r6
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2500      	movs	r5, #0
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003ca0 	.word	0x08003ca0
 8003258:	08003ca0 	.word	0x08003ca0
 800325c:	08003ca0 	.word	0x08003ca0
 8003260:	08003ca4 	.word	0x08003ca4

08003264 <memset>:
 8003264:	4402      	add	r2, r0
 8003266:	4603      	mov	r3, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <_puts_r>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	460e      	mov	r6, r1
 8003278:	4605      	mov	r5, r0
 800327a:	b118      	cbz	r0, 8003284 <_puts_r+0x10>
 800327c:	6983      	ldr	r3, [r0, #24]
 800327e:	b90b      	cbnz	r3, 8003284 <_puts_r+0x10>
 8003280:	f000 fa0e 	bl	80036a0 <__sinit>
 8003284:	69ab      	ldr	r3, [r5, #24]
 8003286:	68ac      	ldr	r4, [r5, #8]
 8003288:	b913      	cbnz	r3, 8003290 <_puts_r+0x1c>
 800328a:	4628      	mov	r0, r5
 800328c:	f000 fa08 	bl	80036a0 <__sinit>
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <_puts_r+0xac>)
 8003292:	429c      	cmp	r4, r3
 8003294:	d117      	bne.n	80032c6 <_puts_r+0x52>
 8003296:	686c      	ldr	r4, [r5, #4]
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	071b      	lsls	r3, r3, #28
 800329c:	d51d      	bpl.n	80032da <_puts_r+0x66>
 800329e:	6923      	ldr	r3, [r4, #16]
 80032a0:	b1db      	cbz	r3, 80032da <_puts_r+0x66>
 80032a2:	3e01      	subs	r6, #1
 80032a4:	68a3      	ldr	r3, [r4, #8]
 80032a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	b9e9      	cbnz	r1, 80032ec <_puts_r+0x78>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da2e      	bge.n	8003312 <_puts_r+0x9e>
 80032b4:	4622      	mov	r2, r4
 80032b6:	210a      	movs	r1, #10
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f83f 	bl	800333c <__swbuf_r>
 80032be:	3001      	adds	r0, #1
 80032c0:	d011      	beq.n	80032e6 <_puts_r+0x72>
 80032c2:	200a      	movs	r0, #10
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
 80032c6:	4b17      	ldr	r3, [pc, #92]	; (8003324 <_puts_r+0xb0>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	d101      	bne.n	80032d0 <_puts_r+0x5c>
 80032cc:	68ac      	ldr	r4, [r5, #8]
 80032ce:	e7e3      	b.n	8003298 <_puts_r+0x24>
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <_puts_r+0xb4>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	bf08      	it	eq
 80032d6:	68ec      	ldreq	r4, [r5, #12]
 80032d8:	e7de      	b.n	8003298 <_puts_r+0x24>
 80032da:	4621      	mov	r1, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f87f 	bl	80033e0 <__swsetup_r>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d0dd      	beq.n	80032a2 <_puts_r+0x2e>
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da04      	bge.n	80032fa <_puts_r+0x86>
 80032f0:	69a2      	ldr	r2, [r4, #24]
 80032f2:	4293      	cmp	r3, r2
 80032f4:	db06      	blt.n	8003304 <_puts_r+0x90>
 80032f6:	290a      	cmp	r1, #10
 80032f8:	d004      	beq.n	8003304 <_puts_r+0x90>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	6022      	str	r2, [r4, #0]
 8003300:	7019      	strb	r1, [r3, #0]
 8003302:	e7cf      	b.n	80032a4 <_puts_r+0x30>
 8003304:	4622      	mov	r2, r4
 8003306:	4628      	mov	r0, r5
 8003308:	f000 f818 	bl	800333c <__swbuf_r>
 800330c:	3001      	adds	r0, #1
 800330e:	d1c9      	bne.n	80032a4 <_puts_r+0x30>
 8003310:	e7e9      	b.n	80032e6 <_puts_r+0x72>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	200a      	movs	r0, #10
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	7018      	strb	r0, [r3, #0]
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	bf00      	nop
 8003320:	08003c54 	.word	0x08003c54
 8003324:	08003c74 	.word	0x08003c74
 8003328:	08003c34 	.word	0x08003c34

0800332c <puts>:
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <puts+0xc>)
 800332e:	4601      	mov	r1, r0
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f7ff bf9f 	b.w	8003274 <_puts_r>
 8003336:	bf00      	nop
 8003338:	20000010 	.word	0x20000010

0800333c <__swbuf_r>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	460e      	mov	r6, r1
 8003340:	4614      	mov	r4, r2
 8003342:	4605      	mov	r5, r0
 8003344:	b118      	cbz	r0, 800334e <__swbuf_r+0x12>
 8003346:	6983      	ldr	r3, [r0, #24]
 8003348:	b90b      	cbnz	r3, 800334e <__swbuf_r+0x12>
 800334a:	f000 f9a9 	bl	80036a0 <__sinit>
 800334e:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <__swbuf_r+0x98>)
 8003350:	429c      	cmp	r4, r3
 8003352:	d12a      	bne.n	80033aa <__swbuf_r+0x6e>
 8003354:	686c      	ldr	r4, [r5, #4]
 8003356:	69a3      	ldr	r3, [r4, #24]
 8003358:	60a3      	str	r3, [r4, #8]
 800335a:	89a3      	ldrh	r3, [r4, #12]
 800335c:	071a      	lsls	r2, r3, #28
 800335e:	d52e      	bpl.n	80033be <__swbuf_r+0x82>
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	b363      	cbz	r3, 80033be <__swbuf_r+0x82>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	1ac0      	subs	r0, r0, r3
 800336a:	6963      	ldr	r3, [r4, #20]
 800336c:	b2f6      	uxtb	r6, r6
 800336e:	4298      	cmp	r0, r3
 8003370:	4637      	mov	r7, r6
 8003372:	db04      	blt.n	800337e <__swbuf_r+0x42>
 8003374:	4621      	mov	r1, r4
 8003376:	4628      	mov	r0, r5
 8003378:	f000 f928 	bl	80035cc <_fflush_r>
 800337c:	bb28      	cbnz	r0, 80033ca <__swbuf_r+0x8e>
 800337e:	68a3      	ldr	r3, [r4, #8]
 8003380:	3b01      	subs	r3, #1
 8003382:	60a3      	str	r3, [r4, #8]
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	6022      	str	r2, [r4, #0]
 800338a:	701e      	strb	r6, [r3, #0]
 800338c:	6963      	ldr	r3, [r4, #20]
 800338e:	3001      	adds	r0, #1
 8003390:	4298      	cmp	r0, r3
 8003392:	d004      	beq.n	800339e <__swbuf_r+0x62>
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	07db      	lsls	r3, r3, #31
 8003398:	d519      	bpl.n	80033ce <__swbuf_r+0x92>
 800339a:	2e0a      	cmp	r6, #10
 800339c:	d117      	bne.n	80033ce <__swbuf_r+0x92>
 800339e:	4621      	mov	r1, r4
 80033a0:	4628      	mov	r0, r5
 80033a2:	f000 f913 	bl	80035cc <_fflush_r>
 80033a6:	b190      	cbz	r0, 80033ce <__swbuf_r+0x92>
 80033a8:	e00f      	b.n	80033ca <__swbuf_r+0x8e>
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <__swbuf_r+0x9c>)
 80033ac:	429c      	cmp	r4, r3
 80033ae:	d101      	bne.n	80033b4 <__swbuf_r+0x78>
 80033b0:	68ac      	ldr	r4, [r5, #8]
 80033b2:	e7d0      	b.n	8003356 <__swbuf_r+0x1a>
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <__swbuf_r+0xa0>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	bf08      	it	eq
 80033ba:	68ec      	ldreq	r4, [r5, #12]
 80033bc:	e7cb      	b.n	8003356 <__swbuf_r+0x1a>
 80033be:	4621      	mov	r1, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	f000 f80d 	bl	80033e0 <__swsetup_r>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d0cc      	beq.n	8003364 <__swbuf_r+0x28>
 80033ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80033ce:	4638      	mov	r0, r7
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08003c54 	.word	0x08003c54
 80033d8:	08003c74 	.word	0x08003c74
 80033dc:	08003c34 	.word	0x08003c34

080033e0 <__swsetup_r>:
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <__swsetup_r+0xcc>)
 80033e2:	b570      	push	{r4, r5, r6, lr}
 80033e4:	681d      	ldr	r5, [r3, #0]
 80033e6:	4606      	mov	r6, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	b125      	cbz	r5, 80033f6 <__swsetup_r+0x16>
 80033ec:	69ab      	ldr	r3, [r5, #24]
 80033ee:	b913      	cbnz	r3, 80033f6 <__swsetup_r+0x16>
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 f955 	bl	80036a0 <__sinit>
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <__swsetup_r+0xd0>)
 80033f8:	429c      	cmp	r4, r3
 80033fa:	d10f      	bne.n	800341c <__swsetup_r+0x3c>
 80033fc:	686c      	ldr	r4, [r5, #4]
 80033fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003402:	b29a      	uxth	r2, r3
 8003404:	0715      	lsls	r5, r2, #28
 8003406:	d42c      	bmi.n	8003462 <__swsetup_r+0x82>
 8003408:	06d0      	lsls	r0, r2, #27
 800340a:	d411      	bmi.n	8003430 <__swsetup_r+0x50>
 800340c:	2209      	movs	r2, #9
 800340e:	6032      	str	r2, [r6, #0]
 8003410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <__swsetup_r+0xd4>)
 800341e:	429c      	cmp	r4, r3
 8003420:	d101      	bne.n	8003426 <__swsetup_r+0x46>
 8003422:	68ac      	ldr	r4, [r5, #8]
 8003424:	e7eb      	b.n	80033fe <__swsetup_r+0x1e>
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <__swsetup_r+0xd8>)
 8003428:	429c      	cmp	r4, r3
 800342a:	bf08      	it	eq
 800342c:	68ec      	ldreq	r4, [r5, #12]
 800342e:	e7e6      	b.n	80033fe <__swsetup_r+0x1e>
 8003430:	0751      	lsls	r1, r2, #29
 8003432:	d512      	bpl.n	800345a <__swsetup_r+0x7a>
 8003434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003436:	b141      	cbz	r1, 800344a <__swsetup_r+0x6a>
 8003438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800343c:	4299      	cmp	r1, r3
 800343e:	d002      	beq.n	8003446 <__swsetup_r+0x66>
 8003440:	4630      	mov	r0, r6
 8003442:	f000 fa1b 	bl	800387c <_free_r>
 8003446:	2300      	movs	r3, #0
 8003448:	6363      	str	r3, [r4, #52]	; 0x34
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003450:	81a3      	strh	r3, [r4, #12]
 8003452:	2300      	movs	r3, #0
 8003454:	6063      	str	r3, [r4, #4]
 8003456:	6923      	ldr	r3, [r4, #16]
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	81a3      	strh	r3, [r4, #12]
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	b94b      	cbnz	r3, 800347a <__swsetup_r+0x9a>
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d003      	beq.n	800347a <__swsetup_r+0x9a>
 8003472:	4621      	mov	r1, r4
 8003474:	4630      	mov	r0, r6
 8003476:	f000 f9c1 	bl	80037fc <__smakebuf_r>
 800347a:	89a2      	ldrh	r2, [r4, #12]
 800347c:	f012 0301 	ands.w	r3, r2, #1
 8003480:	d00c      	beq.n	800349c <__swsetup_r+0xbc>
 8003482:	2300      	movs	r3, #0
 8003484:	60a3      	str	r3, [r4, #8]
 8003486:	6963      	ldr	r3, [r4, #20]
 8003488:	425b      	negs	r3, r3
 800348a:	61a3      	str	r3, [r4, #24]
 800348c:	6923      	ldr	r3, [r4, #16]
 800348e:	b953      	cbnz	r3, 80034a6 <__swsetup_r+0xc6>
 8003490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003494:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003498:	d1ba      	bne.n	8003410 <__swsetup_r+0x30>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	0792      	lsls	r2, r2, #30
 800349e:	bf58      	it	pl
 80034a0:	6963      	ldrpl	r3, [r4, #20]
 80034a2:	60a3      	str	r3, [r4, #8]
 80034a4:	e7f2      	b.n	800348c <__swsetup_r+0xac>
 80034a6:	2000      	movs	r0, #0
 80034a8:	e7f7      	b.n	800349a <__swsetup_r+0xba>
 80034aa:	bf00      	nop
 80034ac:	20000010 	.word	0x20000010
 80034b0:	08003c54 	.word	0x08003c54
 80034b4:	08003c74 	.word	0x08003c74
 80034b8:	08003c34 	.word	0x08003c34

080034bc <__sflush_r>:
 80034bc:	898a      	ldrh	r2, [r1, #12]
 80034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	4605      	mov	r5, r0
 80034c4:	0710      	lsls	r0, r2, #28
 80034c6:	460c      	mov	r4, r1
 80034c8:	d45a      	bmi.n	8003580 <__sflush_r+0xc4>
 80034ca:	684b      	ldr	r3, [r1, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	dc05      	bgt.n	80034dc <__sflush_r+0x20>
 80034d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	dc02      	bgt.n	80034dc <__sflush_r+0x20>
 80034d6:	2000      	movs	r0, #0
 80034d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034de:	2e00      	cmp	r6, #0
 80034e0:	d0f9      	beq.n	80034d6 <__sflush_r+0x1a>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034e8:	682f      	ldr	r7, [r5, #0]
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	d033      	beq.n	8003556 <__sflush_r+0x9a>
 80034ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	075a      	lsls	r2, r3, #29
 80034f4:	d505      	bpl.n	8003502 <__sflush_r+0x46>
 80034f6:	6863      	ldr	r3, [r4, #4]
 80034f8:	1ac0      	subs	r0, r0, r3
 80034fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034fc:	b10b      	cbz	r3, 8003502 <__sflush_r+0x46>
 80034fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003500:	1ac0      	subs	r0, r0, r3
 8003502:	2300      	movs	r3, #0
 8003504:	4602      	mov	r2, r0
 8003506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003508:	6a21      	ldr	r1, [r4, #32]
 800350a:	4628      	mov	r0, r5
 800350c:	47b0      	blx	r6
 800350e:	1c43      	adds	r3, r0, #1
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	d106      	bne.n	8003522 <__sflush_r+0x66>
 8003514:	6829      	ldr	r1, [r5, #0]
 8003516:	291d      	cmp	r1, #29
 8003518:	d84b      	bhi.n	80035b2 <__sflush_r+0xf6>
 800351a:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <__sflush_r+0x10c>)
 800351c:	40ca      	lsrs	r2, r1
 800351e:	07d6      	lsls	r6, r2, #31
 8003520:	d547      	bpl.n	80035b2 <__sflush_r+0xf6>
 8003522:	2200      	movs	r2, #0
 8003524:	6062      	str	r2, [r4, #4]
 8003526:	04d9      	lsls	r1, r3, #19
 8003528:	6922      	ldr	r2, [r4, #16]
 800352a:	6022      	str	r2, [r4, #0]
 800352c:	d504      	bpl.n	8003538 <__sflush_r+0x7c>
 800352e:	1c42      	adds	r2, r0, #1
 8003530:	d101      	bne.n	8003536 <__sflush_r+0x7a>
 8003532:	682b      	ldr	r3, [r5, #0]
 8003534:	b903      	cbnz	r3, 8003538 <__sflush_r+0x7c>
 8003536:	6560      	str	r0, [r4, #84]	; 0x54
 8003538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800353a:	602f      	str	r7, [r5, #0]
 800353c:	2900      	cmp	r1, #0
 800353e:	d0ca      	beq.n	80034d6 <__sflush_r+0x1a>
 8003540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003544:	4299      	cmp	r1, r3
 8003546:	d002      	beq.n	800354e <__sflush_r+0x92>
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f997 	bl	800387c <_free_r>
 800354e:	2000      	movs	r0, #0
 8003550:	6360      	str	r0, [r4, #52]	; 0x34
 8003552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003556:	6a21      	ldr	r1, [r4, #32]
 8003558:	2301      	movs	r3, #1
 800355a:	4628      	mov	r0, r5
 800355c:	47b0      	blx	r6
 800355e:	1c41      	adds	r1, r0, #1
 8003560:	d1c6      	bne.n	80034f0 <__sflush_r+0x34>
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0c3      	beq.n	80034f0 <__sflush_r+0x34>
 8003568:	2b1d      	cmp	r3, #29
 800356a:	d001      	beq.n	8003570 <__sflush_r+0xb4>
 800356c:	2b16      	cmp	r3, #22
 800356e:	d101      	bne.n	8003574 <__sflush_r+0xb8>
 8003570:	602f      	str	r7, [r5, #0]
 8003572:	e7b0      	b.n	80034d6 <__sflush_r+0x1a>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003580:	690f      	ldr	r7, [r1, #16]
 8003582:	2f00      	cmp	r7, #0
 8003584:	d0a7      	beq.n	80034d6 <__sflush_r+0x1a>
 8003586:	0793      	lsls	r3, r2, #30
 8003588:	680e      	ldr	r6, [r1, #0]
 800358a:	bf08      	it	eq
 800358c:	694b      	ldreq	r3, [r1, #20]
 800358e:	600f      	str	r7, [r1, #0]
 8003590:	bf18      	it	ne
 8003592:	2300      	movne	r3, #0
 8003594:	eba6 0807 	sub.w	r8, r6, r7
 8003598:	608b      	str	r3, [r1, #8]
 800359a:	f1b8 0f00 	cmp.w	r8, #0
 800359e:	dd9a      	ble.n	80034d6 <__sflush_r+0x1a>
 80035a0:	4643      	mov	r3, r8
 80035a2:	463a      	mov	r2, r7
 80035a4:	6a21      	ldr	r1, [r4, #32]
 80035a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b0      	blx	r6
 80035ac:	2800      	cmp	r0, #0
 80035ae:	dc07      	bgt.n	80035c0 <__sflush_r+0x104>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c0:	4407      	add	r7, r0
 80035c2:	eba8 0800 	sub.w	r8, r8, r0
 80035c6:	e7e8      	b.n	800359a <__sflush_r+0xde>
 80035c8:	20400001 	.word	0x20400001

080035cc <_fflush_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	4605      	mov	r5, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	b1db      	cbz	r3, 800360e <_fflush_r+0x42>
 80035d6:	b118      	cbz	r0, 80035e0 <_fflush_r+0x14>
 80035d8:	6983      	ldr	r3, [r0, #24]
 80035da:	b90b      	cbnz	r3, 80035e0 <_fflush_r+0x14>
 80035dc:	f000 f860 	bl	80036a0 <__sinit>
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <_fflush_r+0x48>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d109      	bne.n	80035fa <_fflush_r+0x2e>
 80035e6:	686c      	ldr	r4, [r5, #4]
 80035e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ec:	b17b      	cbz	r3, 800360e <_fflush_r+0x42>
 80035ee:	4621      	mov	r1, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f6:	f7ff bf61 	b.w	80034bc <__sflush_r>
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <_fflush_r+0x4c>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	d101      	bne.n	8003604 <_fflush_r+0x38>
 8003600:	68ac      	ldr	r4, [r5, #8]
 8003602:	e7f1      	b.n	80035e8 <_fflush_r+0x1c>
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <_fflush_r+0x50>)
 8003606:	429c      	cmp	r4, r3
 8003608:	bf08      	it	eq
 800360a:	68ec      	ldreq	r4, [r5, #12]
 800360c:	e7ec      	b.n	80035e8 <_fflush_r+0x1c>
 800360e:	2000      	movs	r0, #0
 8003610:	bd38      	pop	{r3, r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	08003c54 	.word	0x08003c54
 8003618:	08003c74 	.word	0x08003c74
 800361c:	08003c34 	.word	0x08003c34

08003620 <_cleanup_r>:
 8003620:	4901      	ldr	r1, [pc, #4]	; (8003628 <_cleanup_r+0x8>)
 8003622:	f000 b8a9 	b.w	8003778 <_fwalk_reent>
 8003626:	bf00      	nop
 8003628:	080035cd 	.word	0x080035cd

0800362c <std.isra.0>:
 800362c:	2300      	movs	r3, #0
 800362e:	b510      	push	{r4, lr}
 8003630:	4604      	mov	r4, r0
 8003632:	6003      	str	r3, [r0, #0]
 8003634:	6043      	str	r3, [r0, #4]
 8003636:	6083      	str	r3, [r0, #8]
 8003638:	8181      	strh	r1, [r0, #12]
 800363a:	6643      	str	r3, [r0, #100]	; 0x64
 800363c:	81c2      	strh	r2, [r0, #14]
 800363e:	6103      	str	r3, [r0, #16]
 8003640:	6143      	str	r3, [r0, #20]
 8003642:	6183      	str	r3, [r0, #24]
 8003644:	4619      	mov	r1, r3
 8003646:	2208      	movs	r2, #8
 8003648:	305c      	adds	r0, #92	; 0x5c
 800364a:	f7ff fe0b 	bl	8003264 <memset>
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <std.isra.0+0x38>)
 8003650:	6263      	str	r3, [r4, #36]	; 0x24
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <std.isra.0+0x3c>)
 8003654:	62a3      	str	r3, [r4, #40]	; 0x28
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <std.isra.0+0x40>)
 8003658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <std.isra.0+0x44>)
 800365c:	6224      	str	r4, [r4, #32]
 800365e:	6323      	str	r3, [r4, #48]	; 0x30
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	080039f5 	.word	0x080039f5
 8003668:	08003a17 	.word	0x08003a17
 800366c:	08003a4f 	.word	0x08003a4f
 8003670:	08003a73 	.word	0x08003a73

08003674 <__sfmoreglue>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	1e4a      	subs	r2, r1, #1
 8003678:	2568      	movs	r5, #104	; 0x68
 800367a:	4355      	muls	r5, r2
 800367c:	460e      	mov	r6, r1
 800367e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003682:	f000 f949 	bl	8003918 <_malloc_r>
 8003686:	4604      	mov	r4, r0
 8003688:	b140      	cbz	r0, 800369c <__sfmoreglue+0x28>
 800368a:	2100      	movs	r1, #0
 800368c:	e880 0042 	stmia.w	r0, {r1, r6}
 8003690:	300c      	adds	r0, #12
 8003692:	60a0      	str	r0, [r4, #8]
 8003694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003698:	f7ff fde4 	bl	8003264 <memset>
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}

080036a0 <__sinit>:
 80036a0:	6983      	ldr	r3, [r0, #24]
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4604      	mov	r4, r0
 80036a6:	bb33      	cbnz	r3, 80036f6 <__sinit+0x56>
 80036a8:	6483      	str	r3, [r0, #72]	; 0x48
 80036aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80036ac:	6503      	str	r3, [r0, #80]	; 0x50
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <__sinit+0x58>)
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <__sinit+0x5c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6282      	str	r2, [r0, #40]	; 0x28
 80036b6:	4298      	cmp	r0, r3
 80036b8:	bf04      	itt	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	6183      	streq	r3, [r0, #24]
 80036be:	f000 f81f 	bl	8003700 <__sfp>
 80036c2:	6060      	str	r0, [r4, #4]
 80036c4:	4620      	mov	r0, r4
 80036c6:	f000 f81b 	bl	8003700 <__sfp>
 80036ca:	60a0      	str	r0, [r4, #8]
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 f817 	bl	8003700 <__sfp>
 80036d2:	2200      	movs	r2, #0
 80036d4:	60e0      	str	r0, [r4, #12]
 80036d6:	2104      	movs	r1, #4
 80036d8:	6860      	ldr	r0, [r4, #4]
 80036da:	f7ff ffa7 	bl	800362c <std.isra.0>
 80036de:	2201      	movs	r2, #1
 80036e0:	2109      	movs	r1, #9
 80036e2:	68a0      	ldr	r0, [r4, #8]
 80036e4:	f7ff ffa2 	bl	800362c <std.isra.0>
 80036e8:	2202      	movs	r2, #2
 80036ea:	2112      	movs	r1, #18
 80036ec:	68e0      	ldr	r0, [r4, #12]
 80036ee:	f7ff ff9d 	bl	800362c <std.isra.0>
 80036f2:	2301      	movs	r3, #1
 80036f4:	61a3      	str	r3, [r4, #24]
 80036f6:	bd10      	pop	{r4, pc}
 80036f8:	08003c94 	.word	0x08003c94
 80036fc:	08003621 	.word	0x08003621

08003700 <__sfp>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <__sfp+0x74>)
 8003704:	681e      	ldr	r6, [r3, #0]
 8003706:	69b3      	ldr	r3, [r6, #24]
 8003708:	4607      	mov	r7, r0
 800370a:	b913      	cbnz	r3, 8003712 <__sfp+0x12>
 800370c:	4630      	mov	r0, r6
 800370e:	f7ff ffc7 	bl	80036a0 <__sinit>
 8003712:	3648      	adds	r6, #72	; 0x48
 8003714:	68b4      	ldr	r4, [r6, #8]
 8003716:	6873      	ldr	r3, [r6, #4]
 8003718:	3b01      	subs	r3, #1
 800371a:	d503      	bpl.n	8003724 <__sfp+0x24>
 800371c:	6833      	ldr	r3, [r6, #0]
 800371e:	b133      	cbz	r3, 800372e <__sfp+0x2e>
 8003720:	6836      	ldr	r6, [r6, #0]
 8003722:	e7f7      	b.n	8003714 <__sfp+0x14>
 8003724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003728:	b16d      	cbz	r5, 8003746 <__sfp+0x46>
 800372a:	3468      	adds	r4, #104	; 0x68
 800372c:	e7f4      	b.n	8003718 <__sfp+0x18>
 800372e:	2104      	movs	r1, #4
 8003730:	4638      	mov	r0, r7
 8003732:	f7ff ff9f 	bl	8003674 <__sfmoreglue>
 8003736:	6030      	str	r0, [r6, #0]
 8003738:	2800      	cmp	r0, #0
 800373a:	d1f1      	bne.n	8003720 <__sfp+0x20>
 800373c:	230c      	movs	r3, #12
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4604      	mov	r4, r0
 8003742:	4620      	mov	r0, r4
 8003744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374a:	81e3      	strh	r3, [r4, #14]
 800374c:	2301      	movs	r3, #1
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	6665      	str	r5, [r4, #100]	; 0x64
 8003752:	6025      	str	r5, [r4, #0]
 8003754:	60a5      	str	r5, [r4, #8]
 8003756:	6065      	str	r5, [r4, #4]
 8003758:	6125      	str	r5, [r4, #16]
 800375a:	6165      	str	r5, [r4, #20]
 800375c:	61a5      	str	r5, [r4, #24]
 800375e:	2208      	movs	r2, #8
 8003760:	4629      	mov	r1, r5
 8003762:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003766:	f7ff fd7d 	bl	8003264 <memset>
 800376a:	6365      	str	r5, [r4, #52]	; 0x34
 800376c:	63a5      	str	r5, [r4, #56]	; 0x38
 800376e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003770:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003772:	e7e6      	b.n	8003742 <__sfp+0x42>
 8003774:	08003c94 	.word	0x08003c94

08003778 <_fwalk_reent>:
 8003778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800377c:	4680      	mov	r8, r0
 800377e:	4689      	mov	r9, r1
 8003780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003784:	2600      	movs	r6, #0
 8003786:	b914      	cbnz	r4, 800378e <_fwalk_reent+0x16>
 8003788:	4630      	mov	r0, r6
 800378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378e:	68a5      	ldr	r5, [r4, #8]
 8003790:	6867      	ldr	r7, [r4, #4]
 8003792:	3f01      	subs	r7, #1
 8003794:	d501      	bpl.n	800379a <_fwalk_reent+0x22>
 8003796:	6824      	ldr	r4, [r4, #0]
 8003798:	e7f5      	b.n	8003786 <_fwalk_reent+0xe>
 800379a:	89ab      	ldrh	r3, [r5, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d907      	bls.n	80037b0 <_fwalk_reent+0x38>
 80037a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037a4:	3301      	adds	r3, #1
 80037a6:	d003      	beq.n	80037b0 <_fwalk_reent+0x38>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4640      	mov	r0, r8
 80037ac:	47c8      	blx	r9
 80037ae:	4306      	orrs	r6, r0
 80037b0:	3568      	adds	r5, #104	; 0x68
 80037b2:	e7ee      	b.n	8003792 <_fwalk_reent+0x1a>

080037b4 <__swhatbuf_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	460e      	mov	r6, r1
 80037b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037bc:	2900      	cmp	r1, #0
 80037be:	b090      	sub	sp, #64	; 0x40
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	da07      	bge.n	80037d6 <__swhatbuf_r+0x22>
 80037c6:	2300      	movs	r3, #0
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	89b3      	ldrh	r3, [r6, #12]
 80037cc:	061a      	lsls	r2, r3, #24
 80037ce:	d410      	bmi.n	80037f2 <__swhatbuf_r+0x3e>
 80037d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d4:	e00e      	b.n	80037f4 <__swhatbuf_r+0x40>
 80037d6:	aa01      	add	r2, sp, #4
 80037d8:	f000 f972 	bl	8003ac0 <_fstat_r>
 80037dc:	2800      	cmp	r0, #0
 80037de:	dbf2      	blt.n	80037c6 <__swhatbuf_r+0x12>
 80037e0:	9a02      	ldr	r2, [sp, #8]
 80037e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037ea:	425a      	negs	r2, r3
 80037ec:	415a      	adcs	r2, r3
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	e7ee      	b.n	80037d0 <__swhatbuf_r+0x1c>
 80037f2:	2340      	movs	r3, #64	; 0x40
 80037f4:	2000      	movs	r0, #0
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	b010      	add	sp, #64	; 0x40
 80037fa:	bd70      	pop	{r4, r5, r6, pc}

080037fc <__smakebuf_r>:
 80037fc:	898b      	ldrh	r3, [r1, #12]
 80037fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003800:	079d      	lsls	r5, r3, #30
 8003802:	4606      	mov	r6, r0
 8003804:	460c      	mov	r4, r1
 8003806:	d507      	bpl.n	8003818 <__smakebuf_r+0x1c>
 8003808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	2301      	movs	r3, #1
 8003812:	6163      	str	r3, [r4, #20]
 8003814:	b002      	add	sp, #8
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	ab01      	add	r3, sp, #4
 800381a:	466a      	mov	r2, sp
 800381c:	f7ff ffca 	bl	80037b4 <__swhatbuf_r>
 8003820:	9900      	ldr	r1, [sp, #0]
 8003822:	4605      	mov	r5, r0
 8003824:	4630      	mov	r0, r6
 8003826:	f000 f877 	bl	8003918 <_malloc_r>
 800382a:	b948      	cbnz	r0, 8003840 <__smakebuf_r+0x44>
 800382c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003830:	059a      	lsls	r2, r3, #22
 8003832:	d4ef      	bmi.n	8003814 <__smakebuf_r+0x18>
 8003834:	f023 0303 	bic.w	r3, r3, #3
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	e7e3      	b.n	8003808 <__smakebuf_r+0xc>
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <__smakebuf_r+0x7c>)
 8003842:	62b3      	str	r3, [r6, #40]	; 0x28
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	6020      	str	r0, [r4, #0]
 8003848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	9b00      	ldr	r3, [sp, #0]
 8003850:	6163      	str	r3, [r4, #20]
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	6120      	str	r0, [r4, #16]
 8003856:	b15b      	cbz	r3, 8003870 <__smakebuf_r+0x74>
 8003858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800385c:	4630      	mov	r0, r6
 800385e:	f000 f941 	bl	8003ae4 <_isatty_r>
 8003862:	b128      	cbz	r0, 8003870 <__smakebuf_r+0x74>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	431d      	orrs	r5, r3
 8003874:	81a5      	strh	r5, [r4, #12]
 8003876:	e7cd      	b.n	8003814 <__smakebuf_r+0x18>
 8003878:	08003621 	.word	0x08003621

0800387c <_free_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4605      	mov	r5, r0
 8003880:	2900      	cmp	r1, #0
 8003882:	d045      	beq.n	8003910 <_free_r+0x94>
 8003884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003888:	1f0c      	subs	r4, r1, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfb8      	it	lt
 800388e:	18e4      	addlt	r4, r4, r3
 8003890:	f000 f94a 	bl	8003b28 <__malloc_lock>
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <_free_r+0x98>)
 8003896:	6813      	ldr	r3, [r2, #0]
 8003898:	4610      	mov	r0, r2
 800389a:	b933      	cbnz	r3, 80038aa <_free_r+0x2e>
 800389c:	6063      	str	r3, [r4, #4]
 800389e:	6014      	str	r4, [r2, #0]
 80038a0:	4628      	mov	r0, r5
 80038a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a6:	f000 b940 	b.w	8003b2a <__malloc_unlock>
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	d90c      	bls.n	80038c8 <_free_r+0x4c>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	1862      	adds	r2, r4, r1
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bf04      	itt	eq
 80038b6:	681a      	ldreq	r2, [r3, #0]
 80038b8:	685b      	ldreq	r3, [r3, #4]
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	bf04      	itt	eq
 80038be:	1852      	addeq	r2, r2, r1
 80038c0:	6022      	streq	r2, [r4, #0]
 80038c2:	6004      	str	r4, [r0, #0]
 80038c4:	e7ec      	b.n	80038a0 <_free_r+0x24>
 80038c6:	4613      	mov	r3, r2
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	b10a      	cbz	r2, 80038d0 <_free_r+0x54>
 80038cc:	42a2      	cmp	r2, r4
 80038ce:	d9fa      	bls.n	80038c6 <_free_r+0x4a>
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	1858      	adds	r0, r3, r1
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d10b      	bne.n	80038f0 <_free_r+0x74>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	4401      	add	r1, r0
 80038dc:	1858      	adds	r0, r3, r1
 80038de:	4282      	cmp	r2, r0
 80038e0:	6019      	str	r1, [r3, #0]
 80038e2:	d1dd      	bne.n	80038a0 <_free_r+0x24>
 80038e4:	6810      	ldr	r0, [r2, #0]
 80038e6:	6852      	ldr	r2, [r2, #4]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	4401      	add	r1, r0
 80038ec:	6019      	str	r1, [r3, #0]
 80038ee:	e7d7      	b.n	80038a0 <_free_r+0x24>
 80038f0:	d902      	bls.n	80038f8 <_free_r+0x7c>
 80038f2:	230c      	movs	r3, #12
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	e7d3      	b.n	80038a0 <_free_r+0x24>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	1821      	adds	r1, r4, r0
 80038fc:	428a      	cmp	r2, r1
 80038fe:	bf04      	itt	eq
 8003900:	6811      	ldreq	r1, [r2, #0]
 8003902:	6852      	ldreq	r2, [r2, #4]
 8003904:	6062      	str	r2, [r4, #4]
 8003906:	bf04      	itt	eq
 8003908:	1809      	addeq	r1, r1, r0
 800390a:	6021      	streq	r1, [r4, #0]
 800390c:	605c      	str	r4, [r3, #4]
 800390e:	e7c7      	b.n	80038a0 <_free_r+0x24>
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	bf00      	nop
 8003914:	20003ddc 	.word	0x20003ddc

08003918 <_malloc_r>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	1ccd      	adds	r5, r1, #3
 800391c:	f025 0503 	bic.w	r5, r5, #3
 8003920:	3508      	adds	r5, #8
 8003922:	2d0c      	cmp	r5, #12
 8003924:	bf38      	it	cc
 8003926:	250c      	movcc	r5, #12
 8003928:	2d00      	cmp	r5, #0
 800392a:	4606      	mov	r6, r0
 800392c:	db01      	blt.n	8003932 <_malloc_r+0x1a>
 800392e:	42a9      	cmp	r1, r5
 8003930:	d903      	bls.n	800393a <_malloc_r+0x22>
 8003932:	230c      	movs	r3, #12
 8003934:	6033      	str	r3, [r6, #0]
 8003936:	2000      	movs	r0, #0
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	f000 f8f5 	bl	8003b28 <__malloc_lock>
 800393e:	4a23      	ldr	r2, [pc, #140]	; (80039cc <_malloc_r+0xb4>)
 8003940:	6814      	ldr	r4, [r2, #0]
 8003942:	4621      	mov	r1, r4
 8003944:	b991      	cbnz	r1, 800396c <_malloc_r+0x54>
 8003946:	4c22      	ldr	r4, [pc, #136]	; (80039d0 <_malloc_r+0xb8>)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	b91b      	cbnz	r3, 8003954 <_malloc_r+0x3c>
 800394c:	4630      	mov	r0, r6
 800394e:	f000 f841 	bl	80039d4 <_sbrk_r>
 8003952:	6020      	str	r0, [r4, #0]
 8003954:	4629      	mov	r1, r5
 8003956:	4630      	mov	r0, r6
 8003958:	f000 f83c 	bl	80039d4 <_sbrk_r>
 800395c:	1c43      	adds	r3, r0, #1
 800395e:	d126      	bne.n	80039ae <_malloc_r+0x96>
 8003960:	230c      	movs	r3, #12
 8003962:	6033      	str	r3, [r6, #0]
 8003964:	4630      	mov	r0, r6
 8003966:	f000 f8e0 	bl	8003b2a <__malloc_unlock>
 800396a:	e7e4      	b.n	8003936 <_malloc_r+0x1e>
 800396c:	680b      	ldr	r3, [r1, #0]
 800396e:	1b5b      	subs	r3, r3, r5
 8003970:	d41a      	bmi.n	80039a8 <_malloc_r+0x90>
 8003972:	2b0b      	cmp	r3, #11
 8003974:	d90f      	bls.n	8003996 <_malloc_r+0x7e>
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	50cd      	str	r5, [r1, r3]
 800397a:	18cc      	adds	r4, r1, r3
 800397c:	4630      	mov	r0, r6
 800397e:	f000 f8d4 	bl	8003b2a <__malloc_unlock>
 8003982:	f104 000b 	add.w	r0, r4, #11
 8003986:	1d23      	adds	r3, r4, #4
 8003988:	f020 0007 	bic.w	r0, r0, #7
 800398c:	1ac3      	subs	r3, r0, r3
 800398e:	d01b      	beq.n	80039c8 <_malloc_r+0xb0>
 8003990:	425a      	negs	r2, r3
 8003992:	50e2      	str	r2, [r4, r3]
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	428c      	cmp	r4, r1
 8003998:	bf0d      	iteet	eq
 800399a:	6863      	ldreq	r3, [r4, #4]
 800399c:	684b      	ldrne	r3, [r1, #4]
 800399e:	6063      	strne	r3, [r4, #4]
 80039a0:	6013      	streq	r3, [r2, #0]
 80039a2:	bf18      	it	ne
 80039a4:	460c      	movne	r4, r1
 80039a6:	e7e9      	b.n	800397c <_malloc_r+0x64>
 80039a8:	460c      	mov	r4, r1
 80039aa:	6849      	ldr	r1, [r1, #4]
 80039ac:	e7ca      	b.n	8003944 <_malloc_r+0x2c>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d005      	beq.n	80039c4 <_malloc_r+0xac>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f80a 	bl	80039d4 <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0cd      	beq.n	8003960 <_malloc_r+0x48>
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	e7d9      	b.n	800397c <_malloc_r+0x64>
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
 80039ca:	bf00      	nop
 80039cc:	20003ddc 	.word	0x20003ddc
 80039d0:	20003de0 	.word	0x20003de0

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4c06      	ldr	r4, [pc, #24]	; (80039f0 <_sbrk_r+0x1c>)
 80039d8:	2300      	movs	r3, #0
 80039da:	4605      	mov	r5, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	f000 f8de 	bl	8003ba0 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20003e30 	.word	0x20003e30

080039f4 <__sread>:
 80039f4:	b510      	push	{r4, lr}
 80039f6:	460c      	mov	r4, r1
 80039f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039fc:	f000 f896 	bl	8003b2c <_read_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	bfab      	itete	ge
 8003a04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a06:	89a3      	ldrhlt	r3, [r4, #12]
 8003a08:	181b      	addge	r3, r3, r0
 8003a0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a0e:	bfac      	ite	ge
 8003a10:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a12:	81a3      	strhlt	r3, [r4, #12]
 8003a14:	bd10      	pop	{r4, pc}

08003a16 <__swrite>:
 8003a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	898b      	ldrh	r3, [r1, #12]
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	4605      	mov	r5, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4616      	mov	r6, r2
 8003a26:	d505      	bpl.n	8003a34 <__swrite+0x1e>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	f000 f868 	bl	8003b04 <_lseek_r>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	4632      	mov	r2, r6
 8003a42:	463b      	mov	r3, r7
 8003a44:	4628      	mov	r0, r5
 8003a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	f000 b817 	b.w	8003a7c <_write_r>

08003a4e <__sseek>:
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	460c      	mov	r4, r1
 8003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a56:	f000 f855 	bl	8003b04 <_lseek_r>
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	bf15      	itete	ne
 8003a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a6a:	81a3      	strheq	r3, [r4, #12]
 8003a6c:	bf18      	it	ne
 8003a6e:	81a3      	strhne	r3, [r4, #12]
 8003a70:	bd10      	pop	{r4, pc}

08003a72 <__sclose>:
 8003a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a76:	f000 b813 	b.w	8003aa0 <_close_r>
	...

08003a7c <_write_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4c07      	ldr	r4, [pc, #28]	; (8003a9c <_write_r+0x20>)
 8003a80:	4605      	mov	r5, r0
 8003a82:	4608      	mov	r0, r1
 8003a84:	4611      	mov	r1, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	6022      	str	r2, [r4, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7ff f980 	bl	8002d90 <_write>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_write_r+0x1e>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_write_r+0x1e>
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20003e30 	.word	0x20003e30

08003aa0 <_close_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4c06      	ldr	r4, [pc, #24]	; (8003abc <_close_r+0x1c>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	f000 f850 	bl	8003b50 <_close>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_close_r+0x1a>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_close_r+0x1a>
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20003e30 	.word	0x20003e30

08003ac0 <_fstat_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4c07      	ldr	r4, [pc, #28]	; (8003ae0 <_fstat_r+0x20>)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	f000 f847 	bl	8003b60 <_fstat>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	d102      	bne.n	8003adc <_fstat_r+0x1c>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	b103      	cbz	r3, 8003adc <_fstat_r+0x1c>
 8003ada:	602b      	str	r3, [r5, #0]
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
 8003ade:	bf00      	nop
 8003ae0:	20003e30 	.word	0x20003e30

08003ae4 <_isatty_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	4c06      	ldr	r4, [pc, #24]	; (8003b00 <_isatty_r+0x1c>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4605      	mov	r5, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	f000 f83e 	bl	8003b70 <_isatty>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_isatty_r+0x1a>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_isatty_r+0x1a>
 8003afc:	602b      	str	r3, [r5, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	20003e30 	.word	0x20003e30

08003b04 <_lseek_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4c07      	ldr	r4, [pc, #28]	; (8003b24 <_lseek_r+0x20>)
 8003b08:	4605      	mov	r5, r0
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	2200      	movs	r2, #0
 8003b10:	6022      	str	r2, [r4, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 f834 	bl	8003b80 <_lseek>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_lseek_r+0x1e>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_lseek_r+0x1e>
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	20003e30 	.word	0x20003e30

08003b28 <__malloc_lock>:
 8003b28:	4770      	bx	lr

08003b2a <__malloc_unlock>:
 8003b2a:	4770      	bx	lr

08003b2c <_read_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4c07      	ldr	r4, [pc, #28]	; (8003b4c <_read_r+0x20>)
 8003b30:	4605      	mov	r5, r0
 8003b32:	4608      	mov	r0, r1
 8003b34:	4611      	mov	r1, r2
 8003b36:	2200      	movs	r2, #0
 8003b38:	6022      	str	r2, [r4, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 f828 	bl	8003b90 <_read>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_read_r+0x1e>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_read_r+0x1e>
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	20003e30 	.word	0x20003e30

08003b50 <_close>:
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <_close+0xc>)
 8003b52:	2258      	movs	r2, #88	; 0x58
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b5a:	4770      	bx	lr
 8003b5c:	20003e30 	.word	0x20003e30

08003b60 <_fstat>:
 8003b60:	4b02      	ldr	r3, [pc, #8]	; (8003b6c <_fstat+0xc>)
 8003b62:	2258      	movs	r2, #88	; 0x58
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b6a:	4770      	bx	lr
 8003b6c:	20003e30 	.word	0x20003e30

08003b70 <_isatty>:
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <_isatty+0xc>)
 8003b72:	2258      	movs	r2, #88	; 0x58
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20003e30 	.word	0x20003e30

08003b80 <_lseek>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <_lseek+0xc>)
 8003b82:	2258      	movs	r2, #88	; 0x58
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b8a:	4770      	bx	lr
 8003b8c:	20003e30 	.word	0x20003e30

08003b90 <_read>:
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <_read+0xc>)
 8003b92:	2258      	movs	r2, #88	; 0x58
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b9a:	4770      	bx	lr
 8003b9c:	20003e30 	.word	0x20003e30

08003ba0 <_sbrk>:
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <_sbrk+0x14>)
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	b909      	cbnz	r1, 8003bac <_sbrk+0xc>
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <_sbrk+0x18>)
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	4402      	add	r2, r0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	4770      	bx	lr
 8003bb4:	20003de4 	.word	0x20003de4
 8003bb8:	20003e34 	.word	0x20003e34

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	bf00      	nop
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
